(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.platform = global.platform || {}, global.platform.web = factory()));
})(this, (function () { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest$3(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter$3(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest$1(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    const defaultConfig = {
        logger: "info",
        gateway: { webPlatform: {} },
        libraries: [],
        exposeGlue: true
    };
    const parseConfig = (config) => {
        var _a, _b, _c;
        const isPlatformInternal = !!((_b = (_a = config === null || config === void 0 ? void 0 : config.gateway) === null || _a === void 0 ? void 0 : _a.webPlatform) === null || _b === void 0 ? void 0 : _b.port);
        const combined = Object.assign({}, defaultConfig, config, { isPlatformInternal });
        if (combined.systemLogger) {
            combined.logger = (_c = combined.systemLogger.level) !== null && _c !== void 0 ? _c : "info";
        }
        return combined;
    };

    const checkSingleton = () => {
        const glue42CoreNamespace = window.glue42core;
        if (glue42CoreNamespace && glue42CoreNamespace.webStarted) {
            throw new Error("The Glue42 Core Web has already been started for this application.");
        }
        if (!glue42CoreNamespace) {
            window.glue42core = { webStarted: true };
            return;
        }
        glue42CoreNamespace.webStarted = true;
    };

    const enterprise = (config) => {
        var _a, _b, _c;
        const enterpriseConfig = {
            windows: true,
            layouts: "full",
            appManager: "full",
            channels: true,
            libraries: (_a = config === null || config === void 0 ? void 0 : config.libraries) !== null && _a !== void 0 ? _a : [],
            logger: (_c = (_b = config === null || config === void 0 ? void 0 : config.systemLogger) === null || _b === void 0 ? void 0 : _b.level) !== null && _c !== void 0 ? _c : "warn"
        };
        return window.Glue(enterpriseConfig);
    };

    /**
     * Wraps values in an `Ok` type.
     *
     * Example: `ok(5) // => {ok: true, result: 5}`
     */
    var ok$1 = function (result) { return ({ ok: true, result: result }); };
    /**
     * Wraps errors in an `Err` type.
     *
     * Example: `err('on fire') // => {ok: false, error: 'on fire'}`
     */
    var err$1 = function (error) { return ({ ok: false, error: error }); };
    /**
     * Create a `Promise` that either resolves with the result of `Ok` or rejects
     * with the error of `Err`.
     */
    var asPromise$1 = function (r) {
        return r.ok === true ? Promise.resolve(r.result) : Promise.reject(r.error);
    };
    /**
     * Unwraps a `Result` and returns either the result of an `Ok`, or
     * `defaultValue`.
     *
     * Example:
     * ```
     * Result.withDefault(5, number().run(json))
     * ```
     *
     * It would be nice if `Decoder` had an instance method that mirrored this
     * function. Such a method would look something like this:
     * ```
     * class Decoder<A> {
     *   runWithDefault = (defaultValue: A, json: any): A =>
     *     Result.withDefault(defaultValue, this.run(json));
     * }
     *
     * number().runWithDefault(5, json)
     * ```
     * Unfortunately, the type of `defaultValue: A` on the method causes issues
     * with type inference on  the `object` decoder in some situations. While these
     * inference issues can be solved by providing the optional type argument for
     * `object`s, the extra trouble and confusion doesn't seem worth it.
     */
    var withDefault$1 = function (defaultValue, r) {
        return r.ok === true ? r.result : defaultValue;
    };
    /**
     * Return the successful result, or throw an error.
     */
    var withException$1 = function (r) {
        if (r.ok === true) {
            return r.result;
        }
        else {
            throw r.error;
        }
    };
    /**
     * Apply `f` to the result of an `Ok`, or pass the error through.
     */
    var map$1 = function (f, r) {
        return r.ok === true ? ok$1(f(r.result)) : r;
    };
    /**
     * Apply `f` to the result of two `Ok`s, or pass an error through. If both
     * `Result`s are errors then the first one is returned.
     */
    var map2$1 = function (f, ar, br) {
        return ar.ok === false ? ar :
            br.ok === false ? br :
                ok$1(f(ar.result, br.result));
    };
    /**
     * Apply `f` to the error of an `Err`, or pass the success through.
     */
    var mapError$1 = function (f, r) {
        return r.ok === true ? r : err$1(f(r.error));
    };
    /**
     * Chain together a sequence of computations that may fail, similar to a
     * `Promise`. If the first computation fails then the error will propagate
     * through. If it succeeds, then `f` will be applied to the value, returning a
     * new `Result`.
     */
    var andThen$1 = function (f, r) {
        return r.ok === true ? f(r.result) : r;
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */



    var __assign$1$1 = function() {
        __assign$1$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1$1.apply(this, arguments);
    };

    function __rest$2(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function isEqual$1(a, b) {
        if (a === b) {
            return true;
        }
        if (a === null && b === null) {
            return true;
        }
        if (typeof (a) !== typeof (b)) {
            return false;
        }
        if (typeof (a) === 'object') {
            // Array
            if (Array.isArray(a)) {
                if (!Array.isArray(b)) {
                    return false;
                }
                if (a.length !== b.length) {
                    return false;
                }
                for (var i = 0; i < a.length; i++) {
                    if (!isEqual$1(a[i], b[i])) {
                        return false;
                    }
                }
                return true;
            }
            // Hash table
            var keys = Object.keys(a);
            if (keys.length !== Object.keys(b).length) {
                return false;
            }
            for (var i = 0; i < keys.length; i++) {
                if (!b.hasOwnProperty(keys[i])) {
                    return false;
                }
                if (!isEqual$1(a[keys[i]], b[keys[i]])) {
                    return false;
                }
            }
            return true;
        }
    }
    /*
     * Helpers
     */
    var isJsonArray$1 = function (json) { return Array.isArray(json); };
    var isJsonObject$1 = function (json) {
        return typeof json === 'object' && json !== null && !isJsonArray$1(json);
    };
    var typeString$1 = function (json) {
        switch (typeof json) {
            case 'string':
                return 'a string';
            case 'number':
                return 'a number';
            case 'boolean':
                return 'a boolean';
            case 'undefined':
                return 'undefined';
            case 'object':
                if (json instanceof Array) {
                    return 'an array';
                }
                else if (json === null) {
                    return 'null';
                }
                else {
                    return 'an object';
                }
            default:
                return JSON.stringify(json);
        }
    };
    var expectedGot$1 = function (expected, got) {
        return "expected " + expected + ", got " + typeString$1(got);
    };
    var printPath$1 = function (paths) {
        return paths.map(function (path) { return (typeof path === 'string' ? "." + path : "[" + path + "]"); }).join('');
    };
    var prependAt$1 = function (newAt, _a) {
        var at = _a.at, rest = __rest$2(_a, ["at"]);
        return (__assign$1$1({ at: newAt + (at || '') }, rest));
    };
    /**
     * Decoders transform json objects with unknown structure into known and
     * verified forms. You can create objects of type `Decoder<A>` with either the
     * primitive decoder functions, such as `boolean()` and `string()`, or by
     * applying higher-order decoders to the primitives, such as `array(boolean())`
     * or `dict(string())`.
     *
     * Each of the decoder functions are available both as a static method on
     * `Decoder` and as a function alias -- for example the string decoder is
     * defined at `Decoder.string()`, but is also aliased to `string()`. Using the
     * function aliases exported with the library is recommended.
     *
     * `Decoder` exposes a number of 'run' methods, which all decode json in the
     * same way, but communicate success and failure in different ways. The `map`
     * and `andThen` methods modify decoders without having to call a 'run' method.
     *
     * Alternatively, the main decoder `run()` method returns an object of type
     * `Result<A, DecoderError>`. This library provides a number of helper
     * functions for dealing with the `Result` type, so you can do all the same
     * things with a `Result` as with the decoder methods.
     */
    var Decoder$1 = /** @class */ (function () {
        /**
         * The Decoder class constructor is kept private to separate the internal
         * `decode` function from the external `run` function. The distinction
         * between the two functions is that `decode` returns a
         * `Partial<DecoderError>` on failure, which contains an unfinished error
         * report. When `run` is called on a decoder, the relevant series of `decode`
         * calls is made, and then on failure the resulting `Partial<DecoderError>`
         * is turned into a `DecoderError` by filling in the missing information.
         *
         * While hiding the constructor may seem restrictive, leveraging the
         * provided decoder combinators and helper functions such as
         * `andThen` and `map` should be enough to build specialized decoders as
         * needed.
         */
        function Decoder(decode) {
            var _this = this;
            this.decode = decode;
            /**
             * Run the decoder and return a `Result` with either the decoded value or a
             * `DecoderError` containing the json input, the location of the error, and
             * the error message.
             *
             * Examples:
             * ```
             * number().run(12)
             * // => {ok: true, result: 12}
             *
             * string().run(9001)
             * // =>
             * // {
             * //   ok: false,
             * //   error: {
             * //     kind: 'DecoderError',
             * //     input: 9001,
             * //     at: 'input',
             * //     message: 'expected a string, got 9001'
             * //   }
             * // }
             * ```
             */
            this.run = function (json) {
                return mapError$1(function (error) { return ({
                    kind: 'DecoderError',
                    input: json,
                    at: 'input' + (error.at || ''),
                    message: error.message || ''
                }); }, _this.decode(json));
            };
            /**
             * Run the decoder as a `Promise`.
             */
            this.runPromise = function (json) { return asPromise$1(_this.run(json)); };
            /**
             * Run the decoder and return the value on success, or throw an exception
             * with a formatted error string.
             */
            this.runWithException = function (json) { return withException$1(_this.run(json)); };
            /**
             * Construct a new decoder that applies a transformation to the decoded
             * result. If the decoder succeeds then `f` will be applied to the value. If
             * it fails the error will propagated through.
             *
             * Example:
             * ```
             * number().map(x => x * 5).run(10)
             * // => {ok: true, result: 50}
             * ```
             */
            this.map = function (f) {
                return new Decoder(function (json) { return map$1(f, _this.decode(json)); });
            };
            /**
             * Chain together a sequence of decoders. The first decoder will run, and
             * then the function will determine what decoder to run second. If the result
             * of the first decoder succeeds then `f` will be applied to the decoded
             * value. If it fails the error will propagate through.
             *
             * This is a very powerful method -- it can act as both the `map` and `where`
             * methods, can improve error messages for edge cases, and can be used to
             * make a decoder for custom types.
             *
             * Example of adding an error message:
             * ```
             * const versionDecoder = valueAt(['version'], number());
             * const infoDecoder3 = object({a: boolean()});
             *
             * const decoder = versionDecoder.andThen(version => {
             *   switch (version) {
             *     case 3:
             *       return infoDecoder3;
             *     default:
             *       return fail(`Unable to decode info, version ${version} is not supported.`);
             *   }
             * });
             *
             * decoder.run({version: 3, a: true})
             * // => {ok: true, result: {a: true}}
             *
             * decoder.run({version: 5, x: 'abc'})
             * // =>
             * // {
             * //   ok: false,
             * //   error: {... message: 'Unable to decode info, version 5 is not supported.'}
             * // }
             * ```
             *
             * Example of decoding a custom type:
             * ```
             * // nominal type for arrays with a length of at least one
             * type NonEmptyArray<T> = T[] & { __nonEmptyArrayBrand__: void };
             *
             * const nonEmptyArrayDecoder = <T>(values: Decoder<T>): Decoder<NonEmptyArray<T>> =>
             *   array(values).andThen(arr =>
             *     arr.length > 0
             *       ? succeed(createNonEmptyArray(arr))
             *       : fail(`expected a non-empty array, got an empty array`)
             *   );
             * ```
             */
            this.andThen = function (f) {
                return new Decoder(function (json) {
                    return andThen$1(function (value) { return f(value).decode(json); }, _this.decode(json));
                });
            };
            /**
             * Add constraints to a decoder _without_ changing the resulting type. The
             * `test` argument is a predicate function which returns true for valid
             * inputs. When `test` fails on an input, the decoder fails with the given
             * `errorMessage`.
             *
             * ```
             * const chars = (length: number): Decoder<string> =>
             *   string().where(
             *     (s: string) => s.length === length,
             *     `expected a string of length ${length}`
             *   );
             *
             * chars(5).run('12345')
             * // => {ok: true, result: '12345'}
             *
             * chars(2).run('HELLO')
             * // => {ok: false, error: {... message: 'expected a string of length 2'}}
             *
             * chars(12).run(true)
             * // => {ok: false, error: {... message: 'expected a string, got a boolean'}}
             * ```
             */
            this.where = function (test, errorMessage) {
                return _this.andThen(function (value) { return (test(value) ? Decoder.succeed(value) : Decoder.fail(errorMessage)); });
            };
        }
        /**
         * Decoder primitive that validates strings, and fails on all other input.
         */
        Decoder.string = function () {
            return new Decoder(function (json) {
                return typeof json === 'string'
                    ? ok$1(json)
                    : err$1({ message: expectedGot$1('a string', json) });
            });
        };
        /**
         * Decoder primitive that validates numbers, and fails on all other input.
         */
        Decoder.number = function () {
            return new Decoder(function (json) {
                return typeof json === 'number'
                    ? ok$1(json)
                    : err$1({ message: expectedGot$1('a number', json) });
            });
        };
        /**
         * Decoder primitive that validates booleans, and fails on all other input.
         */
        Decoder.boolean = function () {
            return new Decoder(function (json) {
                return typeof json === 'boolean'
                    ? ok$1(json)
                    : err$1({ message: expectedGot$1('a boolean', json) });
            });
        };
        Decoder.constant = function (value) {
            return new Decoder(function (json) {
                return isEqual$1(json, value)
                    ? ok$1(value)
                    : err$1({ message: "expected " + JSON.stringify(value) + ", got " + JSON.stringify(json) });
            });
        };
        Decoder.object = function (decoders) {
            return new Decoder(function (json) {
                if (isJsonObject$1(json) && decoders) {
                    var obj = {};
                    for (var key in decoders) {
                        if (decoders.hasOwnProperty(key)) {
                            var r = decoders[key].decode(json[key]);
                            if (r.ok === true) {
                                // tslint:disable-next-line:strict-type-predicates
                                if (r.result !== undefined) {
                                    obj[key] = r.result;
                                }
                            }
                            else if (json[key] === undefined) {
                                return err$1({ message: "the key '" + key + "' is required but was not present" });
                            }
                            else {
                                return err$1(prependAt$1("." + key, r.error));
                            }
                        }
                    }
                    return ok$1(obj);
                }
                else if (isJsonObject$1(json)) {
                    return ok$1(json);
                }
                else {
                    return err$1({ message: expectedGot$1('an object', json) });
                }
            });
        };
        Decoder.array = function (decoder) {
            return new Decoder(function (json) {
                if (isJsonArray$1(json) && decoder) {
                    var decodeValue_1 = function (v, i) {
                        return mapError$1(function (err$$1) { return prependAt$1("[" + i + "]", err$$1); }, decoder.decode(v));
                    };
                    return json.reduce(function (acc, v, i) {
                        return map2$1(function (arr, result) { return arr.concat([result]); }, acc, decodeValue_1(v, i));
                    }, ok$1([]));
                }
                else if (isJsonArray$1(json)) {
                    return ok$1(json);
                }
                else {
                    return err$1({ message: expectedGot$1('an array', json) });
                }
            });
        };
        Decoder.tuple = function (decoders) {
            return new Decoder(function (json) {
                if (isJsonArray$1(json)) {
                    if (json.length !== decoders.length) {
                        return err$1({
                            message: "expected a tuple of length " + decoders.length + ", got one of length " + json.length
                        });
                    }
                    var result = [];
                    for (var i = 0; i < decoders.length; i++) {
                        var nth = decoders[i].decode(json[i]);
                        if (nth.ok) {
                            result[i] = nth.result;
                        }
                        else {
                            return err$1(prependAt$1("[" + i + "]", nth.error));
                        }
                    }
                    return ok$1(result);
                }
                else {
                    return err$1({ message: expectedGot$1("a tuple of length " + decoders.length, json) });
                }
            });
        };
        Decoder.union = function (ad, bd) {
            var decoders = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                decoders[_i - 2] = arguments[_i];
            }
            return Decoder.oneOf.apply(Decoder, [ad, bd].concat(decoders));
        };
        Decoder.intersection = function (ad, bd) {
            var ds = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                ds[_i - 2] = arguments[_i];
            }
            return new Decoder(function (json) {
                return [ad, bd].concat(ds).reduce(function (acc, decoder) { return map2$1(Object.assign, acc, decoder.decode(json)); }, ok$1({}));
            });
        };
        /**
         * Escape hatch to bypass validation. Always succeeds and types the result as
         * `any`. Useful for defining decoders incrementally, particularly for
         * complex objects.
         *
         * Example:
         * ```
         * interface User {
         *   name: string;
         *   complexUserData: ComplexType;
         * }
         *
         * const userDecoder: Decoder<User> = object({
         *   name: string(),
         *   complexUserData: anyJson()
         * });
         * ```
         */
        Decoder.anyJson = function () { return new Decoder(function (json) { return ok$1(json); }); };
        /**
         * Decoder identity function which always succeeds and types the result as
         * `unknown`.
         */
        Decoder.unknownJson = function () {
            return new Decoder(function (json) { return ok$1(json); });
        };
        /**
         * Decoder for json objects where the keys are unknown strings, but the values
         * should all be of the same type.
         *
         * Example:
         * ```
         * dict(number()).run({chocolate: 12, vanilla: 10, mint: 37});
         * // => {ok: true, result: {chocolate: 12, vanilla: 10, mint: 37}}
         * ```
         */
        Decoder.dict = function (decoder) {
            return new Decoder(function (json) {
                if (isJsonObject$1(json)) {
                    var obj = {};
                    for (var key in json) {
                        if (json.hasOwnProperty(key)) {
                            var r = decoder.decode(json[key]);
                            if (r.ok === true) {
                                obj[key] = r.result;
                            }
                            else {
                                return err$1(prependAt$1("." + key, r.error));
                            }
                        }
                    }
                    return ok$1(obj);
                }
                else {
                    return err$1({ message: expectedGot$1('an object', json) });
                }
            });
        };
        /**
         * Decoder for values that may be `undefined`. This is primarily helpful for
         * decoding interfaces with optional fields.
         *
         * Example:
         * ```
         * interface User {
         *   id: number;
         *   isOwner?: boolean;
         * }
         *
         * const decoder: Decoder<User> = object({
         *   id: number(),
         *   isOwner: optional(boolean())
         * });
         * ```
         */
        Decoder.optional = function (decoder) {
            return new Decoder(function (json) { return (json === undefined || json === null ? ok$1(undefined) : decoder.decode(json)); });
        };
        /**
         * Decoder that attempts to run each decoder in `decoders` and either succeeds
         * with the first successful decoder, or fails after all decoders have failed.
         *
         * Note that `oneOf` expects the decoders to all have the same return type,
         * while `union` creates a decoder for the union type of all the input
         * decoders.
         *
         * Examples:
         * ```
         * oneOf(string(), number().map(String))
         * oneOf(constant('start'), constant('stop'), succeed('unknown'))
         * ```
         */
        Decoder.oneOf = function () {
            var decoders = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                decoders[_i] = arguments[_i];
            }
            return new Decoder(function (json) {
                var errors = [];
                for (var i = 0; i < decoders.length; i++) {
                    var r = decoders[i].decode(json);
                    if (r.ok === true) {
                        return r;
                    }
                    else {
                        errors[i] = r.error;
                    }
                }
                var errorsList = errors
                    .map(function (error) { return "at error" + (error.at || '') + ": " + error.message; })
                    .join('", "');
                return err$1({
                    message: "expected a value matching one of the decoders, got the errors [\"" + errorsList + "\"]"
                });
            });
        };
        /**
         * Decoder that always succeeds with either the decoded value, or a fallback
         * default value.
         */
        Decoder.withDefault = function (defaultValue, decoder) {
            return new Decoder(function (json) {
                return ok$1(withDefault$1(defaultValue, decoder.decode(json)));
            });
        };
        /**
         * Decoder that pulls a specific field out of a json structure, instead of
         * decoding and returning the full structure. The `paths` array describes the
         * object keys and array indices to traverse, so that values can be pulled out
         * of a nested structure.
         *
         * Example:
         * ```
         * const decoder = valueAt(['a', 'b', 0], string());
         *
         * decoder.run({a: {b: ['surprise!']}})
         * // => {ok: true, result: 'surprise!'}
         *
         * decoder.run({a: {x: 'cats'}})
         * // => {ok: false, error: {... at: 'input.a.b[0]' message: 'path does not exist'}}
         * ```
         *
         * Note that the `decoder` is ran on the value found at the last key in the
         * path, even if the last key is not found. This allows the `optional`
         * decoder to succeed when appropriate.
         * ```
         * const optionalDecoder = valueAt(['a', 'b', 'c'], optional(string()));
         *
         * optionalDecoder.run({a: {b: {c: 'surprise!'}}})
         * // => {ok: true, result: 'surprise!'}
         *
         * optionalDecoder.run({a: {b: 'cats'}})
         * // => {ok: false, error: {... at: 'input.a.b.c' message: 'expected an object, got "cats"'}
         *
         * optionalDecoder.run({a: {b: {z: 1}}})
         * // => {ok: true, result: undefined}
         * ```
         */
        Decoder.valueAt = function (paths, decoder) {
            return new Decoder(function (json) {
                var jsonAtPath = json;
                for (var i = 0; i < paths.length; i++) {
                    if (jsonAtPath === undefined) {
                        return err$1({
                            at: printPath$1(paths.slice(0, i + 1)),
                            message: 'path does not exist'
                        });
                    }
                    else if (typeof paths[i] === 'string' && !isJsonObject$1(jsonAtPath)) {
                        return err$1({
                            at: printPath$1(paths.slice(0, i + 1)),
                            message: expectedGot$1('an object', jsonAtPath)
                        });
                    }
                    else if (typeof paths[i] === 'number' && !isJsonArray$1(jsonAtPath)) {
                        return err$1({
                            at: printPath$1(paths.slice(0, i + 1)),
                            message: expectedGot$1('an array', jsonAtPath)
                        });
                    }
                    else {
                        jsonAtPath = jsonAtPath[paths[i]];
                    }
                }
                return mapError$1(function (error) {
                    return jsonAtPath === undefined
                        ? { at: printPath$1(paths), message: 'path does not exist' }
                        : prependAt$1(printPath$1(paths), error);
                }, decoder.decode(jsonAtPath));
            });
        };
        /**
         * Decoder that ignores the input json and always succeeds with `fixedValue`.
         */
        Decoder.succeed = function (fixedValue) {
            return new Decoder(function (json) { return ok$1(fixedValue); });
        };
        /**
         * Decoder that ignores the input json and always fails with `errorMessage`.
         */
        Decoder.fail = function (errorMessage) {
            return new Decoder(function (json) { return err$1({ message: errorMessage }); });
        };
        /**
         * Decoder that allows for validating recursive data structures. Unlike with
         * functions, decoders assigned to variables can't reference themselves
         * before they are fully defined. We can avoid prematurely referencing the
         * decoder by wrapping it in a function that won't be called until use, at
         * which point the decoder has been defined.
         *
         * Example:
         * ```
         * interface Comment {
         *   msg: string;
         *   replies: Comment[];
         * }
         *
         * const decoder: Decoder<Comment> = object({
         *   msg: string(),
         *   replies: lazy(() => array(decoder))
         * });
         * ```
         */
        Decoder.lazy = function (mkDecoder) {
            return new Decoder(function (json) { return mkDecoder().decode(json); });
        };
        return Decoder;
    }());

    /* tslint:disable:variable-name */
    /** See `Decoder.string` */
    var string$1 = Decoder$1.string;
    /** See `Decoder.number` */
    var number$1 = Decoder$1.number;
    /** See `Decoder.boolean` */
    var boolean$1 = Decoder$1.boolean;
    /** See `Decoder.anyJson` */
    var anyJson$1 = Decoder$1.anyJson;
    /** See `Decoder.unknownJson` */
    Decoder$1.unknownJson;
    /** See `Decoder.constant` */
    var constant$1 = Decoder$1.constant;
    /** See `Decoder.object` */
    var object$1 = Decoder$1.object;
    /** See `Decoder.array` */
    var array$1 = Decoder$1.array;
    /** See `Decoder.tuple` */
    Decoder$1.tuple;
    /** See `Decoder.dict` */
    Decoder$1.dict;
    /** See `Decoder.optional` */
    var optional$1 = Decoder$1.optional;
    /** See `Decoder.oneOf` */
    var oneOf$1 = Decoder$1.oneOf;
    /** See `Decoder.union` */
    Decoder$1.union;
    /** See `Decoder.intersection` */
    Decoder$1.intersection;
    /** See `Decoder.withDefault` */
    Decoder$1.withDefault;
    /** See `Decoder.valueAt` */
    Decoder$1.valueAt;
    /** See `Decoder.succeed` */
    Decoder$1.succeed;
    /** See `Decoder.fail` */
    Decoder$1.fail;
    /** See `Decoder.lazy` */
    var lazy$1 = Decoder$1.lazy;

    const nonEmptyStringDecoder$1 = string$1().where((s) => s.length > 0, "Expected a non-empty string");
    const nonNegativeNumberDecoder$1 = number$1().where((num) => num >= 0, "Expected a non-negative number");
    const libDomainDecoder$1 = oneOf$1(constant$1("system"), constant$1("windows"), constant$1("appManager"), constant$1("layouts"), constant$1("intents"), constant$1("notifications"), constant$1("channels"), constant$1("extension"), constant$1("themes"));
    const windowOperationTypesDecoder = oneOf$1(constant$1("openWindow"), constant$1("windowHello"), constant$1("windowAdded"), constant$1("windowRemoved"), constant$1("getBounds"), constant$1("getFrameBounds"), constant$1("getUrl"), constant$1("moveResize"), constant$1("focus"), constant$1("close"), constant$1("getTitle"), constant$1("setTitle"), constant$1("focusChange"));
    const appManagerOperationTypesDecoder$1 = oneOf$1(constant$1("appHello"), constant$1("appDirectoryStateChange"), constant$1("instanceStarted"), constant$1("instanceStopped"), constant$1("applicationStart"), constant$1("instanceStop"), constant$1("clear"));
    const layoutsOperationTypesDecoder$1 = oneOf$1(constant$1("layoutAdded"), constant$1("layoutChanged"), constant$1("layoutRemoved"), constant$1("get"), constant$1("getAll"), constant$1("export"), constant$1("import"), constant$1("remove"), constant$1("clientSaveRequest"), constant$1("getGlobalPermissionState"), constant$1("checkGlobalActivated"), constant$1("requestGlobalPermission"));
    const notificationsOperationTypesDecoder = oneOf$1(constant$1("raiseNotification"), constant$1("requestPermission"), constant$1("notificationShow"), constant$1("notificationClick"), constant$1("getPermission"), constant$1("list"), constant$1("notificationRaised"), constant$1("notificationClosed"), constant$1("click"), constant$1("clear"), constant$1("clearAll"));
    const windowRelativeDirectionDecoder$1 = oneOf$1(constant$1("top"), constant$1("left"), constant$1("right"), constant$1("bottom"));
    const windowBoundsDecoder$1 = object$1({
        top: number$1(),
        left: number$1(),
        width: nonNegativeNumberDecoder$1,
        height: nonNegativeNumberDecoder$1
    });
    const windowOpenSettingsDecoder$1 = optional$1(object$1({
        top: optional$1(number$1()),
        left: optional$1(number$1()),
        width: optional$1(nonNegativeNumberDecoder$1),
        height: optional$1(nonNegativeNumberDecoder$1),
        context: optional$1(anyJson$1()),
        relativeTo: optional$1(nonEmptyStringDecoder$1),
        relativeDirection: optional$1(windowRelativeDirectionDecoder$1),
        windowId: optional$1(nonEmptyStringDecoder$1),
        layoutComponentId: optional$1(nonEmptyStringDecoder$1)
    }));
    const openWindowConfigDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        url: nonEmptyStringDecoder$1,
        options: windowOpenSettingsDecoder$1
    });
    const windowHelloDecoder = object$1({
        windowId: optional$1(nonEmptyStringDecoder$1)
    });
    const coreWindowDataDecoder = object$1({
        windowId: nonEmptyStringDecoder$1,
        name: nonEmptyStringDecoder$1
    });
    const simpleWindowDecoder$1 = object$1({
        windowId: nonEmptyStringDecoder$1
    });
    const helloSuccessDecoder = object$1({
        windows: array$1(coreWindowDataDecoder),
        isWorkspaceFrame: boolean$1()
    });
    const windowTitleConfigDecoder$1 = object$1({
        windowId: nonEmptyStringDecoder$1,
        title: string$1()
    });
    const focusEventDataDecoder$1 = object$1({
        windowId: nonEmptyStringDecoder$1,
        hasFocus: boolean$1()
    });
    const windowMoveResizeConfigDecoder$1 = object$1({
        windowId: nonEmptyStringDecoder$1,
        top: optional$1(number$1()),
        left: optional$1(number$1()),
        width: optional$1(nonNegativeNumberDecoder$1),
        height: optional$1(nonNegativeNumberDecoder$1),
        relative: optional$1(boolean$1())
    });
    const windowBoundsResultDecoder$1 = object$1({
        windowId: nonEmptyStringDecoder$1,
        bounds: object$1({
            top: number$1(),
            left: number$1(),
            width: nonNegativeNumberDecoder$1,
            height: nonNegativeNumberDecoder$1
        })
    });
    const frameWindowBoundsResultDecoder$1 = object$1({
        bounds: object$1({
            top: number$1(),
            left: number$1(),
            width: nonNegativeNumberDecoder$1,
            height: nonNegativeNumberDecoder$1
        })
    });
    const windowUrlResultDecoder$1 = object$1({
        windowId: nonEmptyStringDecoder$1,
        url: nonEmptyStringDecoder$1
    });
    const anyDecoder$1 = anyJson$1();
    const boundsDecoder = object$1({
        top: optional$1(number$1()),
        left: optional$1(number$1()),
        width: optional$1(nonNegativeNumberDecoder$1),
        height: optional$1(nonNegativeNumberDecoder$1)
    });
    const instanceDataDecoder$1 = object$1({
        id: nonEmptyStringDecoder$1,
        applicationName: nonEmptyStringDecoder$1
    });
    const applicationDetailsDecoder$1 = object$1({
        url: nonEmptyStringDecoder$1,
        top: optional$1(number$1()),
        left: optional$1(number$1()),
        width: optional$1(nonNegativeNumberDecoder$1),
        height: optional$1(nonNegativeNumberDecoder$1)
    });
    const intentDefinitionDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        displayName: optional$1(string$1()),
        contexts: optional$1(array$1(string$1())),
        customConfig: optional$1(object$1())
    });
    const fdc3AppDefinitionDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        title: optional$1(nonEmptyStringDecoder$1),
        version: optional$1(nonEmptyStringDecoder$1),
        appId: optional$1(nonEmptyStringDecoder$1),
        manifest: nonEmptyStringDecoder$1,
        manifestType: nonEmptyStringDecoder$1,
        tooltip: optional$1(nonEmptyStringDecoder$1),
        description: optional$1(nonEmptyStringDecoder$1),
        contactEmail: optional$1(nonEmptyStringDecoder$1),
        supportEmail: optional$1(nonEmptyStringDecoder$1),
        publisher: optional$1(nonEmptyStringDecoder$1),
        images: optional$1(array$1(object$1({ url: optional$1(nonEmptyStringDecoder$1) }))),
        icons: optional$1(array$1(object$1({ icon: optional$1(nonEmptyStringDecoder$1) }))),
        customConfig: anyJson$1(),
        intents: optional$1(array$1(intentDefinitionDecoder$1))
    });
    const applicationDefinitionDecoder = object$1({
        name: nonEmptyStringDecoder$1,
        type: nonEmptyStringDecoder$1.where((s) => s === "window", "Expected a value of window"),
        title: optional$1(nonEmptyStringDecoder$1),
        version: optional$1(nonEmptyStringDecoder$1),
        customProperties: optional$1(anyJson$1()),
        icon: optional$1(string$1()),
        caption: optional$1(string$1()),
        details: applicationDetailsDecoder$1,
        intents: optional$1(array$1(intentDefinitionDecoder$1)),
        hidden: optional$1(boolean$1())
    });
    const allApplicationDefinitionsDecoder$1 = oneOf$1(applicationDefinitionDecoder, fdc3AppDefinitionDecoder$1);
    object$1({
        definitions: array$1(allApplicationDefinitionsDecoder$1),
        mode: oneOf$1(constant$1("replace"), constant$1("merge"))
    });
    const appRemoveConfigDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1
    });
    const appsExportOperationDecoder$1 = object$1({
        definitions: array$1(applicationDefinitionDecoder)
    });
    const applicationDataDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        type: nonEmptyStringDecoder$1.where((s) => s === "window", "Expected a value of window"),
        instances: array$1(instanceDataDecoder$1),
        userProperties: optional$1(anyJson$1()),
        title: optional$1(nonEmptyStringDecoder$1),
        version: optional$1(nonEmptyStringDecoder$1),
        icon: optional$1(nonEmptyStringDecoder$1),
        caption: optional$1(nonEmptyStringDecoder$1)
    });
    const baseApplicationDataDecoder = object$1({
        name: nonEmptyStringDecoder$1,
        type: nonEmptyStringDecoder$1.where((s) => s === "window", "Expected a value of window"),
        userProperties: anyJson$1(),
        title: optional$1(nonEmptyStringDecoder$1),
        version: optional$1(nonEmptyStringDecoder$1),
        icon: optional$1(nonEmptyStringDecoder$1),
        caption: optional$1(nonEmptyStringDecoder$1)
    });
    const appDirectoryStateChangeDecoder = object$1({
        appsAdded: array$1(baseApplicationDataDecoder),
        appsChanged: array$1(baseApplicationDataDecoder),
        appsRemoved: array$1(baseApplicationDataDecoder)
    });
    const appHelloSuccessDecoder$1 = object$1({
        apps: array$1(applicationDataDecoder$1)
    });
    const basicInstanceDataDecoder$1 = object$1({
        id: nonEmptyStringDecoder$1
    });
    const applicationStartConfigDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        waitForAGMReady: boolean$1(),
        id: optional$1(nonEmptyStringDecoder$1),
        context: optional$1(anyJson$1()),
        top: optional$1(number$1()),
        left: optional$1(number$1()),
        width: optional$1(nonNegativeNumberDecoder$1),
        height: optional$1(nonNegativeNumberDecoder$1),
        relativeTo: optional$1(nonEmptyStringDecoder$1),
        relativeDirection: optional$1(oneOf$1(constant$1("top"), constant$1("left"), constant$1("right"), constant$1("bottom"))),
        forceChromeTab: optional$1(boolean$1()),
        layoutComponentId: optional$1(nonEmptyStringDecoder$1)
    });
    const layoutTypeDecoder$1 = oneOf$1(constant$1("Global"), constant$1("Activity"), constant$1("ApplicationDefault"), constant$1("Swimlane"), constant$1("Workspace"));
    const componentTypeDecoder$1 = oneOf$1(constant$1("application"), constant$1("activity"));
    const windowComponentStateDecoder$1 = object$1({
        context: optional$1(anyJson$1()),
        bounds: windowBoundsDecoder$1,
        createArgs: object$1({
            name: optional$1(nonEmptyStringDecoder$1),
            url: optional$1(nonEmptyStringDecoder$1),
            context: optional$1(anyJson$1())
        }),
        windowState: optional$1(nonEmptyStringDecoder$1),
        restoreState: optional$1(nonEmptyStringDecoder$1),
        instanceId: nonEmptyStringDecoder$1,
        isCollapsed: optional$1(boolean$1()),
        isSticky: optional$1(boolean$1()),
        restoreSettings: object$1({
            groupId: optional$1(nonEmptyStringDecoder$1),
            groupZOrder: optional$1(number$1())
        })
    });
    const windowLayoutComponentDecoder$1 = object$1({
        type: constant$1("window"),
        componentType: optional$1(componentTypeDecoder$1),
        application: nonEmptyStringDecoder$1,
        state: windowComponentStateDecoder$1
    });
    const windowLayoutItemDecoder$1 = object$1({
        type: constant$1("window"),
        config: object$1({
            appName: nonEmptyStringDecoder$1,
            url: optional$1(nonEmptyStringDecoder$1),
            title: optional$1(string$1()),
            allowExtract: optional$1(boolean$1()),
            allowReorder: optional$1(boolean$1()),
            showCloseButton: optional$1(boolean$1()),
            isMaximized: optional$1(boolean$1())
        })
    });
    const groupLayoutItemDecoder$2 = object$1({
        type: constant$1("group"),
        config: anyJson$1(),
        children: array$1(oneOf$1(windowLayoutItemDecoder$1))
    });
    const columnLayoutItemDecoder$2 = object$1({
        type: constant$1("column"),
        config: anyJson$1(),
        children: array$1(oneOf$1(groupLayoutItemDecoder$2, windowLayoutItemDecoder$1, lazy$1(() => columnLayoutItemDecoder$2), lazy$1(() => rowLayoutItemDecoder$2)))
    });
    const rowLayoutItemDecoder$2 = object$1({
        type: constant$1("row"),
        config: anyJson$1(),
        children: array$1(oneOf$1(columnLayoutItemDecoder$2, groupLayoutItemDecoder$2, windowLayoutItemDecoder$1, lazy$1(() => rowLayoutItemDecoder$2)))
    });
    const workspaceLayoutComponentStateDecoder$1 = object$1({
        config: anyJson$1(),
        context: anyJson$1(),
        children: array$1(oneOf$1(rowLayoutItemDecoder$2, columnLayoutItemDecoder$2, groupLayoutItemDecoder$2, windowLayoutItemDecoder$1))
    });
    const workspaceLayoutComponentDecoder$1 = object$1({
        type: constant$1("Workspace"),
        application: optional$1(nonEmptyStringDecoder$1),
        state: workspaceLayoutComponentStateDecoder$1
    });
    const workspaceFrameComponentStateDecoder$1 = object$1({
        bounds: windowBoundsDecoder$1,
        instanceId: nonEmptyStringDecoder$1,
        selectedWorkspace: nonNegativeNumberDecoder$1,
        workspaces: array$1(workspaceLayoutComponentStateDecoder$1),
        windowState: optional$1(nonEmptyStringDecoder$1),
        restoreState: optional$1(nonEmptyStringDecoder$1),
        context: optional$1(anyJson$1())
    });
    const workspaceFrameComponentDecoder$1 = object$1({
        type: constant$1("workspaceFrame"),
        application: nonEmptyStringDecoder$1,
        componentType: optional$1(componentTypeDecoder$1),
        state: workspaceFrameComponentStateDecoder$1
    });
    const glueLayoutDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        type: layoutTypeDecoder$1,
        components: array$1(oneOf$1(windowLayoutComponentDecoder$1, workspaceLayoutComponentDecoder$1, workspaceFrameComponentDecoder$1)),
        context: optional$1(anyJson$1()),
        metadata: optional$1(anyJson$1()),
        version: optional$1(number$1())
    });
    const newLayoutOptionsDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        context: optional$1(anyJson$1()),
        metadata: optional$1(anyJson$1()),
        instances: optional$1(array$1(nonEmptyStringDecoder$1)),
        ignoreInstances: optional$1(array$1(nonEmptyStringDecoder$1))
    });
    const restoreOptionsDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        context: optional$1(anyJson$1()),
        closeRunningInstance: optional$1(boolean$1()),
        closeMe: optional$1(boolean$1()),
        timeout: optional$1(nonNegativeNumberDecoder$1)
    });
    const layoutSummaryDecoder$2 = object$1({
        name: nonEmptyStringDecoder$1,
        type: layoutTypeDecoder$1,
        context: optional$1(anyJson$1()),
        metadata: optional$1(anyJson$1())
    });
    const simpleLayoutConfigDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        type: layoutTypeDecoder$1
    });
    const saveLayoutConfigDecoder$1 = object$1({
        layout: newLayoutOptionsDecoder$1
    });
    const restoreLayoutConfigDecoder$1 = object$1({
        layout: restoreOptionsDecoder$1
    });
    const getAllLayoutsConfigDecoder$1 = object$1({
        type: layoutTypeDecoder$1
    });
    const allLayoutsFullConfigDecoder$1 = object$1({
        layouts: array$1(glueLayoutDecoder$1)
    });
    const importModeDecoder$1 = oneOf$1(constant$1("replace"), constant$1("merge"));
    const layoutsImportConfigDecoder$1 = object$1({
        layouts: array$1(glueLayoutDecoder$1),
        mode: importModeDecoder$1
    });
    const allLayoutsSummariesResultDecoder$1 = object$1({
        summaries: array$1(layoutSummaryDecoder$2)
    });
    const simpleLayoutResultDecoder = object$1({
        layout: glueLayoutDecoder$1
    });
    const optionalSimpleLayoutResult$1 = object$1({
        layout: optional$1(glueLayoutDecoder$1)
    });
    const intentsOperationTypesDecoder$1 = oneOf$1(constant$1("findIntent"), constant$1("getIntents"), constant$1("raiseIntent"), constant$1("raise"));
    const intentHandlerDecoder$1 = object$1({
        applicationName: nonEmptyStringDecoder$1,
        applicationTitle: string$1(),
        applicationDescription: optional$1(string$1()),
        applicationIcon: optional$1(string$1()),
        type: oneOf$1(constant$1("app"), constant$1("instance")),
        displayName: optional$1(string$1()),
        contextTypes: optional$1(array$1(nonEmptyStringDecoder$1)),
        instanceId: optional$1(string$1()),
        instanceTitle: optional$1(string$1()),
        resultType: optional$1(string$1())
    });
    object$1({
        applicationName: string$1(),
        applicationIcon: optional$1(string$1()),
        instanceId: optional$1(string$1()),
    });
    const intentResolverResponseDecoder$1 = object$1({
        intent: nonEmptyStringDecoder$1,
        handler: intentHandlerDecoder$1
    });
    const intentDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        handlers: array$1(intentHandlerDecoder$1)
    });
    const intentTargetDecoder$1 = oneOf$1(constant$1("startNew"), constant$1("reuse"), object$1({
        app: optional$1(nonEmptyStringDecoder$1),
        instance: optional$1(nonEmptyStringDecoder$1)
    }));
    const intentContextDecoder$1 = object$1({
        type: optional$1(nonEmptyStringDecoder$1),
        data: optional$1(anyJson$1())
    });
    const intentsDecoder$1 = array$1(intentDecoder$1);
    const wrappedIntentsDecoder$1 = object$1({
        intents: intentsDecoder$1
    });
    const intentFilterDecoder = object$1({
        name: optional$1(nonEmptyStringDecoder$1),
        contextType: optional$1(nonEmptyStringDecoder$1),
        resultType: optional$1(nonEmptyStringDecoder$1)
    });
    const findFilterDecoder = oneOf$1(nonEmptyStringDecoder$1, intentFilterDecoder);
    const wrappedIntentFilterDecoder$1 = object$1({
        filter: optional$1(intentFilterDecoder)
    });
    const intentRequestDecoder$1 = object$1({
        intent: nonEmptyStringDecoder$1,
        target: optional$1(intentTargetDecoder$1),
        context: optional$1(intentContextDecoder$1),
        options: optional$1(windowOpenSettingsDecoder$1),
        handlers: optional$1(array$1(intentHandlerDecoder$1))
    });
    const raiseRequestDecoder = oneOf$1(nonEmptyStringDecoder$1, intentRequestDecoder$1);
    const intentRequestResolverConfigDecoder$1 = object$1({
        enabled: boolean$1(),
        appName: nonEmptyStringDecoder$1,
        waitResponseTimeout: number$1()
    });
    const raiseIntentRequestDecoder$1 = object$1({
        intentRequest: intentRequestDecoder$1,
        resolverConfig: intentRequestResolverConfigDecoder$1
    });
    const intentResultDecoder$1 = object$1({
        request: intentRequestDecoder$1,
        handler: intentHandlerDecoder$1,
        result: anyJson$1()
    });
    const AddIntentListenerRequestDecoder = object$1({
        intent: nonEmptyStringDecoder$1,
        contextTypes: optional$1(array$1(nonEmptyStringDecoder$1)),
        displayName: optional$1(string$1()),
        icon: optional$1(string$1()),
        description: optional$1(string$1()),
        resultType: optional$1(string$1())
    });
    const AddIntentListenerDecoder = oneOf$1(nonEmptyStringDecoder$1, AddIntentListenerRequestDecoder);
    const channelNameDecoder = (channelNames) => {
        return nonEmptyStringDecoder$1.where(s => channelNames.includes(s), "Expected a valid channel name");
    };
    const interopActionSettingsDecoder$1 = object$1({
        method: nonEmptyStringDecoder$1,
        arguments: optional$1(anyJson$1()),
        target: optional$1(oneOf$1(constant$1("all"), constant$1("best")))
    });
    const glue42NotificationActionDecoder$1 = object$1({
        action: string$1(),
        title: nonEmptyStringDecoder$1,
        icon: optional$1(string$1()),
        interop: optional$1(interopActionSettingsDecoder$1)
    });
    const notificationDefinitionDecoder = object$1({
        badge: optional$1(string$1()),
        body: optional$1(string$1()),
        data: optional$1(anyJson$1()),
        dir: optional$1(oneOf$1(constant$1("auto"), constant$1("ltr"), constant$1("rtl"))),
        icon: optional$1(string$1()),
        image: optional$1(string$1()),
        lang: optional$1(string$1()),
        renotify: optional$1(boolean$1()),
        requireInteraction: optional$1(boolean$1()),
        silent: optional$1(boolean$1()),
        tag: optional$1(string$1()),
        timestamp: optional$1(nonNegativeNumberDecoder$1),
        vibrate: optional$1(array$1(number$1()))
    });
    const glue42NotificationOptionsDecoder$1 = object$1({
        title: nonEmptyStringDecoder$1,
        clickInterop: optional$1(interopActionSettingsDecoder$1),
        actions: optional$1(array$1(glue42NotificationActionDecoder$1)),
        focusPlatformOnDefaultClick: optional$1(boolean$1()),
        badge: optional$1(string$1()),
        body: optional$1(string$1()),
        data: optional$1(anyJson$1()),
        dir: optional$1(oneOf$1(constant$1("auto"), constant$1("ltr"), constant$1("rtl"))),
        icon: optional$1(string$1()),
        image: optional$1(string$1()),
        lang: optional$1(string$1()),
        renotify: optional$1(boolean$1()),
        requireInteraction: optional$1(boolean$1()),
        silent: optional$1(boolean$1()),
        tag: optional$1(string$1()),
        timestamp: optional$1(nonNegativeNumberDecoder$1),
        vibrate: optional$1(array$1(number$1())),
        severity: optional$1(oneOf$1(constant$1("Low"), constant$1("None"), constant$1("Medium"), constant$1("High"), constant$1("Critical"))),
        showToast: optional$1(boolean$1()),
        showInPanel: optional$1(boolean$1())
    });
    const channelContextDecoder$1 = object$1({
        name: nonEmptyStringDecoder$1,
        meta: object$1({
            color: nonEmptyStringDecoder$1
        }),
        data: optional$1(object$1()),
    });
    const raiseNotificationDecoder$1 = object$1({
        settings: glue42NotificationOptionsDecoder$1,
        id: nonEmptyStringDecoder$1
    });
    const permissionRequestResultDecoder$1 = object$1({
        permissionGranted: boolean$1()
    });
    const permissionQueryResultDecoder$1 = object$1({
        permission: oneOf$1(constant$1("default"), constant$1("granted"), constant$1("denied"))
    });
    const notificationEventPayloadDecoder = object$1({
        definition: notificationDefinitionDecoder,
        action: optional$1(string$1()),
        id: optional$1(nonEmptyStringDecoder$1)
    });
    const platformSaveRequestConfigDecoder = object$1({
        layoutType: oneOf$1(constant$1("Global"), constant$1("Workspace")),
        layoutName: nonEmptyStringDecoder$1,
        context: optional$1(anyJson$1())
    });
    const saveRequestClientResponseDecoder$1 = object$1({
        windowContext: optional$1(anyJson$1()),
    });
    const permissionStateResultDecoder$1 = object$1({
        state: oneOf$1(constant$1("prompt"), constant$1("denied"), constant$1("granted"))
    });
    const simpleAvailabilityResultDecoder$1 = object$1({
        isAvailable: boolean$1()
    });
    const simpleItemIdDecoder = object$1({
        itemId: nonEmptyStringDecoder$1
    });
    const operationCheckResultDecoder$1 = object$1({
        isSupported: boolean$1()
    });
    const operationCheckConfigDecoder$1 = object$1({
        operation: nonEmptyStringDecoder$1
    });
    const workspaceFrameBoundsResultDecoder = object$1({
        bounds: windowBoundsDecoder$1
    });
    const themeDecoder = object$1({
        displayName: nonEmptyStringDecoder$1,
        name: nonEmptyStringDecoder$1
    });
    const simpleThemeResponseDecoder = object$1({
        theme: themeDecoder
    });
    const allThemesResponseDecoder = object$1({
        themes: array$1(themeDecoder)
    });
    const selectThemeConfigDecoder = object$1({
        name: nonEmptyStringDecoder$1
    });
    const notificationsDataDecoder$1 = object$1({
        id: nonEmptyStringDecoder$1,
        title: nonEmptyStringDecoder$1,
        clickInterop: optional$1(interopActionSettingsDecoder$1),
        actions: optional$1(array$1(glue42NotificationActionDecoder$1)),
        focusPlatformOnDefaultClick: optional$1(boolean$1()),
        badge: optional$1(string$1()),
        body: optional$1(string$1()),
        data: optional$1(anyJson$1()),
        dir: optional$1(oneOf$1(constant$1("auto"), constant$1("ltr"), constant$1("rtl"))),
        icon: optional$1(string$1()),
        image: optional$1(string$1()),
        lang: optional$1(string$1()),
        renotify: optional$1(boolean$1()),
        requireInteraction: optional$1(boolean$1()),
        silent: optional$1(boolean$1()),
        tag: optional$1(string$1()),
        timestamp: optional$1(nonNegativeNumberDecoder$1),
        vibrate: optional$1(array$1(number$1())),
        severity: optional$1(oneOf$1(constant$1("Low"), constant$1("None"), constant$1("Medium"), constant$1("High"), constant$1("Critical"))),
        showToast: optional$1(boolean$1()),
        showInPanel: optional$1(boolean$1())
    });
    const simpleNotificationDataDecoder = object$1({
        notification: notificationsDataDecoder$1
    });
    const allNotificationsDataDecoder$1 = object$1({
        notifications: array$1(notificationsDataDecoder$1)
    });
    const simpleNotificationSelectDecoder$1 = object$1({
        id: nonEmptyStringDecoder$1
    });

    const operations$8 = {
        openWindow: { name: "openWindow", dataDecoder: openWindowConfigDecoder$1, resultDecoder: coreWindowDataDecoder },
        windowHello: { name: "windowHello", dataDecoder: windowHelloDecoder, resultDecoder: helloSuccessDecoder },
        windowAdded: { name: "windowAdded", dataDecoder: coreWindowDataDecoder },
        windowRemoved: { name: "windowRemoved", dataDecoder: simpleWindowDecoder$1 },
        getBounds: { name: "getBounds", dataDecoder: simpleWindowDecoder$1, resultDecoder: windowBoundsResultDecoder$1 },
        getFrameBounds: { name: "getFrameBounds", dataDecoder: simpleWindowDecoder$1, resultDecoder: frameWindowBoundsResultDecoder$1 },
        getUrl: { name: "getUrl", dataDecoder: simpleWindowDecoder$1, resultDecoder: windowUrlResultDecoder$1 },
        moveResize: { name: "moveResize", dataDecoder: windowMoveResizeConfigDecoder$1 },
        focus: { name: "focus", dataDecoder: simpleWindowDecoder$1 },
        close: { name: "close", dataDecoder: simpleWindowDecoder$1 },
        getTitle: { name: "getTitle", dataDecoder: simpleWindowDecoder$1, resultDecoder: windowTitleConfigDecoder$1 },
        setTitle: { name: "setTitle", dataDecoder: windowTitleConfigDecoder$1 },
        focusChange: { name: "focusChange", dataDecoder: focusEventDataDecoder$1 }
    };

    function getDefaultExportFromCjs$1$1 (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createRegistry$1$1(options) {
        if (options && options.errorHandling
            && typeof options.errorHandling !== "function"
            && options.errorHandling !== "log"
            && options.errorHandling !== "silent"
            && options.errorHandling !== "throw") {
            throw new Error("Invalid options passed to createRegistry. Prop errorHandling should be [\"log\" | \"silent\" | \"throw\" | (err) => void], but " + typeof options.errorHandling + " was passed");
        }
        var _userErrorHandler = options && typeof options.errorHandling === "function" && options.errorHandling;
        var callbacks = {};
        function add(key, callback, replayArgumentsArr) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                callbacksForKey = [];
                callbacks[key] = callbacksForKey;
            }
            callbacksForKey.push(callback);
            if (replayArgumentsArr) {
                setTimeout(function () {
                    replayArgumentsArr.forEach(function (replayArgument) {
                        var _a;
                        if ((_a = callbacks[key]) === null || _a === void 0 ? void 0 : _a.includes(callback)) {
                            try {
                                if (Array.isArray(replayArgument)) {
                                    callback.apply(undefined, replayArgument);
                                }
                                else {
                                    callback.apply(undefined, [replayArgument]);
                                }
                            }
                            catch (err) {
                                _handleError(err, key);
                            }
                        }
                    });
                }, 0);
            }
            return function () {
                var allForKey = callbacks[key];
                if (!allForKey) {
                    return;
                }
                allForKey = allForKey.reduce(function (acc, element, index) {
                    if (!(element === callback && acc.length === index)) {
                        acc.push(element);
                    }
                    return acc;
                }, []);
                if (allForKey.length === 0) {
                    delete callbacks[key];
                }
                else {
                    callbacks[key] = allForKey;
                }
            };
        }
        function execute(key) {
            var argumentsArr = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                argumentsArr[_i - 1] = arguments[_i];
            }
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey || callbacksForKey.length === 0) {
                return [];
            }
            var results = [];
            callbacksForKey.forEach(function (callback) {
                try {
                    var result = callback.apply(undefined, argumentsArr);
                    results.push(result);
                }
                catch (err) {
                    results.push(undefined);
                    _handleError(err, key);
                }
            });
            return results;
        }
        function _handleError(exceptionArtifact, key) {
            var errParam = exceptionArtifact instanceof Error ? exceptionArtifact : new Error(exceptionArtifact);
            if (_userErrorHandler) {
                _userErrorHandler(errParam);
                return;
            }
            var msg = "[ERROR] callback-registry: User callback for key \"" + key + "\" failed: " + errParam.stack;
            if (options) {
                switch (options.errorHandling) {
                    case "log":
                        return console.error(msg);
                    case "silent":
                        return;
                    case "throw":
                        throw new Error(msg);
                }
            }
            console.error(msg);
        }
        function clear() {
            callbacks = {};
        }
        function clearKey(key) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                return;
            }
            delete callbacks[key];
        }
        return {
            add: add,
            execute: execute,
            clear: clear,
            clearKey: clearKey
        };
    }
    createRegistry$1$1.default = createRegistry$1$1;
    var lib$3$1 = createRegistry$1$1;

    class WebWindowModel {
        constructor(_id, _name, _bridge) {
            this._id = _id;
            this._name = _name;
            this._bridge = _bridge;
            this.registry = lib$3$1();
            this.myCtxKey = `___window___${this.id}`;
        }
        get id() {
            return this._id.slice();
        }
        get name() {
            return this._name.slice();
        }
        clean() {
            if (this.ctxUnsubscribe) {
                this.ctxUnsubscribe();
            }
        }
        processSelfFocusEvent(hasFocus) {
            this.me.isFocused = hasFocus;
            this.registry.execute("focus-change", this.me);
        }
        toApi() {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.ctxUnsubscribe = yield this._bridge.contextLib.subscribe(this.myCtxKey, (data) => this.registry.execute("context-updated", data));
                this.me = {
                    id: this.id,
                    name: this.name,
                    isFocused: false,
                    getURL: this.getURL.bind(this),
                    moveResize: this.moveResize.bind(this),
                    resizeTo: this.resizeTo.bind(this),
                    moveTo: this.moveTo.bind(this),
                    focus: this.focus.bind(this),
                    close: this.close.bind(this),
                    getTitle: this.getTitle.bind(this),
                    setTitle: this.setTitle.bind(this),
                    getBounds: this.getBounds.bind(this),
                    getContext: this.getContext.bind(this),
                    updateContext: this.updateContext.bind(this),
                    setContext: this.setContext.bind(this),
                    onContextUpdated: this.onContextUpdated.bind(this),
                    onFocusChanged: this.onFocusChanged.bind(this)
                };
                return this.me;
            });
        }
        getURL() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const result = yield this._bridge.send("windows", operations$8.getUrl, { windowId: this.id });
                return result.url;
            });
        }
        onFocusChanged(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to context changes, because the provided callback is not a function!");
            }
            return this.registry.add("focus-change", callback);
        }
        moveResize(dimension) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const targetBounds = boundsDecoder.runWithException(dimension);
                const commandArgs = Object.assign({}, targetBounds, { windowId: this.id, relative: false });
                yield this._bridge.send("windows", operations$8.moveResize, commandArgs);
                return this.me;
            });
        }
        resizeTo(width, height) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (typeof width === "undefined" && typeof height === "undefined") {
                    return this.me;
                }
                if (typeof width !== "undefined") {
                    nonNegativeNumberDecoder$1.runWithException(width);
                }
                if (typeof height !== "undefined") {
                    nonNegativeNumberDecoder$1.runWithException(height);
                }
                const commandArgs = Object.assign({}, { width, height }, { windowId: this.id, relative: true });
                yield this._bridge.send("windows", operations$8.moveResize, commandArgs);
                return this.me;
            });
        }
        moveTo(top, left) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (typeof top === "undefined" && typeof left === "undefined") {
                    return this.me;
                }
                if (typeof top !== "undefined") {
                    number$1().runWithException(top);
                }
                if (typeof left !== "undefined") {
                    number$1().runWithException(left);
                }
                const commandArgs = Object.assign({}, { top, left }, { windowId: this.id, relative: true });
                yield this._bridge.send("windows", operations$8.moveResize, commandArgs);
                return this.me;
            });
        }
        focus() {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.name === "Platform") {
                    window.open(undefined, this.id);
                }
                else {
                    yield this._bridge.send("windows", operations$8.focus, { windowId: this.id });
                }
                return this.me;
            });
        }
        close() {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this._bridge.send("windows", operations$8.close, { windowId: this.id });
                return this.me;
            });
        }
        getTitle() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const result = yield this._bridge.send("windows", operations$8.getTitle, { windowId: this.id });
                return result.title;
            });
        }
        setTitle(title) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const ttl = nonEmptyStringDecoder$1.runWithException(title);
                yield this._bridge.send("windows", operations$8.setTitle, { windowId: this.id, title: ttl });
                return this.me;
            });
        }
        getBounds() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const result = yield this._bridge.send("windows", operations$8.getBounds, { windowId: this.id });
                return result.bounds;
            });
        }
        getContext() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const ctx = yield this._bridge.contextLib.get(this.myCtxKey);
                return ctx;
            });
        }
        updateContext(context) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const ctx = anyDecoder$1.runWithException(context);
                yield this._bridge.contextLib.update(this.myCtxKey, ctx);
                return this.me;
            });
        }
        setContext(context) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const ctx = anyDecoder$1.runWithException(context);
                yield this._bridge.contextLib.set(this.myCtxKey, ctx);
                return this.me;
            });
        }
        onContextUpdated(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to context changes, because the provided callback is not a function!");
            }
            const wrappedCallback = (data) => {
                callback(data, this.me);
            };
            return this.registry.add("context-updated", wrappedCallback);
        }
    }

    const systemOperations = {
        operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder$1, resultDecoder: operationCheckResultDecoder$1 },
        getWorkspaceWindowFrameBounds: { name: "getWorkspaceWindowFrameBounds", resultDecoder: workspaceFrameBoundsResultDecoder, dataDecoder: simpleItemIdDecoder }
    };

    const PromiseWrap$1 = (promise, timeoutMilliseconds, timeoutMessage) => {
        return new Promise((resolve, reject) => {
            let promiseActive = true;
            const timeout = setTimeout(() => {
                if (!promiseActive) {
                    return;
                }
                promiseActive = false;
                const message = timeoutMessage || `Promise timeout hit: ${timeoutMilliseconds}`;
                reject(message);
            }, timeoutMilliseconds);
            promise()
                .then((result) => {
                if (!promiseActive) {
                    return;
                }
                promiseActive = false;
                clearTimeout(timeout);
                resolve(result);
            })
                .catch((error) => {
                if (!promiseActive) {
                    return;
                }
                promiseActive = false;
                clearTimeout(timeout);
                reject(error);
            });
        });
    };
    const PromisePlus$1$1 = (executor, timeoutMilliseconds, timeoutMessage) => {
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                const message = timeoutMessage || `Promise timeout hit: ${timeoutMilliseconds}`;
                reject(message);
            }, timeoutMilliseconds);
            const providedPromise = new Promise(executor);
            providedPromise
                .then((result) => {
                clearTimeout(timeout);
                resolve(result);
            })
                .catch((error) => {
                clearTimeout(timeout);
                reject(error);
            });
        });
    };

    let WindowsController$1 = class WindowsController {
        constructor() {
            this.registry = lib$3$1();
            this.allWindowProjections = [];
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("windows.controller.web");
                this.logger.trace("starting the web windows controller");
                this.publicWindowId = ioc.publicWindowId;
                this.actualWindowId = ioc.actualWindowId;
                this.addWindowOperationExecutors();
                this.ioc = ioc;
                this.bridge = ioc.bridge;
                this.logger.trace(`set the public window id: ${this.publicWindowId} and actual window id: ${this.actualWindowId}, set the bridge operations and ioc, registering with the platform now`);
                this.platformRegistration = this.registerWithPlatform();
                yield this.platformRegistration;
                yield this.initializeFocusTracking();
                this.logger.trace("registration with the platform successful, attaching the windows property to glue and returning");
                const api = this.toApi();
                coreGlue.windows = api;
            });
        }
        handleBridgeMessage(args) {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this.platformRegistration;
                const operationName = windowOperationTypesDecoder.runWithException(args.operation);
                const operation = operations$8[operationName];
                if (!operation.execute) {
                    return;
                }
                let operationData = args.data;
                if (operation.dataDecoder) {
                    operationData = operation.dataDecoder.runWithException(args.data);
                }
                return yield operation.execute(operationData);
            });
        }
        open(name, url, options) {
            return __awaiter$1(this, void 0, void 0, function* () {
                nonEmptyStringDecoder$1.runWithException(name);
                nonEmptyStringDecoder$1.runWithException(url);
                const settings = windowOpenSettingsDecoder$1.runWithException(options);
                const windowSuccess = yield this.bridge.send("windows", operations$8.openWindow, { name, url, options: settings });
                return this.waitForWindowAdded(windowSuccess.windowId);
            });
        }
        list() {
            return this.allWindowProjections.map((projection) => projection.api);
        }
        findById(id) {
            var _a;
            nonEmptyStringDecoder$1.runWithException(id);
            return (_a = this.allWindowProjections.find((projection) => projection.id === id)) === null || _a === void 0 ? void 0 : _a.api;
        }
        toApi() {
            return {
                open: this.open.bind(this),
                my: this.my.bind(this),
                list: this.list.bind(this),
                findById: this.findById.bind(this),
                onWindowAdded: this.onWindowAdded.bind(this),
                onWindowRemoved: this.onWindowRemoved.bind(this),
                onWindowGotFocus: this.onWindowGotFocus.bind(this),
                onWindowLostFocus: this.onWindowLostFocus.bind(this)
            };
        }
        addWindowOperationExecutors() {
            operations$8.focusChange.execute = this.handleFocusChangeEvent.bind(this);
            operations$8.windowAdded.execute = this.handleWindowAdded.bind(this);
            operations$8.windowRemoved.execute = this.handleWindowRemoved.bind(this);
            operations$8.getBounds.execute = this.handleGetBounds.bind(this);
            operations$8.getFrameBounds.execute = this.handleGetBounds.bind(this);
            operations$8.getTitle.execute = this.handleGetTitle.bind(this);
            operations$8.getUrl.execute = this.handleGetUrl.bind(this);
            operations$8.moveResize.execute = this.handleMoveResize.bind(this);
            operations$8.setTitle.execute = this.handleSetTitle.bind(this);
        }
        my() {
            return Object.assign({}, this.me);
        }
        onWindowAdded(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to window added, because the provided callback is not a function!");
            }
            return this.registry.add("window-added", callback);
        }
        onWindowRemoved(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to window removed, because the provided callback is not a function!");
            }
            return this.registry.add("window-removed", callback);
        }
        onWindowGotFocus(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to onWindowGotFocus, because the provided callback is not a function!");
            }
            return this.registry.add("window-got-focus", callback);
        }
        onWindowLostFocus(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to onWindowLostFocus, because the provided callback is not a function!");
            }
            return this.registry.add("window-lost-focus", callback);
        }
        sayHello() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const helloSuccess = yield this.bridge.send("windows", operations$8.windowHello, { windowId: this.actualWindowId });
                return helloSuccess;
            });
        }
        registerWithPlatform() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const { windows, isWorkspaceFrame } = yield this.sayHello();
                this.isWorkspaceFrame = isWorkspaceFrame;
                this.logger.trace("the platform responded to the hello message");
                if (!this.isWorkspaceFrame) {
                    this.logger.trace("i am not treated as a workspace frame, setting my window");
                    const myWindow = windows.find((w) => w.windowId === this.publicWindowId);
                    if (!myWindow) {
                        throw new Error("Cannot initialize the window library, because I received no information about me from the platform");
                    }
                    const myProjection = yield this.ioc.buildWebWindow(this.publicWindowId, myWindow.name);
                    this.me = myProjection.api;
                    this.allWindowProjections.push(myProjection);
                }
                const currentWindows = yield Promise.all(windows
                    .filter((w) => w.windowId !== this.publicWindowId)
                    .map((w) => this.ioc.buildWebWindow(w.windowId, w.name)));
                this.logger.trace("all windows projections are completed, building the list collection");
                this.allWindowProjections.push(...currentWindows);
            });
        }
        handleFocusChangeEvent(focusData) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const foundProjection = this.allWindowProjections.find((projection) => projection.id === focusData.windowId);
                if (!foundProjection) {
                    return;
                }
                foundProjection.model.processSelfFocusEvent(focusData.hasFocus);
                const keyToExecute = focusData.hasFocus ? "window-got-focus" : "window-lost-focus";
                this.registry.execute(keyToExecute, foundProjection.api);
            });
        }
        handleWindowAdded(data) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.allWindowProjections.some((projection) => projection.id === data.windowId)) {
                    return;
                }
                const webWindowProjection = yield this.ioc.buildWebWindow(data.windowId, data.name);
                this.allWindowProjections.push(webWindowProjection);
                this.registry.execute("window-added", webWindowProjection.api);
            });
        }
        handleWindowRemoved(data) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const removed = this.allWindowProjections.find((w) => w.id === data.windowId);
                if (!removed) {
                    return;
                }
                this.allWindowProjections = this.allWindowProjections.filter((w) => w.id !== data.windowId);
                removed.model.clean();
                this.registry.execute("window-removed", removed.api);
            });
        }
        handleGetBounds() {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (!this.isWorkspaceFrame && this.publicWindowId !== this.actualWindowId) {
                    const bounds = yield this.me.getBounds();
                    return {
                        windowId: this.me.id,
                        bounds
                    };
                }
                return {
                    windowId: this.isWorkspaceFrame ? "noop" : this.me.id,
                    bounds: {
                        top: window.screenTop,
                        left: window.screenLeft,
                        width: window.innerWidth,
                        height: window.innerHeight
                    }
                };
            });
        }
        handleGetTitle() {
            return __awaiter$1(this, void 0, void 0, function* () {
                return {
                    windowId: this.me.id,
                    title: document.title
                };
            });
        }
        handleGetUrl() {
            return __awaiter$1(this, void 0, void 0, function* () {
                return {
                    windowId: this.me.id,
                    url: window.location.href
                };
            });
        }
        handleMoveResize(config) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const targetTop = typeof config.top === "number" ? config.top :
                    config.relative ? 0 : window.screenTop;
                const targetLeft = typeof config.left === "number" ? config.left :
                    config.relative ? 0 : window.screenLeft;
                const targetHeight = typeof config.height === "number" ? config.height :
                    config.relative ? 0 : window.innerHeight;
                const targetWidth = typeof config.width === "number" ? config.width :
                    config.relative ? 0 : window.innerWidth;
                const moveMethod = config.relative ? window.moveBy : window.moveTo;
                const resizeMethod = config.relative ? window.resizeBy : window.resizeTo;
                moveMethod(targetLeft, targetTop);
                resizeMethod(targetWidth, targetHeight);
            });
        }
        handleSetTitle(config) {
            return __awaiter$1(this, void 0, void 0, function* () {
                document.title = config.title;
            });
        }
        initializeFocusTracking() {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.isWorkspaceFrame) {
                    this.logger.trace("Ignoring the focus tracking, because this client is a workspace frame");
                    return;
                }
                try {
                    yield this.bridge.send("windows", systemOperations.operationCheck, { operation: "focusChange" });
                }
                catch (error) {
                    this.logger.warn("The platform of this client is outdated and does not support focus tracking, disabling focus events for this client.");
                    return;
                }
                const hasFocus = document.hasFocus();
                yield this.transmitFocusChange(true);
                if (!hasFocus) {
                    yield this.transmitFocusChange(false);
                }
                document.addEventListener("visibilityChange", this.processFocusEvent.bind(this));
                window.addEventListener("focus", this.processFocusEvent.bind(this));
                window.addEventListener("blur", this.processFocusEvent.bind(this));
            });
        }
        processFocusEvent() {
            const hasFocus = document.hasFocus();
            this.transmitFocusChange(hasFocus);
        }
        waitForWindowAdded(windowId) {
            const foundWindow = this.allWindowProjections.find((projection) => projection.id === windowId);
            if (foundWindow) {
                return Promise.resolve(foundWindow.api);
            }
            return PromisePlus$1$1((resolve) => {
                const unsubscribe = this.onWindowAdded((addedWindow) => {
                    if (addedWindow.id === windowId) {
                        unsubscribe();
                        resolve(addedWindow);
                    }
                });
            }, 30000, `Timed out waiting for ${windowId} to be announced`);
        }
        transmitFocusChange(hasFocus) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const eventData = {
                    windowId: this.me.id,
                    hasFocus
                };
                this.me.isFocused = hasFocus;
                yield this.bridge.send("windows", operations$8.focusChange, eventData);
            });
        }
    };

    const GlueWebPlatformControlName$1 = "T42.Web.Platform.Control";
    const GlueWebPlatformStreamName$1 = "T42.Web.Platform.Stream";
    const GlueClientControlName$1 = "T42.Web.Client.Control";
    const GlueCorePlusThemesStream = "T42.Core.Plus.Themes.Stream";

    class GlueBridge {
        constructor(coreGlue, communicationId) {
            this.coreGlue = coreGlue;
            this.communicationId = communicationId;
            this.platformMethodTimeoutMs = 10000;
        }
        get contextLib() {
            return this.coreGlue.contexts;
        }
        get interopInstance() {
            return this.coreGlue.interop.instance.instance;
        }
        start(controllers) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.controllers = controllers;
                yield Promise.all([
                    this.checkWaitMethod(GlueWebPlatformControlName$1),
                    this.checkWaitMethod(GlueWebPlatformStreamName$1)
                ]);
                const systemId = this.communicationId;
                const [sub] = yield Promise.all([
                    this.coreGlue.interop.subscribe(GlueWebPlatformStreamName$1, systemId ? { target: { instance: this.communicationId } } : undefined),
                    this.coreGlue.interop.registerAsync(GlueClientControlName$1, (args, _, success, error) => this.passMessageController(args, success, error))
                ]);
                this.sub = sub;
                this.sub.onData((pkg) => this.passMessageController(pkg.data));
            });
        }
        getInteropInstance(windowId) {
            const result = this.coreGlue.interop.servers().find((s) => s.windowId && s.windowId === windowId);
            return {
                application: result === null || result === void 0 ? void 0 : result.application,
                applicationName: result === null || result === void 0 ? void 0 : result.applicationName,
                peerId: result === null || result === void 0 ? void 0 : result.peerId,
                instance: result === null || result === void 0 ? void 0 : result.instance,
                windowId: result === null || result === void 0 ? void 0 : result.windowId
            };
        }
        send(domain, operation, operationData, options, webOptions) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (operation.dataDecoder) {
                    try {
                        operation.dataDecoder.runWithException(operationData);
                    }
                    catch (error) {
                        throw new Error(`Unexpected Web->Platform outgoing validation error: ${error.message}, for operation: ${operation.name} and input: ${JSON.stringify(error.input)}`);
                    }
                }
                const operationSupported = (webOptions === null || webOptions === void 0 ? void 0 : webOptions.includeOperationCheck) ?
                    (yield this.checkOperationSupported(domain, operation)).isSupported :
                    true;
                if (!operationSupported) {
                    throw new Error(`Cannot complete operation: ${operation.name} for domain: ${domain} because this client is connected to a platform which does not support it`);
                }
                try {
                    const operationResult = yield this.transmitMessage(domain, operation, operationData, options);
                    if (operation.resultDecoder) {
                        operation.resultDecoder.runWithException(operationResult);
                    }
                    return operationResult;
                }
                catch (error) {
                    if (error.kind) {
                        throw new Error(`Unexpected Web<-Platform incoming validation error: ${error.message}, for operation: ${operation.name} and input: ${JSON.stringify(error.input)}`);
                    }
                    throw new Error(error.message);
                }
            });
        }
        createNotificationsSteam() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const streamExists = this.coreGlue.interop.methods().some((method) => method.name === GlueCorePlusThemesStream);
                if (!streamExists) {
                    throw new Error("Cannot subscribe to theme changes, because the underlying interop stream does not exist. Most likely this is the case when this client is not connected to Core Plus.");
                }
                return this.coreGlue.interop.subscribe(GlueCorePlusThemesStream, this.communicationId ? { target: { instance: this.communicationId } } : undefined);
            });
        }
        checkOperationSupported(domain, operation) {
            return __awaiter$1(this, void 0, void 0, function* () {
                try {
                    const result = yield this.send(domain, systemOperations.operationCheck, { operation: operation.name });
                    return result;
                }
                catch (error) {
                    return { isSupported: false };
                }
            });
        }
        checkWaitMethod(name) {
            return PromisePlus$1$1((resolve) => {
                const hasMethod = this.coreGlue.interop.methods().some((method) => {
                    const nameMatch = method.name === name;
                    const serverMatch = this.communicationId ?
                        method.getServers().some((server) => server.instance === this.communicationId) :
                        true;
                    return nameMatch && serverMatch;
                });
                if (hasMethod) {
                    return resolve();
                }
                const unSub = this.coreGlue.interop.serverMethodAdded((data) => {
                    const method = data.method;
                    const server = data.server;
                    const serverMatch = this.communicationId ?
                        server.instance === this.communicationId :
                        true;
                    if (method.name === name && serverMatch) {
                        unSub();
                        resolve();
                    }
                });
            }, this.platformMethodTimeoutMs, `Cannot initiate Glue Web, because a system method's discovery timed out: ${name}`);
        }
        passMessageController(args, success, error) {
            const decodeResult = libDomainDecoder$1.run(args.domain);
            if (!decodeResult.ok) {
                if (error) {
                    error(`Cannot execute this client control, because of domain validation error: ${JSON.stringify(decodeResult.error)}`);
                }
                return;
            }
            const domain = decodeResult.result;
            this.controllers[domain]
                .handleBridgeMessage(args)
                .then((resolutionData) => {
                if (success) {
                    success(resolutionData);
                }
            })
                .catch((err) => {
                if (error) {
                    error(err);
                }
                console.warn(err);
            });
        }
        transmitMessage(domain, operation, data, options) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const messageData = { domain, data, operation: operation.name };
                let invocationResult;
                const baseErrorMessage = `Internal Platform Communication Error. Attempted operation: ${JSON.stringify(operation.name)} with data: ${JSON.stringify(data)}. `;
                const systemId = this.communicationId;
                try {
                    invocationResult = yield this.coreGlue.interop.invoke(GlueWebPlatformControlName$1, messageData, systemId ? { instance: this.communicationId } : undefined, options);
                    if (!invocationResult) {
                        throw new Error("Received unsupported result from the platform - empty result");
                    }
                    if (!Array.isArray(invocationResult.all_return_values) || invocationResult.all_return_values.length === 0) {
                        throw new Error("Received unsupported result from the platform - empty values collection");
                    }
                }
                catch (error) {
                    if (error && error.all_errors && error.all_errors.length) {
                        const invocationErrorMessage = error.all_errors[0].message;
                        throw new Error(`${baseErrorMessage} -> Inner message: ${invocationErrorMessage}`);
                    }
                    throw new Error(`${baseErrorMessage} -> Inner message: ${error.message}`);
                }
                return invocationResult.all_return_values[0].returned;
            });
        }
    }

    const operations$7 = {
        appHello: { name: "appHello", dataDecoder: windowHelloDecoder, resultDecoder: appHelloSuccessDecoder$1 },
        appDirectoryStateChange: { name: "appDirectoryStateChange", dataDecoder: appDirectoryStateChangeDecoder },
        instanceStarted: { name: "instanceStarted", dataDecoder: instanceDataDecoder$1 },
        instanceStopped: { name: "instanceStopped", dataDecoder: instanceDataDecoder$1 },
        applicationStart: { name: "applicationStart", dataDecoder: applicationStartConfigDecoder$1, resultDecoder: instanceDataDecoder$1 },
        instanceStop: { name: "instanceStop", dataDecoder: basicInstanceDataDecoder$1 },
        import: { name: "import" },
        remove: { name: "remove", dataDecoder: appRemoveConfigDecoder$1 },
        export: { name: "export", resultDecoder: appsExportOperationDecoder$1 },
        clear: { name: "clear" }
    };

    class AppManagerController {
        constructor() {
            this.baseApplicationsTimeoutMS = 60000;
            this.appImportTimeoutMS = 20;
            this.registry = lib$3$1();
            this.applications = [];
            this.instances = [];
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("appManger.controller.web");
                this.logger.trace("starting the web appManager controller");
                this.publicWindowId = ioc.publicWindowId;
                this.actualWindowId = ioc.actualWindowId;
                this.addOperationsExecutors();
                this.ioc = ioc;
                this.bridge = ioc.bridge;
                this.platformRegistration = this.registerWithPlatform();
                yield this.platformRegistration;
                this.logger.trace("registration with the platform successful, attaching the appManager property to glue and returning");
                const api = this.toApi();
                coreGlue.appManager = api;
            });
        }
        handleBridgeMessage(args) {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this.platformRegistration;
                const operationName = appManagerOperationTypesDecoder$1.runWithException(args.operation);
                const operation = operations$7[operationName];
                if (!operation.execute) {
                    return;
                }
                let operationData = args.data;
                if (operation.dataDecoder) {
                    operationData = operation.dataDecoder.runWithException(args.data);
                }
                return yield operation.execute(operationData);
            });
        }
        onInstanceStarted(callback) {
            if (typeof callback !== "function") {
                throw new Error("onInstanceStarted requires a single argument of type function");
            }
            return this.registry.add("instance-started", callback, this.instances);
        }
        onInstanceStopped(callback) {
            if (typeof callback !== "function") {
                throw new Error("onInstanceStopped requires a single argument of type function");
            }
            return this.registry.add("instance-stopped", callback);
        }
        startApplication(appName, context, options) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function* () {
                const startOptions = {
                    name: appName,
                    waitForAGMReady: (_a = options === null || options === void 0 ? void 0 : options.waitForAGMReady) !== null && _a !== void 0 ? _a : true,
                    context,
                    top: options === null || options === void 0 ? void 0 : options.top,
                    left: options === null || options === void 0 ? void 0 : options.left,
                    width: options === null || options === void 0 ? void 0 : options.width,
                    height: options === null || options === void 0 ? void 0 : options.height,
                    relativeTo: options === null || options === void 0 ? void 0 : options.relativeTo,
                    relativeDirection: options === null || options === void 0 ? void 0 : options.relativeDirection,
                    id: options === null || options === void 0 ? void 0 : options.reuseId,
                    forceChromeTab: options === null || options === void 0 ? void 0 : options.forceTab,
                    layoutComponentId: options === null || options === void 0 ? void 0 : options.layoutComponentId
                };
                const openResult = yield this.bridge.send("appManager", operations$7.applicationStart, startOptions);
                const app = this.applications.find((a) => a.name === openResult.applicationName);
                return this.ioc.buildInstance(openResult, app);
            });
        }
        getApplication(name) {
            const verifiedName = nonEmptyStringDecoder$1.runWithException(name);
            return this.applications.find((app) => app.name === verifiedName);
        }
        getInstances() {
            return this.instances.slice();
        }
        toApi() {
            const api = {
                myInstance: this.me,
                inMemory: {
                    import: this.import.bind(this),
                    remove: this.remove.bind(this),
                    export: this.export.bind(this),
                    clear: this.clear.bind(this)
                },
                application: this.getApplication.bind(this),
                applications: this.getApplications.bind(this),
                instances: this.getInstances.bind(this),
                onAppAdded: this.onAppAdded.bind(this),
                onAppChanged: this.onAppChanged.bind(this),
                onAppRemoved: this.onAppRemoved.bind(this),
                onInstanceStarted: this.onInstanceStarted.bind(this),
                onInstanceStopped: this.onInstanceStopped.bind(this)
            };
            return api;
        }
        addOperationsExecutors() {
            operations$7.appDirectoryStateChange.execute = this.handleAppDirectoryStateChange.bind(this);
            operations$7.instanceStarted.execute = this.handleInstanceStartedMessage.bind(this);
            operations$7.instanceStopped.execute = this.handleInstanceStoppedMessage.bind(this);
        }
        handleAppDirectoryStateChange(data) {
            return __awaiter$1(this, void 0, void 0, function* () {
                data.appsAdded.forEach(this.handleApplicationAddedMessage.bind(this));
                data.appsChanged.forEach(this.handleApplicationChangedMessage.bind(this));
                data.appsRemoved.forEach(this.handleApplicationRemovedMessage.bind(this));
            });
        }
        onAppAdded(callback) {
            if (typeof callback !== "function") {
                throw new Error("onAppAdded requires a single argument of type function");
            }
            return this.registry.add("application-added", callback, this.applications);
        }
        onAppRemoved(callback) {
            if (typeof callback !== "function") {
                throw new Error("onAppRemoved requires a single argument of type function");
            }
            return this.registry.add("application-removed", callback);
        }
        onAppChanged(callback) {
            if (typeof callback !== "function") {
                throw new Error("onAppChanged requires a single argument of type function");
            }
            return this.registry.add("application-changed", callback);
        }
        handleApplicationAddedMessage(appData) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.applications.some((app) => app.name === appData.name)) {
                    return;
                }
                const app = yield this.ioc.buildApplication(appData, []);
                const instances = this.instances.filter((instance) => instance.application.name === app.name);
                app.instances.push(...instances);
                this.applications.push(app);
                this.registry.execute("application-added", app);
            });
        }
        handleApplicationRemovedMessage(appData) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const appIndex = this.applications.findIndex((app) => app.name === appData.name);
                if (appIndex < 0) {
                    return;
                }
                const app = this.applications[appIndex];
                this.applications.splice(appIndex, 1);
                this.registry.execute("application-removed", app);
            });
        }
        handleApplicationChangedMessage(appData) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const app = this.applications.find((app) => app.name === appData.name);
                if (!app) {
                    return this.handleApplicationAddedMessage(appData);
                }
                app.title = appData.title;
                app.version = appData.version;
                app.icon = appData.icon;
                app.caption = appData.caption;
                app.userProperties = appData.userProperties;
                this.registry.execute("application-changed", app);
            });
        }
        handleInstanceStartedMessage(instanceData) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.instances.some((instance) => instance.id === instanceData.id)) {
                    return;
                }
                const application = this.applications.find((app) => app.name === instanceData.applicationName);
                if (!application) {
                    throw new Error(`Cannot add instance: ${instanceData.id}, because there is no application definition associated with it`);
                }
                const instance = this.ioc.buildInstance(instanceData, application);
                this.instances.push(instance);
                application.instances.push(instance);
                this.registry.execute("instance-started", instance);
            });
        }
        handleInstanceStoppedMessage(instanceData) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const instance = this.instances.find((i) => i.id === instanceData.id);
                if (instance) {
                    const instIdx = this.instances.findIndex((inst) => inst.id === instanceData.id);
                    this.instances.splice(instIdx, 1);
                }
                const application = this.applications.find((app) => app.instances.some((inst) => inst.id === instanceData.id));
                if (application) {
                    const instIdxApps = application.instances.findIndex((inst) => inst.id === instanceData.id);
                    application.instances.splice(instIdxApps, 1);
                }
                if (!instance) {
                    return;
                }
                this.registry.execute("instance-stopped", instance);
            });
        }
        import(definitions, mode = "replace") {
            return __awaiter$1(this, void 0, void 0, function* () {
                importModeDecoder$1.runWithException(mode);
                if (!Array.isArray(definitions)) {
                    throw new Error("Import must be called with an array of definitions");
                }
                if (definitions.length > 10000) {
                    throw new Error("Cannot import more than 10000 app definitions in Glue42 Core.");
                }
                const parseResult = definitions.reduce((soFar, definition) => {
                    const decodeResult = allApplicationDefinitionsDecoder$1.run(definition);
                    if (!decodeResult.ok) {
                        soFar.invalid.push({ app: definition === null || definition === void 0 ? void 0 : definition.name, error: JSON.stringify(decodeResult.error) });
                    }
                    else {
                        soFar.valid.push(definition);
                    }
                    return soFar;
                }, { valid: [], invalid: [] });
                const responseTimeout = this.baseApplicationsTimeoutMS + this.appImportTimeoutMS * parseResult.valid.length;
                yield this.bridge.send("appManager", operations$7.import, { definitions: parseResult.valid, mode }, { methodResponseTimeoutMs: responseTimeout });
                return {
                    imported: parseResult.valid.map((valid) => valid.name),
                    errors: parseResult.invalid
                };
            });
        }
        remove(name) {
            return __awaiter$1(this, void 0, void 0, function* () {
                nonEmptyStringDecoder$1.runWithException(name);
                yield this.bridge.send("appManager", operations$7.remove, { name }, { methodResponseTimeoutMs: this.baseApplicationsTimeoutMS });
            });
        }
        clear() {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this.bridge.send("appManager", operations$7.clear, undefined, { methodResponseTimeoutMs: this.baseApplicationsTimeoutMS });
            });
        }
        export() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const response = yield this.bridge.send("appManager", operations$7.export, undefined, { methodResponseTimeoutMs: this.baseApplicationsTimeoutMS });
                return response.definitions;
            });
        }
        getApplications() {
            return this.applications.slice();
        }
        registerWithPlatform() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const result = yield this.bridge.send("appManager", operations$7.appHello, { windowId: this.actualWindowId }, { methodResponseTimeoutMs: this.baseApplicationsTimeoutMS });
                this.logger.trace("the platform responded to the hello message with a full list of apps");
                this.applications = yield Promise.all(result.apps.map((app) => this.ioc.buildApplication(app, app.instances)));
                this.instances = this.applications.reduce((instancesSoFar, app) => {
                    instancesSoFar.push(...app.instances);
                    return instancesSoFar;
                }, []);
                this.me = this.findMyInstance();
                this.logger.trace(`all applications were parsed and saved. I am ${this.me ? "NOT a" : "a"} valid instance`);
            });
        }
        findMyInstance() {
            for (const app of this.applications) {
                const foundInstance = app.instances.find((instance) => instance.id === this.publicWindowId);
                if (foundInstance) {
                    return foundInstance;
                }
            }
        }
    }

    class InstanceModel {
        constructor(data, bridge, application) {
            this.data = data;
            this.bridge = bridge;
            this.application = application;
            this.myCtxKey = `___instance___${this.data.id}`;
        }
        toApi() {
            const agm = this.bridge.getInteropInstance(this.data.id);
            const api = {
                id: this.data.id,
                agm,
                application: this.application,
                stop: this.stop.bind(this),
                getContext: this.getContext.bind(this)
            };
            this.me = Object.freeze(api);
            return this.me;
        }
        getContext() {
            return __awaiter$1(this, void 0, void 0, function* () {
                return this.bridge.contextLib.get(this.myCtxKey);
            });
        }
        stop() {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this.bridge.send("appManager", operations$7.instanceStop, { id: this.data.id });
            });
        }
    }

    class ApplicationModel {
        constructor(data, instances, controller) {
            this.data = data;
            this.instances = instances;
            this.controller = controller;
        }
        toApi() {
            const api = {
                name: this.data.name,
                title: this.data.title,
                version: this.data.version,
                icon: this.data.icon,
                caption: this.data.caption,
                userProperties: this.data.userProperties,
                instances: this.instances,
                start: this.start.bind(this),
                onInstanceStarted: this.onInstanceStarted.bind(this),
                onInstanceStopped: this.onInstanceStopped.bind(this)
            };
            this.me = api;
            return this.me;
        }
        onInstanceStarted(callback) {
            if (typeof callback !== "function") {
                throw new Error("OnInstanceStarted requires a single argument of type function");
            }
            return this.controller.onInstanceStarted((instance) => {
                if (instance.application.name === this.data.name) {
                    callback(instance);
                }
            });
        }
        onInstanceStopped(callback) {
            if (typeof callback !== "function") {
                throw new Error("OnInstanceStarted requires a single argument of type function");
            }
            return this.controller.onInstanceStopped((instance) => {
                if (instance.application.name === this.data.name) {
                    callback(instance);
                }
            });
        }
        start(context, options) {
            return __awaiter$1(this, void 0, void 0, function* () {
                return this.controller.startApplication(this.data.name, context, options);
            });
        }
    }

    const operations$6 = {
        layoutAdded: { name: "layoutAdded", dataDecoder: glueLayoutDecoder$1 },
        layoutChanged: { name: "layoutChanged", dataDecoder: glueLayoutDecoder$1 },
        layoutRemoved: { name: "layoutRemoved", dataDecoder: glueLayoutDecoder$1 },
        get: { name: "get", dataDecoder: simpleLayoutConfigDecoder$1, resultDecoder: optionalSimpleLayoutResult$1 },
        getAll: { name: "getAll", dataDecoder: getAllLayoutsConfigDecoder$1, resultDecoder: allLayoutsSummariesResultDecoder$1 },
        export: { name: "export", dataDecoder: getAllLayoutsConfigDecoder$1, resultDecoder: allLayoutsFullConfigDecoder$1 },
        import: { name: "import", dataDecoder: layoutsImportConfigDecoder$1 },
        remove: { name: "remove", dataDecoder: simpleLayoutConfigDecoder$1 },
        save: { name: "save", dataDecoder: saveLayoutConfigDecoder$1, resultDecoder: simpleLayoutResultDecoder },
        restore: { name: "restore", dataDecoder: restoreLayoutConfigDecoder$1 },
        clientSaveRequest: { name: "clientSaveRequest", dataDecoder: platformSaveRequestConfigDecoder, resultDecoder: saveRequestClientResponseDecoder$1 },
        getGlobalPermissionState: { name: "getGlobalPermissionState", resultDecoder: permissionStateResultDecoder$1 },
        requestGlobalPermission: { name: "requestGlobalPermission", resultDecoder: simpleAvailabilityResultDecoder$1 },
        checkGlobalActivated: { name: "checkGlobalActivated", resultDecoder: simpleAvailabilityResultDecoder$1 }
    };

    let LayoutsController$1 = class LayoutsController {
        constructor() {
            this.defaultLayoutRestoreTimeoutMS = 120000;
            this.registry = lib$3$1();
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("layouts.controller.web");
                this.logger.trace("starting the web layouts controller");
                this.bridge = ioc.bridge;
                this.windowsController = ioc.windowsController;
                this.addOperationsExecutors();
                const api = this.toApi();
                this.logger.trace("no need for platform registration, attaching the layouts property to glue and returning");
                coreGlue.layouts = api;
            });
        }
        handleBridgeMessage(args) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const operationName = layoutsOperationTypesDecoder$1.runWithException(args.operation);
                const operation = operations$6[operationName];
                if (!operation.execute) {
                    return;
                }
                let operationData = args.data;
                if (operation.dataDecoder) {
                    operationData = operation.dataDecoder.runWithException(args.data);
                }
                return yield operation.execute(operationData);
            });
        }
        toApi() {
            const api = {
                get: this.get.bind(this),
                getAll: this.getAll.bind(this),
                export: this.export.bind(this),
                import: this.import.bind(this),
                save: this.save.bind(this),
                restore: this.restore.bind(this),
                remove: this.remove.bind(this),
                onAdded: this.onAdded.bind(this),
                onChanged: this.onChanged.bind(this),
                onRemoved: this.onRemoved.bind(this),
                onSaveRequested: this.subscribeOnSaveRequested.bind(this),
                getMultiScreenPermissionState: this.getGlobalPermissionState.bind(this),
                requestMultiScreenPermission: this.requestGlobalPermission.bind(this),
                getGlobalTypeState: this.checkGlobalActivated.bind(this)
            };
            return Object.freeze(api);
        }
        addOperationsExecutors() {
            operations$6.layoutAdded.execute = this.handleOnAdded.bind(this);
            operations$6.layoutChanged.execute = this.handleOnChanged.bind(this);
            operations$6.layoutRemoved.execute = this.handleOnRemoved.bind(this);
            operations$6.clientSaveRequest.execute = this.handleSaveRequest.bind(this);
        }
        get(name, type) {
            return __awaiter$1(this, void 0, void 0, function* () {
                nonEmptyStringDecoder$1.runWithException(name);
                layoutTypeDecoder$1.runWithException(type);
                const result = yield this.bridge.send("layouts", operations$6.get, { name, type });
                return result.layout;
            });
        }
        getAll(type) {
            return __awaiter$1(this, void 0, void 0, function* () {
                layoutTypeDecoder$1.runWithException(type);
                const result = yield this.bridge.send("layouts", operations$6.getAll, { type });
                return result.summaries;
            });
        }
        export(type) {
            return __awaiter$1(this, void 0, void 0, function* () {
                layoutTypeDecoder$1.runWithException(type);
                const result = yield this.bridge.send("layouts", operations$6.export, { type });
                return result.layouts;
            });
        }
        import(layouts, mode = "replace") {
            return __awaiter$1(this, void 0, void 0, function* () {
                importModeDecoder$1.runWithException(mode);
                if (!Array.isArray(layouts)) {
                    throw new Error("Import must be called with an array of layouts");
                }
                if (layouts.length > 1000) {
                    throw new Error("Cannot import more than 1000 layouts at once in Glue42 Core.");
                }
                const parseResult = layouts.reduce((soFar, layout) => {
                    const decodeResult = glueLayoutDecoder$1.run(layout);
                    if (decodeResult.ok) {
                        soFar.valid.push(layout);
                    }
                    else {
                        this.logger.warn(`A layout with name: ${layout.name} was not imported, because of error: ${JSON.stringify(decodeResult.error)}`);
                    }
                    return soFar;
                }, { valid: [] });
                const layoutsToImport = layouts.filter((layout) => parseResult.valid.some((validLayout) => validLayout.name === layout.name));
                yield this.bridge.send("layouts", operations$6.import, { layouts: layoutsToImport, mode });
            });
        }
        save(layout) {
            return __awaiter$1(this, void 0, void 0, function* () {
                newLayoutOptionsDecoder$1.runWithException(layout);
                const saveResult = yield this.bridge.send("layouts", operations$6.save, { layout });
                return saveResult.layout;
            });
        }
        restore(options) {
            return __awaiter$1(this, void 0, void 0, function* () {
                restoreOptionsDecoder$1.runWithException(options);
                const invocationTimeout = options.timeout ? options.timeout * 2 : this.defaultLayoutRestoreTimeoutMS;
                yield this.bridge.send("layouts", operations$6.restore, { layout: options }, { methodResponseTimeoutMs: invocationTimeout });
            });
        }
        remove(type, name) {
            return __awaiter$1(this, void 0, void 0, function* () {
                layoutTypeDecoder$1.runWithException(type);
                nonEmptyStringDecoder$1.runWithException(name);
                yield this.bridge.send("layouts", operations$6.remove, { type, name });
            });
        }
        handleSaveRequest(config) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const response = {};
                if (this.saveRequestSubscription) {
                    try {
                        const onSaveRequestResponse = this.saveRequestSubscription(config);
                        response.windowContext = onSaveRequestResponse === null || onSaveRequestResponse === void 0 ? void 0 : onSaveRequestResponse.windowContext;
                    }
                    catch (error) {
                        this.logger.warn(`An error was thrown by the onSaveRequested callback, ignoring the callback: ${JSON.stringify(error)}`);
                    }
                }
                return response;
            });
        }
        getGlobalPermissionState() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const requestResult = yield this.bridge.send("layouts", operations$6.getGlobalPermissionState, undefined);
                return requestResult;
            });
        }
        requestGlobalPermission() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const currentState = (yield this.getGlobalPermissionState()).state;
                if (currentState === "denied") {
                    return { permissionGranted: false };
                }
                if (currentState === "granted") {
                    return { permissionGranted: true };
                }
                const myWindow = this.windowsController.my();
                const amIWorkspaceFrame = window.glue42core.isPlatformFrame;
                if (myWindow.name !== "Platform" && !amIWorkspaceFrame) {
                    throw new Error("Cannot request permission for multi-window placement from any app other than the Platform.");
                }
                const requestResult = yield this.bridge.send("layouts", operations$6.requestGlobalPermission, undefined, { methodResponseTimeoutMs: 180000 });
                return { permissionGranted: requestResult.isAvailable };
            });
        }
        checkGlobalActivated() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const requestResult = yield this.bridge.send("layouts", operations$6.checkGlobalActivated, undefined);
                return { activated: requestResult.isAvailable };
            });
        }
        onAdded(callback) {
            this.export("Global").then((layouts) => layouts.forEach((layout) => callback(layout))).catch(() => { });
            this.export("Workspace").then((layouts) => layouts.forEach((layout) => callback(layout))).catch(() => { });
            return this.registry.add(operations$6.layoutAdded.name, callback);
        }
        onChanged(callback) {
            return this.registry.add(operations$6.layoutChanged.name, callback);
        }
        onRemoved(callback) {
            return this.registry.add(operations$6.layoutRemoved.name, callback);
        }
        subscribeOnSaveRequested(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to onSaveRequested, because the provided argument is not a valid callback function.");
            }
            if (this.saveRequestSubscription) {
                throw new Error("Cannot subscribe to onSaveRequested, because this client has already subscribed and only one subscription is supported. Consider unsubscribing from the initial one.");
            }
            this.saveRequestSubscription = callback;
            return () => {
                delete this.saveRequestSubscription;
            };
        }
        handleOnAdded(layout) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.registry.execute(operations$6.layoutAdded.name, layout);
            });
        }
        handleOnChanged(layout) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.registry.execute(operations$6.layoutChanged.name, layout);
            });
        }
        handleOnRemoved(layout) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.registry.execute(operations$6.layoutRemoved.name, layout);
            });
        }
    };

    const operations$5 = {
        raiseNotification: { name: "raiseNotification", dataDecoder: raiseNotificationDecoder$1 },
        requestPermission: { name: "requestPermission", resultDecoder: permissionRequestResultDecoder$1 },
        notificationShow: { name: "notificationShow", dataDecoder: notificationEventPayloadDecoder },
        notificationClick: { name: "notificationClick", dataDecoder: notificationEventPayloadDecoder },
        getPermission: { name: "getPermission", resultDecoder: permissionQueryResultDecoder$1 },
        list: { name: "list", resultDecoder: allNotificationsDataDecoder$1 },
        notificationRaised: { name: "notificationRaised", dataDecoder: simpleNotificationDataDecoder },
        notificationClosed: { name: "notificationClosed", dataDecoder: simpleNotificationSelectDecoder$1 },
        click: { name: "click" },
        clear: { name: "clear" },
        clearAll: { name: "clearAll" }
    };

    var shortidExports$1$1 = {};
    var shortid$3$1 = {
      get exports(){ return shortidExports$1$1; },
      set exports(v){ shortidExports$1$1 = v; },
    };

    var libExports$1$1 = {};
    var lib$2$1 = {
      get exports(){ return libExports$1$1; },
      set exports(v){ libExports$1$1 = v; },
    };

    // Found this seed-based random generator somewhere
    // Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

    var seed$1$1 = 1;

    /**
     * return a random number based on a seed
     * @param seed
     * @returns {number}
     */
    function getNextValue$1$1() {
        seed$1$1 = (seed$1$1 * 9301 + 49297) % 233280;
        return seed$1$1/(233280.0);
    }

    function setSeed$3$1(_seed_) {
        seed$1$1 = _seed_;
    }

    var randomFromSeed$3$1 = {
        nextValue: getNextValue$1$1,
        seed: setSeed$3$1
    };

    var randomFromSeed$2$1 = randomFromSeed$3$1;

    var ORIGINAL$1$1 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
    var alphabet$5$1;
    var previousSeed$1$1;

    var shuffled$1$1;

    function reset$1$1() {
        shuffled$1$1 = false;
    }

    function setCharacters$1$1(_alphabet_) {
        if (!_alphabet_) {
            if (alphabet$5$1 !== ORIGINAL$1$1) {
                alphabet$5$1 = ORIGINAL$1$1;
                reset$1$1();
            }
            return;
        }

        if (_alphabet_ === alphabet$5$1) {
            return;
        }

        if (_alphabet_.length !== ORIGINAL$1$1.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL$1$1.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
        }

        var unique = _alphabet_.split('').filter(function(item, ind, arr){
           return ind !== arr.lastIndexOf(item);
        });

        if (unique.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL$1$1.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
        }

        alphabet$5$1 = _alphabet_;
        reset$1$1();
    }

    function characters$1$1(_alphabet_) {
        setCharacters$1$1(_alphabet_);
        return alphabet$5$1;
    }

    function setSeed$2$1(seed) {
        randomFromSeed$2$1.seed(seed);
        if (previousSeed$1$1 !== seed) {
            reset$1$1();
            previousSeed$1$1 = seed;
        }
    }

    function shuffle$1$1() {
        if (!alphabet$5$1) {
            setCharacters$1$1(ORIGINAL$1$1);
        }

        var sourceArray = alphabet$5$1.split('');
        var targetArray = [];
        var r = randomFromSeed$2$1.nextValue();
        var characterIndex;

        while (sourceArray.length > 0) {
            r = randomFromSeed$2$1.nextValue();
            characterIndex = Math.floor(r * sourceArray.length);
            targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
        }
        return targetArray.join('');
    }

    function getShuffled$1$1() {
        if (shuffled$1$1) {
            return shuffled$1$1;
        }
        shuffled$1$1 = shuffle$1$1();
        return shuffled$1$1;
    }

    /**
     * lookup shuffled letter
     * @param index
     * @returns {string}
     */
    function lookup$1$1(index) {
        var alphabetShuffled = getShuffled$1$1();
        return alphabetShuffled[index];
    }

    function get$1$1 () {
      return alphabet$5$1 || ORIGINAL$1$1;
    }

    var alphabet_1$1$1 = {
        get: get$1$1,
        characters: characters$1$1,
        seed: setSeed$2$1,
        lookup: lookup$1$1,
        shuffled: getShuffled$1$1
    };

    var crypto$1$1 = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

    var randomByte$1$1;

    if (!crypto$1$1 || !crypto$1$1.getRandomValues) {
        randomByte$1$1 = function(size) {
            var bytes = [];
            for (var i = 0; i < size; i++) {
                bytes.push(Math.floor(Math.random() * 256));
            }
            return bytes;
        };
    } else {
        randomByte$1$1 = function(size) {
            return crypto$1$1.getRandomValues(new Uint8Array(size));
        };
    }

    var randomByteBrowser$1$1 = randomByte$1$1;

    // This file replaces `format.js` in bundlers like webpack or Rollup,
    // according to `browser` config in `package.json`.

    var format_browser$1$1 = function (random, alphabet, size) {
      // We can’t use bytes bigger than the alphabet. To make bytes values closer
      // to the alphabet, we apply bitmask on them. We look for the closest
      // `2 ** x - 1` number, which will be bigger than alphabet size. If we have
      // 30 symbols in the alphabet, we will take 31 (00011111).
      // We do not use faster Math.clz32, because it is not available in browsers.
      var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
      // Bitmask is not a perfect solution (in our example it will pass 31 bytes,
      // which is bigger than the alphabet). As a result, we will need more bytes,
      // than ID size, because we will refuse bytes bigger than the alphabet.

      // Every hardware random generator call is costly,
      // because we need to wait for entropy collection. This is why often it will
      // be faster to ask for few extra bytes in advance, to avoid additional calls.

      // Here we calculate how many random bytes should we call in advance.
      // It depends on ID length, mask / alphabet size and magic number 1.6
      // (which was selected according benchmarks).

      // -~f => Math.ceil(f) if n is float number
      // -~i => i + 1 if n is integer number
      var step = -~(1.6 * mask * size / alphabet.length);
      var id = '';

      while (true) {
        var bytes = random(step);
        // Compact alternative for `for (var i = 0; i < step; i++)`
        var i = step;
        while (i--) {
          // If random byte is bigger than alphabet even after bitmask,
          // we refuse it by `|| ''`.
          id += alphabet[bytes[i] & mask] || '';
          // More compact than `id.length + 1 === size`
          if (id.length === +size) return id
        }
      }
    };

    var alphabet$4$1 = alphabet_1$1$1;
    var random$1$1 = randomByteBrowser$1$1;
    var format$1$1 = format_browser$1$1;

    function generate$3$1(number) {
        var loopCounter = 0;
        var done;

        var str = '';

        while (!done) {
            str = str + format$1$1(random$1$1, alphabet$4$1.get(), 1);
            done = number < (Math.pow(16, loopCounter + 1 ) );
            loopCounter++;
        }
        return str;
    }

    var generate_1$1$1 = generate$3$1;

    var generate$2$1 = generate_1$1$1;

    // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
    // This number should be updated every year or so to keep the generated id short.
    // To regenerate `new Date() - 0` and bump the version. Always bump the version!
    var REDUCE_TIME$1$1 = 1567752802062;

    // don't change unless we change the algos or REDUCE_TIME
    // must be an integer and less than 16
    var version$3$1 = 7;

    // Counter is used when shortid is called multiple times in one second.
    var counter$1$1;

    // Remember the last time shortid was called in case counter is needed.
    var previousSeconds$1$1;

    /**
     * Generate unique id
     * Returns string id
     */
    function build$1$1(clusterWorkerId) {
        var str = '';

        var seconds = Math.floor((Date.now() - REDUCE_TIME$1$1) * 0.001);

        if (seconds === previousSeconds$1$1) {
            counter$1$1++;
        } else {
            counter$1$1 = 0;
            previousSeconds$1$1 = seconds;
        }

        str = str + generate$2$1(version$3$1);
        str = str + generate$2$1(clusterWorkerId);
        if (counter$1$1 > 0) {
            str = str + generate$2$1(counter$1$1);
        }
        str = str + generate$2$1(seconds);
        return str;
    }

    var build_1$1$1 = build$1$1;

    var alphabet$3$1 = alphabet_1$1$1;

    function isShortId$1$1(id) {
        if (!id || typeof id !== 'string' || id.length < 6 ) {
            return false;
        }

        var nonAlphabetic = new RegExp('[^' +
          alphabet$3$1.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') +
        ']');
        return !nonAlphabetic.test(id);
    }

    var isValid$1$1 = isShortId$1$1;

    (function (module) {

    	var alphabet = alphabet_1$1$1;
    	var build = build_1$1$1;
    	var isValid = isValid$1$1;

    	// if you are using cluster or multiple servers use this to make each instance
    	// has a unique value for worker
    	// Note: I don't know if this is automatically set when using third
    	// party cluster solutions such as pm2.
    	var clusterWorkerId = 0;

    	/**
    	 * Set the seed.
    	 * Highly recommended if you don't want people to try to figure out your id schema.
    	 * exposed as shortid.seed(int)
    	 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
    	 */
    	function seed(seedValue) {
    	    alphabet.seed(seedValue);
    	    return module.exports;
    	}

    	/**
    	 * Set the cluster worker or machine id
    	 * exposed as shortid.worker(int)
    	 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
    	 * returns shortid module so it can be chained.
    	 */
    	function worker(workerId) {
    	    clusterWorkerId = workerId;
    	    return module.exports;
    	}

    	/**
    	 *
    	 * sets new characters to use in the alphabet
    	 * returns the shuffled alphabet
    	 */
    	function characters(newCharacters) {
    	    if (newCharacters !== undefined) {
    	        alphabet.characters(newCharacters);
    	    }

    	    return alphabet.shuffled();
    	}

    	/**
    	 * Generate unique id
    	 * Returns string id
    	 */
    	function generate() {
    	  return build(clusterWorkerId);
    	}

    	// Export all other functions as properties of the generate function
    	module.exports = generate;
    	module.exports.generate = generate;
    	module.exports.seed = seed;
    	module.exports.worker = worker;
    	module.exports.characters = characters;
    	module.exports.isValid = isValid;
    } (lib$2$1));

    (function (module) {
    	module.exports = libExports$1$1;
    } (shortid$3$1));

    var shortid$2$1 = /*@__PURE__*/getDefaultExportFromCjs$1$1(shortidExports$1$1);

    let NotificationsController$1 = class NotificationsController {
        constructor() {
            this.registry = lib$3$1();
            this.notifications = {};
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("notifications.controller.web");
                this.logger.trace("starting the web notifications controller");
                this.bridge = ioc.bridge;
                this.coreGlue = coreGlue;
                this.notificationsSettings = ioc.config.notifications;
                this.buildNotificationFunc = ioc.buildNotification;
                const api = this.toApi();
                this.addOperationExecutors();
                coreGlue.notifications = api;
                this.logger.trace("notifications are ready");
            });
        }
        handleBridgeMessage(args) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const operationName = notificationsOperationTypesDecoder.runWithException(args.operation);
                const operation = operations$5[operationName];
                if (!operation.execute) {
                    return;
                }
                let operationData = args.data;
                if (operation.dataDecoder) {
                    operationData = operation.dataDecoder.runWithException(args.data);
                }
                return yield operation.execute(operationData);
            });
        }
        toApi() {
            const api = {
                raise: this.raise.bind(this),
                requestPermission: this.requestPermission.bind(this),
                getPermission: this.getPermission.bind(this),
                list: this.list.bind(this),
                onRaised: this.onRaised.bind(this),
                onClosed: this.onClosed.bind(this),
                click: this.click.bind(this),
                clear: this.clear.bind(this),
                clearAll: this.clearAll.bind(this)
            };
            return Object.freeze(api);
        }
        getPermission() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const queryResult = yield this.bridge.send("notifications", operations$5.getPermission, undefined);
                return queryResult.permission;
            });
        }
        requestPermission() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const permissionResult = yield this.bridge.send("notifications", operations$5.requestPermission, undefined);
                return permissionResult.permissionGranted;
            });
        }
        raise(options) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const settings = glue42NotificationOptionsDecoder$1.runWithException(options);
                settings.showToast = typeof settings.showToast === "boolean" ? settings.showToast : true;
                settings.showInPanel = typeof settings.showInPanel === "boolean" ? settings.showInPanel : true;
                const permissionGranted = yield this.requestPermission();
                if (!permissionGranted) {
                    throw new Error("Cannot raise the notification, because the user has declined the permission request");
                }
                const id = shortidExports$1$1.generate();
                yield this.bridge.send("notifications", operations$5.raiseNotification, { settings, id });
                const notification = this.buildNotificationFunc(options, id);
                this.notifications[id] = notification;
                return notification;
            });
        }
        list() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const bridgeResponse = yield this.bridge.send("notifications", operations$5.list, undefined, undefined, { includeOperationCheck: true });
                return bridgeResponse.notifications;
            });
        }
        onRaised(callback) {
            if (typeof callback !== "function") {
                throw new Error("onRaised expects a callback of type function");
            }
            return this.registry.add("notification-raised", callback);
        }
        onClosed(callback) {
            if (typeof callback !== "function") {
                throw new Error("onRaised expects a callback of type function");
            }
            return this.registry.add("notification-closed", callback);
        }
        click(id, action) {
            return __awaiter$1(this, void 0, void 0, function* () {
                nonEmptyStringDecoder$1.runWithException(id);
                if (action) {
                    nonEmptyStringDecoder$1.runWithException(action);
                }
                yield this.bridge.send("notifications", operations$5.click, { id, action }, undefined, { includeOperationCheck: true });
            });
        }
        clear(id) {
            return __awaiter$1(this, void 0, void 0, function* () {
                nonEmptyStringDecoder$1.runWithException(id);
                yield this.bridge.send("notifications", operations$5.clear, { id }, undefined, { includeOperationCheck: true });
            });
        }
        clearAll() {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this.bridge.send("notifications", operations$5.clearAll, undefined, undefined, { includeOperationCheck: true });
            });
        }
        addOperationExecutors() {
            operations$5.notificationShow.execute = this.handleNotificationShow.bind(this);
            operations$5.notificationClick.execute = this.handleNotificationClick.bind(this);
            operations$5.notificationRaised.execute = this.handleNotificationRaised.bind(this);
            operations$5.notificationClosed.execute = this.handleNotificationClosed.bind(this);
        }
        handleNotificationShow(data) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (!data.id) {
                    return;
                }
                const notification = this.notifications[data.id];
                if (notification && notification.onshow) {
                    notification.onshow();
                }
            });
        }
        handleNotificationClick(data) {
            var _a, _b, _c, _d, _e;
            return __awaiter$1(this, void 0, void 0, function* () {
                if (!data.action && ((_a = this.notificationsSettings) === null || _a === void 0 ? void 0 : _a.defaultClick)) {
                    this.notificationsSettings.defaultClick(this.coreGlue, data.definition);
                }
                if (data.action && ((_c = (_b = this.notificationsSettings) === null || _b === void 0 ? void 0 : _b.actionClicks) === null || _c === void 0 ? void 0 : _c.some((actionDef) => actionDef.action === data.action))) {
                    const foundHandler = (_e = (_d = this.notificationsSettings) === null || _d === void 0 ? void 0 : _d.actionClicks) === null || _e === void 0 ? void 0 : _e.find((actionDef) => actionDef.action === data.action);
                    foundHandler.handler(this.coreGlue, data.definition);
                }
                if (!data.id) {
                    return;
                }
                const notification = this.notifications[data.id];
                if (notification && notification.onclick) {
                    notification.onclick();
                    delete this.notifications[data.id];
                }
            });
        }
        handleNotificationRaised(data) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.registry.execute("notification-raised", data.notification);
            });
        }
        handleNotificationClosed(data) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.registry.execute("notification-closed", data);
            });
        }
    };

    const operations$4 = {
        getIntents: { name: "getIntents", resultDecoder: wrappedIntentsDecoder$1 },
        findIntent: { name: "findIntent", dataDecoder: wrappedIntentFilterDecoder$1, resultDecoder: wrappedIntentsDecoder$1 },
        raiseIntent: { name: "raiseIntent", dataDecoder: intentRequestDecoder$1, resultDecoder: intentResultDecoder$1 },
        raise: { name: "raise", dataDecoder: raiseIntentRequestDecoder$1, resultDecoder: intentResultDecoder$1 },
    };

    const GLUE42_FDC3_INTENTS_METHOD_PREFIX = "Tick42.FDC3.Intents.";
    const INTENTS_RESOLVER_INTEROP_PREFIX$1 = "T42.Intents.Resolver.Control.";
    const INTENTS_RESOLVER_APP_NAME = "intentsResolver";
    const DEFAULT_RESOLVER_RESPONSE_TIMEOUT = 60000;
    const ADDITIONAL_BRIDGE_OPERATION_TIMEOUT = 30000;
    const INTENTS_RESOLVER_WIDTH$1 = 400;
    const INTENTS_RESOLVER_HEIGHT$1 = 440;

    let IntentsController$1 = class IntentsController {
        constructor() {
            this.myIntents = new Set();
            this.useIntentsResolverUI = true;
            this.unregisterIntentPromises = [];
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("intents.controller.web");
                this.logger.trace("starting the web intents controller");
                this.bridge = ioc.bridge;
                this.interop = coreGlue.interop;
                this.legacyIntentsController = ioc.legacyIntentsHelper;
                this.checkIfIntentsResolverIsEnabled(ioc.config);
                const api = this.toApi();
                this.logger.trace("no need for platform registration, attaching the intents property to glue and returning");
                coreGlue.intents = api;
            });
        }
        handleBridgeMessage(args) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const operationName = intentsOperationTypesDecoder$1.runWithException(args.operation);
                const operation = operations$4[operationName];
                if (!operation.execute) {
                    return;
                }
                let operationData = args.data;
                if (operation.dataDecoder) {
                    operationData = operation.dataDecoder.runWithException(args.data);
                }
                return yield operation.execute(operationData);
            });
        }
        toApi() {
            const api = {
                raise: this.raise.bind(this),
                all: this.all.bind(this),
                addIntentListener: this.addIntentListener.bind(this),
                register: this.register.bind(this),
                find: this.find.bind(this)
            };
            return api;
        }
        raise(request) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const validatedIntentRequest = raiseRequestDecoder.runWithException(request);
                const intentRequest = typeof validatedIntentRequest === "string"
                    ? { intent: validatedIntentRequest }
                    : validatedIntentRequest;
                yield Promise.all(this.unregisterIntentPromises);
                const requestWithResolverInfo = this.buildIntentRequestWithResolverInfo(intentRequest);
                const isRaiseOperationSupported = yield this.isRaiseOperationSupported();
                if (!isRaiseOperationSupported.supported) {
                    this.logger.warn(`${isRaiseOperationSupported.reason}. Invoking legacy raise method`);
                    return this.legacyIntentsController.raise(requestWithResolverInfo, this.find.bind(this));
                }
                this.logger.trace(`Sending raise request to the platform: ${JSON.stringify(request)} and method response timeout of ${this.intentResolverResponseTimeout}ms`);
                const response = yield this.bridge.send("intents", operations$4.raise, requestWithResolverInfo, { methodResponseTimeoutMs: this.intentResolverResponseTimeout + ADDITIONAL_BRIDGE_OPERATION_TIMEOUT });
                return response;
            });
        }
        buildIntentRequestWithResolverInfo(request) {
            return {
                intentRequest: request,
                resolverConfig: {
                    enabled: this.useIntentsResolverUI,
                    appName: this.intentsResolverAppName,
                    waitResponseTimeout: this.intentResolverResponseTimeout
                }
            };
        }
        isRaiseOperationSupported() {
            return __awaiter$1(this, void 0, void 0, function* () {
                try {
                    const { isSupported } = yield this.bridge.send("intents", systemOperations.operationCheck, { operation: "raise" });
                    return {
                        supported: isSupported,
                        reason: isSupported ? "" : `The platform of this client is outdated and does not support "raise" operation`
                    };
                }
                catch (error) {
                    return {
                        supported: false,
                        reason: `The platform of this client is outdated and does not support "operationCheck" command`
                    };
                }
            });
        }
        all() {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield Promise.all(this.unregisterIntentPromises);
                const result = yield this.bridge.send("intents", operations$4.getIntents, undefined);
                return result.intents;
            });
        }
        addIntentListener(intent, handler) {
            AddIntentListenerDecoder.runWithException(intent);
            if (typeof handler !== "function") {
                throw new Error("Cannot add intent listener, because the provided handler is not a function!");
            }
            let registerPromise;
            const intentName = typeof intent === "string" ? intent : intent.intent;
            const methodName = this.buildInteropMethodName(intentName);
            const alreadyRegistered = this.myIntents.has(intentName);
            if (alreadyRegistered) {
                throw new Error(`Intent listener for intent ${intentName} already registered!`);
            }
            this.myIntents.add(intentName);
            const result = {
                unsubscribe: () => {
                    this.myIntents.delete(intentName);
                    registerPromise
                        .then(() => this.interop.unregister(methodName))
                        .catch((err) => this.logger.trace(`Unregistration of a method with name ${methodName} failed with reason: ${err}`));
                }
            };
            let intentFlag = {};
            if (typeof intent === "object") {
                const rest = __rest$1(intent, ["intent"]);
                intentFlag = rest;
            }
            registerPromise = this.interop.register({ name: methodName, flags: { intent: intentFlag } }, (args) => {
                if (this.myIntents.has(intentName)) {
                    return handler(args);
                }
            });
            registerPromise.catch(err => {
                this.myIntents.delete(intentName);
                this.logger.warn(`Registration of a method with name ${methodName} failed with reason: ${err}`);
            });
            return result;
        }
        register(intent, handler) {
            return __awaiter$1(this, void 0, void 0, function* () {
                AddIntentListenerDecoder.runWithException(intent);
                if (typeof handler !== "function") {
                    throw new Error("Cannot add intent listener, because the provided handler is not a function!");
                }
                yield Promise.all(this.unregisterIntentPromises);
                const intentName = typeof intent === "string" ? intent : intent.intent;
                const methodName = this.buildInteropMethodName(intentName);
                const alreadyRegistered = this.myIntents.has(intentName);
                if (alreadyRegistered) {
                    throw new Error(`Intent listener for intent ${intentName} already registered!`);
                }
                this.myIntents.add(intentName);
                let intentFlag = {};
                if (typeof intent === "object") {
                    const rest = __rest$1(intent, ["intent"]);
                    intentFlag = rest;
                }
                try {
                    yield this.interop.register({ name: methodName, flags: { intent: intentFlag } }, (args) => {
                        if (this.myIntents.has(intentName)) {
                            return handler(args);
                        }
                    });
                }
                catch (err) {
                    this.myIntents.delete(intentName);
                    throw new Error(`Registration of a method with name ${methodName} failed with reason: ${JSON.stringify(err)}`);
                }
                return {
                    unsubscribe: () => this.unsubscribeIntent(intentName)
                };
            });
        }
        find(intentFilter) {
            return __awaiter$1(this, void 0, void 0, function* () {
                let data = undefined;
                if (typeof intentFilter !== "undefined") {
                    const intentFilterObj = findFilterDecoder.runWithException(intentFilter);
                    if (typeof intentFilterObj === "string") {
                        data = {
                            filter: {
                                name: intentFilterObj
                            }
                        };
                    }
                    else if (typeof intentFilterObj === "object") {
                        data = {
                            filter: intentFilterObj
                        };
                    }
                }
                yield Promise.all(this.unregisterIntentPromises);
                const result = yield this.bridge.send("intents", operations$4.findIntent, data);
                return result.intents;
            });
        }
        checkIfIntentsResolverIsEnabled(options) {
            var _a, _b, _c, _d, _e;
            this.useIntentsResolverUI = typeof ((_a = options.intents) === null || _a === void 0 ? void 0 : _a.enableIntentsResolverUI) === "boolean"
                ? options.intents.enableIntentsResolverUI
                : true;
            this.intentsResolverAppName = (_c = (_b = options.intents) === null || _b === void 0 ? void 0 : _b.intentsResolverAppName) !== null && _c !== void 0 ? _c : INTENTS_RESOLVER_APP_NAME;
            this.intentResolverResponseTimeout = (_e = (_d = options.intents) === null || _d === void 0 ? void 0 : _d.methodResponseTimeoutMs) !== null && _e !== void 0 ? _e : DEFAULT_RESOLVER_RESPONSE_TIMEOUT;
        }
        clearUnregistrationPromise(promiseToRemove) {
            this.unregisterIntentPromises = this.unregisterIntentPromises.filter(promise => promise !== promiseToRemove);
        }
        buildInteropMethodName(intentName) {
            return `${GLUE42_FDC3_INTENTS_METHOD_PREFIX}${intentName}`;
        }
        unsubscribeIntent(intentName) {
            this.myIntents.delete(intentName);
            const methodName = this.buildInteropMethodName(intentName);
            const unregisterPromise = this.interop.unregister(methodName);
            this.unregisterIntentPromises.push(unregisterPromise);
            unregisterPromise
                .then(() => {
                this.clearUnregistrationPromise(unregisterPromise);
            })
                .catch((err) => {
                this.logger.error(`Unregistration of a method with name ${methodName} failed with reason: ${err}`);
                this.clearUnregistrationPromise(unregisterPromise);
            });
        }
    };

    const Glue42CoreMessageTypes$1 = {
        platformUnload: { name: "platformUnload" },
        transportSwitchRequest: { name: "transportSwitchRequest" },
        transportSwitchResponse: { name: "transportSwitchResponse" },
        getCurrentTransport: { name: "getCurrentTransport" },
        getCurrentTransportResponse: { name: "getCurrentTransportResponse" },
        checkPreferredLogic: { name: "checkPreferredLogic" },
        checkPreferredConnection: { name: "checkPreferredConnection" },
        checkPreferredLogicResponse: { name: "checkPreferredLogicResponse" },
        checkPreferredConnectionResponse: { name: "checkPreferredConnectionResponse" }
    };
    const webPlatformTransportName$1 = "web-platform";
    const latestFDC3Type = "latest_fdc3_type";

    const operations$3 = {
        addChannel: { name: "addChannel", dataDecoder: channelContextDecoder$1 },
    };

    let ChannelsController$1 = class ChannelsController {
        constructor() {
            this.registry = lib$3$1();
            this.GlueWebChannelsPrefix = "___channel___";
            this.SubsKey = "subs";
            this.ChangedKey = "changed";
            this.replaySubscribe = (callback, channelId) => {
                this.get(channelId)
                    .then((channelContext) => {
                    if (typeof channelContext.data === "object" && Object.keys(channelContext.data).length) {
                        const contextName = this.createContextName(channelContext.name);
                        return this.contexts.subscribe(contextName, (context, _, __, ___, extraData) => {
                            callback(context.data, context, extraData === null || extraData === void 0 ? void 0 : extraData.updaterId);
                        });
                    }
                })
                    .then((un) => {
                    if (un && typeof un === "function") {
                        un();
                    }
                })
                    .catch(err => this.logger.trace(err));
            };
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("channels.controller.web");
                this.logger.trace("starting the web channels controller");
                this.contexts = coreGlue.contexts;
                this.bridge = ioc.bridge;
                this.logger.trace("no need for platform registration, attaching the channels property to glue and returning");
                const api = this.toApi();
                coreGlue.channels = api;
            });
        }
        handleBridgeMessage() {
            return __awaiter$1(this, void 0, void 0, function* () {
            });
        }
        list() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const channelNames = this.getAllChannelNames();
                const channelContexts = yield Promise.all(channelNames.map((channelName) => this.get(channelName)));
                return channelContexts;
            });
        }
        my() {
            return this.current();
        }
        join(name) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const channelNames = this.getAllChannelNames();
                channelNameDecoder(channelNames).runWithException(name);
                yield this.switchToChannel(name);
            });
        }
        onChanged(callback) {
            return this.changed(callback);
        }
        leave() {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this.switchToChannel();
            });
        }
        toApi() {
            const api = {
                subscribe: this.subscribe.bind(this),
                subscribeFor: this.subscribeFor.bind(this),
                publish: this.publish.bind(this),
                all: this.all.bind(this),
                list: this.list.bind(this),
                get: this.get.bind(this),
                join: this.join.bind(this),
                leave: this.leave.bind(this),
                current: this.current.bind(this),
                my: this.my.bind(this),
                changed: this.changed.bind(this),
                onChanged: this.onChanged.bind(this),
                add: this.add.bind(this)
            };
            return Object.freeze(api);
        }
        createContextName(channelName) {
            return `${this.GlueWebChannelsPrefix}${channelName}`;
        }
        getAllChannelNames() {
            const contextNames = this.contexts.all();
            const channelContextNames = contextNames.filter((contextName) => contextName.startsWith(this.GlueWebChannelsPrefix));
            const channelNames = channelContextNames.map((channelContextName) => channelContextName.replace(this.GlueWebChannelsPrefix, ""));
            return channelNames;
        }
        unsubscribe() {
            if (this.unsubscribeFunc) {
                this.unsubscribeFunc();
                this.unsubscribeFunc = undefined;
            }
        }
        switchToChannel(name) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.unsubscribe();
                this.currentChannelName = name;
                if (typeof name !== "undefined") {
                    const contextName = this.createContextName(name);
                    this.unsubscribeFunc = yield this.contexts.subscribe(contextName, (context, _, __, ___, extraData) => {
                        this.registry.execute(this.SubsKey, context.data, context, extraData === null || extraData === void 0 ? void 0 : extraData.updaterId);
                    });
                }
                this.registry.execute(this.ChangedKey, name);
            });
        }
        updateData(name, data) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const contextName = this.createContextName(name);
                const fdc3Type = this.getFDC3Type(data);
                if (this.contexts.setPathSupported) {
                    const pathValues = Object.keys(data).map((key) => {
                        return {
                            path: `data.${key}`,
                            value: data[key]
                        };
                    });
                    if (fdc3Type) {
                        pathValues.push({ path: latestFDC3Type, value: fdc3Type });
                    }
                    yield this.contexts.setPaths(contextName, pathValues);
                }
                else {
                    if (fdc3Type) {
                        data[latestFDC3Type] = fdc3Type;
                    }
                    yield this.contexts.update(contextName, { data });
                }
            });
        }
        getFDC3Type(data) {
            const fdc3PropsArr = Object.keys(data).filter((key) => key.indexOf("fdc3_") === 0);
            if (fdc3PropsArr.length === 0) {
                return;
            }
            if (fdc3PropsArr.length > 1) {
                throw new Error("FDC3 does not support updating of multiple context keys");
            }
            return fdc3PropsArr[0].split("_").slice(1).join("_");
        }
        subscribe(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to channels, because the provided callback is not a function!");
            }
            const currentChannel = this.current();
            if (currentChannel) {
                this.replaySubscribe(callback, currentChannel);
            }
            return this.registry.add(this.SubsKey, callback);
        }
        subscribeFor(name, callback) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const channelNames = this.getAllChannelNames();
                channelNameDecoder(channelNames).runWithException(name);
                if (typeof callback !== "function") {
                    throw new Error(`Cannot subscribe to channel ${name}, because the provided callback is not a function!`);
                }
                const contextName = this.createContextName(name);
                return this.contexts.subscribe(contextName, (context, _, __, ___, extraData) => {
                    callback(context.data, context, extraData === null || extraData === void 0 ? void 0 : extraData.updaterId);
                });
            });
        }
        publish(data, name) {
            if (typeof data !== "object") {
                throw new Error("Cannot publish to channel, because the provided data is not an object!");
            }
            if (typeof name !== "undefined") {
                const channelNames = this.getAllChannelNames();
                channelNameDecoder(channelNames).runWithException(name);
                return this.updateData(name, data);
            }
            if (typeof this.currentChannelName === "undefined") {
                throw new Error("Cannot publish to channel, because not joined to a channel!");
            }
            return this.updateData(this.currentChannelName, data);
        }
        all() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const channelNames = this.getAllChannelNames();
                return channelNames;
            });
        }
        get(name) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const channelNames = this.getAllChannelNames();
                channelNameDecoder(channelNames).runWithException(name);
                const contextName = this.createContextName(name);
                const channelContext = yield this.contexts.get(contextName);
                if (channelContext.latest_fdc3_type) {
                    const rest = __rest$1(channelContext, ["latest_fdc3_type"]);
                    return Object.assign({}, rest);
                }
                return channelContext;
            });
        }
        current() {
            return this.currentChannelName;
        }
        changed(callback) {
            if (typeof callback !== "function") {
                throw new Error("Cannot subscribe to channel changed, because the provided callback is not a function!");
            }
            return this.registry.add(this.ChangedKey, callback);
        }
        add(info) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const channelContext = channelContextDecoder$1.runWithException(info);
                const channelWithSuchNameExists = this.getAllChannelNames().includes(channelContext.name);
                if (channelWithSuchNameExists) {
                    throw new Error("There's an already existing channel with such name");
                }
                yield this.bridge.send("channels", operations$3.addChannel, channelContext);
                return channelContext;
            });
        }
    };

    const operations$2 = {
        getEnvironment: { name: "getEnvironment", resultDecoder: anyDecoder$1 },
        getBase: { name: "getBase", resultDecoder: anyDecoder$1 }
    };

    let SystemController$1 = class SystemController {
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.bridge = ioc.bridge;
                yield this.setEnvironment();
            });
        }
        handleBridgeMessage() {
            return __awaiter$1(this, void 0, void 0, function* () {
            });
        }
        setEnvironment() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const environment = yield this.bridge.send("system", operations$2.getEnvironment, undefined);
                const base = yield this.bridge.send("system", operations$2.getBase, undefined);
                const glue42core = Object.assign({}, window.glue42core, base, { environment });
                window.glue42core = Object.freeze(glue42core);
            });
        }
    };

    let Notification$1 = class Notification {
        constructor(config, id) {
            this.onclick = () => { };
            this.onshow = () => { };
            this.id = id;
            this.badge = config.badge;
            this.body = config.body;
            this.data = config.data;
            this.dir = config.dir;
            this.icon = config.icon;
            this.image = config.image;
            this.lang = config.lang;
            this.renotify = config.renotify;
            this.requireInteraction = config.requireInteraction;
            this.silent = config.silent;
            this.tag = config.tag;
            this.timestamp = config.timestamp;
            this.vibrate = config.vibrate;
            this.title = config.title;
            this.clickInterop = config.clickInterop;
            this.actions = config.actions;
            this.focusPlatformOnDefaultClick = config.focusPlatformOnDefaultClick;
            this.severity = config.severity;
            this.showToast = config.showToast;
            this.showInPanel = config.showInPanel;
        }
    };

    oneOf$1(constant$1("clientHello"));
    const extensionConfigDecoder = object$1({
        widget: object$1({
            inject: boolean$1()
        })
    });

    const operations$1 = {
        clientHello: { name: "clientHello", resultDecoder: extensionConfigDecoder }
    };

    class ExtController {
        constructor() {
            this.channels = [];
            this.contentCommands = {
                widgetVisualizationPermission: { name: "widgetVisualizationPermission", handle: this.handleWidgetVisualizationPermission.bind(this) },
                changeChannel: { name: "changeChannel", handle: this.handleChangeChannel.bind(this) }
            };
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("extension.controller.web");
                this.windowId = ioc.publicWindowId;
                this.logger.trace("starting the extension web controller");
                this.bridge = ioc.bridge;
                this.channelsController = ioc.channelsController;
                this.eventsDispatcher = ioc.eventsDispatcher;
                try {
                    yield this.registerWithPlatform();
                }
                catch (error) {
                    return;
                }
                this.channels = yield this.channelsController.list();
                this.eventsDispatcher.onContentMessage(this.handleContentMessage.bind(this));
                this.channelsController.onChanged((channel) => {
                    this.eventsDispatcher.sendContentMessage({ command: "channelChange", newChannel: channel });
                });
            });
        }
        handleBridgeMessage(_) {
            return __awaiter$1(this, void 0, void 0, function* () {
            });
        }
        handleContentMessage(message) {
            if (!message || typeof message.command !== "string") {
                return;
            }
            const foundHandler = this.contentCommands[message.command];
            if (!foundHandler) {
                return;
            }
            foundHandler.handle(message);
        }
        registerWithPlatform() {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger.trace("registering with the platform");
                this.config = yield this.bridge.send("extension", operations$1.clientHello, { windowId: this.windowId });
                this.logger.trace("the platform responded to the hello message with a valid extension config");
            });
        }
        handleWidgetVisualizationPermission() {
            var _a;
            return __awaiter$1(this, void 0, void 0, function* () {
                if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.widget.inject)) {
                    return this.eventsDispatcher.sendContentMessage({ command: "permissionResponse", allowed: false });
                }
                const currentChannel = this.channels.find((channel) => channel.name === this.channelsController.my());
                this.eventsDispatcher.sendContentMessage({ command: "permissionResponse", allowed: true, channels: this.channels, currentChannel });
            });
        }
        handleChangeChannel(message) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (message.name === "no-channel") {
                    yield this.channelsController.leave();
                    return;
                }
                yield this.channelsController.join(message.name);
            });
        }
    }

    class EventsDispatcher {
        constructor(config) {
            this.config = config;
            this.registry = lib$3$1();
            this.glue42EventName = "Glue42";
            this.events = {
                notifyStarted: { name: "notifyStarted", handle: this.handleNotifyStarted.bind(this) },
                contentInc: { name: "contentInc", handle: this.handleContentInc.bind(this) },
                requestGlue: { name: "requestGlue", handle: this.handleRequestGlue.bind(this) }
            };
        }
        start(glue) {
            this.glue = glue;
            this.wireCustomEventListener();
            this.announceStarted();
        }
        sendContentMessage(message) {
            this.send("contentOut", "glue42core", message);
        }
        onContentMessage(callback) {
            return this.registry.add("content-inc", callback);
        }
        wireCustomEventListener() {
            window.addEventListener(this.glue42EventName, (event) => {
                var _a;
                const data = event.detail;
                const namespace = (_a = data === null || data === void 0 ? void 0 : data.glue42) !== null && _a !== void 0 ? _a : data === null || data === void 0 ? void 0 : data.glue42core;
                if (!namespace) {
                    return;
                }
                const glue42Event = namespace.event;
                const foundHandler = this.events[glue42Event];
                if (!foundHandler) {
                    return;
                }
                foundHandler.handle(namespace.message);
            });
        }
        announceStarted() {
            this.send("start", "glue42");
        }
        handleRequestGlue() {
            if (!this.config.exposeGlue) {
                this.send("requestGlueResponse", "glue42", { error: "Will not give access to the underlying Glue API, because it was explicitly denied upon initialization." });
                return;
            }
            this.send("requestGlueResponse", "glue42", { glue: this.glue });
        }
        handleNotifyStarted() {
            this.announceStarted();
        }
        handleContentInc(message) {
            this.registry.execute("content-inc", message);
        }
        send(eventName, namespace, message) {
            const payload = {};
            payload[namespace] = { event: eventName, message };
            const event = new CustomEvent(this.glue42EventName, { detail: payload });
            window.dispatchEvent(event);
        }
    }

    let PreferredConnectionController$1 = class PreferredConnectionController {
        constructor(coreGlue) {
            this.coreGlue = coreGlue;
            this.transactionTimeout = 15000;
            this.transactionLocks = {};
            this.reconnectCounter = 0;
            this.logger = this.coreGlue.logger.subLogger("web.preferred.connection.controller");
        }
        start(coreConfig) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (coreConfig.isPlatformInternal) {
                    this.logger.trace("This is an internal client to the platform, skipping all client preferred communication logic.");
                    return;
                }
                const isConnectedToPlatform = this.coreGlue.connection.transport.name() === webPlatformTransportName$1;
                if (!isConnectedToPlatform) {
                    throw new Error("Cannot initiate the Glue Web Bridge, because the initial connection was not handled by a Web Platform transport.");
                }
                if (!this.coreGlue.connection.transport.isPreferredActivated) {
                    this.logger.trace("The platform of this client was configured without a preferred connection, skipping the rest of the initialization.");
                    return;
                }
                this.webPlatformTransport = this.coreGlue.connection.transport;
                this.webPlatformMessagesUnsubscribe = this.webPlatformTransport.onMessage(this.handleWebPlatformMessage.bind(this));
                const transportState = yield this.getCurrentPlatformTransportState();
                yield this.checkSwitchTransport(transportState);
            });
        }
        handleWebPlatformMessage(msg) {
            if (typeof msg === "string") {
                return;
            }
            const isConnectedToPlatform = this.coreGlue.connection.transport.name() === webPlatformTransportName$1;
            const type = msg.type;
            const args = msg.args;
            const transactionId = msg.transactionId;
            if (type === Glue42CoreMessageTypes$1.transportSwitchRequest.name) {
                return this.handleTransportSwitchRequest(args, transactionId);
            }
            if (type === Glue42CoreMessageTypes$1.platformUnload.name && !isConnectedToPlatform) {
                return this.handlePlatformUnload();
            }
            if (type === Glue42CoreMessageTypes$1.getCurrentTransportResponse.name) {
                return this.handleGetCurrentTransportResponse(args, transactionId);
            }
            if (type === Glue42CoreMessageTypes$1.checkPreferredLogic.name) {
                return this.handleCheckPreferredLogic(transactionId);
            }
            if (type === Glue42CoreMessageTypes$1.checkPreferredConnection.name) {
                return this.handleCheckPreferredConnection(args, transactionId);
            }
        }
        reEstablishPlatformPort() {
            return __awaiter$1(this, void 0, void 0, function* () {
                try {
                    yield this.webPlatformTransport.connect();
                }
                catch (error) {
                    this.logger.trace(`Error when re-establishing port connection to the platform: ${JSON.stringify(error)}`);
                    --this.reconnectCounter;
                    if (this.reconnectCounter > 0) {
                        return this.reEstablishPlatformPort();
                    }
                    this.logger.warn("This client lost connection to the platform while connected to a preferred GW and was not able to re-connect to the platform.");
                }
                this.logger.trace("The connection to the platform was re-established, closing the connection to the web gateway.");
                this.reconnectCounter = 0;
                this.webPlatformTransport.close();
                const transportState = yield this.getCurrentPlatformTransportState();
                yield this.checkSwitchTransport(transportState);
            });
        }
        checkSwitchTransport(config) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const myCurrentTransportName = this.coreGlue.connection.transport.name();
                if (myCurrentTransportName === config.transportName) {
                    this.logger.trace("A check switch was requested, but the platform transport and my transport are identical, no switch is necessary");
                    return;
                }
                this.logger.trace(`A check switch was requested and a transport switch is necessary, because this client is now on ${myCurrentTransportName}, but it should reconnect to ${JSON.stringify(config)}`);
                const result = yield this.coreGlue.connection.switchTransport(config);
                this.setConnected();
                this.logger.trace(`The transport switch was completed with result: ${JSON.stringify(result)}`);
            });
        }
        getCurrentPlatformTransportState() {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger.trace("Requesting the current transport state of the platform.");
                const transaction = this.setTransaction(Glue42CoreMessageTypes$1.getCurrentTransport.name);
                this.sendPlatformMessage(Glue42CoreMessageTypes$1.getCurrentTransport.name, transaction.id);
                const transportState = yield transaction.lock;
                this.logger.trace(`The platform responded with transport state: ${JSON.stringify(transportState)}`);
                return transportState;
            });
        }
        setTransaction(operation) {
            const transaction = {};
            const transactionId = shortidExports$1$1.generate();
            const transactionLock = new Promise((resolve, reject) => {
                let transactionLive = true;
                transaction.lift = (args) => {
                    transactionLive = false;
                    delete this.transactionLocks[transactionId];
                    resolve(args);
                };
                transaction.fail = (reason) => {
                    transactionLive = false;
                    delete this.transactionLocks[transactionId];
                    reject(reason);
                };
                setTimeout(() => {
                    if (!transactionLive) {
                        return;
                    }
                    transactionLive = false;
                    this.logger.warn(`Transaction for operation: ${operation} timed out.`);
                    delete this.transactionLocks[transactionId];
                    reject(`Transaction for operation: ${operation} timed out.`);
                }, this.transactionTimeout);
            });
            transaction.lock = transactionLock;
            transaction.id = transactionId;
            this.transactionLocks[transactionId] = transaction;
            return transaction;
        }
        sendPlatformMessage(type, transactionId, args) {
            this.logger.trace(`Sending a platform message of type: ${type}, id: ${transactionId} and args: ${JSON.stringify(args)}`);
            this.webPlatformTransport.sendObject({
                glue42core: { type, args, transactionId }
            });
        }
        handleTransportSwitchRequest(args, transactionId) {
            this.logger.trace(`Received a transport switch request with id: ${transactionId} and data: ${JSON.stringify(args)}`);
            this.coreGlue.connection.switchTransport(args.switchSettings)
                .then((result) => {
                this.logger.trace(`The transport switch was completed with result: ${JSON.stringify(result)}`);
                this.setConnected();
                this.sendPlatformMessage(Glue42CoreMessageTypes$1.transportSwitchResponse.name, transactionId, { success: result.success });
            })
                .catch((error) => {
                this.logger.error(error);
                this.sendPlatformMessage(Glue42CoreMessageTypes$1.transportSwitchResponse.name, transactionId, { success: false });
            });
        }
        handlePlatformUnload() {
            this.reconnectCounter = 5;
            this.logger.trace("The platform was unloaded while I am connected to a preferred connection, re-establishing the port connection.");
            this.reEstablishPlatformPort();
        }
        handleGetCurrentTransportResponse(args, transactionId) {
            this.logger.trace(`Got a current transport response from the platform with id: ${transactionId} and data: ${JSON.stringify(args)}`);
            const transportState = args.transportState;
            const transaction = this.transactionLocks[transactionId];
            transaction === null || transaction === void 0 ? void 0 : transaction.lift(transportState);
        }
        handleCheckPreferredLogic(transactionId) {
            setTimeout(() => this.sendPlatformMessage(Glue42CoreMessageTypes$1.checkPreferredLogicResponse.name, transactionId), 0);
        }
        handleCheckPreferredConnection(args, transactionId) {
            const url = args.url;
            this.logger.trace(`Testing the possible connection to: ${url}`);
            this.checkPreferredConnection(url)
                .then((result) => {
                this.logger.trace(`The connection to ${url} is possible`);
                this.sendPlatformMessage(Glue42CoreMessageTypes$1.checkPreferredConnectionResponse.name, transactionId, result);
            })
                .catch((error) => {
                this.logger.trace(`The connection to ${url} is not possible`);
                this.sendPlatformMessage(Glue42CoreMessageTypes$1.checkPreferredConnectionResponse.name, transactionId, { error });
            });
        }
        checkPreferredConnection(url) {
            return new Promise((resolve) => {
                const ws = new WebSocket(url);
                ws.onerror = () => resolve({ live: false });
                ws.onopen = () => {
                    ws.close();
                    resolve({ live: true });
                };
            });
        }
        setConnected() {
            this.webPlatformTransport.manualSetReadyState();
        }
    };

    class LegacyIntentsHelper {
        constructor(logger, bridge, interop, appManagerController, windowsController) {
            this.bridge = bridge;
            this.interop = interop;
            this.appManagerController = appManagerController;
            this.windowsController = windowsController;
            this.intentsResolverResponsePromises = {};
            this.logger = this.configureLogger(logger);
        }
        raise(requestWithResolverInfo, findIntentFn) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function* () {
                const { intentRequest, resolverConfig } = requestWithResolverInfo;
                const intent = (yield findIntentFn(intentRequest.intent)).find(intent => intent.name === intentRequest.intent);
                if (!intent) {
                    throw new Error(`Intent with name ${intentRequest.intent} not found`);
                }
                const { open, reason } = this.checkIfResolverShouldBeOpened(intent, intentRequest, resolverConfig);
                if (!open) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Intent Resolver UI won't be used. Reason: ${reason}`);
                    return this.invokeRaiseIntent(intentRequest);
                }
                const intentResult = yield this.raiseIntentWithResolverApp(requestWithResolverInfo);
                return intentResult;
            });
        }
        configureLogger(loggerInst) {
            return loggerInst.subLogger("intents.legacy.helper.web");
        }
        raiseIntentWithResolverApp(requestWithResolverInfo) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const { intentRequest, resolverConfig } = requestWithResolverInfo;
                this.logger.trace(`Intents Resolver UI with app name ${resolverConfig.appName} will be used`);
                const responseMethodName = yield this.registerResponseMethod();
                this.logger.trace(`Registered interop method ${responseMethodName}`);
                const resolverInstance = yield this.openIntentResolverApplication(requestWithResolverInfo, responseMethodName);
                this.logger.trace(`Intents Resolver Instance with id ${resolverInstance.id} opened`);
                const handler = yield this.handleInstanceResponse(resolverInstance.id);
                const target = handler.type === "app"
                    ? { app: handler.applicationName }
                    : { instance: handler.instanceId };
                this.logger.trace(`Intent handler chosen by the user: ${JSON.stringify(target)}`);
                const intentResult = yield this.invokeRaiseIntent(Object.assign(Object.assign({}, intentRequest), { target }));
                return intentResult;
            });
        }
        handleInstanceResponse(instanceId) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function* () {
                try {
                    const { handler, intent } = yield this.intentsResolverResponsePromises[instanceId].promise;
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Intent handler chosen for intent ${intent}: ${JSON.stringify(handler)}`);
                    this.stopResolverInstance(instanceId);
                    return handler;
                }
                catch (error) {
                    this.stopResolverInstance(instanceId);
                    throw new Error(error);
                }
            });
        }
        invokeRaiseIntent(requestObj) {
            return this.bridge.send("intents", operations$4.raiseIntent, requestObj);
        }
        registerResponseMethod() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const methodName = INTENTS_RESOLVER_INTEROP_PREFIX$1 + shortid$2$1();
                yield this.interop.register(methodName, this.resolverResponseHandler.bind(this));
                return methodName;
            });
        }
        openIntentResolverApplication(requestWithResolverInfo, methodName) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const { intentRequest, resolverConfig } = requestWithResolverInfo;
                const startContext = this.buildStartContext(intentRequest, methodName);
                const startOptions = yield this.buildStartOptions();
                this.logger.trace(`Starting Intents Resolver UI with context: ${JSON.stringify(startContext)} and options: ${startOptions}`);
                const instance = yield this.appManagerController.getApplication(resolverConfig.appName).start(startContext, startOptions);
                this.logger.trace(`Intents Resolver instance with id ${instance.id} opened`);
                this.subscribeOnInstanceStopped(instance);
                this.createResponsePromise(intentRequest.intent, instance.id, methodName, resolverConfig.waitResponseTimeout);
                return instance;
            });
        }
        cleanUpIntentResolverPromise(instanceId) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const intentPromise = this.intentsResolverResponsePromises[instanceId];
                if (!intentPromise) {
                    return;
                }
                const unregisterPromise = this.interop.unregister(intentPromise.methodName);
                unregisterPromise.catch((error) => this.logger.warn(error));
                delete this.intentsResolverResponsePromises[instanceId];
            });
        }
        buildStartContext(requestObj, methodName) {
            return {
                intent: requestObj,
                callerId: this.interop.instance.instance,
                methodName
            };
        }
        buildStartOptions() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const bounds = yield this.getTargetBounds();
                return {
                    top: (bounds.height - INTENTS_RESOLVER_HEIGHT$1) / 2 + bounds.top,
                    left: (bounds.width - INTENTS_RESOLVER_WIDTH$1) / 2 + bounds.left,
                    width: INTENTS_RESOLVER_WIDTH$1,
                    height: INTENTS_RESOLVER_HEIGHT$1
                };
            });
        }
        getTargetBounds() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const bounds = (yield this.tryGetWindowBasedBounds()) || (yield this.tryGetWorkspaceBasedBounds());
                if (bounds) {
                    this.logger.trace(`Opening Intents Resolver UI with bounds: ${JSON.stringify(bounds)}`);
                    return bounds;
                }
                const defaultBounds = {
                    top: window.screen.availTop || 0,
                    left: window.screen.availLeft || 0,
                    width: window.screen.width,
                    height: window.screen.height
                };
                this.logger.trace(`Opening Intents Resolver UI relative to my screen bounds: ${JSON.stringify(defaultBounds)}`);
                return defaultBounds;
            });
        }
        tryGetWindowBasedBounds() {
            return __awaiter$1(this, void 0, void 0, function* () {
                try {
                    const myWindowBounds = yield this.windowsController.my().getBounds();
                    this.logger.trace(`Opening the resolver UI relative to my window bounds: ${JSON.stringify(myWindowBounds)}`);
                    return myWindowBounds;
                }
                catch (error) {
                    this.logger.trace(`Failure to get my window bounds: ${JSON.stringify(error)}`);
                }
            });
        }
        tryGetWorkspaceBasedBounds() {
            return __awaiter$1(this, void 0, void 0, function* () {
                try {
                    yield this.bridge.send("workspaces", systemOperations.operationCheck, { operation: "getWorkspaceWindowFrameBounds" });
                    const bridgeResponse = yield this.bridge.send("workspaces", systemOperations.getWorkspaceWindowFrameBounds, { itemId: this.windowsController.my().id });
                    const myWorkspaceBounds = bridgeResponse.bounds;
                    this.logger.trace(`Opening the resolver UI relative to my workspace frame window bounds: ${JSON.stringify(myWorkspaceBounds)}`);
                    return myWorkspaceBounds;
                }
                catch (error) {
                    this.logger.trace(`Failure to get my workspace frame window bounds: ${JSON.stringify(error)}`);
                }
            });
        }
        subscribeOnInstanceStopped(instance) {
            const { application } = instance;
            const unsub = application.onInstanceStopped((inst) => {
                if (inst.id !== instance.id) {
                    return;
                }
                const intentPromise = this.intentsResolverResponsePromises[inst.id];
                if (!intentPromise) {
                    return unsub();
                }
                intentPromise.reject(`Cannot resolve raised intent "${intentPromise.intent}" - User closed ${application.name} app without choosing an intent handler`);
                this.cleanUpIntentResolverPromise(inst.id);
                unsub();
            });
        }
        createResponsePromise(intent, instanceId, methodName, timeout) {
            let resolve = () => { };
            let reject = () => { };
            const promise = PromisePlus$1$1((res, rej) => {
                resolve = res;
                reject = rej;
            }, timeout, `Timeout of ${timeout}ms hit waiting for the user to choose a handler for intent ${intent}`);
            this.intentsResolverResponsePromises[instanceId] = { intent, resolve, reject, promise, methodName };
        }
        resolverResponseHandler(args, callerId) {
            const response = intentResolverResponseDecoder$1.run(args);
            const instanceId = callerId.instance;
            if (response.ok) {
                this.logger.trace(`Intent Resolver instance with id ${instanceId} send a valid response: ${JSON.stringify(response.result)}`);
                return this.intentsResolverResponsePromises[instanceId].resolve(response.result);
            }
            this.logger.trace(`Intent Resolver instance with id ${instanceId} sent an invalid response. Error: ${JSON.stringify(response.error)}`);
            this.intentsResolverResponsePromises[instanceId].reject(response.error.message);
            this.stopResolverInstance(instanceId);
        }
        stopResolverInstance(instanceId) {
            const searchedInstance = this.appManagerController.getInstances().find((inst) => inst.id === instanceId);
            if (!searchedInstance) {
                return;
            }
            searchedInstance.stop().catch(err => this.logger.error(err));
        }
        checkIfIntentHasMoreThanOneHandler(intent, request) {
            if (typeof request.target === "object") {
                return false;
            }
            return request.handlers ? request.handlers.length > 1 : intent.handlers.length > 1;
        }
        checkIfResolverShouldBeOpened(intent, intentRequest, resolverConfig) {
            if (!resolverConfig.enabled) {
                return { open: false, reason: `Intent Resolver is disabled. Raising intent to first found handler` };
            }
            const intentsResolverApp = this.appManagerController.getApplication(resolverConfig.appName);
            if (!intentsResolverApp) {
                return { open: false, reason: `Application with name ${resolverConfig.appName} not found` };
            }
            const hasMoreThanOneHandler = this.checkIfIntentHasMoreThanOneHandler(intent, intentRequest);
            if (!hasMoreThanOneHandler) {
                return { open: false, reason: `Raised intent has only one handler` };
            }
            return { open: true };
        }
    }

    const operations = {
        getCurrent: { name: "getCurrent", resultDecoder: simpleThemeResponseDecoder },
        list: { name: "list", resultDecoder: allThemesResponseDecoder },
        select: { name: "select", dataDecoder: selectThemeConfigDecoder }
    };

    class ThemesController {
        constructor() {
            this.registry = lib$3$1();
            this.activeThemeSubs = 0;
        }
        start(coreGlue, ioc) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.logger = coreGlue.logger.subLogger("themes.controller.web");
                this.logger.trace("starting the web themes controller");
                this.bridge = ioc.bridge;
                const api = this.toApi();
                coreGlue.themes = api;
                this.logger.trace("themes are ready");
            });
        }
        handleBridgeMessage() {
            return __awaiter$1(this, void 0, void 0, function* () {
            });
        }
        toApi() {
            const api = {
                getCurrent: this.getCurrent.bind(this),
                list: this.list.bind(this),
                select: this.select.bind(this),
                onChanged: this.onChanged.bind(this)
            };
            return Object.freeze(api);
        }
        getCurrent() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const bridgeResponse = yield this.bridge.send("themes", operations.getCurrent, undefined, undefined, { includeOperationCheck: true });
                return bridgeResponse.theme;
            });
        }
        list() {
            return __awaiter$1(this, void 0, void 0, function* () {
                const bridgeResponse = yield this.bridge.send("themes", operations.list, undefined, undefined, { includeOperationCheck: true });
                return bridgeResponse.themes;
            });
        }
        select(name) {
            return __awaiter$1(this, void 0, void 0, function* () {
                nonEmptyStringDecoder$1.runWithException(name);
                yield this.bridge.send("themes", operations.select, { name }, undefined, { includeOperationCheck: true });
            });
        }
        onChanged(callback) {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (typeof callback !== "function") {
                    throw new Error("onChanged requires a callback of type function");
                }
                const subReady = this.themesSubscription ?
                    Promise.resolve() :
                    this.configureThemeSubscription();
                yield subReady;
                ++this.activeThemeSubs;
                const unsubFunc = this.registry.add("on-theme-change", callback);
                return () => this.themeUnsub(unsubFunc);
            });
        }
        configureThemeSubscription() {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.themesSubscription) {
                    return;
                }
                this.themesSubscription = yield this.bridge.createNotificationsSteam();
                this.themesSubscription.onData((data) => {
                    const eventData = data.data;
                    const validation = simpleThemeResponseDecoder.run(eventData);
                    if (!validation.ok) {
                        this.logger.warn(`Received invalid theme data on the theme event stream: ${JSON.stringify(validation.error)}`);
                        return;
                    }
                    const themeChanged = validation.result;
                    this.registry.execute("on-theme-change", themeChanged.theme);
                });
                this.themesSubscription.onClosed(() => {
                    this.logger.warn("The Themes interop stream was closed, no theme changes notifications will be received");
                    this.registry.clear();
                    this.activeThemeSubs = 0;
                    delete this.themesSubscription;
                });
            });
        }
        themeUnsub(registryUnsub) {
            var _a;
            registryUnsub();
            --this.activeThemeSubs;
            if (this.activeThemeSubs) {
                return;
            }
            (_a = this.themesSubscription) === null || _a === void 0 ? void 0 : _a.close();
            delete this.themesSubscription;
        }
    }

    let IoC$1 = class IoC {
        constructor() {
            this.controllers = {
                windows: this.windowsController,
                appManager: this.appManagerController,
                layouts: this.layoutsController,
                notifications: this.notificationsController,
                intents: this.intentsController,
                channels: this.channelsController,
                system: this.systemController,
                extension: this.extensionController,
                themes: this.themesController
            };
        }
        get communicationId() {
            return this._communicationId;
        }
        get publicWindowId() {
            if (!this._publicWindowId) {
                throw new Error("Accessing undefined public window id.");
            }
            return this._publicWindowId;
        }
        get actualWindowId() {
            return this._actualWindowId;
        }
        get windowsController() {
            if (!this._windowsControllerInstance) {
                this._windowsControllerInstance = new WindowsController$1();
            }
            return this._windowsControllerInstance;
        }
        get appManagerController() {
            if (!this._appManagerControllerInstance) {
                this._appManagerControllerInstance = new AppManagerController();
            }
            return this._appManagerControllerInstance;
        }
        get layoutsController() {
            if (!this._layoutsControllerInstance) {
                this._layoutsControllerInstance = new LayoutsController$1();
            }
            return this._layoutsControllerInstance;
        }
        get themesController() {
            if (!this._themesControllerInstance) {
                this._themesControllerInstance = new ThemesController();
            }
            return this._themesControllerInstance;
        }
        get notificationsController() {
            if (!this._notificationsControllerInstance) {
                this._notificationsControllerInstance = new NotificationsController$1();
            }
            return this._notificationsControllerInstance;
        }
        get intentsController() {
            if (!this._intentsControllerInstance) {
                this._intentsControllerInstance = new IntentsController$1();
            }
            return this._intentsControllerInstance;
        }
        get legacyIntentsHelper() {
            if (!this._legacyIntentsHelperInstance) {
                this._legacyIntentsHelperInstance = new LegacyIntentsHelper(this._coreGlue.logger, this.bridge, this._coreGlue.interop, this.appManagerController, this.windowsController);
            }
            return this._legacyIntentsHelperInstance;
        }
        get systemController() {
            if (!this._systemControllerInstance) {
                this._systemControllerInstance = new SystemController$1();
            }
            return this._systemControllerInstance;
        }
        get channelsController() {
            if (!this._channelsControllerInstance) {
                this._channelsControllerInstance = new ChannelsController$1();
            }
            return this._channelsControllerInstance;
        }
        get extensionController() {
            if (!this._extensionController) {
                this._extensionController = new ExtController();
            }
            return this._extensionController;
        }
        get eventsDispatcher() {
            if (!this._eventsDispatcher) {
                this._eventsDispatcher = new EventsDispatcher(this.config);
            }
            return this._eventsDispatcher;
        }
        get bridge() {
            if (!this._bridgeInstance) {
                this._bridgeInstance = new GlueBridge(this._coreGlue, this.communicationId);
            }
            return this._bridgeInstance;
        }
        get preferredConnectionController() {
            if (!this._preferredConnectionController) {
                this._preferredConnectionController = new PreferredConnectionController$1(this._coreGlue);
            }
            return this._preferredConnectionController;
        }
        get config() {
            return this._webConfig;
        }
        defineGlue(coreGlue) {
            this._coreGlue = coreGlue;
            this._publicWindowId = coreGlue.connection.transport.publicWindowId;
            this._actualWindowId = coreGlue.interop.instance.windowId;
            this._communicationId = coreGlue.connection.transport.communicationId || window.glue42core.communicationId;
        }
        defineConfig(config) {
            this._webConfig = config;
        }
        buildWebWindow(id, name) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const model = new WebWindowModel(id, name, this.bridge);
                const api = yield model.toApi();
                return { id, model, api };
            });
        }
        buildNotification(config, id) {
            return new Notification$1(config, id);
        }
        buildApplication(app, applicationInstances) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const application = (new ApplicationModel(app, [], this.appManagerController)).toApi();
                const instances = applicationInstances.map((instanceData) => this.buildInstance(instanceData, application));
                application.instances.push(...instances);
                return application;
            });
        }
        buildInstance(instanceData, app) {
            return (new InstanceModel(instanceData, this.bridge, app)).toApi();
        }
    };

    var version$2$1 = "2.17.1";

    const createFactoryFunction = (coreFactoryFunction) => {
        return (userConfig) => __awaiter$1(void 0, void 0, void 0, function* () {
            if (window.glue42gd) {
                return enterprise(userConfig);
            }
            const ioc = new IoC$1();
            const config = parseConfig(userConfig);
            checkSingleton();
            const glue = yield PromiseWrap$1(() => coreFactoryFunction(config, { version: version$2$1 }), 30000, "Glue Web initialization timed out, because core didn't resolve");
            const logger = glue.logger.subLogger("web.main.controller");
            ioc.defineGlue(glue);
            yield ioc.preferredConnectionController.start(config);
            yield ioc.bridge.start(ioc.controllers);
            ioc.defineConfig(config);
            logger.trace("the bridge has been started, initializing all controllers");
            yield Promise.all(Object.values(ioc.controllers).map((controller) => controller.start(glue, ioc)));
            logger.trace("all controllers reported started, starting all additional libraries");
            yield Promise.all(config.libraries.map((lib) => lib(glue, config)));
            logger.trace("all libraries were started");
            ioc.eventsDispatcher.start(glue);
            logger.trace("start event dispatched, glue is ready, returning it");
            return glue;
        });
    };

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$2 = function() {
        __assign$2 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };

    function __awaiter$2(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArray$1(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var MetricTypes$1 = {
        STRING: 1,
        NUMBER: 2,
        TIMESTAMP: 3,
        OBJECT: 4
    };

    function getMetricTypeByValue$1(metric) {
        if (metric.type === MetricTypes$1.TIMESTAMP) {
            return "timestamp";
        }
        else if (metric.type === MetricTypes$1.NUMBER) {
            return "number";
        }
        else if (metric.type === MetricTypes$1.STRING) {
            return "string";
        }
        else if (metric.type === MetricTypes$1.OBJECT) {
            return "object";
        }
        return "unknown";
    }
    function getTypeByValue$1(value) {
        if (value.constructor === Date) {
            return "timestamp";
        }
        else if (typeof value === "number") {
            return "number";
        }
        else if (typeof value === "string") {
            return "string";
        }
        else if (typeof value === "object") {
            return "object";
        }
        else {
            return "string";
        }
    }
    function serializeMetric$1(metric) {
        var serializedMetrics = {};
        var type = getMetricTypeByValue$1(metric);
        if (type === "object") {
            var values = Object.keys(metric.value).reduce(function (memo, key) {
                var innerType = getTypeByValue$1(metric.value[key]);
                if (innerType === "object") {
                    var composite = defineNestedComposite$1(metric.value[key]);
                    memo[key] = {
                        type: "object",
                        description: "",
                        context: {},
                        composite: composite,
                    };
                }
                else {
                    memo[key] = {
                        type: innerType,
                        description: "",
                        context: {},
                    };
                }
                return memo;
            }, {});
            serializedMetrics.composite = values;
        }
        serializedMetrics.name = normalizeMetricName$1(metric.path.join("/") + "/" + metric.name);
        serializedMetrics.type = type;
        serializedMetrics.description = metric.description;
        serializedMetrics.context = {};
        return serializedMetrics;
    }
    function defineNestedComposite$1(values) {
        return Object.keys(values).reduce(function (memo, key) {
            var type = getTypeByValue$1(values[key]);
            if (type === "object") {
                memo[key] = {
                    type: "object",
                    description: "",
                    context: {},
                    composite: defineNestedComposite$1(values[key]),
                };
            }
            else {
                memo[key] = {
                    type: type,
                    description: "",
                    context: {},
                };
            }
            return memo;
        }, {});
    }
    function normalizeMetricName$1(name) {
        if (typeof name !== "undefined" && name.length > 0 && name[0] !== "/") {
            return "/" + name;
        }
        else {
            return name;
        }
    }
    function getMetricValueByType$1(metric) {
        var type = getMetricTypeByValue$1(metric);
        if (type === "timestamp") {
            return Date.now();
        }
        else {
            return publishNestedComposite$1(metric.value);
        }
    }
    function publishNestedComposite$1(values) {
        if (typeof values !== "object") {
            return values;
        }
        return Object.keys(values).reduce(function (memo, key) {
            var value = values[key];
            if (typeof value === "object" && value.constructor !== Date) {
                memo[key] = publishNestedComposite$1(value);
            }
            else if (value.constructor === Date) {
                memo[key] = new Date(value).getTime();
            }
            else if (value.constructor === Boolean) {
                memo[key] = value.toString();
            }
            else {
                memo[key] = value;
            }
            return memo;
        }, {});
    }
    function flatten$1(arr) {
        return arr.reduce(function (flat, toFlatten) {
            return flat.concat(Array.isArray(toFlatten) ? flatten$1(toFlatten) : toFlatten);
        }, []);
    }
    function getHighestState$1(arr) {
        return arr.sort(function (a, b) {
            if (!a.state) {
                return 1;
            }
            if (!b.state) {
                return -1;
            }
            return b.state - a.state;
        })[0];
    }
    function aggregateDescription$1(arr) {
        var msg = "";
        arr.forEach(function (m, idx, a) {
            var path = m.path.join(".");
            if (idx === a.length - 1) {
                msg += path + "." + m.name + ": " + m.description;
            }
            else {
                msg += path + "." + m.name + ": " + m.description + ",";
            }
        });
        if (msg.length > 100) {
            return msg.slice(0, 100) + "...";
        }
        else {
            return msg;
        }
    }
    function composeMsgForRootStateMetric$1(system) {
        var aggregatedState = system.root.getAggregateState();
        var merged = flatten$1(aggregatedState);
        var highestState = getHighestState$1(merged);
        var aggregateDesc = aggregateDescription$1(merged);
        return {
            description: aggregateDesc,
            value: highestState.state,
        };
    }

    function gw3$1 (connection, config) {
        var _this = this;
        if (!connection || typeof connection !== "object") {
            throw new Error("Connection is required parameter");
        }
        var joinPromise;
        var session;
        var init = function (repo) {
            var resolveReadyPromise;
            joinPromise = new Promise(function (resolve) {
                resolveReadyPromise = resolve;
            });
            session = connection.domain("metrics");
            session.onJoined(function (reconnect) {
                if (!reconnect && resolveReadyPromise) {
                    resolveReadyPromise();
                    resolveReadyPromise = undefined;
                }
                var rootStateMetric = {
                    name: "/State",
                    type: "object",
                    composite: {
                        Description: {
                            type: "string",
                            description: "",
                        },
                        Value: {
                            type: "number",
                            description: "",
                        },
                    },
                    description: "System state",
                    context: {},
                };
                var defineRootMetricsMsg = {
                    type: "define",
                    metrics: [rootStateMetric],
                };
                session.send(defineRootMetricsMsg);
                if (reconnect) {
                    replayRepo(repo);
                }
            });
            session.join({
                system: config.system,
                service: config.service,
                instance: config.instance
            });
        };
        var replayRepo = function (repo) {
            replaySystem(repo.root);
        };
        var replaySystem = function (system) {
            createSystem(system);
            system.metrics.forEach(function (m) {
                createMetric(m);
            });
            system.subSystems.forEach(function (ss) {
                replaySystem(ss);
            });
        };
        var createSystem = function (system) { return __awaiter$2(_this, void 0, void 0, function () {
            var metric, createMetricsMsg;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (system.parent === undefined) {
                            return [2];
                        }
                        return [4, joinPromise];
                    case 1:
                        _a.sent();
                        metric = {
                            name: normalizeMetricName$1(system.path.join("/") + "/" + system.name + "/State"),
                            type: "object",
                            composite: {
                                Description: {
                                    type: "string",
                                    description: "",
                                },
                                Value: {
                                    type: "number",
                                    description: "",
                                },
                            },
                            description: "System state",
                            context: {},
                        };
                        createMetricsMsg = {
                            type: "define",
                            metrics: [metric],
                        };
                        session.send(createMetricsMsg);
                        return [2];
                }
            });
        }); };
        var updateSystem = function (system, state) { return __awaiter$2(_this, void 0, void 0, function () {
            var shadowedUpdateMetric, stateObj, rootMetric;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, joinPromise];
                    case 1:
                        _a.sent();
                        shadowedUpdateMetric = {
                            type: "publish",
                            values: [{
                                    name: normalizeMetricName$1(system.path.join("/") + "/" + system.name + "/State"),
                                    value: {
                                        Description: state.description,
                                        Value: state.state,
                                    },
                                    timestamp: Date.now(),
                                }],
                        };
                        session.send(shadowedUpdateMetric);
                        stateObj = composeMsgForRootStateMetric$1(system);
                        rootMetric = {
                            type: "publish",
                            peer_id: connection.peerId,
                            values: [{
                                    name: "/State",
                                    value: {
                                        Description: stateObj.description,
                                        Value: stateObj.value,
                                    },
                                    timestamp: Date.now(),
                                }],
                        };
                        session.send(rootMetric);
                        return [2];
                }
            });
        }); };
        var createMetric = function (metric) { return __awaiter$2(_this, void 0, void 0, function () {
            var metricClone, m, createMetricsMsg;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metricClone = cloneMetric(metric);
                        return [4, joinPromise];
                    case 1:
                        _a.sent();
                        m = serializeMetric$1(metricClone);
                        createMetricsMsg = {
                            type: "define",
                            metrics: [m],
                        };
                        session.send(createMetricsMsg);
                        if (typeof metricClone.value !== "undefined") {
                            updateMetricCore(metricClone);
                        }
                        return [2];
                }
            });
        }); };
        var updateMetric = function (metric) { return __awaiter$2(_this, void 0, void 0, function () {
            var metricClone;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metricClone = cloneMetric(metric);
                        return [4, joinPromise];
                    case 1:
                        _a.sent();
                        updateMetricCore(metricClone);
                        return [2];
                }
            });
        }); };
        var updateMetricCore = function (metric) {
            if (canUpdate()) {
                var value = getMetricValueByType$1(metric);
                var publishMetricsMsg = {
                    type: "publish",
                    values: [{
                            name: normalizeMetricName$1(metric.path.join("/") + "/" + metric.name),
                            value: value,
                            timestamp: Date.now(),
                        }],
                };
                return session.sendFireAndForget(publishMetricsMsg);
            }
            return Promise.resolve();
        };
        var cloneMetric = function (metric) {
            var metricClone = __assign$2({}, metric);
            if (typeof metric.value === "object" && metric.value !== null) {
                metricClone.value = __assign$2({}, metric.value);
            }
            return metricClone;
        };
        var canUpdate = function () {
            var _a;
            try {
                var func = (_a = config.canUpdateMetric) !== null && _a !== void 0 ? _a : (function () { return true; });
                return func();
            }
            catch (_b) {
                return true;
            }
        };
        return {
            init: init,
            createSystem: createSystem,
            updateSystem: updateSystem,
            createMetric: createMetric,
            updateMetric: updateMetric,
        };
    }

    var Helpers$1 = {
        validate: function (definition, parent, transport) {
            if (definition === null || typeof definition !== "object") {
                throw new Error("Missing definition");
            }
            if (parent === null || typeof parent !== "object") {
                throw new Error("Missing parent");
            }
            if (transport === null || typeof transport !== "object") {
                throw new Error("Missing transport");
            }
        },
    };

    var BaseMetric$1 = (function () {
        function BaseMetric(definition, system, transport, value, type) {
            this.definition = definition;
            this.system = system;
            this.transport = transport;
            this.value = value;
            this.type = type;
            this.path = [];
            Helpers$1.validate(definition, system, transport);
            this.path = system.path.slice(0);
            this.path.push(system.name);
            this.name = definition.name;
            this.description = definition.description;
            transport.createMetric(this);
        }
        Object.defineProperty(BaseMetric.prototype, "repo", {
            get: function () {
                var _a;
                return (_a = this.system) === null || _a === void 0 ? void 0 : _a.repo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseMetric.prototype, "id", {
            get: function () { return "".concat(this.system.path, "/").concat(name); },
            enumerable: false,
            configurable: true
        });
        BaseMetric.prototype.update = function (newValue) {
            this.value = newValue;
            return this.transport.updateMetric(this);
        };
        return BaseMetric;
    }());

    var NumberMetric$1 = (function (_super) {
        __extends$1(NumberMetric, _super);
        function NumberMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes$1.NUMBER) || this;
        }
        NumberMetric.prototype.incrementBy = function (num) {
            this.update(this.value + num);
        };
        NumberMetric.prototype.increment = function () {
            this.incrementBy(1);
        };
        NumberMetric.prototype.decrement = function () {
            this.incrementBy(-1);
        };
        NumberMetric.prototype.decrementBy = function (num) {
            this.incrementBy(num * -1);
        };
        return NumberMetric;
    }(BaseMetric$1));

    var ObjectMetric$1 = (function (_super) {
        __extends$1(ObjectMetric, _super);
        function ObjectMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes$1.OBJECT) || this;
        }
        ObjectMetric.prototype.update = function (newValue) {
            this.mergeValues(newValue);
            return this.transport.updateMetric(this);
        };
        ObjectMetric.prototype.mergeValues = function (values) {
            var _this = this;
            return Object.keys(this.value).forEach(function (k) {
                if (typeof values[k] !== "undefined") {
                    _this.value[k] = values[k];
                }
            });
        };
        return ObjectMetric;
    }(BaseMetric$1));

    var StringMetric$1 = (function (_super) {
        __extends$1(StringMetric, _super);
        function StringMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes$1.STRING) || this;
        }
        return StringMetric;
    }(BaseMetric$1));

    var TimestampMetric$1 = (function (_super) {
        __extends$1(TimestampMetric, _super);
        function TimestampMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes$1.TIMESTAMP) || this;
        }
        TimestampMetric.prototype.now = function () {
            this.update(new Date());
        };
        return TimestampMetric;
    }(BaseMetric$1));

    function system$1(name, repo, protocol, parent, description) {
        if (!repo) {
            throw new Error("Repository is required");
        }
        if (!protocol) {
            throw new Error("Transport is required");
        }
        var _transport = protocol;
        var _name = name;
        var _description = description || "";
        var _repo = repo;
        var _parent = parent;
        var _path = _buildPath(parent);
        var _state = {};
        var id = _arrayToString(_path, "/") + name;
        var root = repo.root;
        var _subSystems = [];
        var _metrics = [];
        function subSystem(nameSystem, descriptionSystem) {
            if (!nameSystem || nameSystem.length === 0) {
                throw new Error("name is required");
            }
            var match = _subSystems.filter(function (s) { return s.name === nameSystem; });
            if (match.length > 0) {
                return match[0];
            }
            var _system = system$1(nameSystem, _repo, _transport, me, descriptionSystem);
            _subSystems.push(_system);
            return _system;
        }
        function setState(state, stateDescription) {
            _state = { state: state, description: stateDescription };
            _transport.updateSystem(me, _state);
        }
        function stringMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes$1.STRING, value, function (metricDef) { return new StringMetric$1(metricDef, me, _transport, value); });
        }
        function numberMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes$1.NUMBER, value, function (metricDef) { return new NumberMetric$1(metricDef, me, _transport, value); });
        }
        function objectMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes$1.OBJECT, value, function (metricDef) { return new ObjectMetric$1(metricDef, me, _transport, value); });
        }
        function timestampMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes$1.TIMESTAMP, value, function (metricDef) { return new TimestampMetric$1(metricDef, me, _transport, value); });
        }
        function _getOrCreateMetric(metricObject, expectedType, value, createMetric) {
            var metricDef = { name: "" };
            if (typeof metricObject === "string") {
                metricDef = { name: metricObject };
            }
            else {
                metricDef = metricObject;
            }
            var matching = _metrics.filter(function (shadowedMetric) { return shadowedMetric.name === metricDef.name; });
            if (matching.length > 0) {
                var existing = matching[0];
                if (existing.type !== expectedType) {
                    throw new Error("A metric named ".concat(metricDef.name, " is already defined with different type."));
                }
                if (typeof value !== "undefined") {
                    existing
                        .update(value)
                        .catch(function () { });
                }
                return existing;
            }
            var metric = createMetric(metricDef);
            _metrics.push(metric);
            return metric;
        }
        function _buildPath(shadowedSystem) {
            if (!shadowedSystem || !shadowedSystem.parent) {
                return [];
            }
            var path = _buildPath(shadowedSystem.parent);
            path.push(shadowedSystem.name);
            return path;
        }
        function _arrayToString(path, separator) {
            return ((path && path.length > 0) ? path.join(separator) : "");
        }
        function getAggregateState() {
            var aggState = [];
            if (Object.keys(_state).length > 0) {
                aggState.push({
                    name: _name,
                    path: _path,
                    state: _state.state,
                    description: _state.description,
                });
            }
            _subSystems.forEach(function (shadowedSubSystem) {
                var result = shadowedSubSystem.getAggregateState();
                if (result.length > 0) {
                    aggState.push.apply(aggState, result);
                }
            });
            return aggState;
        }
        var me = {
            get name() {
                return _name;
            },
            get description() {
                return _description;
            },
            get repo() {
                return _repo;
            },
            get parent() {
                return _parent;
            },
            path: _path,
            id: id,
            root: root,
            get subSystems() {
                return _subSystems;
            },
            get metrics() {
                return _metrics;
            },
            subSystem: subSystem,
            getState: function () {
                return _state;
            },
            setState: setState,
            stringMetric: stringMetric,
            timestampMetric: timestampMetric,
            objectMetric: objectMetric,
            numberMetric: numberMetric,
            getAggregateState: getAggregateState,
        };
        _transport.createSystem(me);
        return me;
    }

    var Repository$1 = (function () {
        function Repository(options, protocol) {
            protocol.init(this);
            this.root = system$1("", this, protocol);
            this.addSystemMetrics(this.root, options.clickStream || options.clickStream === undefined);
        }
        Repository.prototype.addSystemMetrics = function (rootSystem, useClickStream) {
            if (typeof navigator !== "undefined") {
                rootSystem.stringMetric("UserAgent", navigator.userAgent);
            }
            if (useClickStream && typeof document !== "undefined") {
                var clickStream_1 = rootSystem.subSystem("ClickStream");
                var documentClickHandler = function (e) {
                    var _a;
                    if (!e.target) {
                        return;
                    }
                    var target = e.target;
                    var className = target ? (_a = target.getAttribute("class")) !== null && _a !== void 0 ? _a : "" : "";
                    clickStream_1.objectMetric("LastBrowserEvent", {
                        type: "click",
                        timestamp: new Date(),
                        target: {
                            className: className,
                            id: target.id,
                            type: "<" + target.tagName.toLowerCase() + ">",
                            href: target.href || "",
                        },
                    });
                };
                clickStream_1.objectMetric("Page", {
                    title: document.title,
                    page: window.location.href,
                });
                if (document.addEventListener) {
                    document.addEventListener("click", documentClickHandler);
                }
                else {
                    document.attachEvent("onclick", documentClickHandler);
                }
            }
            rootSystem.stringMetric("StartTime", (new Date()).toString());
            var urlMetric = rootSystem.stringMetric("StartURL", "");
            var appNameMetric = rootSystem.stringMetric("AppName", "");
            if (typeof window !== "undefined") {
                if (typeof window.location !== "undefined") {
                    var startUrl = window.location.href;
                    urlMetric.update(startUrl);
                }
                if (typeof window.glue42gd !== "undefined") {
                    appNameMetric.update(window.glue42gd.appName);
                }
            }
        };
        return Repository;
    }());

    var NullProtocol$1 = (function () {
        function NullProtocol() {
        }
        NullProtocol.prototype.init = function (repo) {
        };
        NullProtocol.prototype.createSystem = function (system) {
            return Promise.resolve();
        };
        NullProtocol.prototype.updateSystem = function (metric, state) {
            return Promise.resolve();
        };
        NullProtocol.prototype.createMetric = function (metric) {
            return Promise.resolve();
        };
        NullProtocol.prototype.updateMetric = function (metric) {
            return Promise.resolve();
        };
        return NullProtocol;
    }());

    var PerfTracker$1 = (function () {
        function PerfTracker(api, initialPublishTimeout, publishInterval) {
            this.api = api;
            this.lastCount = 0;
            this.initialPublishTimeout = 10 * 1000;
            this.publishInterval = 60 * 1000;
            this.initialPublishTimeout = initialPublishTimeout !== null && initialPublishTimeout !== void 0 ? initialPublishTimeout : this.initialPublishTimeout;
            this.publishInterval = publishInterval !== null && publishInterval !== void 0 ? publishInterval : this.publishInterval;
            this.scheduleCollection();
            this.system = this.api.subSystem("performance", "Performance data published by the web application");
        }
        PerfTracker.prototype.scheduleCollection = function () {
            var _this = this;
            setTimeout(function () {
                _this.collect();
                setInterval(function () {
                    _this.collect();
                }, _this.publishInterval);
            }, this.initialPublishTimeout);
        };
        PerfTracker.prototype.collect = function () {
            try {
                this.collectMemory();
                this.collectEntries();
            }
            catch (_a) {
            }
        };
        PerfTracker.prototype.collectMemory = function () {
            var memory = window.performance.memory;
            this.system.stringMetric("memory", JSON.stringify({
                totalJSHeapSize: memory.totalJSHeapSize,
                usedJSHeapSize: memory.usedJSHeapSize
            }));
        };
        PerfTracker.prototype.collectEntries = function () {
            var allEntries = window.performance.getEntries();
            if (allEntries.length <= this.lastCount) {
                return;
            }
            this.lastCount = allEntries.length;
            var jsonfiedEntries = allEntries.map(function (i) { return i.toJSON(); });
            this.system.stringMetric("entries", JSON.stringify(jsonfiedEntries));
        };
        return PerfTracker;
    }());

    var metrics$1 = (function (options) {
        var protocol;
        if (!options.connection || typeof options.connection !== "object") {
            protocol = new NullProtocol$1();
        }
        else {
            protocol = gw3$1(options.connection, options);
        }
        var repo = new Repository$1(options, protocol);
        var rootSystem = repo.root;
        if (!options.disableAutoAppSystem) {
            rootSystem = rootSystem.subSystem("App");
        }
        var api = addFAVSupport$1(rootSystem);
        initPerf$1(api, options.pagePerformanceMetrics);
        return api;
    });
    function initPerf$1(api, config) {
        var _a, _b;
        if (typeof window === "undefined") {
            return;
        }
        var perfConfig = (_b = (_a = window === null || window === void 0 ? void 0 : window.glue42gd) === null || _a === void 0 ? void 0 : _a.metrics) === null || _b === void 0 ? void 0 : _b.pagePerformanceMetrics;
        if (perfConfig) {
            config = perfConfig;
        }
        if (config === null || config === void 0 ? void 0 : config.enabled) {
            new PerfTracker$1(api, config.initialPublishTimeout, config.publishInterval);
        }
    }
    function addFAVSupport$1(system) {
        var reportingSystem = system.subSystem("reporting");
        var def = {
            name: "features"
        };
        var featureMetric;
        var featureMetricFunc = function (name, action, payload) {
            if (typeof name === "undefined" || name === "") {
                throw new Error("name is mandatory");
            }
            else if (typeof action === "undefined" || action === "") {
                throw new Error("action is mandatory");
            }
            else if (typeof payload === "undefined" || payload === "") {
                throw new Error("payload is mandatory");
            }
            if (!featureMetric) {
                featureMetric = reportingSystem.objectMetric(def, { name: name, action: action, payload: payload });
            }
            else {
                featureMetric.update({
                    name: name,
                    action: action,
                    payload: payload
                });
            }
        };
        system.featureMetric = featureMetricFunc;
        return system;
    }

    function getDefaultExportFromCjs$2 (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createRegistry$2(options) {
        if (options && options.errorHandling
            && typeof options.errorHandling !== "function"
            && options.errorHandling !== "log"
            && options.errorHandling !== "silent"
            && options.errorHandling !== "throw") {
            throw new Error("Invalid options passed to createRegistry. Prop errorHandling should be [\"log\" | \"silent\" | \"throw\" | (err) => void], but " + typeof options.errorHandling + " was passed");
        }
        var _userErrorHandler = options && typeof options.errorHandling === "function" && options.errorHandling;
        var callbacks = {};
        function add(key, callback, replayArgumentsArr) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                callbacksForKey = [];
                callbacks[key] = callbacksForKey;
            }
            callbacksForKey.push(callback);
            if (replayArgumentsArr) {
                setTimeout(function () {
                    replayArgumentsArr.forEach(function (replayArgument) {
                        var _a;
                        if ((_a = callbacks[key]) === null || _a === void 0 ? void 0 : _a.includes(callback)) {
                            try {
                                if (Array.isArray(replayArgument)) {
                                    callback.apply(undefined, replayArgument);
                                }
                                else {
                                    callback.apply(undefined, [replayArgument]);
                                }
                            }
                            catch (err) {
                                _handleError(err, key);
                            }
                        }
                    });
                }, 0);
            }
            return function () {
                var allForKey = callbacks[key];
                if (!allForKey) {
                    return;
                }
                allForKey = allForKey.reduce(function (acc, element, index) {
                    if (!(element === callback && acc.length === index)) {
                        acc.push(element);
                    }
                    return acc;
                }, []);
                if (allForKey.length === 0) {
                    delete callbacks[key];
                }
                else {
                    callbacks[key] = allForKey;
                }
            };
        }
        function execute(key) {
            var argumentsArr = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                argumentsArr[_i - 1] = arguments[_i];
            }
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey || callbacksForKey.length === 0) {
                return [];
            }
            var results = [];
            callbacksForKey.forEach(function (callback) {
                try {
                    var result = callback.apply(undefined, argumentsArr);
                    results.push(result);
                }
                catch (err) {
                    results.push(undefined);
                    _handleError(err, key);
                }
            });
            return results;
        }
        function _handleError(exceptionArtifact, key) {
            var errParam = exceptionArtifact instanceof Error ? exceptionArtifact : new Error(exceptionArtifact);
            if (_userErrorHandler) {
                _userErrorHandler(errParam);
                return;
            }
            var msg = "[ERROR] callback-registry: User callback for key \"" + key + "\" failed: " + errParam.stack;
            if (options) {
                switch (options.errorHandling) {
                    case "log":
                        return console.error(msg);
                    case "silent":
                        return;
                    case "throw":
                        throw new Error(msg);
                }
            }
            console.error(msg);
        }
        function clear() {
            callbacks = {};
        }
        function clearKey(key) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                return;
            }
            delete callbacks[key];
        }
        return {
            add: add,
            execute: execute,
            clear: clear,
            clearKey: clearKey
        };
    }
    createRegistry$2.default = createRegistry$2;
    var lib$1$1 = createRegistry$2;

    var InProcTransport$1 = (function () {
        function InProcTransport(settings, logger) {
            var _this = this;
            this.registry = lib$1$1();
            this.gw = settings.facade;
            this.gw.connect(function (_client, message) {
                _this.messageHandler(message);
            }).then(function (client) {
                _this.client = client;
            });
        }
        Object.defineProperty(InProcTransport.prototype, "isObjectBasedTransport", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        InProcTransport.prototype.sendObject = function (msg) {
            if (this.client) {
                this.client.send(msg);
                return Promise.resolve(undefined);
            }
            else {
                return Promise.reject("not connected");
            }
        };
        InProcTransport.prototype.send = function (_msg) {
            return Promise.reject("not supported");
        };
        InProcTransport.prototype.onMessage = function (callback) {
            return this.registry.add("onMessage", callback);
        };
        InProcTransport.prototype.onConnectedChanged = function (callback) {
            callback(true);
            return function () { };
        };
        InProcTransport.prototype.close = function () {
            return Promise.resolve();
        };
        InProcTransport.prototype.open = function () {
            return Promise.resolve();
        };
        InProcTransport.prototype.name = function () {
            return "in-memory";
        };
        InProcTransport.prototype.reconnect = function () {
            return Promise.resolve();
        };
        InProcTransport.prototype.messageHandler = function (msg) {
            this.registry.execute("onMessage", msg);
        };
        return InProcTransport;
    }());

    var SharedWorkerTransport$1 = (function () {
        function SharedWorkerTransport(workerFile, logger) {
            var _this = this;
            this.logger = logger;
            this.registry = lib$1$1();
            this.worker = new SharedWorker(workerFile);
            this.worker.port.onmessage = function (e) {
                _this.messageHandler(e.data);
            };
        }
        Object.defineProperty(SharedWorkerTransport.prototype, "isObjectBasedTransport", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        SharedWorkerTransport.prototype.sendObject = function (msg) {
            this.worker.port.postMessage(msg);
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.send = function (_msg) {
            return Promise.reject("not supported");
        };
        SharedWorkerTransport.prototype.onMessage = function (callback) {
            return this.registry.add("onMessage", callback);
        };
        SharedWorkerTransport.prototype.onConnectedChanged = function (callback) {
            callback(true);
            return function () { };
        };
        SharedWorkerTransport.prototype.close = function () {
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.open = function () {
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.name = function () {
            return "shared-worker";
        };
        SharedWorkerTransport.prototype.reconnect = function () {
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.messageHandler = function (msg) {
            this.registry.execute("onMessage", msg);
        };
        return SharedWorkerTransport;
    }());

    var Utils$1 = (function () {
        function Utils() {
        }
        Utils.getGDMajorVersion = function () {
            if (typeof window === "undefined") {
                return undefined;
            }
            if (!window.glueDesktop) {
                return undefined;
            }
            if (!window.glueDesktop.version) {
                return undefined;
            }
            var ver = Number(window.glueDesktop.version.substr(0, 1));
            return isNaN(ver) ? undefined : ver;
        };
        Utils.isNode = function () {
            if (typeof Utils._isNode !== "undefined") {
                return Utils._isNode;
            }
            if (typeof window !== "undefined") {
                Utils._isNode = false;
                return false;
            }
            try {
                Utils._isNode = Object.prototype.toString.call(global.process) === "[object process]";
            }
            catch (e) {
                Utils._isNode = false;
            }
            return Utils._isNode;
        };
        return Utils;
    }());

    var PromiseWrapper$1 = (function () {
        function PromiseWrapper() {
            var _this = this;
            this.rejected = false;
            this.resolved = false;
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = function (t) {
                    _this.resolved = true;
                    resolve(t);
                };
                _this.reject = function (err) {
                    _this.rejected = true;
                    reject(err);
                };
            });
        }
        PromiseWrapper.delay = function (time) {
            return new Promise(function (resolve) { return setTimeout(resolve, time); });
        };
        Object.defineProperty(PromiseWrapper.prototype, "ended", {
            get: function () {
                return this.rejected || this.resolved;
            },
            enumerable: false,
            configurable: true
        });
        return PromiseWrapper;
    }());

    var timers$1 = {};
    function getAllTimers$1() {
        return timers$1;
    }
    function timer$1 (timerName) {
        var existing = timers$1[timerName];
        if (existing) {
            return existing;
        }
        var marks = [];
        function now() {
            return new Date().getTime();
        }
        var startTime = now();
        mark("start", startTime);
        var endTime;
        var period;
        function stop() {
            endTime = now();
            mark("end", endTime);
            period = endTime - startTime;
            return period;
        }
        function mark(name, time) {
            var currentTime = time !== null && time !== void 0 ? time : now();
            var diff = 0;
            if (marks.length > 0) {
                diff = currentTime - marks[marks.length - 1].time;
            }
            marks.push({ name: name, time: currentTime, diff: diff });
        }
        var timerObj = {
            get startTime() {
                return startTime;
            },
            get endTime() {
                return endTime;
            },
            get period() {
                return period;
            },
            stop: stop,
            mark: mark,
            marks: marks
        };
        timers$1[timerName] = timerObj;
        return timerObj;
    }

    var WebSocketConstructor$1 = Utils$1.isNode() ? require("ws") : window.WebSocket;
    var WS$1 = (function () {
        function WS(settings, logger) {
            this.startupTimer = timer$1("connection");
            this._running = true;
            this._registry = lib$1$1();
            this.wsRequests = [];
            this.settings = settings;
            this.logger = logger;
            if (!this.settings.ws) {
                throw new Error("ws is missing");
            }
        }
        WS.prototype.onMessage = function (callback) {
            return this._registry.add("onMessage", callback);
        };
        WS.prototype.send = function (msg, options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.waitForSocketConnection(function () {
                    var _a;
                    try {
                        (_a = _this.ws) === null || _a === void 0 ? void 0 : _a.send(msg);
                        resolve();
                    }
                    catch (e) {
                        reject(e);
                    }
                }, reject);
            });
        };
        WS.prototype.open = function () {
            var _this = this;
            this.logger.info("opening ws...");
            this._running = true;
            return new Promise(function (resolve, reject) {
                _this.waitForSocketConnection(resolve, reject);
            });
        };
        WS.prototype.close = function () {
            this._running = false;
            if (this.ws) {
                this.ws.close();
            }
            return Promise.resolve();
        };
        WS.prototype.onConnectedChanged = function (callback) {
            return this._registry.add("onConnectedChanged", callback);
        };
        WS.prototype.name = function () {
            return this.settings.ws;
        };
        WS.prototype.reconnect = function () {
            var _a;
            (_a = this.ws) === null || _a === void 0 ? void 0 : _a.close();
            var pw = new PromiseWrapper$1();
            this.waitForSocketConnection(function () {
                pw.resolve();
            });
            return pw.promise;
        };
        WS.prototype.waitForSocketConnection = function (callback, failed) {
            var _a;
            failed = failed !== null && failed !== void 0 ? failed : (function () { });
            if (!this._running) {
                failed("wait for socket on ".concat(this.settings.ws, " failed - socket closed by user"));
                return;
            }
            if (((_a = this.ws) === null || _a === void 0 ? void 0 : _a.readyState) === 1) {
                callback();
                return;
            }
            this.wsRequests.push({ callback: callback, failed: failed });
            if (this.wsRequests.length > 1) {
                return;
            }
            this.openSocket();
        };
        WS.prototype.openSocket = function (retryInterval, retriesLeft) {
            return __awaiter$2(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.startupTimer.mark("opening-socket");
                            if (retryInterval === undefined) {
                                retryInterval = this.settings.reconnectInterval;
                            }
                            if (typeof retriesLeft === "undefined") {
                                retriesLeft = this.settings.reconnectAttempts;
                            }
                            if (retriesLeft !== undefined) {
                                if (retriesLeft === 0) {
                                    this.notifyForSocketState("wait for socket on ".concat(this.settings.ws, " failed - no more retries left"));
                                    return [2];
                                }
                                this.logger.debug("will retry ".concat(retriesLeft, " more times (every ").concat(retryInterval, " ms)"));
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4, this.initiateSocket()];
                        case 2:
                            _b.sent();
                            this.startupTimer.mark("socket-initiated");
                            this.notifyForSocketState();
                            return [3, 4];
                        case 3:
                            _b.sent();
                            setTimeout(function () {
                                var retries = retriesLeft === undefined ? undefined : retriesLeft - 1;
                                _this.openSocket(retryInterval, retries);
                            }, retryInterval);
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            });
        };
        WS.prototype.initiateSocket = function () {
            var _this = this;
            var pw = new PromiseWrapper$1();
            this.logger.debug("initiating ws to ".concat(this.settings.ws, "..."));
            this.ws = new WebSocketConstructor$1(this.settings.ws || "");
            this.ws.onerror = function (err) {
                var reason = "";
                try {
                    reason = JSON.stringify(err);
                }
                catch (error) {
                    var seen_1 = new WeakSet();
                    var replacer = function (key, value) {
                        if (typeof value === "object" && value !== null) {
                            if (seen_1.has(value)) {
                                return;
                            }
                            seen_1.add(value);
                        }
                        return value;
                    };
                    reason = JSON.stringify(err, replacer);
                }
                pw.reject("error");
                _this.notifyStatusChanged(false, reason);
            };
            this.ws.onclose = function (err) {
                _this.logger.info("ws closed ".concat(err));
                pw.reject("closed");
                _this.notifyStatusChanged(false);
            };
            this.ws.onopen = function () {
                var _a;
                _this.startupTimer.mark("ws-opened");
                _this.logger.info("ws opened ".concat((_a = _this.settings.identity) === null || _a === void 0 ? void 0 : _a.application));
                pw.resolve();
                _this.notifyStatusChanged(true);
            };
            this.ws.onmessage = function (message) {
                _this._registry.execute("onMessage", message.data);
            };
            return pw.promise;
        };
        WS.prototype.notifyForSocketState = function (error) {
            this.wsRequests.forEach(function (wsRequest) {
                if (error) {
                    if (wsRequest.failed) {
                        wsRequest.failed(error);
                    }
                }
                else {
                    wsRequest.callback();
                }
            });
            this.wsRequests = [];
        };
        WS.prototype.notifyStatusChanged = function (status, reason) {
            this._registry.execute("onConnectedChanged", status, reason);
        };
        return WS;
    }());

    var shortidExports$2 = {};
    var shortid$1$1 = {
      get exports(){ return shortidExports$2; },
      set exports(v){ shortidExports$2 = v; },
    };

    var libExports$2 = {};
    var lib$4 = {
      get exports(){ return libExports$2; },
      set exports(v){ libExports$2 = v; },
    };

    // Found this seed-based random generator somewhere
    // Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

    var seed$2 = 1;

    /**
     * return a random number based on a seed
     * @param seed
     * @returns {number}
     */
    function getNextValue$2() {
        seed$2 = (seed$2 * 9301 + 49297) % 233280;
        return seed$2/(233280.0);
    }

    function setSeed$1$1(_seed_) {
        seed$2 = _seed_;
    }

    var randomFromSeed$1$1 = {
        nextValue: getNextValue$2,
        seed: setSeed$1$1
    };

    var randomFromSeed$4 = randomFromSeed$1$1;

    var ORIGINAL$2 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
    var alphabet$2$1;
    var previousSeed$2;

    var shuffled$2;

    function reset$2() {
        shuffled$2 = false;
    }

    function setCharacters$2(_alphabet_) {
        if (!_alphabet_) {
            if (alphabet$2$1 !== ORIGINAL$2) {
                alphabet$2$1 = ORIGINAL$2;
                reset$2();
            }
            return;
        }

        if (_alphabet_ === alphabet$2$1) {
            return;
        }

        if (_alphabet_.length !== ORIGINAL$2.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL$2.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
        }

        var unique = _alphabet_.split('').filter(function(item, ind, arr){
           return ind !== arr.lastIndexOf(item);
        });

        if (unique.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL$2.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
        }

        alphabet$2$1 = _alphabet_;
        reset$2();
    }

    function characters$2(_alphabet_) {
        setCharacters$2(_alphabet_);
        return alphabet$2$1;
    }

    function setSeed$4(seed) {
        randomFromSeed$4.seed(seed);
        if (previousSeed$2 !== seed) {
            reset$2();
            previousSeed$2 = seed;
        }
    }

    function shuffle$2() {
        if (!alphabet$2$1) {
            setCharacters$2(ORIGINAL$2);
        }

        var sourceArray = alphabet$2$1.split('');
        var targetArray = [];
        var r = randomFromSeed$4.nextValue();
        var characterIndex;

        while (sourceArray.length > 0) {
            r = randomFromSeed$4.nextValue();
            characterIndex = Math.floor(r * sourceArray.length);
            targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
        }
        return targetArray.join('');
    }

    function getShuffled$2() {
        if (shuffled$2) {
            return shuffled$2;
        }
        shuffled$2 = shuffle$2();
        return shuffled$2;
    }

    /**
     * lookup shuffled letter
     * @param index
     * @returns {string}
     */
    function lookup$2(index) {
        var alphabetShuffled = getShuffled$2();
        return alphabetShuffled[index];
    }

    function get$2 () {
      return alphabet$2$1 || ORIGINAL$2;
    }

    var alphabet_1$2 = {
        get: get$2,
        characters: characters$2,
        seed: setSeed$4,
        lookup: lookup$2,
        shuffled: getShuffled$2
    };

    var crypto$3 = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

    var randomByte$2;

    if (!crypto$3 || !crypto$3.getRandomValues) {
        randomByte$2 = function(size) {
            var bytes = [];
            for (var i = 0; i < size; i++) {
                bytes.push(Math.floor(Math.random() * 256));
            }
            return bytes;
        };
    } else {
        randomByte$2 = function(size) {
            return crypto$3.getRandomValues(new Uint8Array(size));
        };
    }

    var randomByteBrowser$2 = randomByte$2;

    // This file replaces `format.js` in bundlers like webpack or Rollup,
    // according to `browser` config in `package.json`.

    var format_browser$2 = function (random, alphabet, size) {
      // We can’t use bytes bigger than the alphabet. To make bytes values closer
      // to the alphabet, we apply bitmask on them. We look for the closest
      // `2 ** x - 1` number, which will be bigger than alphabet size. If we have
      // 30 symbols in the alphabet, we will take 31 (00011111).
      // We do not use faster Math.clz32, because it is not available in browsers.
      var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
      // Bitmask is not a perfect solution (in our example it will pass 31 bytes,
      // which is bigger than the alphabet). As a result, we will need more bytes,
      // than ID size, because we will refuse bytes bigger than the alphabet.

      // Every hardware random generator call is costly,
      // because we need to wait for entropy collection. This is why often it will
      // be faster to ask for few extra bytes in advance, to avoid additional calls.

      // Here we calculate how many random bytes should we call in advance.
      // It depends on ID length, mask / alphabet size and magic number 1.6
      // (which was selected according benchmarks).

      // -~f => Math.ceil(f) if n is float number
      // -~i => i + 1 if n is integer number
      var step = -~(1.6 * mask * size / alphabet.length);
      var id = '';

      while (true) {
        var bytes = random(step);
        // Compact alternative for `for (var i = 0; i < step; i++)`
        var i = step;
        while (i--) {
          // If random byte is bigger than alphabet even after bitmask,
          // we refuse it by `|| ''`.
          id += alphabet[bytes[i] & mask] || '';
          // More compact than `id.length + 1 === size`
          if (id.length === +size) return id
        }
      }
    };

    var alphabet$1$1 = alphabet_1$2;
    var random$2 = randomByteBrowser$2;
    var format$2 = format_browser$2;

    function generate$1$1(number) {
        var loopCounter = 0;
        var done;

        var str = '';

        while (!done) {
            str = str + format$2(random$2, alphabet$1$1.get(), 1);
            done = number < (Math.pow(16, loopCounter + 1 ) );
            loopCounter++;
        }
        return str;
    }

    var generate_1$2 = generate$1$1;

    var generate$4 = generate_1$2;

    // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
    // This number should be updated every year or so to keep the generated id short.
    // To regenerate `new Date() - 0` and bump the version. Always bump the version!
    var REDUCE_TIME$2 = 1567752802062;

    // don't change unless we change the algos or REDUCE_TIME
    // must be an integer and less than 16
    var version$1$1 = 7;

    // Counter is used when shortid is called multiple times in one second.
    var counter$2;

    // Remember the last time shortid was called in case counter is needed.
    var previousSeconds$2;

    /**
     * Generate unique id
     * Returns string id
     */
    function build$2(clusterWorkerId) {
        var str = '';

        var seconds = Math.floor((Date.now() - REDUCE_TIME$2) * 0.001);

        if (seconds === previousSeconds$2) {
            counter$2++;
        } else {
            counter$2 = 0;
            previousSeconds$2 = seconds;
        }

        str = str + generate$4(version$1$1);
        str = str + generate$4(clusterWorkerId);
        if (counter$2 > 0) {
            str = str + generate$4(counter$2);
        }
        str = str + generate$4(seconds);
        return str;
    }

    var build_1$2 = build$2;

    var alphabet$6 = alphabet_1$2;

    function isShortId$2(id) {
        if (!id || typeof id !== 'string' || id.length < 6 ) {
            return false;
        }

        var nonAlphabetic = new RegExp('[^' +
          alphabet$6.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') +
        ']');
        return !nonAlphabetic.test(id);
    }

    var isValid$2 = isShortId$2;

    (function (module) {

    	var alphabet = alphabet_1$2;
    	var build = build_1$2;
    	var isValid$1 = isValid$2;

    	// if you are using cluster or multiple servers use this to make each instance
    	// has a unique value for worker
    	// Note: I don't know if this is automatically set when using third
    	// party cluster solutions such as pm2.
    	var clusterWorkerId = 0;

    	/**
    	 * Set the seed.
    	 * Highly recommended if you don't want people to try to figure out your id schema.
    	 * exposed as shortid.seed(int)
    	 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
    	 */
    	function seed(seedValue) {
    	    alphabet.seed(seedValue);
    	    return module.exports;
    	}

    	/**
    	 * Set the cluster worker or machine id
    	 * exposed as shortid.worker(int)
    	 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
    	 * returns shortid module so it can be chained.
    	 */
    	function worker(workerId) {
    	    clusterWorkerId = workerId;
    	    return module.exports;
    	}

    	/**
    	 *
    	 * sets new characters to use in the alphabet
    	 * returns the shuffled alphabet
    	 */
    	function characters(newCharacters) {
    	    if (newCharacters !== undefined) {
    	        alphabet.characters(newCharacters);
    	    }

    	    return alphabet.shuffled();
    	}

    	/**
    	 * Generate unique id
    	 * Returns string id
    	 */
    	function generate() {
    	  return build(clusterWorkerId);
    	}

    	// Export all other functions as properties of the generate function
    	module.exports = generate;
    	module.exports.generate = generate;
    	module.exports.seed = seed;
    	module.exports.worker = worker;
    	module.exports.characters = characters;
    	module.exports.isValid = isValid$1;
    } (lib$4));

    (function (module) {
    	module.exports = libExports$2;
    } (shortid$1$1));

    var shortid$4 = /*@__PURE__*/getDefaultExportFromCjs$2(shortidExports$2);

    function domainSession$1 (domain, connection, logger, successMessages, errorMessages) {
        if (domain == null) {
            domain = "global";
        }
        successMessages = successMessages || ["success"];
        errorMessages = errorMessages || ["error"];
        var isJoined = false;
        var tryReconnecting = false;
        var _latestOptions;
        var _connectionOn = false;
        var callbacks = lib$1$1();
        connection.disconnected(handleConnectionDisconnected);
        connection.loggedIn(handleConnectionLoggedIn);
        connection.on("success", function (msg) { return handleSuccessMessage(msg); });
        connection.on("error", function (msg) { return handleErrorMessage(msg); });
        connection.on("result", function (msg) { return handleSuccessMessage(msg); });
        if (successMessages) {
            successMessages.forEach(function (sm) {
                connection.on(sm, function (msg) { return handleSuccessMessage(msg); });
            });
        }
        if (errorMessages) {
            errorMessages.forEach(function (sm) {
                connection.on(sm, function (msg) { return handleErrorMessage(msg); });
            });
        }
        var requestsMap = {};
        function join(options) {
            _latestOptions = options;
            return new Promise(function (resolve, reject) {
                if (isJoined) {
                    resolve({});
                    return;
                }
                var joinPromise;
                if (domain === "global") {
                    joinPromise = _connectionOn ? Promise.resolve({}) : Promise.reject("not connected to gateway");
                }
                else {
                    logger.debug("joining domain ".concat(domain));
                    var joinMsg = {
                        type: "join",
                        destination: domain,
                        domain: "global",
                        options: options,
                    };
                    joinPromise = send(joinMsg);
                }
                joinPromise
                    .then(function () {
                    handleJoined();
                    resolve({});
                })
                    .catch(function (err) {
                    logger.debug("error joining " + domain + " domain: " + JSON.stringify(err));
                    reject(err);
                });
            });
        }
        function leave() {
            if (domain === "global") {
                return Promise.resolve();
            }
            logger.debug("stopping session " + domain + "...");
            var leaveMsg = {
                type: "leave",
                destination: domain,
                domain: "global",
            };
            tryReconnecting = false;
            return send(leaveMsg)
                .then(function () {
                isJoined = false;
                callbacks.execute("onLeft");
            })
                .catch(function () {
                isJoined = false;
                callbacks.execute("onLeft");
            });
        }
        function handleJoined() {
            logger.debug("did join " + domain);
            isJoined = true;
            var wasReconnect = tryReconnecting;
            tryReconnecting = false;
            callbacks.execute("onJoined", wasReconnect);
        }
        function handleConnectionDisconnected() {
            _connectionOn = false;
            logger.debug("connection is down");
            isJoined = false;
            tryReconnecting = true;
            callbacks.execute("onLeft", { disconnected: true });
        }
        function handleConnectionLoggedIn() {
            _connectionOn = true;
            if (tryReconnecting) {
                logger.debug("connection is now up - trying to reconnect...");
                join(_latestOptions);
            }
        }
        function onJoined(callback) {
            if (isJoined) {
                callback(false);
            }
            return callbacks.add("onJoined", callback);
        }
        function onLeft(callback) {
            if (!isJoined) {
                callback();
            }
            return callbacks.add("onLeft", callback);
        }
        function handleErrorMessage(msg) {
            if (domain !== msg.domain) {
                return;
            }
            var requestId = msg.request_id;
            if (!requestId) {
                return;
            }
            var entry = requestsMap[requestId];
            if (!entry) {
                return;
            }
            entry.error(msg);
        }
        function handleSuccessMessage(msg) {
            if (msg.domain !== domain) {
                return;
            }
            var requestId = msg.request_id;
            if (!requestId) {
                return;
            }
            var entry = requestsMap[requestId];
            if (!entry) {
                return;
            }
            entry.success(msg);
        }
        function getNextRequestId() {
            return shortid$4();
        }
        function send(msg, tag, options) {
            options = options || {};
            msg.request_id = msg.request_id || getNextRequestId();
            msg.domain = msg.domain || domain;
            if (!options.skipPeerId) {
                msg.peer_id = connection.peerId;
            }
            var requestId = msg.request_id;
            return new Promise(function (resolve, reject) {
                requestsMap[requestId] = {
                    success: function (successMsg) {
                        delete requestsMap[requestId];
                        successMsg._tag = tag;
                        resolve(successMsg);
                    },
                    error: function (errorMsg) {
                        logger.warn("GW error - ".concat(JSON.stringify(errorMsg), " for request ").concat(JSON.stringify(msg)));
                        delete requestsMap[requestId];
                        errorMsg._tag = tag;
                        reject(errorMsg);
                    },
                };
                connection
                    .send(msg, options)
                    .catch(function (err) {
                    requestsMap[requestId].error({ err: err });
                });
            });
        }
        function sendFireAndForget(msg) {
            msg.request_id = msg.request_id ? msg.request_id : getNextRequestId();
            msg.domain = msg.domain || domain;
            msg.peer_id = connection.peerId;
            return connection.send(msg);
        }
        return {
            join: join,
            leave: leave,
            onJoined: onJoined,
            onLeft: onLeft,
            send: send,
            sendFireAndForget: sendFireAndForget,
            on: function (type, callback) {
                connection.on(type, function (msg) {
                    if (msg.domain !== domain) {
                        return;
                    }
                    try {
                        callback(msg);
                    }
                    catch (e) {
                        logger.error("Callback  failed: ".concat(e, " \n ").concat(e.stack, " \n msg was: ").concat(JSON.stringify(msg)), e);
                    }
                });
            },
            loggedIn: function (callback) { return connection.loggedIn(callback); },
            connected: function (callback) { return connection.connected(callback); },
            disconnected: function (callback) { return connection.disconnected(callback); },
            get peerId() {
                return connection.peerId;
            },
            get domain() {
                return domain;
            },
        };
    }

    var GW3ProtocolImpl$1 = (function () {
        function GW3ProtocolImpl(connection, settings, logger) {
            var _this = this;
            this.connection = connection;
            this.settings = settings;
            this.logger = logger;
            this.protocolVersion = 3;
            this.datePrefix = "#T42_DATE#";
            this.datePrefixLen = this.datePrefix.length;
            this.dateMinLen = this.datePrefixLen + 1;
            this.datePrefixFirstChar = this.datePrefix[0];
            this.registry = lib$1$1();
            this._isLoggedIn = false;
            this.shouldTryLogin = true;
            this.initialLogin = true;
            this.initialLoginAttempts = 3;
            this.sessions = [];
            connection.disconnected(function () {
                _this.handleDisconnected();
            });
            this.ping();
        }
        Object.defineProperty(GW3ProtocolImpl.prototype, "isLoggedIn", {
            get: function () {
                return this._isLoggedIn;
            },
            enumerable: false,
            configurable: true
        });
        GW3ProtocolImpl.prototype.processStringMessage = function (message) {
            var _this = this;
            var msg = JSON.parse(message, function (key, value) {
                if (typeof value !== "string") {
                    return value;
                }
                if (value.length < _this.dateMinLen) {
                    return value;
                }
                if (value[0] !== _this.datePrefixFirstChar) {
                    return value;
                }
                if (value.substring(0, _this.datePrefixLen) !== _this.datePrefix) {
                    return value;
                }
                try {
                    var milliseconds = parseInt(value.substring(_this.datePrefixLen, value.length), 10);
                    if (isNaN(milliseconds)) {
                        return value;
                    }
                    return new Date(milliseconds);
                }
                catch (ex) {
                    return value;
                }
            });
            return {
                msg: msg,
                msgType: msg.type,
            };
        };
        GW3ProtocolImpl.prototype.createStringMessage = function (message) {
            var oldToJson = Date.prototype.toJSON;
            try {
                var datePrefix_1 = this.datePrefix;
                Date.prototype.toJSON = function () {
                    return datePrefix_1 + this.getTime();
                };
                var result = JSON.stringify(message);
                return result;
            }
            finally {
                Date.prototype.toJSON = oldToJson;
            }
        };
        GW3ProtocolImpl.prototype.processObjectMessage = function (message) {
            if (!message.type) {
                throw new Error("Object should have type property");
            }
            return {
                msg: message,
                msgType: message.type,
            };
        };
        GW3ProtocolImpl.prototype.createObjectMessage = function (message) {
            return message;
        };
        GW3ProtocolImpl.prototype.login = function (config, reconnect) {
            return __awaiter$2(this, void 0, void 0, function () {
                var authentication, token, e_1, _a, helloMsg, sendOptions, welcomeMsg, msg, token, _b, err_1;
                return __generator$1(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.logger.debug("logging in...");
                            this.loginConfig = config;
                            if (!this.loginConfig) {
                                this.loginConfig = { username: "", password: "" };
                            }
                            this.shouldTryLogin = true;
                            authentication = {};
                            this.connection.gatewayToken = config.gatewayToken;
                            if (!config.gatewayToken) return [3, 5];
                            if (!reconnect) return [3, 4];
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4, this.getNewGWToken()];
                        case 2:
                            token = _c.sent();
                            config.gatewayToken = token;
                            return [3, 4];
                        case 3:
                            e_1 = _c.sent();
                            this.logger.warn("failed to get GW token when reconnecting ".concat((e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || e_1));
                            return [3, 4];
                        case 4:
                            authentication.method = "gateway-token";
                            authentication.token = config.gatewayToken;
                            this.connection.gatewayToken = config.gatewayToken;
                            return [3, 10];
                        case 5:
                            if (!(config.flowName === "sspi")) return [3, 9];
                            authentication.provider = "win";
                            authentication.method = "access-token";
                            if (!(config.flowCallback && config.sessionId)) return [3, 7];
                            _a = authentication;
                            return [4, config.flowCallback(config.sessionId, null)];
                        case 6:
                            _a.token =
                                (_c.sent())
                                    .data
                                    .toString("base64");
                            return [3, 8];
                        case 7: throw new Error("Invalid SSPI config");
                        case 8: return [3, 10];
                        case 9:
                            if (config.token) {
                                authentication.method = "access-token";
                                authentication.token = config.token;
                            }
                            else if (config.username) {
                                authentication.method = "secret";
                                authentication.login = config.username;
                                authentication.secret = config.password;
                            }
                            else if (config.provider) {
                                authentication.provider = config.provider;
                                authentication.providerContext = config.providerContext;
                            }
                            else {
                                throw new Error("invalid auth message" + JSON.stringify(config));
                            }
                            _c.label = 10;
                        case 10:
                            helloMsg = {
                                type: "hello",
                                identity: this.settings.identity,
                                authentication: authentication
                            };
                            if (config.sessionId) {
                                helloMsg.request_id = config.sessionId;
                            }
                            this.globalDomain = domainSession$1("global", this.connection, this.logger.subLogger("global-domain"), [
                                "welcome",
                                "token",
                                "authentication-request"
                            ]);
                            sendOptions = { skipPeerId: true };
                            if (this.initialLogin) {
                                sendOptions.retryInterval = this.settings.reconnectInterval;
                                sendOptions.maxRetries = this.settings.reconnectAttempts;
                            }
                            _c.label = 11;
                        case 11:
                            _c.trys.push([11, 19, 20, 21]);
                            welcomeMsg = void 0;
                            _c.label = 12;
                        case 12:
                            return [4, this.globalDomain.send(helloMsg, undefined, sendOptions)];
                        case 13:
                            msg = _c.sent();
                            if (!(msg.type === "authentication-request")) return [3, 16];
                            token = Buffer.from(msg.authentication.token, "base64");
                            if (!(config.flowCallback && config.sessionId)) return [3, 15];
                            _b = helloMsg.authentication;
                            return [4, config.flowCallback(config.sessionId, token)];
                        case 14:
                            _b.token =
                                (_c.sent())
                                    .data
                                    .toString("base64");
                            _c.label = 15;
                        case 15:
                            helloMsg.request_id = config.sessionId;
                            return [3, 12];
                        case 16:
                            if (msg.type === "welcome") {
                                welcomeMsg = msg;
                                return [3, 18];
                            }
                            else if (msg.type === "error") {
                                throw new Error("Authentication failed: " + msg.reason);
                            }
                            else {
                                throw new Error("Unexpected message type during authentication: " + msg.type);
                            }
                        case 17: return [3, 12];
                        case 18:
                            this.initialLogin = false;
                            this.logger.debug("login successful with peerId " + welcomeMsg.peer_id);
                            this.connection.peerId = welcomeMsg.peer_id;
                            this.connection.resolvedIdentity = welcomeMsg.resolved_identity;
                            this.connection.availableDomains = welcomeMsg.available_domains;
                            if (welcomeMsg.options) {
                                this.connection.token = welcomeMsg.options.access_token;
                                this.connection.info = welcomeMsg.options.info;
                            }
                            this.setLoggedIn(true);
                            return [2, welcomeMsg.resolved_identity];
                        case 19:
                            err_1 = _c.sent();
                            this.logger.error("error sending hello message - " + (err_1.message || err_1.msg || err_1.reason || err_1), err_1);
                            throw err_1;
                        case 20:
                            if (config && config.flowCallback && config.sessionId) {
                                config.flowCallback(config.sessionId, null);
                            }
                            return [7];
                        case 21: return [2];
                    }
                });
            });
        };
        GW3ProtocolImpl.prototype.logout = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var promises;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.debug("logging out...");
                            this.shouldTryLogin = false;
                            if (this.pingTimer) {
                                clearTimeout(this.pingTimer);
                            }
                            promises = this.sessions.map(function (session) {
                                session.leave();
                            });
                            return [4, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        GW3ProtocolImpl.prototype.loggedIn = function (callback) {
            if (this._isLoggedIn) {
                callback();
            }
            return this.registry.add("onLoggedIn", callback);
        };
        GW3ProtocolImpl.prototype.domain = function (domainName, domainLogger, successMessages, errorMessages) {
            var session = this.sessions.filter(function (s) { return s.domain === domainName; })[0];
            if (!session) {
                session = domainSession$1(domainName, this.connection, domainLogger, successMessages, errorMessages);
                this.sessions.push(session);
            }
            return session;
        };
        GW3ProtocolImpl.prototype.handleDisconnected = function () {
            var _this = this;
            this.setLoggedIn(false);
            var tryToLogin = this.shouldTryLogin;
            if (tryToLogin && this.initialLogin) {
                if (this.initialLoginAttempts <= 0) {
                    return;
                }
                this.initialLoginAttempts--;
            }
            this.logger.debug("disconnected - will try new login?" + this.shouldTryLogin);
            if (this.shouldTryLogin) {
                if (!this.loginConfig) {
                    throw new Error("no login info");
                }
                this.connection.login(this.loginConfig, true)
                    .catch(function () {
                    setTimeout(_this.handleDisconnected.bind(_this), _this.settings.reconnectInterval || 1000);
                });
            }
        };
        GW3ProtocolImpl.prototype.setLoggedIn = function (value) {
            this._isLoggedIn = value;
            if (this._isLoggedIn) {
                this.registry.execute("onLoggedIn");
            }
        };
        GW3ProtocolImpl.prototype.ping = function () {
            var _this = this;
            if (!this.shouldTryLogin) {
                return;
            }
            if (this._isLoggedIn) {
                this.connection.send({ type: "ping" });
            }
            this.pingTimer = setTimeout(function () {
                _this.ping();
            }, 30 * 1000);
        };
        GW3ProtocolImpl.prototype.authToken = function () {
            var createTokenReq = {
                type: "create-token"
            };
            if (!this.globalDomain) {
                return Promise.reject(new Error("no global domain session"));
            }
            return this.globalDomain.send(createTokenReq)
                .then(function (res) {
                return res.token;
            });
        };
        GW3ProtocolImpl.prototype.getNewGWToken = function () {
            if (typeof window !== undefined) {
                var glue42gd = window.glue42gd;
                if (glue42gd) {
                    return glue42gd.getGWToken();
                }
            }
            return Promise.reject(new Error("not running in GD"));
        };
        return GW3ProtocolImpl;
    }());

    var MessageReplayerImpl$1 = (function () {
        function MessageReplayerImpl(specs) {
            this.specsNames = [];
            this.messages = {};
            this.subs = {};
            this.subsRefCount = {};
            this.specs = {};
            for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
                var spec = specs_1[_i];
                this.specs[spec.name] = spec;
                this.specsNames.push(spec.name);
            }
        }
        MessageReplayerImpl.prototype.init = function (connection) {
            var _this = this;
            this.connection = connection;
            for (var _i = 0, _a = this.specsNames; _i < _a.length; _i++) {
                var name_1 = _a[_i];
                var _loop_1 = function (type) {
                    var refCount = this_1.subsRefCount[type];
                    if (!refCount) {
                        refCount = 0;
                    }
                    refCount += 1;
                    this_1.subsRefCount[type] = refCount;
                    if (refCount > 1) {
                        return "continue";
                    }
                    var sub = connection.on(type, function (msg) { return _this.processMessage(type, msg); });
                    this_1.subs[type] = sub;
                };
                var this_1 = this;
                for (var _b = 0, _c = this.specs[name_1].types; _b < _c.length; _b++) {
                    var type = _c[_b];
                    _loop_1(type);
                }
            }
        };
        MessageReplayerImpl.prototype.processMessage = function (type, msg) {
            if (this.isDone || !msg) {
                return;
            }
            for (var _i = 0, _a = this.specsNames; _i < _a.length; _i++) {
                var name_2 = _a[_i];
                if (this.specs[name_2].types.indexOf(type) !== -1) {
                    var messages = this.messages[name_2] || [];
                    this.messages[name_2] = messages;
                    messages.push(msg);
                }
            }
        };
        MessageReplayerImpl.prototype.drain = function (name, callback) {
            var _a;
            if (callback) {
                (this.messages[name] || []).forEach(callback);
            }
            delete this.messages[name];
            for (var _i = 0, _b = this.specs[name].types; _i < _b.length; _i++) {
                var type = _b[_i];
                this.subsRefCount[type] -= 1;
                if (this.subsRefCount[type] <= 0) {
                    (_a = this.connection) === null || _a === void 0 ? void 0 : _a.off(this.subs[type]);
                    delete this.subs[type];
                    delete this.subsRefCount[type];
                }
            }
            delete this.specs[name];
            if (!this.specs.length) {
                this.isDone = true;
            }
        };
        return MessageReplayerImpl;
    }());

    var PromisePlus$2 = function (executor, timeoutMilliseconds, timeoutMessage) {
        return new Promise(function (resolve, reject) {
            var timeout = setTimeout(function () {
                var message = timeoutMessage || "Promise timeout hit: ".concat(timeoutMilliseconds);
                reject(message);
            }, timeoutMilliseconds);
            var providedPromise = new Promise(executor);
            providedPromise
                .then(function (result) {
                clearTimeout(timeout);
                resolve(result);
            })
                .catch(function (error) {
                clearTimeout(timeout);
                reject(error);
            });
        });
    };

    var WebPlatformTransport$1 = (function () {
        function WebPlatformTransport(settings, logger, identity) {
            this.settings = settings;
            this.logger = logger;
            this.identity = identity;
            this.iAmConnected = false;
            this.parentReady = false;
            this.rejected = false;
            this.children = [];
            this.extContentAvailable = false;
            this.extContentConnecting = false;
            this.extContentConnected = false;
            this.parentInExtMode = false;
            this.webNamespace = "g42_core_web";
            this.parentPingTimeout = 5000;
            this.connectionRequestTimeout = 7000;
            this.defaultTargetString = "*";
            this.registry = lib$1$1();
            this.messages = {
                connectionAccepted: { name: "connectionAccepted", handle: this.handleConnectionAccepted.bind(this) },
                connectionRejected: { name: "connectionRejected", handle: this.handleConnectionRejected.bind(this) },
                connectionRequest: { name: "connectionRequest", handle: this.handleConnectionRequest.bind(this) },
                parentReady: { name: "parentReady", handle: this.handleParentReady.bind(this) },
                parentPing: { name: "parentPing", handle: this.handleParentPing.bind(this) },
                platformPing: { name: "platformPing", handle: this.handlePlatformPing.bind(this) },
                platformReady: { name: "platformReady", handle: this.handlePlatformReady.bind(this) },
                clientUnload: { name: "clientUnload", handle: this.handleClientUnload.bind(this) },
                manualUnload: { name: "manualUnload", handle: this.handleManualUnload.bind(this) },
                extConnectionResponse: { name: "extConnectionResponse", handle: this.handleExtConnectionResponse.bind(this) },
                extSetupRequest: { name: "extSetupRequest", handle: this.handleExtSetupRequest.bind(this) },
                gatewayDisconnect: { name: "gatewayDisconnect", handle: this.handleGatewayDisconnect.bind(this) },
                gatewayInternalConnect: { name: "gatewayInternalConnect", handle: this.handleGatewayInternalConnect.bind(this) }
            };
            this.extContentAvailable = !!window.glue42ext;
            this.setUpMessageListener();
            this.setUpUnload();
            this.setupPlatformUnloadListener();
            if (!this.settings.port) {
                this.parent = window.opener || window.top;
                this.parentType = window.opener ? "opener" :
                    window.name.indexOf("#wsp") !== -1 ? "workspace" : "top";
            }
        }
        WebPlatformTransport.prototype.manualSetReadyState = function () {
            this.iAmConnected = true;
            this.parentReady = true;
        };
        Object.defineProperty(WebPlatformTransport.prototype, "transportWindowId", {
            get: function () {
                return this.publicWindowId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WebPlatformTransport.prototype, "communicationId", {
            get: function () {
                return this._communicationId;
            },
            enumerable: false,
            configurable: true
        });
        WebPlatformTransport.prototype.sendObject = function (msg) {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    if (this.extContentConnected) {
                        return [2, window.postMessage({ glue42ExtOut: msg }, this.defaultTargetString)];
                    }
                    if (!this.port) {
                        throw new Error("Cannot send message, because the port was not opened yet");
                    }
                    this.port.postMessage(msg);
                    return [2];
                });
            });
        };
        Object.defineProperty(WebPlatformTransport.prototype, "isObjectBasedTransport", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        WebPlatformTransport.prototype.onMessage = function (callback) {
            return this.registry.add("onMessage", callback);
        };
        WebPlatformTransport.prototype.send = function () {
            return Promise.reject("not supported");
        };
        WebPlatformTransport.prototype.onConnectedChanged = function (callback) {
            return this.registry.add("onConnectedChanged", callback);
        };
        WebPlatformTransport.prototype.open = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.debug("opening a connection to the web platform gateway.");
                            return [4, this.connect()];
                        case 1:
                            _a.sent();
                            this.notifyStatusChanged(true);
                            return [2];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.close = function () {
            var _a, _b;
            var message = {
                glue42core: {
                    type: this.messages.gatewayDisconnect.name,
                    data: {
                        clientId: this.myClientId,
                        ownWindowId: (_a = this.identity) === null || _a === void 0 ? void 0 : _a.windowId
                    }
                }
            };
            (_b = this.port) === null || _b === void 0 ? void 0 : _b.postMessage(message);
            this.parentReady = false;
            this.notifyStatusChanged(false, "manual reconnection");
            return Promise.resolve();
        };
        WebPlatformTransport.prototype.name = function () {
            return "web-platform";
        };
        WebPlatformTransport.prototype.reconnect = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.close()];
                        case 1:
                            _a.sent();
                            return [2, Promise.resolve()];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.connect = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.settings.port) return [3, 2];
                            return [4, this.initiateInternalConnection()];
                        case 1:
                            _a.sent();
                            this.logger.debug("internal web platform connection completed");
                            return [2];
                        case 2:
                            if (!this.parentType || !this.parent) {
                                throw new Error("Cannot initiate a connection, because there is no opener, no top and no port.");
                            }
                            this.logger.debug("opening a ".concat(this.parentType === "opener" ? "child" : "grandchild", " client web platform connection"));
                            return [4, this.waitParent(this.parent, this.parentType)];
                        case 3:
                            _a.sent();
                            if (!this.parentInExtMode) return [3, 5];
                            return [4, this.requestConnectionPermissionFromExt()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5: return [4, this.initiateRemoteConnection(this.parent, this.parentType)];
                        case 6:
                            _a.sent();
                            this.logger.debug("the ".concat(this.parentType === "opener" ? "child" : "grandchild", " client is connected"));
                            return [2];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.initiateInternalConnection = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.logger.debug("opening an internal web platform connection");
                _this.port = _this.settings.port;
                if (_this.iAmConnected) {
                    _this.logger.warn("cannot open a new connection, because this client is currently connected");
                    return;
                }
                _this.port.onmessage = function (event) {
                    var _a, _b;
                    if (_this.iAmConnected && !((_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core)) {
                        _this.registry.execute("onMessage", event.data);
                        return;
                    }
                    var data = (_b = event.data) === null || _b === void 0 ? void 0 : _b.glue42core;
                    if (!data) {
                        return;
                    }
                    if (data.type === _this.messages.gatewayInternalConnect.name && data.success) {
                        _this.publicWindowId = _this.settings.windowId;
                        if (_this.identity && _this.publicWindowId) {
                            _this.identity.windowId = _this.publicWindowId;
                            _this.identity.instance = _this.publicWindowId;
                        }
                        resolve();
                    }
                    if (data.type === _this.messages.gatewayInternalConnect.name && data.error) {
                        reject(data.error);
                    }
                };
                _this.port.postMessage({
                    glue42core: {
                        type: _this.messages.gatewayInternalConnect.name
                    }
                });
            });
        };
        WebPlatformTransport.prototype.initiateRemoteConnection = function (target, parentType) {
            var _this = this;
            return PromisePlus$2(function (resolve, reject) {
                var _a;
                _this.connectionResolve = resolve;
                _this.connectionReject = reject;
                _this.myClientId = (_a = _this.myClientId) !== null && _a !== void 0 ? _a : shortid$4();
                var bridgeInstanceId = _this.parentType === "workspace" ? window.name.substring(0, window.name.indexOf("#wsp")) : window.name;
                var request = {
                    glue42core: {
                        type: _this.messages.connectionRequest.name,
                        clientId: _this.myClientId,
                        clientType: parentType === "top" || parentType === "workspace" ? "grandChild" : "child",
                        bridgeInstanceId: bridgeInstanceId
                    }
                };
                _this.logger.debug("sending connection request to ".concat(parentType));
                if (_this.extContentConnecting) {
                    request.glue42core.clientType = "child";
                    request.glue42core.bridgeInstanceId = _this.myClientId;
                    request.glue42core.parentWindowId = _this.parentWindowId;
                    return window.postMessage(request, _this.defaultTargetString);
                }
                target.postMessage(request, _this.defaultTargetString);
            }, this.connectionRequestTimeout, "The connection to the opener/top window timed out");
        };
        WebPlatformTransport.prototype.waitParent = function (target, parentType) {
            return __awaiter$2(this, void 0, void 0, function () {
                var connectionNotPossibleMsg, defaultParentCheck, extensionCheck, _a, directParentCheck, _b;
                return __generator$1(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            connectionNotPossibleMsg = "Cannot initiate glue, because this window was not opened or created by a glue client";
                            this.logger.debug("Checking the default parent");
                            return [4, this.isParentCheckSuccess(this.tryFindProxy(target, parentType))];
                        case 1:
                            defaultParentCheck = _c.sent();
                            if (defaultParentCheck.success) {
                                this.logger.debug("The default parent was found!");
                                return [2];
                            }
                            this.logger.debug("the default parent check failed, trying to find a g42x");
                            if (!this.extContentAvailable) return [3, 3];
                            return [4, this.isParentCheckSuccess(this.requestConnectionPermissionFromExt())];
                        case 2:
                            _a = _c.sent();
                            return [3, 4];
                        case 3:
                            _a = { success: false };
                            _c.label = 4;
                        case 4:
                            extensionCheck = _a;
                            if (extensionCheck.success) {
                                this.logger.debug("G42X was found!");
                                return [2];
                            }
                            if (parentType === "opener") {
                                throw new Error(connectionNotPossibleMsg);
                            }
                            this.logger.debug("the default and g42x parent checks failed, trying the direct parent, if it is different than the top");
                            if (!(window.top !== window.parent)) return [3, 6];
                            return [4, this.isParentCheckSuccess(this.tryFindProxy(window.parent, parentType))];
                        case 5:
                            _b = _c.sent();
                            return [3, 7];
                        case 6:
                            _b = { success: false };
                            _c.label = 7;
                        case 7:
                            directParentCheck = _b;
                            if (directParentCheck.success) {
                                this.logger.debug("The direct parent was found!");
                                this.parent = window.parent;
                                return [2];
                            }
                            throw new Error(connectionNotPossibleMsg);
                    }
                });
            });
        };
        WebPlatformTransport.prototype.isParentCheckSuccess = function (parentCheck) {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, parentCheck];
                        case 1:
                            _a.sent();
                            return [2, { success: true }];
                        case 2:
                            _a.sent();
                            return [2, { success: false }];
                        case 3: return [2];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.tryFindProxy = function (target, parentType) {
            var _this = this;
            var connectionNotPossibleMsg = "Cannot initiate glue, because this window was not opened or created by a glue client";
            var parentCheck = PromisePlus$2(function (resolve, reject) {
                var iAmTop = window.self === window.top;
                if (parentType === "top" && iAmTop) {
                    return reject(connectionNotPossibleMsg);
                }
                _this.parentPingResolve = resolve;
                var message = {
                    glue42core: {
                        type: parentType === "opener" ? _this.messages.platformPing.name : _this.messages.parentPing.name
                    }
                };
                _this.logger.debug("checking for ".concat(parentType, " window availability"));
                _this.parentPingInterval = setInterval(function () {
                    target.postMessage(message, _this.defaultTargetString);
                }, 1000);
            }, this.parentPingTimeout, connectionNotPossibleMsg);
            parentCheck.catch(function () {
                if (_this.parentPingInterval) {
                    clearInterval(_this.parentPingInterval);
                    delete _this.parentPingInterval;
                }
            });
            return parentCheck;
        };
        WebPlatformTransport.prototype.setUpMessageListener = function () {
            var _this = this;
            if (this.settings.port) {
                this.logger.debug("skipping generic message listener, because this is an internal client");
                return;
            }
            window.addEventListener("message", function (event) {
                var _a;
                var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
                if (!data || _this.rejected) {
                    return;
                }
                if (!_this.checkMessageTypeValid(data.type)) {
                    _this.logger.error("cannot handle the incoming glue42 core message, because the type is invalid: ".concat(data.type));
                    return;
                }
                var messageType = data.type;
                _this.logger.debug("received valid glue42core message of type: ".concat(messageType));
                _this.messages[messageType].handle(event);
            });
        };
        WebPlatformTransport.prototype.setUpUnload = function () {
            var _this = this;
            if (this.settings.port) {
                this.logger.debug("skipping unload event listener, because this is an internal client");
                return;
            }
            window.addEventListener("beforeunload", function () {
                var _a, _b;
                if (_this.extContentConnected) {
                    return;
                }
                var message = {
                    glue42core: {
                        type: _this.messages.clientUnload.name,
                        data: {
                            clientId: _this.myClientId,
                            ownWindowId: (_a = _this.identity) === null || _a === void 0 ? void 0 : _a.windowId
                        }
                    }
                };
                if (_this.parent) {
                    _this.parent.postMessage(message, _this.defaultTargetString);
                }
                (_b = _this.port) === null || _b === void 0 ? void 0 : _b.postMessage(message);
            });
        };
        WebPlatformTransport.prototype.handleParentReady = function (event) {
            var _a;
            this.logger.debug("handling the ready signal from the parent, by resoling the pending promise.");
            this.parentReady = true;
            var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
            if (data && data.extMode) {
                this.logger.debug("my parent is connected to its content script, fetching windowId and proceeding with content script connection");
                this.parentWindowId = data.extMode.windowId;
                this.parentInExtMode = true;
            }
            if (this.parentPingResolve) {
                this.parentPingResolve();
                delete this.parentPingResolve;
            }
            if (this.parentPingInterval) {
                clearInterval(this.parentPingInterval);
                delete this.parentPingInterval;
            }
        };
        WebPlatformTransport.prototype.handlePlatformReady = function () {
            this.logger.debug("the web platform gave the ready signal");
            this.parentReady = true;
            if (this.parentPingResolve) {
                this.parentPingResolve();
                delete this.parentPingResolve;
            }
            if (this.parentPingInterval) {
                clearInterval(this.parentPingInterval);
                delete this.parentPingInterval;
            }
        };
        WebPlatformTransport.prototype.handleConnectionAccepted = function (event) {
            var _a;
            var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
            if (this.myClientId === data.clientId) {
                return this.handleAcceptanceOfMyRequest(data);
            }
            return this.handleAcceptanceOfGrandChildRequest(data, event);
        };
        WebPlatformTransport.prototype.handleAcceptanceOfMyRequest = function (data) {
            var _this = this;
            var _a, _b, _c;
            this.logger.debug("handling a connection accepted signal targeted at me.");
            this.isPreferredActivated = data.isPreferredActivated;
            if (this.extContentConnecting) {
                return this.processExtContentConnection(data);
            }
            if (!data.port) {
                this.logger.error("cannot set up my connection, because I was not provided with a port");
                return;
            }
            this.publicWindowId = this.parentType === "opener" ? window.name :
                this.parentType === "top" ? data.parentWindowId :
                    window.name.substring(0, window.name.indexOf("#wsp"));
            if (this.identity && this.parentType !== "top") {
                this.identity.windowId = (_a = this.identity.windowId) !== null && _a !== void 0 ? _a : this.publicWindowId;
                this.identity.instance = (_b = this.identity.instance) !== null && _b !== void 0 ? _b : this.publicWindowId;
            }
            if (this.identity && this.parentType === "top") {
                this.identity.instance = (_c = this.identity.instance) !== null && _c !== void 0 ? _c : shortid$4();
            }
            if (this.identity && data.appName) {
                this.identity.application = data.appName;
                this.identity.applicationName = data.appName;
            }
            this._communicationId = data.communicationId;
            this.port = data.port;
            this.port.onmessage = function (e) { return _this.registry.execute("onMessage", e.data); };
            if (this.connectionResolve) {
                this.logger.debug("my connection is set up, calling the connection resolve.");
                this.connectionResolve();
                delete this.connectionResolve;
                return;
            }
            this.logger.error("unable to call the connection resolve, because no connection promise was found");
        };
        WebPlatformTransport.prototype.processExtContentConnection = function (data) {
            var _this = this;
            this.logger.debug("handling a connection accepted signal targeted at me for extension content connection.");
            this.extContentConnecting = false;
            this.extContentConnected = true;
            this.publicWindowId = this.parentWindowId || this.myClientId;
            if (this.extContentConnecting && this.identity) {
                this.identity.windowId = this.publicWindowId;
            }
            if (this.identity && data.appName) {
                this.identity.application = data.appName;
                this.identity.applicationName = data.appName;
            }
            window.addEventListener("message", function (event) {
                var _a;
                var extData = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42ExtInc;
                if (!extData) {
                    return;
                }
                _this.registry.execute("onMessage", extData);
            });
            if (this.connectionResolve) {
                this.logger.debug("my connection is set up, calling the connection resolve.");
                this.connectionResolve();
                delete this.connectionResolve;
                return;
            }
        };
        WebPlatformTransport.prototype.handleAcceptanceOfGrandChildRequest = function (data, event) {
            if (this.extContentConnecting || this.extContentConnected) {
                this.logger.debug("cannot process acceptance of a grandchild, because I am connected to a content script");
                return;
            }
            this.logger.debug("handling a connection accepted signal targeted at a grandchild: ".concat(data.clientId));
            var child = this.children.find(function (c) { return c.grandChildId === data.clientId; });
            if (!child) {
                this.logger.error("cannot handle connection accepted for grandchild: ".concat(data.clientId, ", because there is no grandchild with this id"));
                return;
            }
            child.connected = true;
            this.logger.debug("the grandchild connection for ".concat(data.clientId, " is set up, forwarding the success message and the gateway port"));
            data.parentWindowId = this.publicWindowId;
            child.source.postMessage(event.data, child.origin, [data.port]);
            return;
        };
        WebPlatformTransport.prototype.handleConnectionRejected = function () {
            this.logger.debug("handling a connection rejection. Most likely the reason is that this window was not created by a glue API call");
            if (this.connectionReject) {
                this.connectionReject("The platform connection was rejected. Most likely because this window was not created by a glue API call");
                delete this.connectionReject;
            }
        };
        WebPlatformTransport.prototype.handleConnectionRequest = function (event) {
            if (this.extContentConnecting) {
                this.logger.debug("This connection request event is targeted at the extension content");
                return;
            }
            var source = event.source;
            var data = event.data.glue42core;
            if (!data.clientType || data.clientType !== "grandChild") {
                return this.rejectConnectionRequest(source, event.origin, "rejecting a connection request, because the source was not opened by a glue API call");
            }
            if (!data.clientId) {
                return this.rejectConnectionRequest(source, event.origin, "rejecting a connection request, because the source did not provide a valid id");
            }
            if (this.parentType !== "opener" || !this.parent) {
                return this.rejectConnectionRequest(source, event.origin, "Cannot forward the connection request, because no direct connection to the platform was found");
            }
            this.logger.debug("handling a connection request for a grandchild: ".concat(data.clientId));
            this.children.push({ grandChildId: data.clientId, source: source, connected: false, origin: event.origin });
            this.logger.debug("grandchild: ".concat(data.clientId, " is prepared, forwarding connection request to the platform"));
            this.parent.postMessage(event.data, this.defaultTargetString);
        };
        WebPlatformTransport.prototype.handleParentPing = function (event) {
            if (!this.parentReady) {
                this.logger.debug("my parent is not ready, I am ignoring the parent ping");
                return;
            }
            if (!this.iAmConnected) {
                this.logger.debug("i am not fully connected yet, I am ignoring the parent ping");
                return;
            }
            var message = {
                glue42core: {
                    type: this.messages.parentReady.name
                }
            };
            if (this.extContentConnected) {
                message.glue42core.extMode = { windowId: this.myClientId };
            }
            var source = event.source;
            this.logger.debug("responding to a parent ping with a ready message");
            source.postMessage(message, event.origin);
        };
        WebPlatformTransport.prototype.setupPlatformUnloadListener = function () {
            var _this = this;
            this.onMessage(function (msg) {
                if (msg.type === "platformUnload") {
                    _this.logger.debug("detected a web platform unload");
                    _this.parentReady = false;
                    _this.notifyStatusChanged(false, "Gateway unloaded");
                }
            });
        };
        WebPlatformTransport.prototype.handleManualUnload = function () {
            var _a, _b;
            var message = {
                glue42core: {
                    type: this.messages.clientUnload.name,
                    data: {
                        clientId: this.myClientId,
                        ownWindowId: (_a = this.identity) === null || _a === void 0 ? void 0 : _a.windowId
                    }
                }
            };
            if (this.extContentConnected) {
                return window.postMessage({ glue42ExtOut: message }, this.defaultTargetString);
            }
            (_b = this.port) === null || _b === void 0 ? void 0 : _b.postMessage(message);
        };
        WebPlatformTransport.prototype.handleClientUnload = function (event) {
            var data = event.data.glue42core;
            var clientId = data === null || data === void 0 ? void 0 : data.data.clientId;
            if (!clientId) {
                this.logger.warn("cannot process grand child unload, because the provided id was not valid");
                return;
            }
            var foundChild = this.children.find(function (child) { return child.grandChildId === clientId; });
            if (!foundChild) {
                this.logger.warn("cannot process grand child unload, because this client is unaware of this grandchild");
                return;
            }
            this.logger.debug("handling grandchild unload for id: ".concat(clientId));
            this.children = this.children.filter(function (child) { return child.grandChildId !== clientId; });
        };
        WebPlatformTransport.prototype.handlePlatformPing = function () {
            this.logger.error("cannot handle platform ping, because this is not a platform calls handling component");
        };
        WebPlatformTransport.prototype.notifyStatusChanged = function (status, reason) {
            this.iAmConnected = status;
            this.registry.execute("onConnectedChanged", status, reason);
        };
        WebPlatformTransport.prototype.checkMessageTypeValid = function (typeToValidate) {
            return typeof typeToValidate === "string" && !!this.messages[typeToValidate];
        };
        WebPlatformTransport.prototype.rejectConnectionRequest = function (source, origin, reason) {
            this.rejected = true;
            this.logger.error(reason);
            var rejection = {
                glue42core: {
                    type: this.messages.connectionRejected.name
                }
            };
            source.postMessage(rejection, origin);
        };
        WebPlatformTransport.prototype.requestConnectionPermissionFromExt = function () {
            var _this = this;
            return this.waitForContentScript()
                .then(function () { return PromisePlus$2(function (resolve, reject) {
                _this.extConnectionResolve = resolve;
                _this.extConnectionReject = reject;
                var message = {
                    glue42core: {
                        type: "extSetupRequest"
                    }
                };
                _this.logger.debug("permission request to the extension content script was sent");
                window.postMessage(message, _this.defaultTargetString);
            }, _this.parentPingTimeout, "Cannot initialize glue, because this app was not opened or created by a Glue Client and the request for extension connection timed out"); });
        };
        WebPlatformTransport.prototype.handleExtConnectionResponse = function (event) {
            var _a;
            var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
            if (!data.approved && this.extConnectionReject) {
                return this.extConnectionReject("Cannot initialize glue, because this app was not opened or created by a Glue Client and the request for extension connection was rejected");
            }
            if (this.extConnectionResolve) {
                this.extContentConnecting = true;
                this.logger.debug("The extension connection was approved, proceeding.");
                this.extConnectionResolve();
                delete this.extConnectionResolve;
            }
        };
        WebPlatformTransport.prototype.handleExtSetupRequest = function () {
            return;
        };
        WebPlatformTransport.prototype.handleGatewayDisconnect = function () {
            return;
        };
        WebPlatformTransport.prototype.handleGatewayInternalConnect = function () {
            return;
        };
        WebPlatformTransport.prototype.waitForContentScript = function () {
            var _a;
            var contentReady = !!((_a = window.glue42ext) === null || _a === void 0 ? void 0 : _a.content);
            if (contentReady) {
                return Promise.resolve();
            }
            return PromisePlus$2(function (resolve) {
                window.addEventListener("Glue42EXTReady", function () {
                    resolve();
                });
            }, this.connectionRequestTimeout, "The content script was available, but was never heard to be ready");
        };
        return WebPlatformTransport;
    }());

    var waitForInvocations$1 = function (invocations, callback) {
        var left = invocations;
        return function () {
            left--;
            if (left === 0) {
                callback();
            }
        };
    };

    var AsyncSequelizer$2 = (function () {
        function AsyncSequelizer(minSequenceInterval) {
            if (minSequenceInterval === void 0) { minSequenceInterval = 0; }
            this.minSequenceInterval = minSequenceInterval;
            this.queue = [];
            this.isExecutingQueue = false;
        }
        AsyncSequelizer.prototype.enqueue = function (action) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.queue.push({ action: action, resolve: resolve, reject: reject });
                _this.executeQueue();
            });
        };
        AsyncSequelizer.prototype.executeQueue = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var operation, actionResult, error_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.isExecutingQueue) {
                                return [2];
                            }
                            this.isExecutingQueue = true;
                            _a.label = 1;
                        case 1:
                            if (!this.queue.length) return [3, 7];
                            operation = this.queue.shift();
                            if (!operation) {
                                this.isExecutingQueue = false;
                                return [2];
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, operation.action()];
                        case 3:
                            actionResult = _a.sent();
                            operation.resolve(actionResult);
                            return [3, 5];
                        case 4:
                            error_1 = _a.sent();
                            operation.reject(error_1);
                            return [3, 5];
                        case 5: return [4, this.intervalBreak()];
                        case 6:
                            _a.sent();
                            return [3, 1];
                        case 7:
                            this.isExecutingQueue = false;
                            return [2];
                    }
                });
            });
        };
        AsyncSequelizer.prototype.intervalBreak = function () {
            var _this = this;
            return new Promise(function (res) { return setTimeout(res, _this.minSequenceInterval); });
        };
        return AsyncSequelizer;
    }());

    var Connection$1 = (function () {
        function Connection(settings, logger) {
            this.settings = settings;
            this.logger = logger;
            this.messageHandlers = {};
            this.ids = 1;
            this.registry = lib$1$1();
            this._connected = false;
            this.isTrace = false;
            this._swapTransport = false;
            this._switchInProgress = false;
            this._transportSubscriptions = [];
            this._sequelizer = new AsyncSequelizer$2();
            settings = settings || {};
            settings.reconnectAttempts = settings.reconnectAttempts || 10;
            settings.reconnectInterval = settings.reconnectInterval || 1000;
            if (settings.inproc) {
                this.transport = new InProcTransport$1(settings.inproc, logger.subLogger("inMemory"));
            }
            else if (settings.sharedWorker) {
                this.transport = new SharedWorkerTransport$1(settings.sharedWorker, logger.subLogger("shared-worker"));
            }
            else if (settings.webPlatform) {
                this.transport = new WebPlatformTransport$1(settings.webPlatform, logger.subLogger("web-platform"), settings.identity);
            }
            else if (settings.ws !== undefined) {
                this.transport = new WS$1(settings, logger.subLogger("ws"));
            }
            else {
                throw new Error("No connection information specified");
            }
            this.isTrace = logger.canPublish("trace");
            logger.debug("starting with ".concat(this.transport.name(), " transport"));
            this.protocol = new GW3ProtocolImpl$1(this, settings, logger.subLogger("protocol"));
            var unsubConnectionChanged = this.transport.onConnectedChanged(this.handleConnectionChanged.bind(this));
            var unsubOnMessage = this.transport.onMessage(this.handleTransportMessage.bind(this));
            this._transportSubscriptions.push(unsubConnectionChanged);
            this._transportSubscriptions.push(unsubOnMessage);
            this._defaultTransport = this.transport;
        }
        Object.defineProperty(Connection.prototype, "protocolVersion", {
            get: function () {
                var _a;
                return (_a = this.protocol) === null || _a === void 0 ? void 0 : _a.protocolVersion;
            },
            enumerable: false,
            configurable: true
        });
        Connection.prototype.switchTransport = function (settings) {
            return __awaiter$2(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    return [2, this._sequelizer.enqueue(function () { return __awaiter$2(_this, void 0, void 0, function () {
                            var switchTargetTransport, verifyPromise, isSwitchSuccess;
                            return __generator$1(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!settings || typeof settings !== "object") {
                                            throw new Error("Cannot switch transports, because the settings are missing or invalid.");
                                        }
                                        if (typeof settings.type === "undefined") {
                                            throw new Error("Cannot switch the transport, because the type is not defined");
                                        }
                                        this.logger.trace("Starting transport switch with settings: ".concat(JSON.stringify(settings)));
                                        switchTargetTransport = settings.type === "secondary" ? this.getNewSecondaryTransport(settings) : this._defaultTransport;
                                        this._targetTransport = switchTargetTransport;
                                        this._targetAuth = settings.type === "secondary" ? this.getNewSecondaryAuth(settings) : this._defaultAuth;
                                        verifyPromise = this.verifyConnection();
                                        this._swapTransport = true;
                                        this._switchInProgress = true;
                                        this.logger.trace("The new transport has been set, closing the current transport");
                                        return [4, this.transport.close()];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        _a.trys.push([2, 4, , 5]);
                                        return [4, verifyPromise];
                                    case 3:
                                        _a.sent();
                                        isSwitchSuccess = this.transport === switchTargetTransport;
                                        this.logger.info("The reconnection after the switch was completed. Was the switch a success: ".concat(isSwitchSuccess));
                                        this._switchInProgress = false;
                                        return [2, { success: isSwitchSuccess }];
                                    case 4:
                                        _a.sent();
                                        this.logger.info("The reconnection after the switch timed out, reverting back to the default transport.");
                                        this.switchTransport({ type: "default" });
                                        this._switchInProgress = false;
                                        return [2, { success: false }];
                                    case 5: return [2];
                                }
                            });
                        }); })];
                });
            });
        };
        Connection.prototype.onLibReAnnounced = function (callback) {
            return this.registry.add("libReAnnounced", callback);
        };
        Connection.prototype.setLibReAnnounced = function (lib) {
            this.registry.execute("libReAnnounced", lib);
        };
        Connection.prototype.send = function (message, options) {
            if (this.transport.sendObject &&
                this.transport.isObjectBasedTransport) {
                var msg = this.protocol.createObjectMessage(message);
                if (this.isTrace) {
                    this.logger.trace(">> ".concat(JSON.stringify(msg)));
                }
                return this.transport.sendObject(msg, options);
            }
            else {
                var strMessage = this.protocol.createStringMessage(message);
                if (this.isTrace) {
                    this.logger.trace(">> ".concat(strMessage));
                }
                return this.transport.send(strMessage, options);
            }
        };
        Connection.prototype.on = function (type, messageHandler) {
            type = type.toLowerCase();
            if (this.messageHandlers[type] === undefined) {
                this.messageHandlers[type] = {};
            }
            var id = this.ids++;
            this.messageHandlers[type][id] = messageHandler;
            return {
                type: type,
                id: id,
            };
        };
        Connection.prototype.off = function (info) {
            delete this.messageHandlers[info.type.toLowerCase()][info.id];
        };
        Object.defineProperty(Connection.prototype, "isConnected", {
            get: function () {
                return this.protocol.isLoggedIn;
            },
            enumerable: false,
            configurable: true
        });
        Connection.prototype.connected = function (callback) {
            var _this = this;
            return this.protocol.loggedIn(function () {
                var currentServer = _this.transport.name();
                callback(currentServer);
            });
        };
        Connection.prototype.disconnected = function (callback) {
            return this.registry.add("disconnected", callback);
        };
        Connection.prototype.login = function (authRequest, reconnect) {
            return __awaiter$2(this, void 0, void 0, function () {
                var newAuth, identity, error_2;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._defaultAuth) {
                                this._defaultAuth = authRequest;
                            }
                            if (this._swapTransport) {
                                this.logger.trace("Detected a transport swap, swapping transports");
                                newAuth = this.transportSwap();
                                authRequest = newAuth !== null && newAuth !== void 0 ? newAuth : authRequest;
                            }
                            this.logger.trace("Starting login for transport: ".concat(this.transport.name(), " and auth ").concat(JSON.stringify(authRequest)));
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4, this.transport.open()];
                        case 2:
                            _a.sent();
                            this.logger.trace("Transport: ".concat(this.transport.name(), " opened, logging in"));
                            timer$1("connection").mark("transport-opened");
                            return [4, this.protocol.login(authRequest, reconnect)];
                        case 3:
                            identity = _a.sent();
                            this.logger.trace("Logged in with identity: ".concat(JSON.stringify(identity)));
                            timer$1("connection").mark("protocol-logged-in");
                            return [2, identity];
                        case 4:
                            error_2 = _a.sent();
                            if (this._switchInProgress) {
                                this.logger.trace("An error while logging in after a transport swap, preparing a default swap.");
                                this.prepareDefaultSwap();
                            }
                            throw new Error(error_2);
                        case 5: return [2];
                    }
                });
            });
        };
        Connection.prototype.logout = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.protocol.logout()];
                        case 1:
                            _a.sent();
                            return [4, this.transport.close()];
                        case 2:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Connection.prototype.loggedIn = function (callback) {
            return this.protocol.loggedIn(callback);
        };
        Connection.prototype.domain = function (domain, successMessages, errorMessages) {
            return this.protocol.domain(domain, this.logger.subLogger("domain=".concat(domain)), successMessages, errorMessages);
        };
        Connection.prototype.authToken = function () {
            return this.protocol.authToken();
        };
        Connection.prototype.reconnect = function () {
            return this.transport.reconnect();
        };
        Connection.prototype.distributeMessage = function (message, type) {
            var _this = this;
            var handlers = this.messageHandlers[type.toLowerCase()];
            if (handlers !== undefined) {
                Object.keys(handlers).forEach(function (handlerId) {
                    var handler = handlers[handlerId];
                    if (handler !== undefined) {
                        try {
                            handler(message);
                        }
                        catch (error) {
                            try {
                                _this.logger.error("Message handler failed with ".concat(error.stack), error);
                            }
                            catch (loggerError) {
                                console.log("Message handler failed", error);
                            }
                        }
                    }
                });
            }
        };
        Connection.prototype.handleConnectionChanged = function (connected) {
            if (this._connected === connected) {
                return;
            }
            this._connected = connected;
            if (connected) {
                if (this.settings.replaySpecs && this.settings.replaySpecs.length) {
                    this.replayer = new MessageReplayerImpl$1(this.settings.replaySpecs);
                    this.replayer.init(this);
                }
                this.registry.execute("connected");
            }
            else {
                this.registry.execute("disconnected");
            }
        };
        Connection.prototype.handleTransportMessage = function (msg) {
            var msgObj;
            if (typeof msg === "string") {
                msgObj = this.protocol.processStringMessage(msg);
            }
            else {
                msgObj = this.protocol.processObjectMessage(msg);
            }
            if (this.isTrace) {
                this.logger.trace("<< ".concat(JSON.stringify(msgObj)));
            }
            this.distributeMessage(msgObj.msg, msgObj.msgType);
        };
        Connection.prototype.verifyConnection = function () {
            var _this = this;
            return PromisePlus$2(function (resolve) {
                var unsub;
                var ready = waitForInvocations$1(2, function () {
                    if (unsub) {
                        unsub();
                    }
                    resolve();
                });
                unsub = _this.onLibReAnnounced(function (lib) {
                    if (lib.name === "interop") {
                        return ready();
                    }
                    if (lib.name === "contexts") {
                        return ready();
                    }
                });
            }, 10000, "Transport switch timed out waiting for all libraries to be re-announced");
        };
        Connection.prototype.getNewSecondaryTransport = function (settings) {
            var _a;
            if (!((_a = settings.transportConfig) === null || _a === void 0 ? void 0 : _a.url)) {
                throw new Error("Missing secondary transport URL.");
            }
            return new WS$1(Object.assign({}, this.settings, { ws: settings.transportConfig.url, reconnectAttempts: 1 }), this.logger.subLogger("ws-secondary"));
        };
        Connection.prototype.getNewSecondaryAuth = function (settings) {
            var _a;
            if (!((_a = settings.transportConfig) === null || _a === void 0 ? void 0 : _a.auth)) {
                throw new Error("Missing secondary transport auth information.");
            }
            return settings.transportConfig.auth;
        };
        Connection.prototype.transportSwap = function () {
            this._swapTransport = false;
            if (!this._targetTransport || !this._targetAuth) {
                this.logger.warn("Error while switching transports - either the target transport or auth is not defined: transport defined -> ".concat(!!this._defaultTransport, ", auth defined -> ").concat(!!this._targetAuth, ". Staying on the current one."));
                return;
            }
            this._transportSubscriptions.forEach(function (unsub) { return unsub(); });
            this._transportSubscriptions = [];
            this.transport = this._targetTransport;
            var unsubConnectionChanged = this.transport.onConnectedChanged(this.handleConnectionChanged.bind(this));
            var unsubOnMessage = this.transport.onMessage(this.handleTransportMessage.bind(this));
            this._transportSubscriptions.push(unsubConnectionChanged);
            this._transportSubscriptions.push(unsubOnMessage);
            return this._targetAuth;
        };
        Connection.prototype.prepareDefaultSwap = function () {
            var _this = this;
            this._transportSubscriptions.forEach(function (unsub) { return unsub(); });
            this._transportSubscriptions = [];
            this.transport.close().catch(function (error) { return _this.logger.warn("Error closing the ".concat(_this.transport.name(), " transport after a failed connection attempt: ").concat(JSON.stringify(error))); });
            this._targetTransport = this._defaultTransport;
            this._targetAuth = this._defaultAuth;
            this._swapTransport = true;
        };
        return Connection;
    }());

    var order$1 = ["trace", "debug", "info", "warn", "error", "off"];
    var Logger$1 = (function () {
        function Logger(name, parent, logFn) {
            this.name = name;
            this.parent = parent;
            this.subLoggers = [];
            this.logFn = console;
            this.customLogFn = false;
            this.name = name;
            if (parent) {
                this.path = "".concat(parent.path, ".").concat(name);
            }
            else {
                this.path = name;
            }
            this.loggerFullName = "[".concat(this.path, "]");
            this.includeTimeAndLevel = !logFn;
            if (logFn) {
                this.logFn = logFn;
                this.customLogFn = true;
            }
        }
        Logger.prototype.subLogger = function (name) {
            var existingSub = this.subLoggers.filter(function (subLogger) {
                return subLogger.name === name;
            })[0];
            if (existingSub !== undefined) {
                return existingSub;
            }
            Object.keys(this).forEach(function (key) {
                if (key === name) {
                    throw new Error("This sub logger name is not allowed.");
                }
            });
            var sub = new Logger(name, this, this.customLogFn ? this.logFn : undefined);
            this.subLoggers.push(sub);
            return sub;
        };
        Logger.prototype.publishLevel = function (level) {
            var _a;
            if (level) {
                this._publishLevel = level;
            }
            return this._publishLevel || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.publishLevel());
        };
        Logger.prototype.consoleLevel = function (level) {
            var _a;
            if (level) {
                this._consoleLevel = level;
            }
            return this._consoleLevel || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.consoleLevel());
        };
        Logger.prototype.log = function (message, level, error) {
            this.publishMessage(level || "info", message, error);
        };
        Logger.prototype.trace = function (message) {
            this.log(message, "trace");
        };
        Logger.prototype.debug = function (message) {
            this.log(message, "debug");
        };
        Logger.prototype.info = function (message) {
            this.log(message, "info");
        };
        Logger.prototype.warn = function (message) {
            this.log(message, "warn");
        };
        Logger.prototype.error = function (message, err) {
            this.log(message, "error");
        };
        Logger.prototype.canPublish = function (level, compareWith) {
            var levelIdx = order$1.indexOf(level);
            var restrictionIdx = order$1.indexOf(compareWith || this.consoleLevel() || "trace");
            return levelIdx >= restrictionIdx;
        };
        Logger.prototype.publishMessage = function (level, message, error) {
            var loggerName = this.loggerFullName;
            if (level === "error" && !error) {
                var e = new Error();
                if (e.stack) {
                    message =
                        message +
                            "\n" +
                            e.stack
                                .split("\n")
                                .slice(3)
                                .join("\n");
                }
            }
            if (this.canPublish(level, this.publishLevel())) {
                var interop = Logger.Interop;
                if (interop) {
                    try {
                        if (interop.methods({ name: Logger.InteropMethodName }).length > 0) {
                            interop.invoke(Logger.InteropMethodName, {
                                msg: "".concat(message),
                                logger: loggerName,
                                level: level
                            });
                        }
                    }
                    catch (_a) {
                    }
                }
            }
            if (this.canPublish(level)) {
                var prefix = "";
                if (this.includeTimeAndLevel) {
                    var date = new Date();
                    var time = "".concat(date.getHours(), ":").concat(date.getMinutes(), ":").concat(date.getSeconds(), ":").concat(date.getMilliseconds());
                    prefix = "[".concat(time, "] [").concat(level, "] ");
                }
                var toPrint = "".concat(prefix).concat(loggerName, ": ").concat(message);
                switch (level) {
                    case "trace":
                        this.logFn.debug(toPrint);
                        break;
                    case "debug":
                        if (this.logFn.debug) {
                            this.logFn.debug(toPrint);
                        }
                        else {
                            this.logFn.log(toPrint);
                        }
                        break;
                    case "info":
                        this.logFn.info(toPrint);
                        break;
                    case "warn":
                        this.logFn.warn(toPrint);
                        break;
                    case "error":
                        this.logFn.error(toPrint, error);
                        break;
                }
            }
        };
        Logger.InteropMethodName = "T42.AppLogger.Log";
        return Logger;
    }());

    var GW_MESSAGE_CREATE_CONTEXT$1 = "create-context";
    var GW_MESSAGE_ACTIVITY_CREATED$1 = "created";
    var GW_MESSAGE_ACTIVITY_DESTROYED$1 = "destroyed";
    var GW_MESSAGE_CONTEXT_CREATED$1 = "context-created";
    var GW_MESSAGE_CONTEXT_ADDED$1 = "context-added";
    var GW_MESSAGE_SUBSCRIBE_CONTEXT$1 = "subscribe-context";
    var GW_MESSAGE_SUBSCRIBED_CONTEXT$1 = "subscribed-context";
    var GW_MESSAGE_UNSUBSCRIBE_CONTEXT$1 = "unsubscribe-context";
    var GW_MESSAGE_DESTROY_CONTEXT$1 = "destroy-context";
    var GW_MESSAGE_CONTEXT_DESTROYED$1 = "context-destroyed";
    var GW_MESSAGE_UPDATE_CONTEXT$1 = "update-context";
    var GW_MESSAGE_CONTEXT_UPDATED$1 = "context-updated";
    var GW_MESSAGE_JOINED_ACTIVITY$1 = "joined";

    var ContextMessageReplaySpec$1 = {
        get name() {
            return "context";
        },
        get types() {
            return [
                GW_MESSAGE_CREATE_CONTEXT$1,
                GW_MESSAGE_ACTIVITY_CREATED$1,
                GW_MESSAGE_ACTIVITY_DESTROYED$1,
                GW_MESSAGE_CONTEXT_CREATED$1,
                GW_MESSAGE_CONTEXT_ADDED$1,
                GW_MESSAGE_SUBSCRIBE_CONTEXT$1,
                GW_MESSAGE_SUBSCRIBED_CONTEXT$1,
                GW_MESSAGE_UNSUBSCRIBE_CONTEXT$1,
                GW_MESSAGE_DESTROY_CONTEXT$1,
                GW_MESSAGE_CONTEXT_DESTROYED$1,
                GW_MESSAGE_UPDATE_CONTEXT$1,
                GW_MESSAGE_CONTEXT_UPDATED$1,
                GW_MESSAGE_JOINED_ACTIVITY$1
            ];
        }
    };

    var version$4 = "5.9.0";

    function prepareConfig$1 (configuration, ext, glue42gd) {
        var _a, _b, _c, _d;
        var nodeStartingContext;
        if (Utils$1.isNode()) {
            var startingContextString = process.env._GD_STARTING_CONTEXT_;
            if (startingContextString) {
                try {
                    nodeStartingContext = JSON.parse(startingContextString);
                }
                catch (_e) {
                }
            }
        }
        function getConnection() {
            var _a, _b, _c, _d, _e, _f;
            var gwConfig = configuration.gateway;
            var protocolVersion = (_a = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.protocolVersion) !== null && _a !== void 0 ? _a : 3;
            var reconnectInterval = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.reconnectInterval;
            var reconnectAttempts = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.reconnectAttempts;
            var defaultWs = "ws://localhost:8385";
            var ws = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.ws;
            var sharedWorker = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.sharedWorker;
            var inproc = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.inproc;
            var webPlatform = (_b = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.webPlatform) !== null && _b !== void 0 ? _b : undefined;
            if (glue42gd) {
                ws = glue42gd.gwURL;
            }
            if (Utils$1.isNode() && nodeStartingContext && nodeStartingContext.gwURL) {
                ws = nodeStartingContext.gwURL;
            }
            if (!ws && !sharedWorker && !inproc) {
                ws = defaultWs;
            }
            var instanceId;
            var windowId;
            var pid;
            var environment;
            var region;
            var appName = getApplication();
            var uniqueAppName = appName;
            if (typeof glue42gd !== "undefined") {
                windowId = glue42gd.windowId;
                pid = glue42gd.pid;
                if (glue42gd.env) {
                    environment = glue42gd.env.env;
                    region = glue42gd.env.region;
                }
                uniqueAppName = (_c = glue42gd.application) !== null && _c !== void 0 ? _c : "glue-app";
                instanceId = glue42gd.appInstanceId;
            }
            else if (Utils$1.isNode()) {
                pid = process.pid;
                if (nodeStartingContext) {
                    environment = nodeStartingContext.env;
                    region = nodeStartingContext.region;
                    instanceId = nodeStartingContext.instanceId;
                }
            }
            else if (typeof (window === null || window === void 0 ? void 0 : window.glue42electron) !== "undefined") {
                windowId = window === null || window === void 0 ? void 0 : window.glue42electron.instanceId;
                pid = window === null || window === void 0 ? void 0 : window.glue42electron.pid;
                environment = window === null || window === void 0 ? void 0 : window.glue42electron.env;
                region = window === null || window === void 0 ? void 0 : window.glue42electron.region;
                uniqueAppName = (_d = window === null || window === void 0 ? void 0 : window.glue42electron.application) !== null && _d !== void 0 ? _d : "glue-app";
                instanceId = window === null || window === void 0 ? void 0 : window.glue42electron.instanceId;
            }
            else ;
            var replaySpecs = (_f = (_e = configuration.gateway) === null || _e === void 0 ? void 0 : _e.replaySpecs) !== null && _f !== void 0 ? _f : [];
            replaySpecs.push(ContextMessageReplaySpec$1);
            var identity = {
                application: uniqueAppName,
                applicationName: appName,
                windowId: windowId,
                instance: instanceId,
                process: pid,
                region: region,
                environment: environment,
                api: ext.version || version$4
            };
            if (configuration.identity) {
                identity = Object.assign(identity, configuration.identity);
            }
            return {
                identity: identity,
                reconnectInterval: reconnectInterval,
                ws: ws,
                sharedWorker: sharedWorker,
                webPlatform: webPlatform,
                inproc: inproc,
                protocolVersion: protocolVersion,
                reconnectAttempts: reconnectAttempts,
                replaySpecs: replaySpecs,
            };
        }
        function getContexts() {
            if (typeof configuration.contexts === "undefined") {
                return { reAnnounceKnownContexts: true };
            }
            if (typeof configuration.contexts === "boolean" && configuration.contexts) {
                return { reAnnounceKnownContexts: true };
            }
            if (typeof configuration.contexts === "object") {
                return Object.assign({}, { reAnnounceKnownContexts: true }, configuration.contexts);
            }
            return false;
        }
        function getApplication() {
            if (configuration.application) {
                return configuration.application;
            }
            if (glue42gd) {
                return glue42gd.applicationName;
            }
            if (typeof window !== "undefined" && typeof window.glue42electron !== "undefined") {
                return window.glue42electron.application;
            }
            var uid = shortid$4();
            if (Utils$1.isNode()) {
                if (nodeStartingContext) {
                    return nodeStartingContext.applicationConfig.name;
                }
                return "NodeJS" + uid;
            }
            if (typeof window !== "undefined" && typeof document !== "undefined") {
                return document.title + " (".concat(uid, ")");
            }
            return uid;
        }
        function getAuth() {
            var _a, _b, _c;
            if (typeof configuration.auth === "string") {
                return {
                    token: configuration.auth
                };
            }
            if (configuration.auth) {
                return configuration.auth;
            }
            if (Utils$1.isNode() && nodeStartingContext && nodeStartingContext.gwToken) {
                return {
                    gatewayToken: nodeStartingContext.gwToken
                };
            }
            if (((_a = configuration.gateway) === null || _a === void 0 ? void 0 : _a.webPlatform) || ((_b = configuration.gateway) === null || _b === void 0 ? void 0 : _b.inproc) || ((_c = configuration.gateway) === null || _c === void 0 ? void 0 : _c.sharedWorker)) {
                return {
                    username: "glue42", password: "glue42"
                };
            }
        }
        function getLogger() {
            var _a, _b;
            var config = configuration.logger;
            var defaultLevel = "warn";
            if (!config) {
                config = defaultLevel;
            }
            var gdConsoleLevel;
            if (glue42gd) {
                gdConsoleLevel = glue42gd.consoleLogLevel;
            }
            if (typeof config === "string") {
                return { console: gdConsoleLevel !== null && gdConsoleLevel !== void 0 ? gdConsoleLevel : config, publish: defaultLevel };
            }
            return {
                console: (_a = gdConsoleLevel !== null && gdConsoleLevel !== void 0 ? gdConsoleLevel : config.console) !== null && _a !== void 0 ? _a : defaultLevel,
                publish: (_b = config.publish) !== null && _b !== void 0 ? _b : defaultLevel
            };
        }
        var connection = getConnection();
        var application = getApplication();
        if (typeof window !== "undefined") {
            var windowAsAny = window;
            var containerApplication = windowAsAny.htmlContainer ?
                "".concat(windowAsAny.htmlContainer.containerName, ".").concat(windowAsAny.htmlContainer.application) :
                (_a = windowAsAny === null || windowAsAny === void 0 ? void 0 : windowAsAny.glue42gd) === null || _a === void 0 ? void 0 : _a.application;
            if (containerApplication) {
                application = containerApplication;
            }
        }
        return {
            bus: (_b = configuration.bus) !== null && _b !== void 0 ? _b : false,
            application: application,
            auth: getAuth(),
            logger: getLogger(),
            connection: connection,
            metrics: (_c = configuration.metrics) !== null && _c !== void 0 ? _c : true,
            contexts: getContexts(),
            version: ext.version || version$4,
            libs: (_d = ext.libs) !== null && _d !== void 0 ? _d : [],
            customLogger: configuration.customLogger
        };
    }

    var GW3ContextData$1 = (function () {
        function GW3ContextData(contextId, name, isAnnounced, activityId) {
            this.updateCallbacks = {};
            this.contextId = contextId;
            this.name = name;
            this.isAnnounced = isAnnounced;
            this.activityId = activityId;
            this.context = {};
        }
        GW3ContextData.prototype.hasCallbacks = function () {
            return Object.keys(this.updateCallbacks).length > 0;
        };
        GW3ContextData.prototype.getState = function () {
            if (this.isAnnounced && this.hasCallbacks()) {
                return 3;
            }
            if (this.isAnnounced) {
                return 2;
            }
            if (this.hasCallbacks()) {
                return 1;
            }
            return 0;
        };
        return GW3ContextData;
    }());

    function applyContextDelta$1(context, delta, logger) {
        try {
            if (logger === null || logger === void 0 ? void 0 : logger.canPublish("trace")) {
                logger === null || logger === void 0 ? void 0 : logger.trace("applying context delta ".concat(JSON.stringify(delta), " on context ").concat(JSON.stringify(context)));
            }
            if (!delta) {
                return context;
            }
            if (delta.reset) {
                context = __assign$2({}, delta.reset);
                return context;
            }
            context = deepClone$1(context, undefined);
            if (delta.commands) {
                for (var _i = 0, _a = delta.commands; _i < _a.length; _i++) {
                    var command = _a[_i];
                    if (command.type === "remove") {
                        deletePath$1(context, command.path);
                    }
                    else if (command.type === "set") {
                        setValueToPath$1(context, command.value, command.path);
                    }
                }
                return context;
            }
            var added_1 = delta.added;
            var updated_1 = delta.updated;
            var removed = delta.removed;
            if (added_1) {
                Object.keys(added_1).forEach(function (key) {
                    context[key] = added_1[key];
                });
            }
            if (updated_1) {
                Object.keys(updated_1).forEach(function (key) {
                    mergeObjectsProperties$1(key, context, updated_1);
                });
            }
            if (removed) {
                removed.forEach(function (key) {
                    delete context[key];
                });
            }
            return context;
        }
        catch (e) {
            logger === null || logger === void 0 ? void 0 : logger.error("error applying context delta ".concat(JSON.stringify(delta), " on context ").concat(JSON.stringify(context)), e);
            return context;
        }
    }
    function deepClone$1(obj, hash) {
        hash = hash || new WeakMap();
        if (Object(obj) !== obj) {
            return obj;
        }
        if (obj instanceof Set) {
            return new Set(obj);
        }
        if (hash.has(obj)) {
            return hash.get(obj);
        }
        var result = obj instanceof Date ? new Date(obj)
            : obj instanceof RegExp ? new RegExp(obj.source, obj.flags)
                : obj.constructor ? new obj.constructor()
                    : Object.create(null);
        hash.set(obj, result);
        if (obj instanceof Map) {
            Array.from(obj, function (_a) {
                var key = _a[0], val = _a[1];
                return result.set(key, deepClone$1(val, hash));
            });
        }
        return Object.assign.apply(Object, __spreadArray$1([result], Object.keys(obj).map(function (key) {
            var _a;
            return (_a = {}, _a[key] = deepClone$1(obj[key], hash), _a);
        }), false));
    }
    var mergeObjectsProperties$1 = function (key, what, withWhat) {
        var right = withWhat[key];
        if (right === undefined) {
            return what;
        }
        var left = what[key];
        if (!left || !right) {
            what[key] = right;
            return what;
        }
        if (typeof left === "string" ||
            typeof left === "number" ||
            typeof left === "boolean" ||
            typeof right === "string" ||
            typeof right === "number" ||
            typeof right === "boolean" ||
            Array.isArray(left) ||
            Array.isArray(right)) {
            what[key] = right;
            return what;
        }
        what[key] = Object.assign({}, left, right);
        return what;
    };
    function deepEqual$2(x, y) {
        if (x === y) {
            return true;
        }
        if (!(x instanceof Object) || !(y instanceof Object)) {
            return false;
        }
        if (x.constructor !== y.constructor) {
            return false;
        }
        for (var p in x) {
            if (!x.hasOwnProperty(p)) {
                continue;
            }
            if (!y.hasOwnProperty(p)) {
                return false;
            }
            if (x[p] === y[p]) {
                continue;
            }
            if (typeof (x[p]) !== "object") {
                return false;
            }
            if (!deepEqual$2(x[p], y[p])) {
                return false;
            }
        }
        for (var p in y) {
            if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) {
                return false;
            }
        }
        return true;
    }
    function setValueToPath$1(obj, value, path) {
        var pathArr = path.split(".");
        var i;
        for (i = 0; i < pathArr.length - 1; i++) {
            if (!obj[pathArr[i]]) {
                obj[pathArr[i]] = {};
            }
            if (typeof obj[pathArr[i]] !== "object") {
                obj[pathArr[i]] = {};
            }
            obj = obj[pathArr[i]];
        }
        obj[pathArr[i]] = value;
    }
    function isSubset$1(superObj, subObj) {
        return Object.keys(subObj).every(function (ele) {
            if (typeof subObj[ele] === "object") {
                return isSubset$1((superObj === null || superObj === void 0 ? void 0 : superObj[ele]) || {}, subObj[ele] || {});
            }
            return subObj[ele] === (superObj === null || superObj === void 0 ? void 0 : superObj[ele]);
        });
    }
    function deletePath$1(obj, path) {
        var pathArr = path.split(".");
        var i;
        for (i = 0; i < pathArr.length - 1; i++) {
            if (!obj[pathArr[i]]) {
                return;
            }
            obj = obj[pathArr[i]];
        }
        delete obj[pathArr[i]];
    }

    var GW3Bridge$1 = (function () {
        function GW3Bridge(config) {
            var _this = this;
            var _a;
            this._contextNameToData = {};
            this._gw3Subscriptions = [];
            this._nextCallbackSubscriptionNumber = 0;
            this._contextNameToId = {};
            this._contextIdToName = {};
            this._protocolVersion = undefined;
            this._contextsTempCache = {};
            this._contextsSubscriptionsCache = [];
            this._connection = config.connection;
            this._logger = config.logger;
            this._trackAllContexts = config.trackAllContexts;
            this._reAnnounceKnownContexts = config.reAnnounceKnownContexts;
            this._gw3Session = this._connection.domain("global", [
                GW_MESSAGE_CONTEXT_CREATED$1,
                GW_MESSAGE_SUBSCRIBED_CONTEXT$1,
                GW_MESSAGE_CONTEXT_DESTROYED$1,
                GW_MESSAGE_CONTEXT_UPDATED$1,
            ]);
            this._gw3Session.disconnected(this.resetState.bind(this));
            this._gw3Session.onJoined(function (wasReconnect) {
                if (!wasReconnect) {
                    return;
                }
                if (!_this._reAnnounceKnownContexts) {
                    return _this._connection.setLibReAnnounced({ name: "contexts" });
                }
                _this.reInitiateState().then(function () { return _this._connection.setLibReAnnounced({ name: "contexts" }); });
            });
            this.subscribeToContextCreatedMessages();
            this.subscribeToContextUpdatedMessages();
            this.subscribeToContextDestroyedMessages();
            (_a = this._connection.replayer) === null || _a === void 0 ? void 0 : _a.drain(ContextMessageReplaySpec$1.name, function (message) {
                var type = message.type;
                if (!type) {
                    return;
                }
                if (type === GW_MESSAGE_CONTEXT_CREATED$1 ||
                    type === GW_MESSAGE_CONTEXT_ADDED$1 ||
                    type === GW_MESSAGE_ACTIVITY_CREATED$1) {
                    _this.handleContextCreatedMessage(message);
                }
                else if (type === GW_MESSAGE_SUBSCRIBED_CONTEXT$1 ||
                    type === GW_MESSAGE_CONTEXT_UPDATED$1 ||
                    type === GW_MESSAGE_JOINED_ACTIVITY$1) {
                    _this.handleContextUpdatedMessage(message);
                }
                else if (type === GW_MESSAGE_CONTEXT_DESTROYED$1 ||
                    type === GW_MESSAGE_ACTIVITY_DESTROYED$1) {
                    _this.handleContextDestroyedMessage(message);
                }
            });
        }
        Object.defineProperty(GW3Bridge.prototype, "protocolVersion", {
            get: function () {
                var _a;
                if (!this._protocolVersion) {
                    var contextsDomainInfo = this._connection.availableDomains.find(function (d) { return d.uri === "context"; });
                    this._protocolVersion = (_a = contextsDomainInfo === null || contextsDomainInfo === void 0 ? void 0 : contextsDomainInfo.version) !== null && _a !== void 0 ? _a : 1;
                }
                return this._protocolVersion;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GW3Bridge.prototype, "setPathSupported", {
            get: function () {
                return this.protocolVersion >= 2;
            },
            enumerable: false,
            configurable: true
        });
        GW3Bridge.prototype.dispose = function () {
            for (var _i = 0, _a = this._gw3Subscriptions; _i < _a.length; _i++) {
                var sub = _a[_i];
                this._connection.off(sub);
            }
            this._gw3Subscriptions.length = 0;
            for (var contextName in this._contextNameToData) {
                if (this._contextNameToId.hasOwnProperty(contextName)) {
                    delete this._contextNameToData[contextName];
                }
            }
        };
        GW3Bridge.prototype.createContext = function (name, data) {
            var _this = this;
            return this._gw3Session
                .send({
                type: GW_MESSAGE_CREATE_CONTEXT$1,
                domain: "global",
                name: name,
                data: data,
                lifetime: "retained",
            })
                .then(function (createContextMsg) {
                _this._contextNameToId[name] = createContextMsg.context_id;
                _this._contextIdToName[createContextMsg.context_id] = name;
                var contextData = _this._contextNameToData[name] || new GW3ContextData$1(createContextMsg.context_id, name, true, undefined);
                contextData.isAnnounced = true;
                contextData.name = name;
                contextData.contextId = createContextMsg.context_id;
                contextData.context = createContextMsg.data || data;
                contextData.hasReceivedSnapshot = true;
                _this._contextNameToData[name] = contextData;
                return createContextMsg.context_id;
            });
        };
        GW3Bridge.prototype.all = function () {
            var _this = this;
            return Object.keys(this._contextNameToData)
                .filter(function (name) { return _this._contextNameToData[name].isAnnounced; });
        };
        GW3Bridge.prototype.update = function (name, delta) {
            var _a;
            return __awaiter$2(this, void 0, void 0, function () {
                var contextData, currentContext, calculatedDelta;
                var _this = this;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            contextData = this._contextNameToData[name];
                            if (!contextData || !contextData.isAnnounced) {
                                return [2, this.createContext(name, delta)];
                            }
                            currentContext = contextData.context;
                            if (!!contextData.hasCallbacks()) return [3, 2];
                            return [4, this.get(contextData.name)];
                        case 1:
                            currentContext = _b.sent();
                            _b.label = 2;
                        case 2:
                            calculatedDelta = this.protocolVersion === 2 ?
                                this.calculateContextDeltaV2(currentContext, delta) :
                                this.calculateContextDeltaV1(currentContext, delta);
                            if (!Object.keys(calculatedDelta.added).length
                                && !Object.keys(calculatedDelta.updated).length
                                && !calculatedDelta.removed.length
                                && !((_a = calculatedDelta.commands) === null || _a === void 0 ? void 0 : _a.length)) {
                                return [2, Promise.resolve()];
                            }
                            return [2, this._gw3Session
                                    .send({
                                    type: GW_MESSAGE_UPDATE_CONTEXT$1,
                                    domain: "global",
                                    context_id: contextData.contextId,
                                    delta: calculatedDelta,
                                }, {}, { skipPeerId: false })
                                    .then(function (gwResponse) {
                                    _this.handleUpdated(contextData, calculatedDelta, {
                                        updaterId: gwResponse.peer_id
                                    });
                                })];
                    }
                });
            });
        };
        GW3Bridge.prototype.set = function (name, data) {
            var _this = this;
            var contextData = this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                return this.createContext(name, data);
            }
            return this._gw3Session
                .send({
                type: GW_MESSAGE_UPDATE_CONTEXT$1,
                domain: "global",
                context_id: contextData.contextId,
                delta: { reset: data },
            }, {}, { skipPeerId: false })
                .then(function (gwResponse) {
                _this.handleUpdated(contextData, { reset: data, added: {}, removed: [], updated: {} }, { updaterId: gwResponse.peer_id });
            });
        };
        GW3Bridge.prototype.setPath = function (name, path, value) {
            if (!this.setPathSupported) {
                return Promise.reject("glue.contexts.setPath operation is not supported, use Glue42 3.10 or later");
            }
            return this.setPaths(name, [{ path: path, value: value }]);
        };
        GW3Bridge.prototype.setPaths = function (name, pathValues) {
            var _this = this;
            if (!this.setPathSupported) {
                return Promise.reject("glue.contexts.setPaths operation is not supported, use Glue42 3.10 or later");
            }
            var contextData = this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                var obj = {};
                for (var _i = 0, pathValues_1 = pathValues; _i < pathValues_1.length; _i++) {
                    var pathValue = pathValues_1[_i];
                    setValueToPath$1(obj, pathValue.value, pathValue.path);
                }
                return this.createContext(name, obj);
            }
            var commands = [];
            for (var _a = 0, pathValues_2 = pathValues; _a < pathValues_2.length; _a++) {
                var pathValue = pathValues_2[_a];
                if (pathValue.value === null) {
                    commands.push({ type: "remove", path: pathValue.path });
                }
                else {
                    commands.push({ type: "set", path: pathValue.path, value: pathValue.value });
                }
            }
            return this._gw3Session
                .send({
                type: GW_MESSAGE_UPDATE_CONTEXT$1,
                domain: "global",
                context_id: contextData.contextId,
                delta: { commands: commands }
            }, {}, { skipPeerId: false })
                .then(function (gwResponse) {
                _this.handleUpdated(contextData, { added: {}, removed: [], updated: {}, commands: commands }, { updaterId: gwResponse.peer_id });
            });
        };
        GW3Bridge.prototype.get = function (name) {
            var _this = this;
            var _a;
            var contextData = this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                return Promise.resolve({});
            }
            if (contextData && (!contextData.hasCallbacks() || !contextData.hasReceivedSnapshot)) {
                return new Promise(function (resolve) {
                    _this.subscribe(name, function (data, _d, _r, un) {
                        _this.unsubscribe(un);
                        resolve(data);
                    });
                });
            }
            var context = (_a = contextData === null || contextData === void 0 ? void 0 : contextData.context) !== null && _a !== void 0 ? _a : {};
            return Promise.resolve(context);
        };
        GW3Bridge.prototype.subscribe = function (name, callback, subscriptionKey) {
            var _this = this;
            var thisCallbackSubscriptionNumber = typeof subscriptionKey === "undefined" ? this._nextCallbackSubscriptionNumber : subscriptionKey;
            if (typeof subscriptionKey === "undefined") {
                this._nextCallbackSubscriptionNumber += 1;
            }
            if (this._contextsSubscriptionsCache.every(function (subscription) { return subscription.subKey !== _this._nextCallbackSubscriptionNumber; })) {
                this._contextsSubscriptionsCache.push({ contextName: name, subKey: thisCallbackSubscriptionNumber, callback: callback });
            }
            var contextData = this._contextNameToData[name];
            if (!contextData ||
                !contextData.isAnnounced) {
                contextData = contextData || new GW3ContextData$1(undefined, name, false, undefined);
                this._contextNameToData[name] = contextData;
                contextData.updateCallbacks[thisCallbackSubscriptionNumber] = callback;
                return Promise.resolve(thisCallbackSubscriptionNumber);
            }
            var hadCallbacks = contextData.hasCallbacks();
            contextData.updateCallbacks[thisCallbackSubscriptionNumber] = callback;
            if (!hadCallbacks) {
                if (!contextData.joinedActivity) {
                    if (contextData.context && contextData.sentExplicitSubscription) {
                        if (contextData.hasReceivedSnapshot) {
                            var clone = deepClone$1(contextData.context);
                            callback(clone, clone, [], thisCallbackSubscriptionNumber);
                        }
                        return Promise.resolve(thisCallbackSubscriptionNumber);
                    }
                    return this.sendSubscribe(contextData)
                        .then(function () { return thisCallbackSubscriptionNumber; });
                }
                else {
                    if (contextData.hasReceivedSnapshot) {
                        var clone = deepClone$1(contextData.context);
                        callback(clone, clone, [], thisCallbackSubscriptionNumber);
                    }
                    return Promise.resolve(thisCallbackSubscriptionNumber);
                }
            }
            else {
                if (contextData.hasReceivedSnapshot) {
                    var clone = deepClone$1(contextData.context);
                    callback(clone, clone, [], thisCallbackSubscriptionNumber);
                }
                return Promise.resolve(thisCallbackSubscriptionNumber);
            }
        };
        GW3Bridge.prototype.unsubscribe = function (subscriptionKey) {
            this._contextsSubscriptionsCache = this._contextsSubscriptionsCache.filter(function (subscription) { return subscription.subKey !== subscriptionKey; });
            for (var _i = 0, _a = Object.keys(this._contextNameToData); _i < _a.length; _i++) {
                var name_1 = _a[_i];
                var contextData = this._contextNameToData[name_1];
                if (!contextData) {
                    return;
                }
                var hadCallbacks = contextData.hasCallbacks();
                delete contextData.updateCallbacks[subscriptionKey];
                if (contextData.isAnnounced &&
                    hadCallbacks &&
                    !contextData.hasCallbacks() &&
                    contextData.sentExplicitSubscription) {
                    this.sendUnsubscribe(contextData);
                }
                if (!contextData.isAnnounced &&
                    !contextData.hasCallbacks()) {
                    delete this._contextNameToData[name_1];
                }
            }
        };
        GW3Bridge.prototype.destroy = function (name) {
            var contextData = this._contextNameToData[name];
            if (!contextData) {
                return Promise.reject("context with ".concat(name, " does not exist"));
            }
            return this._gw3Session
                .send({
                type: GW_MESSAGE_DESTROY_CONTEXT$1,
                domain: "global",
                context_id: contextData.contextId,
            }).then(function (_) { return undefined; });
        };
        GW3Bridge.prototype.handleUpdated = function (contextData, delta, extraData) {
            var oldContext = contextData.context;
            contextData.context = applyContextDelta$1(contextData.context, delta, this._logger);
            contextData.hasReceivedSnapshot = true;
            if (this._contextNameToData[contextData.name] === contextData &&
                !deepEqual$2(oldContext, contextData.context)) {
                this.invokeUpdateCallbacks(contextData, delta, extraData);
            }
        };
        GW3Bridge.prototype.subscribeToContextCreatedMessages = function () {
            var createdMessageTypes = [
                GW_MESSAGE_CONTEXT_ADDED$1,
                GW_MESSAGE_CONTEXT_CREATED$1,
                GW_MESSAGE_ACTIVITY_CREATED$1,
            ];
            for (var _i = 0, createdMessageTypes_1 = createdMessageTypes; _i < createdMessageTypes_1.length; _i++) {
                var createdMessageType = createdMessageTypes_1[_i];
                var sub = this._connection.on(createdMessageType, this.handleContextCreatedMessage.bind(this));
                this._gw3Subscriptions.push(sub);
            }
        };
        GW3Bridge.prototype.handleContextCreatedMessage = function (contextCreatedMsg) {
            var _this = this;
            var createdMessageType = contextCreatedMsg.type;
            if (createdMessageType === GW_MESSAGE_ACTIVITY_CREATED$1) {
                this._contextNameToId[contextCreatedMsg.activity_id] = contextCreatedMsg.context_id;
                this._contextIdToName[contextCreatedMsg.context_id] = contextCreatedMsg.activity_id;
            }
            else if (createdMessageType === GW_MESSAGE_CONTEXT_ADDED$1) {
                this._contextNameToId[contextCreatedMsg.name] = contextCreatedMsg.context_id;
                this._contextIdToName[contextCreatedMsg.context_id] = contextCreatedMsg.name;
            }
            else ;
            var name = this._contextIdToName[contextCreatedMsg.context_id];
            if (!name) {
                throw new Error("Received created event for context with unknown name: " + contextCreatedMsg.context_id);
            }
            if (!this._contextNameToId[name]) {
                throw new Error("Received created event for context with unknown id: " + contextCreatedMsg.context_id);
            }
            var contextData = this._contextNameToData[name];
            if (contextData) {
                if (contextData.isAnnounced) {
                    return;
                }
                else {
                    if (!contextData.hasCallbacks()) {
                        throw new Error("Assertion failure: contextData.hasCallbacks()");
                    }
                    contextData.isAnnounced = true;
                    contextData.contextId = contextCreatedMsg.context_id;
                    contextData.activityId = contextCreatedMsg.activity_id;
                    if (!contextData.sentExplicitSubscription) {
                        this.sendSubscribe(contextData);
                    }
                }
            }
            else {
                this._contextNameToData[name] = contextData =
                    new GW3ContextData$1(contextCreatedMsg.context_id, name, true, contextCreatedMsg.activity_id);
                if (this._trackAllContexts) {
                    this.subscribe(name, function () { }).then(function (subKey) { return _this._systemContextsSubKey = subKey; });
                }
            }
        };
        GW3Bridge.prototype.subscribeToContextUpdatedMessages = function () {
            var updatedMessageTypes = [
                GW_MESSAGE_CONTEXT_UPDATED$1,
                GW_MESSAGE_SUBSCRIBED_CONTEXT$1,
                GW_MESSAGE_JOINED_ACTIVITY$1,
            ];
            for (var _i = 0, updatedMessageTypes_1 = updatedMessageTypes; _i < updatedMessageTypes_1.length; _i++) {
                var updatedMessageType = updatedMessageTypes_1[_i];
                var sub = this._connection.on(updatedMessageType, this.handleContextUpdatedMessage.bind(this));
                this._gw3Subscriptions.push(sub);
            }
        };
        GW3Bridge.prototype.handleContextUpdatedMessage = function (contextUpdatedMsg) {
            var updatedMessageType = contextUpdatedMsg.type;
            var contextId = contextUpdatedMsg.context_id;
            var contextData = this._contextNameToData[this._contextIdToName[contextId]];
            var justSeen = !contextData || !contextData.isAnnounced;
            if (updatedMessageType === GW_MESSAGE_JOINED_ACTIVITY$1) {
                if (!contextData) {
                    contextData = new GW3ContextData$1(contextId, contextUpdatedMsg.activity_id, true, contextUpdatedMsg.activity_id);
                    this._contextNameToData[contextUpdatedMsg.activity_id] = contextData;
                    this._contextIdToName[contextId] = contextUpdatedMsg.activity_id;
                    this._contextNameToId[contextUpdatedMsg.activity_id] = contextId;
                }
                else {
                    contextData.contextId = contextId;
                    contextData.isAnnounced = true;
                    contextData.activityId = contextUpdatedMsg.activity_id;
                }
                contextData.joinedActivity = true;
            }
            else {
                if (!contextData || !contextData.isAnnounced) {
                    if (updatedMessageType === GW_MESSAGE_SUBSCRIBED_CONTEXT$1) {
                        contextData = contextData || new GW3ContextData$1(contextId, contextUpdatedMsg.name, true, undefined);
                        contextData.sentExplicitSubscription = true;
                        this._contextNameToData[contextUpdatedMsg.name] = contextData;
                        this._contextIdToName[contextId] = contextUpdatedMsg.name;
                        this._contextNameToId[contextUpdatedMsg.name] = contextId;
                    }
                    else {
                        this._logger.error("Received 'update' for unknown context: ".concat(contextId));
                    }
                    return;
                }
            }
            var oldContext = contextData.context;
            contextData.hasReceivedSnapshot = true;
            if (updatedMessageType === GW_MESSAGE_SUBSCRIBED_CONTEXT$1) {
                contextData.context = contextUpdatedMsg.data || {};
            }
            else if (updatedMessageType === GW_MESSAGE_JOINED_ACTIVITY$1) {
                contextData.context = contextUpdatedMsg.context_snapshot || {};
            }
            else if (updatedMessageType === GW_MESSAGE_CONTEXT_UPDATED$1) {
                contextData.context = applyContextDelta$1(contextData.context, contextUpdatedMsg.delta, this._logger);
            }
            else {
                throw new Error("Unrecognized context update message " + updatedMessageType);
            }
            if (justSeen ||
                !deepEqual$2(contextData.context, oldContext) ||
                updatedMessageType === GW_MESSAGE_SUBSCRIBED_CONTEXT$1) {
                this.invokeUpdateCallbacks(contextData, contextUpdatedMsg.delta, { updaterId: contextUpdatedMsg.updater_id });
            }
        };
        GW3Bridge.prototype.invokeUpdateCallbacks = function (contextData, delta, extraData) {
            delta = delta || { added: {}, updated: {}, reset: {}, removed: [] };
            if (delta.commands) {
                delta.added = delta.updated = delta.reset = {};
                delta.removed = [];
                for (var _i = 0, _a = delta.commands; _i < _a.length; _i++) {
                    var command = _a[_i];
                    if (command.type === "remove") {
                        if (command.path.indexOf(".") === -1) {
                            delta.removed.push(command.path);
                        }
                        setValueToPath$1(delta.updated, null, command.path);
                    }
                    else if (command.type === "set") {
                        setValueToPath$1(delta.updated, command.value, command.path);
                    }
                }
            }
            for (var updateCallbackIndex in contextData.updateCallbacks) {
                if (contextData.updateCallbacks.hasOwnProperty(updateCallbackIndex)) {
                    try {
                        var updateCallback = contextData.updateCallbacks[updateCallbackIndex];
                        updateCallback(deepClone$1(contextData.context), Object.assign({}, delta.added || {}, delta.updated || {}, delta.reset || {}), delta.removed, parseInt(updateCallbackIndex, 10), extraData);
                    }
                    catch (err) {
                        this._logger.debug("callback error: " + JSON.stringify(err));
                    }
                }
            }
        };
        GW3Bridge.prototype.subscribeToContextDestroyedMessages = function () {
            var destroyedMessageTypes = [
                GW_MESSAGE_CONTEXT_DESTROYED$1,
                GW_MESSAGE_ACTIVITY_DESTROYED$1,
            ];
            for (var _i = 0, destroyedMessageTypes_1 = destroyedMessageTypes; _i < destroyedMessageTypes_1.length; _i++) {
                var destroyedMessageType = destroyedMessageTypes_1[_i];
                var sub = this._connection.on(destroyedMessageType, this.handleContextDestroyedMessage.bind(this));
                this._gw3Subscriptions.push(sub);
            }
        };
        GW3Bridge.prototype.handleContextDestroyedMessage = function (destroyedMsg) {
            var destroyedMessageType = destroyedMsg.type;
            var contextId;
            var name;
            if (destroyedMessageType === GW_MESSAGE_ACTIVITY_DESTROYED$1) {
                name = destroyedMsg.activity_id;
                contextId = this._contextNameToId[name];
                if (!contextId) {
                    this._logger.error("Received 'destroyed' for unknown activity: ".concat(destroyedMsg.activity_id));
                    return;
                }
            }
            else {
                contextId = destroyedMsg.context_id;
                name = this._contextIdToName[contextId];
                if (!name) {
                    this._logger.error("Received 'destroyed' for unknown context: ".concat(destroyedMsg.context_id));
                    return;
                }
            }
            delete this._contextIdToName[contextId];
            delete this._contextNameToId[name];
            var contextData = this._contextNameToData[name];
            delete this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                this._logger.error("Received 'destroyed' for unknown context: ".concat(contextId));
                return;
            }
        };
        GW3Bridge.prototype.sendSubscribe = function (contextData) {
            contextData.sentExplicitSubscription = true;
            return this._gw3Session
                .send({
                type: GW_MESSAGE_SUBSCRIBE_CONTEXT$1,
                domain: "global",
                context_id: contextData.contextId,
            }).then(function (_) { return undefined; });
        };
        GW3Bridge.prototype.sendUnsubscribe = function (contextData) {
            contextData.sentExplicitSubscription = false;
            return this._gw3Session
                .send({
                type: GW_MESSAGE_UNSUBSCRIBE_CONTEXT$1,
                domain: "global",
                context_id: contextData.contextId,
            }).then(function (_) { return undefined; });
        };
        GW3Bridge.prototype.calculateContextDeltaV1 = function (from, to) {
            var delta = { added: {}, updated: {}, removed: [], reset: undefined };
            if (from) {
                for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {
                    var x = _a[_i];
                    if (Object.keys(to).indexOf(x) !== -1
                        && to[x] !== null
                        && !deepEqual$2(from[x], to[x])) {
                        delta.updated[x] = to[x];
                    }
                }
            }
            for (var _b = 0, _c = Object.keys(to); _b < _c.length; _b++) {
                var x = _c[_b];
                if (!from || (Object.keys(from).indexOf(x) === -1)) {
                    if (to[x] !== null) {
                        delta.added[x] = to[x];
                    }
                }
                else if (to[x] === null) {
                    delta.removed.push(x);
                }
            }
            return delta;
        };
        GW3Bridge.prototype.calculateContextDeltaV2 = function (from, to) {
            var _a, _b;
            var delta = { added: {}, updated: {}, removed: [], reset: undefined, commands: [] };
            for (var _i = 0, _c = Object.keys(to); _i < _c.length; _i++) {
                var x = _c[_i];
                if (to[x] !== null) {
                    var fromX = from ? from[x] : null;
                    if (!deepEqual$2(fromX, to[x])) {
                        (_a = delta.commands) === null || _a === void 0 ? void 0 : _a.push({ type: "set", path: x, value: to[x] });
                    }
                }
                else {
                    (_b = delta.commands) === null || _b === void 0 ? void 0 : _b.push({ type: "remove", path: x });
                }
            }
            return delta;
        };
        GW3Bridge.prototype.resetState = function () {
            var _this = this;
            for (var _i = 0, _a = this._gw3Subscriptions; _i < _a.length; _i++) {
                var sub = _a[_i];
                this._connection.off(sub);
            }
            if (this._systemContextsSubKey) {
                this.unsubscribe(this._systemContextsSubKey);
                delete this._systemContextsSubKey;
            }
            this._gw3Subscriptions = [];
            this._contextNameToId = {};
            this._contextIdToName = {};
            delete this._protocolVersion;
            this._contextsTempCache = Object.keys(this._contextNameToData).reduce(function (cacheSoFar, ctxName) {
                cacheSoFar[ctxName] = _this._contextNameToData[ctxName].context;
                return cacheSoFar;
            }, {});
            this._contextNameToData = {};
        };
        GW3Bridge.prototype.reInitiateState = function () {
            var _a;
            return __awaiter$2(this, void 0, void 0, function () {
                var _b, _c, _e, _i, ctxName, lastKnownData;
                var _this = this;
                return __generator$1(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            this.subscribeToContextCreatedMessages();
                            this.subscribeToContextUpdatedMessages();
                            this.subscribeToContextDestroyedMessages();
                            (_a = this._connection.replayer) === null || _a === void 0 ? void 0 : _a.drain(ContextMessageReplaySpec$1.name, function (message) {
                                var type = message.type;
                                if (!type) {
                                    return;
                                }
                                if (type === GW_MESSAGE_CONTEXT_CREATED$1 ||
                                    type === GW_MESSAGE_CONTEXT_ADDED$1 ||
                                    type === GW_MESSAGE_ACTIVITY_CREATED$1) {
                                    _this.handleContextCreatedMessage(message);
                                }
                                else if (type === GW_MESSAGE_SUBSCRIBED_CONTEXT$1 ||
                                    type === GW_MESSAGE_CONTEXT_UPDATED$1 ||
                                    type === GW_MESSAGE_JOINED_ACTIVITY$1) {
                                    _this.handleContextUpdatedMessage(message);
                                }
                                else if (type === GW_MESSAGE_CONTEXT_DESTROYED$1 ||
                                    type === GW_MESSAGE_ACTIVITY_DESTROYED$1) {
                                    _this.handleContextDestroyedMessage(message);
                                }
                            });
                            return [4, Promise.all(this._contextsSubscriptionsCache.map(function (subscription) { return _this.subscribe(subscription.contextName, subscription.callback, subscription.subKey); }))];
                        case 1:
                            _f.sent();
                            return [4, this.flushQueue()];
                        case 2:
                            _f.sent();
                            _b = this._contextsTempCache;
                            _c = [];
                            for (_e in _b)
                                _c.push(_e);
                            _i = 0;
                            _f.label = 3;
                        case 3:
                            if (!(_i < _c.length)) return [3, 7];
                            _e = _c[_i];
                            if (!(_e in _b)) return [3, 6];
                            ctxName = _e;
                            if (typeof this._contextsTempCache[ctxName] !== "object" || Object.keys(this._contextsTempCache[ctxName]).length === 0) {
                                return [3, 6];
                            }
                            lastKnownData = this._contextsTempCache[ctxName];
                            this._logger.info("Re-announcing known context: ".concat(ctxName));
                            return [4, this.flushQueue()];
                        case 4:
                            _f.sent();
                            return [4, this.update(ctxName, lastKnownData)];
                        case 5:
                            _f.sent();
                            _f.label = 6;
                        case 6:
                            _i++;
                            return [3, 3];
                        case 7:
                            this._contextsTempCache = {};
                            this._logger.info("Contexts are re-announced");
                            return [2];
                    }
                });
            });
        };
        GW3Bridge.prototype.flushQueue = function () {
            return new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, 0); });
        };
        return GW3Bridge;
    }());

    var ContextsModule$1 = (function () {
        function ContextsModule(config) {
            this._bridge = new GW3Bridge$1(config);
        }
        ContextsModule.prototype.all = function () {
            return this._bridge.all();
        };
        ContextsModule.prototype.update = function (name, data) {
            this.checkName(name);
            this.checkData(data);
            return this._bridge.update(name, data);
        };
        ContextsModule.prototype.set = function (name, data) {
            this.checkName(name);
            this.checkData(data);
            return this._bridge.set(name, data);
        };
        ContextsModule.prototype.setPath = function (name, path, data) {
            this.checkName(name);
            this.checkPath(path);
            var isTopLevelPath = path === "";
            if (isTopLevelPath) {
                this.checkData(data);
                return this.set(name, data);
            }
            return this._bridge.setPath(name, path, data);
        };
        ContextsModule.prototype.setPaths = function (name, paths) {
            this.checkName(name);
            if (!Array.isArray(paths)) {
                throw new Error("Please provide the paths as an array of PathValues!");
            }
            for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
                var _a = paths_1[_i], path = _a.path, value = _a.value;
                this.checkPath(path);
                var isTopLevelPath = path === "";
                if (isTopLevelPath) {
                    this.checkData(value);
                }
            }
            return this._bridge.setPaths(name, paths);
        };
        ContextsModule.prototype.subscribe = function (name, callback) {
            var _this = this;
            this.checkName(name);
            if (typeof callback !== "function") {
                throw new Error("Please provide the callback as a function!");
            }
            return this._bridge
                .subscribe(name, function (data, delta, removed, key, extraData) { return callback(data, delta, removed, function () { return _this._bridge.unsubscribe(key); }, extraData); })
                .then(function (key) {
                return function () {
                    _this._bridge.unsubscribe(key);
                };
            });
        };
        ContextsModule.prototype.get = function (name) {
            this.checkName(name);
            return this._bridge.get(name);
        };
        ContextsModule.prototype.ready = function () {
            return Promise.resolve(this);
        };
        ContextsModule.prototype.destroy = function (name) {
            this.checkName(name);
            return this._bridge.destroy(name);
        };
        Object.defineProperty(ContextsModule.prototype, "setPathSupported", {
            get: function () {
                return this._bridge.setPathSupported;
            },
            enumerable: false,
            configurable: true
        });
        ContextsModule.prototype.checkName = function (name) {
            if (typeof name !== "string" || name === "") {
                throw new Error("Please provide the name as a non-empty string!");
            }
        };
        ContextsModule.prototype.checkPath = function (path) {
            if (typeof path !== "string") {
                throw new Error("Please provide the path as a dot delimited string!");
            }
        };
        ContextsModule.prototype.checkData = function (data) {
            if (typeof data !== "object") {
                throw new Error("Please provide the data as an object!");
            }
        };
        return ContextsModule;
    }());

    function promisify$1 (promise, successCallback, errorCallback) {
        if (typeof successCallback !== "function" && typeof errorCallback !== "function") {
            return promise;
        }
        if (typeof successCallback !== "function") {
            successCallback = function () { };
        }
        else if (typeof errorCallback !== "function") {
            errorCallback = function () { };
        }
        return promise.then(successCallback, errorCallback);
    }

    function rejectAfter$1(ms, promise, error) {
        if (ms === void 0) { ms = 0; }
        var timeout;
        var clearTimeoutIfThere = function () {
            if (timeout) {
                clearTimeout(timeout);
            }
        };
        promise
            .then(function () {
            clearTimeoutIfThere();
        })
            .catch(function () {
            clearTimeoutIfThere();
        });
        return new Promise(function (resolve, reject) {
            timeout = setTimeout(function () { return reject(error); }, ms);
        });
    }

    var InvokeStatus$1;
    (function (InvokeStatus) {
        InvokeStatus[InvokeStatus["Success"] = 0] = "Success";
        InvokeStatus[InvokeStatus["Error"] = 1] = "Error";
    })(InvokeStatus$1 || (InvokeStatus$1 = {}));
    var Client$1 = (function () {
        function Client(protocol, repo, instance, configuration) {
            this.protocol = protocol;
            this.repo = repo;
            this.instance = instance;
            this.configuration = configuration;
        }
        Client.prototype.subscribe = function (method, options, successCallback, errorCallback, existingSub) {
            var _this = this;
            var callProtocolSubscribe = function (targetServers, stream, successProxy, errorProxy) {
                var _a;
                options.methodResponseTimeout = (_a = options.methodResponseTimeout) !== null && _a !== void 0 ? _a : options.waitTimeoutMs;
                _this.protocol.client.subscribe(stream, options, targetServers, successProxy, errorProxy, existingSub);
            };
            var promise = new Promise(function (resolve, reject) {
                var successProxy = function (sub) {
                    resolve(sub);
                };
                var errorProxy = function (err) {
                    reject(err);
                };
                if (!method) {
                    reject("Method definition is required. Please, provide either a unique string for a method name or a \u201CmethodDefinition\u201D object with a required \u201Cname\u201D property.");
                    return;
                }
                var methodDef;
                if (typeof method === "string") {
                    methodDef = { name: method };
                }
                else {
                    methodDef = method;
                }
                if (!methodDef.name) {
                    reject("Method definition is required. Please, provide either a unique string for a method name or a \u201CmethodDefinition\u201D object with a required \u201Cname\u201D property.");
                    return;
                }
                if (options === undefined) {
                    options = {};
                }
                var target = options.target;
                if (target === undefined) {
                    target = "best";
                }
                if (typeof target === "string" && target !== "all" && target !== "best") {
                    reject(new Error("\"".concat(target, "\" is not a valid target. Valid targets are \"all\", \"best\", or an instance.")));
                    return;
                }
                if (options.methodResponseTimeout === undefined) {
                    options.methodResponseTimeout = options.method_response_timeout;
                    if (options.methodResponseTimeout === undefined) {
                        options.methodResponseTimeout = _this.configuration.methodResponseTimeout;
                    }
                }
                if (options.waitTimeoutMs === undefined) {
                    options.waitTimeoutMs = options.wait_for_method_timeout;
                    if (options.waitTimeoutMs === undefined) {
                        options.waitTimeoutMs = _this.configuration.waitTimeoutMs;
                    }
                }
                var delayStep = 500;
                var delayTillNow = 0;
                var currentServers = _this.getServerMethodsByFilterAndTarget(methodDef, target);
                if (currentServers.length > 0) {
                    callProtocolSubscribe(currentServers, currentServers[0].methods[0], successProxy, errorProxy);
                }
                else {
                    var retry_1 = function () {
                        if (!target || !(options.waitTimeoutMs)) {
                            return;
                        }
                        delayTillNow += delayStep;
                        currentServers = _this.getServerMethodsByFilterAndTarget(methodDef, target);
                        if (currentServers.length > 0) {
                            var streamInfo = currentServers[0].methods[0];
                            callProtocolSubscribe(currentServers, streamInfo, successProxy, errorProxy);
                        }
                        else if (delayTillNow >= options.waitTimeoutMs) {
                            var def = typeof method === "string" ? { name: method } : method;
                            callProtocolSubscribe(currentServers, def, successProxy, errorProxy);
                        }
                        else {
                            setTimeout(retry_1, delayStep);
                        }
                    };
                    setTimeout(retry_1, delayStep);
                }
            });
            return promisify$1(promise, successCallback, errorCallback);
        };
        Client.prototype.servers = function (methodFilter) {
            var filterCopy = methodFilter === undefined
                ? undefined
                : __assign$2({}, methodFilter);
            return this.getServers(filterCopy).map(function (serverMethodMap) {
                return serverMethodMap.server.instance;
            });
        };
        Client.prototype.methods = function (methodFilter) {
            if (typeof methodFilter === "string") {
                methodFilter = { name: methodFilter };
            }
            else {
                methodFilter = __assign$2({}, methodFilter);
            }
            return this.getMethods(methodFilter);
        };
        Client.prototype.methodsForInstance = function (instance) {
            return this.getMethodsForInstance(instance);
        };
        Client.prototype.methodAdded = function (callback) {
            return this.repo.onMethodAdded(callback);
        };
        Client.prototype.methodRemoved = function (callback) {
            return this.repo.onMethodRemoved(callback);
        };
        Client.prototype.serverAdded = function (callback) {
            return this.repo.onServerAdded(callback);
        };
        Client.prototype.serverRemoved = function (callback) {
            return this.repo.onServerRemoved(function (server, reason) {
                callback(server, reason);
            });
        };
        Client.prototype.serverMethodAdded = function (callback) {
            return this.repo.onServerMethodAdded(function (server, method) {
                callback({ server: server, method: method });
            });
        };
        Client.prototype.serverMethodRemoved = function (callback) {
            return this.repo.onServerMethodRemoved(function (server, method) {
                callback({ server: server, method: method });
            });
        };
        Client.prototype.invoke = function (methodFilter, argumentObj, target, additionalOptions, success, error) {
            return __awaiter$2(this, void 0, void 0, function () {
                var getInvokePromise;
                var _this = this;
                return __generator$1(this, function (_a) {
                    getInvokePromise = function () { return __awaiter$2(_this, void 0, void 0, function () {
                        var methodDefinition, serversMethodMap, method, errorObj, timeout, additionalOptionsCopy, invokePromises, invocationMessages, results, allRejected;
                        var _this = this;
                        var _a, _b, _c;
                        return __generator$1(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    if (typeof methodFilter === "string") {
                                        methodDefinition = { name: methodFilter };
                                    }
                                    else {
                                        methodDefinition = __assign$2({}, methodFilter);
                                    }
                                    if (!methodDefinition.name) {
                                        return [2, Promise.reject("Method definition is required. Please, provide either a unique string for a method name or a \u201CmethodDefinition\u201D object with a required \u201Cname\u201D property.")];
                                    }
                                    if (!argumentObj) {
                                        argumentObj = {};
                                    }
                                    if (!target) {
                                        target = "best";
                                    }
                                    if (typeof target === "string" && target !== "all" && target !== "best" && target !== "skipMine") {
                                        return [2, Promise.reject(new Error("\"".concat(target, "\" is not a valid target. Valid targets are \"all\" and \"best\".")))];
                                    }
                                    if (!additionalOptions) {
                                        additionalOptions = {};
                                    }
                                    if (additionalOptions.methodResponseTimeoutMs === undefined) {
                                        additionalOptions.methodResponseTimeoutMs = additionalOptions.method_response_timeout;
                                        if (additionalOptions.methodResponseTimeoutMs === undefined) {
                                            additionalOptions.methodResponseTimeoutMs = this.configuration.methodResponseTimeout;
                                        }
                                    }
                                    if (additionalOptions.waitTimeoutMs === undefined) {
                                        additionalOptions.waitTimeoutMs = additionalOptions.wait_for_method_timeout;
                                        if (additionalOptions.waitTimeoutMs === undefined) {
                                            additionalOptions.waitTimeoutMs = this.configuration.waitTimeoutMs;
                                        }
                                    }
                                    if (additionalOptions.waitTimeoutMs !== undefined && typeof additionalOptions.waitTimeoutMs !== "number") {
                                        return [2, Promise.reject(new Error("\"".concat(additionalOptions.waitTimeoutMs, "\" is not a valid number for \"waitTimeoutMs\" ")))];
                                    }
                                    if (typeof argumentObj !== "object") {
                                        return [2, Promise.reject(new Error("The method arguments must be an object. method: ".concat(methodDefinition.name)))];
                                    }
                                    serversMethodMap = this.getServerMethodsByFilterAndTarget(methodDefinition, target);
                                    if (!(serversMethodMap.length === 0)) return [3, 4];
                                    _d.label = 1;
                                case 1:
                                    _d.trys.push([1, 3, , 4]);
                                    return [4, this.tryToAwaitForMethods(methodDefinition, target, additionalOptions)];
                                case 2:
                                    serversMethodMap = _d.sent();
                                    return [3, 4];
                                case 3:
                                    _d.sent();
                                    method = __assign$2(__assign$2({}, methodDefinition), { getServers: function () { return []; }, supportsStreaming: false, objectTypes: (_a = methodDefinition.objectTypes) !== null && _a !== void 0 ? _a : [], flags: (_c = (_b = methodDefinition.flags) === null || _b === void 0 ? void 0 : _b.metadata) !== null && _c !== void 0 ? _c : {} });
                                    errorObj = {
                                        method: method,
                                        called_with: argumentObj,
                                        message: "Can not find a method matching ".concat(JSON.stringify(methodFilter), " with server filter ").concat(JSON.stringify(target)),
                                        executed_by: undefined,
                                        returned: undefined,
                                        status: undefined,
                                    };
                                    return [2, Promise.reject(errorObj)];
                                case 4:
                                    timeout = additionalOptions.methodResponseTimeoutMs;
                                    additionalOptionsCopy = additionalOptions;
                                    invokePromises = serversMethodMap.map(function (serversMethodPair) {
                                        var invId = shortid$4();
                                        var method = serversMethodPair.methods[0];
                                        var server = serversMethodPair.server;
                                        var invokePromise = _this.protocol.client.invoke(invId, method, argumentObj, server, additionalOptionsCopy);
                                        return Promise.race([
                                            invokePromise,
                                            rejectAfter$1(timeout, invokePromise, {
                                                invocationId: invId,
                                                message: "Invocation timeout (".concat(timeout, " ms) reached for method name: ").concat(method === null || method === void 0 ? void 0 : method.name, ", target instance: ").concat(JSON.stringify(server.instance), ", options: ").concat(JSON.stringify(additionalOptionsCopy)),
                                                status: InvokeStatus$1.Error,
                                            })
                                        ]);
                                    });
                                    return [4, Promise.all(invokePromises)];
                                case 5:
                                    invocationMessages = _d.sent();
                                    results = this.getInvocationResultObj(invocationMessages, methodDefinition, argumentObj);
                                    allRejected = invocationMessages.every(function (result) { return result.status === InvokeStatus$1.Error; });
                                    if (allRejected) {
                                        return [2, Promise.reject(results)];
                                    }
                                    return [2, results];
                            }
                        });
                    }); };
                    return [2, promisify$1(getInvokePromise(), success, error)];
                });
            });
        };
        Client.prototype.getInvocationResultObj = function (invocationResults, method, calledWith) {
            var all_return_values = invocationResults
                .filter(function (invokeMessage) { return invokeMessage.status === InvokeStatus$1.Success; })
                .reduce(function (allValues, currentValue) {
                allValues = __spreadArray$1(__spreadArray$1([], allValues, true), [
                    {
                        executed_by: currentValue.instance,
                        returned: currentValue.result,
                        called_with: calledWith,
                        method: method,
                        message: currentValue.message,
                        status: currentValue.status,
                    }
                ], false);
                return allValues;
            }, []);
            var all_errors = invocationResults
                .filter(function (invokeMessage) { return invokeMessage.status === InvokeStatus$1.Error; })
                .reduce(function (allErrors, currError) {
                allErrors = __spreadArray$1(__spreadArray$1([], allErrors, true), [
                    {
                        executed_by: currError.instance,
                        called_with: calledWith,
                        name: method.name,
                        message: currError.message,
                    }
                ], false);
                return allErrors;
            }, []);
            var invResult = invocationResults[0];
            var result = {
                method: method,
                called_with: calledWith,
                returned: invResult.result,
                executed_by: invResult.instance,
                all_return_values: all_return_values,
                all_errors: all_errors,
                message: invResult.message,
                status: invResult.status
            };
            return result;
        };
        Client.prototype.tryToAwaitForMethods = function (methodDefinition, target, additionalOptions) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (additionalOptions.waitTimeoutMs === 0) {
                    reject();
                    return;
                }
                var delayStep = 500;
                var delayTillNow = 0;
                var retry = function () {
                    delayTillNow += delayStep;
                    var serversMethodMap = _this.getServerMethodsByFilterAndTarget(methodDefinition, target);
                    if (serversMethodMap.length > 0) {
                        clearInterval(interval);
                        resolve(serversMethodMap);
                    }
                    else if (delayTillNow >= (additionalOptions.waitTimeoutMs || 10000)) {
                        clearInterval(interval);
                        reject();
                        return;
                    }
                };
                var interval = setInterval(retry, delayStep);
            });
        };
        Client.prototype.filterByTarget = function (target, serverMethodMap) {
            var _this = this;
            if (typeof target === "string") {
                if (target === "all") {
                    return __spreadArray$1([], serverMethodMap, true);
                }
                else if (target === "best") {
                    var localMachine = serverMethodMap
                        .find(function (s) { return s.server.instance.isLocal; });
                    if (localMachine) {
                        return [localMachine];
                    }
                    if (serverMethodMap[0] !== undefined) {
                        return [serverMethodMap[0]];
                    }
                }
                else if (target === "skipMine") {
                    return serverMethodMap.filter(function (_a) {
                        var server = _a.server;
                        return server.instance.peerId !== _this.instance.peerId;
                    });
                }
            }
            else {
                var targetArray = void 0;
                if (!Array.isArray(target)) {
                    targetArray = [target];
                }
                else {
                    targetArray = target;
                }
                var allServersMatching = targetArray.reduce(function (matches, filter) {
                    var myMatches = serverMethodMap.filter(function (serverMethodPair) {
                        return _this.instanceMatch(filter, serverMethodPair.server.instance);
                    });
                    return matches.concat(myMatches);
                }, []);
                return allServersMatching;
            }
            return [];
        };
        Client.prototype.instanceMatch = function (instanceFilter, instanceDefinition) {
            return this.containsProps(instanceFilter, instanceDefinition);
        };
        Client.prototype.methodMatch = function (methodFilter, methodDefinition) {
            return this.containsProps(methodFilter, methodDefinition);
        };
        Client.prototype.containsProps = function (filter, repoMethod) {
            var filterProps = Object.keys(filter)
                .filter(function (prop) {
                return filter[prop] !== undefined
                    && filter[prop] !== null
                    && typeof filter[prop] !== "function"
                    && prop !== "object_types"
                    && prop !== "display_name"
                    && prop !== "id"
                    && prop !== "gatewayId"
                    && prop !== "identifier"
                    && prop[0] !== "_";
            });
            return filterProps.every(function (prop) {
                var isMatch;
                var filterValue = filter[prop];
                var repoMethodValue = repoMethod[prop];
                switch (prop) {
                    case "objectTypes":
                        isMatch = (filterValue || []).every(function (filterValueEl) {
                            return (repoMethodValue || []).includes(filterValueEl);
                        });
                        break;
                    case "flags":
                        isMatch = isSubset$1(repoMethodValue || {}, filterValue || {});
                        break;
                    default:
                        isMatch = String(filterValue).toLowerCase() === String(repoMethodValue).toLowerCase();
                }
                return isMatch;
            });
        };
        Client.prototype.getMethods = function (methodFilter) {
            var _this = this;
            if (methodFilter === undefined) {
                return this.repo.getMethods();
            }
            var methods = this.repo.getMethods().filter(function (method) {
                return _this.methodMatch(methodFilter, method);
            });
            return methods;
        };
        Client.prototype.getMethodsForInstance = function (instanceFilter) {
            var _this = this;
            var allServers = this.repo.getServers();
            var matchingServers = allServers.filter(function (server) {
                return _this.instanceMatch(instanceFilter, server.instance);
            });
            if (matchingServers.length === 0) {
                return [];
            }
            var resultMethodsObject = {};
            if (matchingServers.length === 1) {
                resultMethodsObject = matchingServers[0].methods;
            }
            else {
                matchingServers.forEach(function (server) {
                    Object.keys(server.methods).forEach(function (methodKey) {
                        var method = server.methods[methodKey];
                        resultMethodsObject[method.identifier] = method;
                    });
                });
            }
            return Object.keys(resultMethodsObject)
                .map(function (key) {
                return resultMethodsObject[key];
            });
        };
        Client.prototype.getServers = function (methodFilter) {
            var _this = this;
            var servers = this.repo.getServers();
            if (methodFilter === undefined) {
                return servers.map(function (server) {
                    return { server: server, methods: [] };
                });
            }
            return servers.reduce(function (prev, current) {
                var methodsForServer = Object.values(current.methods);
                var matchingMethods = methodsForServer.filter(function (method) {
                    return _this.methodMatch(methodFilter, method);
                });
                if (matchingMethods.length > 0) {
                    prev.push({ server: current, methods: matchingMethods });
                }
                return prev;
            }, []);
        };
        Client.prototype.getServerMethodsByFilterAndTarget = function (methodFilter, target) {
            var serversMethodMap = this.getServers(methodFilter);
            return this.filterByTarget(target, serversMethodMap);
        };
        return Client;
    }());

    var ServerSubscription$1 = (function () {
        function ServerSubscription(protocol, repoMethod, subscription) {
            this.protocol = protocol;
            this.repoMethod = repoMethod;
            this.subscription = subscription;
        }
        Object.defineProperty(ServerSubscription.prototype, "stream", {
            get: function () {
                if (!this.repoMethod.stream) {
                    throw new Error("no stream");
                }
                return this.repoMethod.stream;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ServerSubscription.prototype, "arguments", {
            get: function () { return this.subscription.arguments || {}; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ServerSubscription.prototype, "branchKey", {
            get: function () { return this.subscription.branchKey; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ServerSubscription.prototype, "instance", {
            get: function () {
                if (!this.subscription.instance) {
                    throw new Error("no instance");
                }
                return this.subscription.instance;
            },
            enumerable: false,
            configurable: true
        });
        ServerSubscription.prototype.close = function () {
            this.protocol.server.closeSingleSubscription(this.repoMethod, this.subscription);
        };
        ServerSubscription.prototype.push = function (data) {
            this.protocol.server.pushDataToSingle(this.repoMethod, this.subscription, data);
        };
        return ServerSubscription;
    }());

    var Request$2 = (function () {
        function Request(protocol, repoMethod, requestContext) {
            this.protocol = protocol;
            this.repoMethod = repoMethod;
            this.requestContext = requestContext;
            this.arguments = requestContext.arguments;
            this.instance = requestContext.instance;
        }
        Request.prototype.accept = function () {
            this.protocol.server.acceptRequestOnBranch(this.requestContext, this.repoMethod, "");
        };
        Request.prototype.acceptOnBranch = function (branch) {
            this.protocol.server.acceptRequestOnBranch(this.requestContext, this.repoMethod, branch);
        };
        Request.prototype.reject = function (reason) {
            this.protocol.server.rejectRequest(this.requestContext, this.repoMethod, reason);
        };
        return Request;
    }());

    var ServerStreaming$1$1 = (function () {
        function ServerStreaming(protocol, server) {
            var _this = this;
            this.protocol = protocol;
            this.server = server;
            protocol.server.onSubRequest(function (rc, rm) { return _this.handleSubRequest(rc, rm); });
            protocol.server.onSubAdded(function (sub, rm) { return _this.handleSubAdded(sub, rm); });
            protocol.server.onSubRemoved(function (sub, rm) { return _this.handleSubRemoved(sub, rm); });
        }
        ServerStreaming.prototype.handleSubRequest = function (requestContext, repoMethod) {
            if (!(repoMethod &&
                repoMethod.streamCallbacks &&
                typeof repoMethod.streamCallbacks.subscriptionRequestHandler === "function")) {
                return;
            }
            var request = new Request$2(this.protocol, repoMethod, requestContext);
            repoMethod.streamCallbacks.subscriptionRequestHandler(request);
        };
        ServerStreaming.prototype.handleSubAdded = function (subscription, repoMethod) {
            if (!(repoMethod &&
                repoMethod.streamCallbacks &&
                typeof repoMethod.streamCallbacks.subscriptionAddedHandler === "function")) {
                return;
            }
            var sub = new ServerSubscription$1(this.protocol, repoMethod, subscription);
            repoMethod.streamCallbacks.subscriptionAddedHandler(sub);
        };
        ServerStreaming.prototype.handleSubRemoved = function (subscription, repoMethod) {
            if (!(repoMethod &&
                repoMethod.streamCallbacks &&
                typeof repoMethod.streamCallbacks.subscriptionRemovedHandler === "function")) {
                return;
            }
            var sub = new ServerSubscription$1(this.protocol, repoMethod, subscription);
            repoMethod.streamCallbacks.subscriptionRemovedHandler(sub);
        };
        return ServerStreaming;
    }());

    var ServerBranch$1 = (function () {
        function ServerBranch(key, protocol, repoMethod) {
            this.key = key;
            this.protocol = protocol;
            this.repoMethod = repoMethod;
        }
        ServerBranch.prototype.subscriptions = function () {
            var _this = this;
            var subList = this.protocol.server.getSubscriptionList(this.repoMethod, this.key);
            return subList.map(function (sub) {
                return new ServerSubscription$1(_this.protocol, _this.repoMethod, sub);
            });
        };
        ServerBranch.prototype.close = function () {
            this.protocol.server.closeAllSubscriptions(this.repoMethod, this.key);
        };
        ServerBranch.prototype.push = function (data) {
            this.protocol.server.pushData(this.repoMethod, data, [this.key]);
        };
        return ServerBranch;
    }());

    var ServerStream$1 = (function () {
        function ServerStream(_protocol, _repoMethod, _server) {
            this._protocol = _protocol;
            this._repoMethod = _repoMethod;
            this._server = _server;
            this.name = this._repoMethod.definition.name;
        }
        ServerStream.prototype.branches = function (key) {
            var _this = this;
            var bList = this._protocol.server.getBranchList(this._repoMethod);
            if (key) {
                if (bList.indexOf(key) > -1) {
                    return new ServerBranch$1(key, this._protocol, this._repoMethod);
                }
                return undefined;
            }
            else {
                return bList.map(function (branchKey) {
                    return new ServerBranch$1(branchKey, _this._protocol, _this._repoMethod);
                });
            }
        };
        ServerStream.prototype.branch = function (key) {
            return this.branches(key);
        };
        ServerStream.prototype.subscriptions = function () {
            var _this = this;
            var subList = this._protocol.server.getSubscriptionList(this._repoMethod);
            return subList.map(function (sub) {
                return new ServerSubscription$1(_this._protocol, _this._repoMethod, sub);
            });
        };
        Object.defineProperty(ServerStream.prototype, "definition", {
            get: function () {
                var _a;
                var def2 = this._repoMethod.definition;
                return {
                    accepts: def2.accepts,
                    description: def2.description,
                    displayName: def2.displayName,
                    name: def2.name,
                    objectTypes: def2.objectTypes,
                    returns: def2.returns,
                    supportsStreaming: def2.supportsStreaming,
                    flags: (_a = def2.flags) === null || _a === void 0 ? void 0 : _a.metadata,
                };
            },
            enumerable: false,
            configurable: true
        });
        ServerStream.prototype.close = function () {
            this._protocol.server.closeAllSubscriptions(this._repoMethod);
            this._server.unregister(this._repoMethod.definition, true);
        };
        ServerStream.prototype.push = function (data, branches) {
            if (typeof branches !== "string" && !Array.isArray(branches) && branches !== undefined) {
                throw new Error("invalid branches should be string or string array");
            }
            if (typeof data !== "object") {
                throw new Error("Invalid arguments. Data must be an object.");
            }
            this._protocol.server.pushData(this._repoMethod, data, branches);
        };
        ServerStream.prototype.updateRepoMethod = function (repoMethod) {
            this._repoMethod = repoMethod;
        };
        return ServerStream;
    }());

    var Server$1 = (function () {
        function Server(protocol, serverRepository) {
            this.protocol = protocol;
            this.serverRepository = serverRepository;
            this.invocations = 0;
            this.currentlyUnregistering = {};
            this.streaming = new ServerStreaming$1$1(protocol, this);
            this.protocol.server.onInvoked(this.onMethodInvoked.bind(this));
        }
        Server.prototype.createStream = function (streamDef, callbacks, successCallback, errorCallback, existingStream) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                if (!streamDef) {
                    reject("The stream name must be unique! Please, provide either a unique string for a stream name to “glue.interop.createStream()” or a “methodDefinition” object with a unique “name” property for the stream.");
                    return;
                }
                var streamMethodDefinition;
                if (typeof streamDef === "string") {
                    streamMethodDefinition = { name: "" + streamDef };
                }
                else {
                    streamMethodDefinition = __assign$2({}, streamDef);
                }
                if (!streamMethodDefinition.name) {
                    return reject("The \u201Cname\u201D property is required for the \u201CstreamDefinition\u201D object and must be unique. Stream definition: ".concat(JSON.stringify(streamMethodDefinition)));
                }
                var nameAlreadyExists = _this.serverRepository.getList()
                    .some(function (serverMethod) { return serverMethod.definition.name === streamMethodDefinition.name; });
                if (nameAlreadyExists) {
                    return reject("A stream with the name \"".concat(streamMethodDefinition.name, "\" already exists! Please, provide a unique name for the stream."));
                }
                streamMethodDefinition.supportsStreaming = true;
                if (!callbacks) {
                    callbacks = {};
                }
                if (typeof callbacks.subscriptionRequestHandler !== "function") {
                    callbacks.subscriptionRequestHandler = function (request) {
                        request.accept();
                    };
                }
                var repoMethod = _this.serverRepository.add({
                    definition: streamMethodDefinition,
                    streamCallbacks: callbacks,
                    protocolState: {},
                });
                _this.protocol.server.createStream(repoMethod)
                    .then(function () {
                    var streamUserObject;
                    if (existingStream) {
                        streamUserObject = existingStream;
                        existingStream.updateRepoMethod(repoMethod);
                    }
                    else {
                        streamUserObject = new ServerStream$1(_this.protocol, repoMethod, _this);
                    }
                    repoMethod.stream = streamUserObject;
                    resolve(streamUserObject);
                })
                    .catch(function (err) {
                    if (repoMethod.repoId) {
                        _this.serverRepository.remove(repoMethod.repoId);
                    }
                    reject(err);
                });
            });
            return promisify$1(promise, successCallback, errorCallback);
        };
        Server.prototype.register = function (methodDefinition, callback) {
            var _this = this;
            if (!methodDefinition) {
                return Promise.reject("Method definition is required. Please, provide either a unique string for a method name or a “methodDefinition” object with a required “name” property.");
            }
            if (typeof callback !== "function") {
                return Promise.reject("The second parameter must be a callback function. Method: ".concat(typeof methodDefinition === "string" ? methodDefinition : methodDefinition.name));
            }
            var wrappedCallbackFunction = function (context, resultCallback) { return __awaiter$2(_this, void 0, void 0, function () {
                var result, resultValue, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            result = callback(context.args, context.instance);
                            if (!(result && typeof result.then === "function")) return [3, 2];
                            return [4, result];
                        case 1:
                            resultValue = _a.sent();
                            resultCallback(undefined, resultValue);
                            return [3, 3];
                        case 2:
                            resultCallback(undefined, result);
                            _a.label = 3;
                        case 3: return [3, 5];
                        case 4:
                            e_1 = _a.sent();
                            resultCallback(e_1 !== null && e_1 !== void 0 ? e_1 : "", e_1 !== null && e_1 !== void 0 ? e_1 : "");
                            return [3, 5];
                        case 5: return [2];
                    }
                });
            }); };
            wrappedCallbackFunction.userCallback = callback;
            return this.registerCore(methodDefinition, wrappedCallbackFunction);
        };
        Server.prototype.registerAsync = function (methodDefinition, callback) {
            if (!methodDefinition) {
                return Promise.reject("Method definition is required. Please, provide either a unique string for a method name or a “methodDefinition” object with a required “name” property.");
            }
            if (typeof callback !== "function") {
                return Promise.reject("The second parameter must be a callback function. Method: ".concat(typeof methodDefinition === "string" ? methodDefinition : methodDefinition.name));
            }
            var wrappedCallback = function (context, resultCallback) {
                try {
                    var resultCalled_1 = false;
                    var success = function (result) {
                        if (!resultCalled_1) {
                            resultCallback(undefined, result);
                        }
                        resultCalled_1 = true;
                    };
                    var error = function (e) {
                        if (!resultCalled_1) {
                            if (!e) {
                                e = "";
                            }
                            resultCallback(e, e);
                        }
                        resultCalled_1 = true;
                    };
                    var methodResult = callback(context.args, context.instance, success, error);
                    if (methodResult && typeof methodResult.then === "function") {
                        methodResult
                            .then(success)
                            .catch(error);
                    }
                }
                catch (e) {
                    resultCallback(e, undefined);
                }
            };
            wrappedCallback.userCallbackAsync = callback;
            return this.registerCore(methodDefinition, wrappedCallback);
        };
        Server.prototype.unregister = function (methodFilter, forStream) {
            if (forStream === void 0) { forStream = false; }
            return __awaiter$2(this, void 0, void 0, function () {
                var methodDefinition, methodToBeRemoved;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (methodFilter === undefined) {
                                return [2, Promise.reject("Please, provide either a unique string for a name or an object containing a “name” property.")];
                            }
                            if (!(typeof methodFilter === "function")) return [3, 2];
                            return [4, this.unregisterWithPredicate(methodFilter, forStream)];
                        case 1:
                            _a.sent();
                            return [2];
                        case 2:
                            if (typeof methodFilter === "string") {
                                methodDefinition = { name: methodFilter };
                            }
                            else {
                                methodDefinition = methodFilter;
                            }
                            if (methodDefinition.name === undefined) {
                                return [2, Promise.reject("Method name is required. Cannot find a method if the method name is undefined!")];
                            }
                            methodToBeRemoved = this.serverRepository.getList().find(function (serverMethod) {
                                return serverMethod.definition.name === methodDefinition.name
                                    && (serverMethod.definition.supportsStreaming || false) === forStream;
                            });
                            if (!methodToBeRemoved) {
                                return [2, Promise.reject("Method with a name \"".concat(methodDefinition.name, "\" does not exist or is not registered by your application!"))];
                            }
                            return [4, this.removeMethodsOrStreams([methodToBeRemoved])];
                        case 3:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Server.prototype.unregisterWithPredicate = function (filterPredicate, forStream) {
            return __awaiter$2(this, void 0, void 0, function () {
                var methodsOrStreamsToRemove;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            methodsOrStreamsToRemove = this.serverRepository.getList()
                                .filter(function (sm) { return filterPredicate(sm.definition); })
                                .filter(function (serverMethod) {
                                return (serverMethod.definition.supportsStreaming || false) === forStream;
                            });
                            if (!methodsOrStreamsToRemove || methodsOrStreamsToRemove.length === 0) {
                                return [2, Promise.reject("Could not find a ".concat(forStream ? "stream" : "method", " matching the specified condition!"))];
                            }
                            return [4, this.removeMethodsOrStreams(methodsOrStreamsToRemove)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Server.prototype.removeMethodsOrStreams = function (methodsToRemove) {
            var _this = this;
            var methodUnregPromises = [];
            methodsToRemove.forEach(function (method) {
                var promise = _this.protocol.server.unregister(method)
                    .then(function () {
                    if (method.repoId) {
                        _this.serverRepository.remove(method.repoId);
                    }
                });
                methodUnregPromises.push(promise);
                _this.addAsCurrentlyUnregistering(method.definition.name, promise);
            });
            return Promise.all(methodUnregPromises);
        };
        Server.prototype.addAsCurrentlyUnregistering = function (methodName, promise) {
            return __awaiter$2(this, void 0, void 0, function () {
                var timeout;
                var _this = this;
                return __generator$1(this, function (_a) {
                    timeout = new Promise(function (resolve) { return setTimeout(resolve, 5000); });
                    this.currentlyUnregistering[methodName] = Promise.race([promise, timeout]).then(function () {
                        delete _this.currentlyUnregistering[methodName];
                    });
                    return [2];
                });
            });
        };
        Server.prototype.registerCore = function (method, theFunction) {
            return __awaiter$2(this, void 0, void 0, function () {
                var methodDefinition, unregisterInProgress, nameAlreadyExists, repoMethod;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (typeof method === "string") {
                                methodDefinition = { name: "" + method };
                            }
                            else {
                                methodDefinition = __assign$2({}, method);
                            }
                            if (!methodDefinition.name) {
                                return [2, Promise.reject("Please, provide a (unique) string value for the \u201Cname\u201D property in the \u201CmethodDefinition\u201D object: ".concat(JSON.stringify(method)))];
                            }
                            unregisterInProgress = this.currentlyUnregistering[methodDefinition.name];
                            if (!unregisterInProgress) return [3, 2];
                            return [4, unregisterInProgress];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            nameAlreadyExists = this.serverRepository.getList()
                                .some(function (serverMethod) { return serverMethod.definition.name === methodDefinition.name; });
                            if (nameAlreadyExists) {
                                return [2, Promise.reject("A method with the name \"".concat(methodDefinition.name, "\" already exists! Please, provide a unique name for the method."))];
                            }
                            if (methodDefinition.supportsStreaming) {
                                return [2, Promise.reject("When you create methods with \u201Cglue.interop.register()\u201D or \u201Cglue.interop.registerAsync()\u201D the property \u201CsupportsStreaming\u201D cannot be \u201Ctrue\u201D. If you want \u201C".concat(methodDefinition.name, "\u201D to be a stream, please use the \u201Cglue.interop.createStream()\u201D method."))];
                            }
                            repoMethod = this.serverRepository.add({
                                definition: methodDefinition,
                                theFunction: theFunction,
                                protocolState: {},
                            });
                            return [2, this.protocol.server.register(repoMethod)
                                    .catch(function (err) {
                                    if (repoMethod === null || repoMethod === void 0 ? void 0 : repoMethod.repoId) {
                                        _this.serverRepository.remove(repoMethod.repoId);
                                    }
                                    throw err;
                                })];
                    }
                });
            });
        };
        Server.prototype.onMethodInvoked = function (methodToExecute, invocationId, invocationArgs) {
            var _this = this;
            if (!methodToExecute || !methodToExecute.theFunction) {
                return;
            }
            methodToExecute.theFunction(invocationArgs, function (err, result) {
                if (err !== undefined && err !== null) {
                    if (err.message && typeof err.message === "string") {
                        err = err.message;
                    }
                    else if (typeof err !== "string") {
                        try {
                            err = JSON.stringify(err);
                        }
                        catch (unStrException) {
                            err = "un-stringifyable error in onMethodInvoked! Top level prop names: ".concat(Object.keys(err));
                        }
                    }
                }
                if (!result) {
                    result = {};
                }
                else if (typeof result !== "object" || Array.isArray(result)) {
                    result = { _value: result };
                }
                _this.protocol.server.methodInvocationResult(methodToExecute, invocationId, err, result);
            });
        };
        return Server;
    }());

    var InstanceWrapper$1 = (function () {
        function InstanceWrapper(API, instance, connection) {
            var _this = this;
            this.wrapped = {};
            this.wrapped.getMethods = function () {
                return API.methodsForInstance(this);
            };
            this.wrapped.getStreams = function () {
                return API.methodsForInstance(this).filter(function (m) { return m.supportsStreaming; });
            };
            if (instance) {
                this.refreshWrappedObject(instance);
            }
            if (connection) {
                connection.loggedIn(function () {
                    _this.refresh(connection);
                });
                this.refresh(connection);
            }
        }
        InstanceWrapper.prototype.unwrap = function () {
            return this.wrapped;
        };
        InstanceWrapper.prototype.refresh = function (connection) {
            if (!connection) {
                return;
            }
            var resolvedIdentity = connection === null || connection === void 0 ? void 0 : connection.resolvedIdentity;
            var instance = Object.assign({}, resolvedIdentity !== null && resolvedIdentity !== void 0 ? resolvedIdentity : {}, { peerId: connection === null || connection === void 0 ? void 0 : connection.peerId });
            this.refreshWrappedObject(instance);
        };
        InstanceWrapper.prototype.refreshWrappedObject = function (resolvedIdentity) {
            var _this = this;
            var _a, _b, _c, _d;
            Object.keys(resolvedIdentity).forEach(function (key) {
                _this.wrapped[key] = resolvedIdentity[key];
            });
            this.wrapped.user = resolvedIdentity.user;
            this.wrapped.instance = resolvedIdentity.instance;
            this.wrapped.application = (_a = resolvedIdentity.application) !== null && _a !== void 0 ? _a : shortid$4();
            this.wrapped.applicationName = resolvedIdentity.applicationName;
            this.wrapped.pid = (_c = (_b = resolvedIdentity.pid) !== null && _b !== void 0 ? _b : resolvedIdentity.process) !== null && _c !== void 0 ? _c : Math.floor(Math.random() * 10000000000);
            this.wrapped.machine = resolvedIdentity.machine;
            this.wrapped.environment = resolvedIdentity.environment;
            this.wrapped.region = resolvedIdentity.region;
            this.wrapped.windowId = resolvedIdentity.windowId;
            this.wrapped.isLocal = (_d = resolvedIdentity.isLocal) !== null && _d !== void 0 ? _d : true;
            this.wrapped.api = resolvedIdentity.api;
            this.wrapped.service = resolvedIdentity.service;
            this.wrapped.peerId = resolvedIdentity.peerId;
        };
        return InstanceWrapper;
    }());

    var hideMethodSystemFlags$1 = function (method) {
        return __assign$2(__assign$2({}, method), { flags: method.flags.metadata || {} });
    };
    var ClientRepository$1 = (function () {
        function ClientRepository(logger, API) {
            this.logger = logger;
            this.API = API;
            this.servers = {};
            this.methodsCount = {};
            this.callbacks = lib$1$1();
            var peerId = this.API.instance.peerId;
            this.myServer = {
                id: peerId,
                methods: {},
                instance: this.API.instance,
                wrapper: this.API.unwrappedInstance,
            };
            this.servers[peerId] = this.myServer;
        }
        ClientRepository.prototype.addServer = function (info, serverId) {
            this.logger.debug("adding server ".concat(serverId));
            var current = this.servers[serverId];
            if (current) {
                return current.id;
            }
            var wrapper = new InstanceWrapper$1(this.API, info);
            var serverEntry = {
                id: serverId,
                methods: {},
                instance: wrapper.unwrap(),
                wrapper: wrapper,
            };
            this.servers[serverId] = serverEntry;
            this.callbacks.execute("onServerAdded", serverEntry.instance);
            return serverId;
        };
        ClientRepository.prototype.removeServerById = function (id, reason) {
            var _this = this;
            var server = this.servers[id];
            if (!server) {
                this.logger.warn("not aware of server ".concat(id, ", my state ").concat(JSON.stringify(Object.keys(this.servers))));
                return;
            }
            else {
                this.logger.debug("removing server ".concat(id));
            }
            Object.keys(server.methods).forEach(function (methodId) {
                _this.removeServerMethod(id, methodId);
            });
            delete this.servers[id];
            this.callbacks.execute("onServerRemoved", server.instance, reason);
        };
        ClientRepository.prototype.addServerMethod = function (serverId, method) {
            var _a;
            var server = this.servers[serverId];
            if (!server) {
                throw new Error("server does not exists");
            }
            if (server.methods[method.id]) {
                return;
            }
            var identifier = this.createMethodIdentifier(method);
            var that = this;
            var methodDefinition = {
                identifier: identifier,
                gatewayId: method.id,
                name: method.name,
                displayName: method.display_name,
                description: method.description,
                version: method.version,
                objectTypes: method.object_types || [],
                accepts: method.input_signature,
                returns: method.result_signature,
                supportsStreaming: typeof method.flags !== "undefined" ? method.flags.streaming : false,
                flags: (_a = method.flags) !== null && _a !== void 0 ? _a : {},
                getServers: function () {
                    return that.getServersByMethod(identifier);
                }
            };
            methodDefinition.object_types = methodDefinition.objectTypes;
            methodDefinition.display_name = methodDefinition.displayName;
            methodDefinition.version = methodDefinition.version;
            server.methods[method.id] = methodDefinition;
            var clientMethodDefinition = hideMethodSystemFlags$1(methodDefinition);
            if (!this.methodsCount[identifier]) {
                this.methodsCount[identifier] = 0;
                this.callbacks.execute("onMethodAdded", clientMethodDefinition);
            }
            this.methodsCount[identifier] = this.methodsCount[identifier] + 1;
            this.callbacks.execute("onServerMethodAdded", server.instance, clientMethodDefinition);
            return methodDefinition;
        };
        ClientRepository.prototype.removeServerMethod = function (serverId, methodId) {
            var server = this.servers[serverId];
            if (!server) {
                throw new Error("server does not exists");
            }
            var method = server.methods[methodId];
            delete server.methods[methodId];
            var clientMethodDefinition = hideMethodSystemFlags$1(method);
            this.methodsCount[method.identifier] = this.methodsCount[method.identifier] - 1;
            if (this.methodsCount[method.identifier] === 0) {
                this.callbacks.execute("onMethodRemoved", clientMethodDefinition);
            }
            this.callbacks.execute("onServerMethodRemoved", server.instance, clientMethodDefinition);
        };
        ClientRepository.prototype.getMethods = function () {
            return this.extractMethodsFromServers(Object.values(this.servers)).map(hideMethodSystemFlags$1);
        };
        ClientRepository.prototype.getServers = function () {
            return Object.values(this.servers).map(this.hideServerMethodSystemFlags);
        };
        ClientRepository.prototype.onServerAdded = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerAdded", callback);
            var serversWithMethodsToReplay = this.getServers().map(function (s) { return s.instance; });
            return this.returnUnsubWithDelayedReplay(unsubscribeFunc, serversWithMethodsToReplay, callback);
        };
        ClientRepository.prototype.onMethodAdded = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onMethodAdded", callback);
            var methodsToReplay = this.getMethods();
            return this.returnUnsubWithDelayedReplay(unsubscribeFunc, methodsToReplay, callback);
        };
        ClientRepository.prototype.onServerMethodAdded = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerMethodAdded", callback);
            var unsubCalled = false;
            var servers = this.getServers();
            setTimeout(function () {
                servers.forEach(function (server) {
                    var methods = server.methods;
                    Object.keys(methods).forEach(function (methodId) {
                        if (!unsubCalled) {
                            callback(server.instance, methods[methodId]);
                        }
                    });
                });
            }, 0);
            return function () {
                unsubCalled = true;
                unsubscribeFunc();
            };
        };
        ClientRepository.prototype.onMethodRemoved = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onMethodRemoved", callback);
            return unsubscribeFunc;
        };
        ClientRepository.prototype.onServerRemoved = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerRemoved", callback);
            return unsubscribeFunc;
        };
        ClientRepository.prototype.onServerMethodRemoved = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerMethodRemoved", callback);
            return unsubscribeFunc;
        };
        ClientRepository.prototype.getServerById = function (id) {
            return this.hideServerMethodSystemFlags(this.servers[id]);
        };
        ClientRepository.prototype.reset = function () {
            var _a;
            var _this = this;
            Object.keys(this.servers).forEach(function (key) {
                _this.removeServerById(key, "reset");
            });
            this.servers = (_a = {},
                _a[this.myServer.id] = this.myServer,
                _a);
            this.methodsCount = {};
        };
        ClientRepository.prototype.createMethodIdentifier = function (methodInfo) {
            var _a, _b;
            var accepts = (_a = methodInfo.input_signature) !== null && _a !== void 0 ? _a : "";
            var returns = (_b = methodInfo.result_signature) !== null && _b !== void 0 ? _b : "";
            return (methodInfo.name + accepts + returns).toLowerCase();
        };
        ClientRepository.prototype.getServersByMethod = function (identifier) {
            var allServers = [];
            Object.values(this.servers).forEach(function (server) {
                Object.values(server.methods).forEach(function (method) {
                    if (method.identifier === identifier) {
                        allServers.push(server.instance);
                    }
                });
            });
            return allServers;
        };
        ClientRepository.prototype.returnUnsubWithDelayedReplay = function (unsubscribeFunc, collectionToReplay, callback) {
            var unsubCalled = false;
            setTimeout(function () {
                collectionToReplay.forEach(function (item) {
                    if (!unsubCalled) {
                        callback(item);
                    }
                });
            }, 0);
            return function () {
                unsubCalled = true;
                unsubscribeFunc();
            };
        };
        ClientRepository.prototype.hideServerMethodSystemFlags = function (server) {
            var clientMethods = {};
            Object.entries(server.methods).forEach(function (_a) {
                var name = _a[0], method = _a[1];
                clientMethods[name] = hideMethodSystemFlags$1(method);
            });
            return __assign$2(__assign$2({}, server), { methods: clientMethods });
        };
        ClientRepository.prototype.extractMethodsFromServers = function (servers) {
            var methods = Object.values(servers).reduce(function (clientMethods, server) {
                return __spreadArray$1(__spreadArray$1([], clientMethods, true), Object.values(server.methods), true);
            }, []);
            return methods;
        };
        return ClientRepository;
    }());

    var ServerRepository$1 = (function () {
        function ServerRepository() {
            this.nextId = 0;
            this.methods = [];
        }
        ServerRepository.prototype.add = function (method) {
            method.repoId = String(this.nextId);
            this.nextId += 1;
            this.methods.push(method);
            return method;
        };
        ServerRepository.prototype.remove = function (repoId) {
            if (typeof repoId !== "string") {
                return new TypeError("Expecting a string");
            }
            this.methods = this.methods.filter(function (m) {
                return m.repoId !== repoId;
            });
        };
        ServerRepository.prototype.getById = function (id) {
            if (typeof id !== "string") {
                return undefined;
            }
            return this.methods.find(function (m) {
                return m.repoId === id;
            });
        };
        ServerRepository.prototype.getList = function () {
            return this.methods.map(function (m) { return m; });
        };
        ServerRepository.prototype.length = function () {
            return this.methods.length;
        };
        ServerRepository.prototype.reset = function () {
            this.methods = [];
        };
        return ServerRepository;
    }());

    var SUBSCRIPTION_REQUEST$1 = "onSubscriptionRequest";
    var SUBSCRIPTION_ADDED$1 = "onSubscriptionAdded";
    var SUBSCRIPTION_REMOVED$1 = "onSubscriptionRemoved";
    var ServerStreaming$2 = (function () {
        function ServerStreaming(session, repository, serverRepository) {
            var _this = this;
            this.session = session;
            this.repository = repository;
            this.serverRepository = serverRepository;
            this.ERR_URI_SUBSCRIPTION_FAILED = "com.tick42.agm.errors.subscription.failure";
            this.callbacks = lib$1$1();
            this.nextStreamId = 0;
            session.on("add-interest", function (msg) {
                _this.handleAddInterest(msg);
            });
            session.on("remove-interest", function (msg) {
                _this.handleRemoveInterest(msg);
            });
        }
        ServerStreaming.prototype.acceptRequestOnBranch = function (requestContext, streamingMethod, branch) {
            if (typeof branch !== "string") {
                branch = "";
            }
            if (typeof streamingMethod.protocolState.subscriptionsMap !== "object") {
                throw new TypeError("The streaming method is missing its subscriptions.");
            }
            if (!Array.isArray(streamingMethod.protocolState.branchKeyToStreamIdMap)) {
                throw new TypeError("The streaming method is missing its branches.");
            }
            var streamId = this.getStreamId(streamingMethod, branch);
            var key = requestContext.msg.subscription_id;
            var subscription = {
                id: key,
                arguments: requestContext.arguments,
                instance: requestContext.instance,
                branchKey: branch,
                streamId: streamId,
                subscribeMsg: requestContext.msg,
            };
            streamingMethod.protocolState.subscriptionsMap[key] = subscription;
            this.session.sendFireAndForget({
                type: "accepted",
                subscription_id: key,
                stream_id: streamId,
            });
            this.callbacks.execute(SUBSCRIPTION_ADDED$1, subscription, streamingMethod);
        };
        ServerStreaming.prototype.rejectRequest = function (requestContext, streamingMethod, reason) {
            if (typeof reason !== "string") {
                reason = "";
            }
            this.sendSubscriptionFailed("Subscription rejected by user. " + reason, requestContext.msg.subscription_id);
        };
        ServerStreaming.prototype.pushData = function (streamingMethod, data, branches) {
            var _this = this;
            if (typeof streamingMethod !== "object" || !Array.isArray(streamingMethod.protocolState.branchKeyToStreamIdMap)) {
                return;
            }
            if (typeof data !== "object") {
                throw new Error("Invalid arguments. Data must be an object.");
            }
            if (typeof branches === "string") {
                branches = [branches];
            }
            else if (!Array.isArray(branches) || branches.length <= 0) {
                branches = [];
            }
            var streamIdList = streamingMethod.protocolState.branchKeyToStreamIdMap
                .filter(function (br) {
                if (!branches || branches.length === 0) {
                    return true;
                }
                return branches.indexOf(br.key) >= 0;
            }).map(function (br) {
                return br.streamId;
            });
            streamIdList.forEach(function (streamId) {
                var publishMessage = {
                    type: "publish",
                    stream_id: streamId,
                    data: data,
                };
                _this.session.sendFireAndForget(publishMessage);
            });
        };
        ServerStreaming.prototype.pushDataToSingle = function (method, subscription, data) {
            if (typeof data !== "object") {
                throw new Error("Invalid arguments. Data must be an object.");
            }
            var postMessage = {
                type: "post",
                subscription_id: subscription.id,
                data: data,
            };
            this.session.sendFireAndForget(postMessage);
        };
        ServerStreaming.prototype.closeSingleSubscription = function (streamingMethod, subscription) {
            if (streamingMethod.protocolState.subscriptionsMap) {
                delete streamingMethod.protocolState.subscriptionsMap[subscription.id];
            }
            var dropSubscriptionMessage = {
                type: "drop-subscription",
                subscription_id: subscription.id,
                reason: "Server dropping a single subscription",
            };
            this.session.sendFireAndForget(dropSubscriptionMessage);
            subscription.instance;
            this.callbacks.execute(SUBSCRIPTION_REMOVED$1, subscription, streamingMethod);
        };
        ServerStreaming.prototype.closeMultipleSubscriptions = function (streamingMethod, branchKey) {
            var _this = this;
            if (typeof streamingMethod !== "object" || typeof streamingMethod.protocolState.subscriptionsMap !== "object") {
                return;
            }
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return;
            }
            var subscriptionsMap = streamingMethod.protocolState.subscriptionsMap;
            var subscriptionsToClose = Object.keys(subscriptionsMap)
                .map(function (key) {
                return subscriptionsMap[key];
            });
            if (typeof branchKey === "string") {
                subscriptionsToClose = subscriptionsToClose.filter(function (sub) {
                    return sub.branchKey === branchKey;
                });
            }
            subscriptionsToClose.forEach(function (subscription) {
                delete subscriptionsMap[subscription.id];
                var drop = {
                    type: "drop-subscription",
                    subscription_id: subscription.id,
                    reason: "Server dropping all subscriptions on stream_id: " + subscription.streamId,
                };
                _this.session.sendFireAndForget(drop);
            });
        };
        ServerStreaming.prototype.getSubscriptionList = function (streamingMethod, branchKey) {
            if (typeof streamingMethod !== "object") {
                return [];
            }
            var subscriptions = [];
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return [];
            }
            var subscriptionsMap = streamingMethod.protocolState.subscriptionsMap;
            var allSubscriptions = Object.keys(subscriptionsMap)
                .map(function (key) {
                return subscriptionsMap[key];
            });
            if (typeof branchKey !== "string") {
                subscriptions = allSubscriptions;
            }
            else {
                subscriptions = allSubscriptions.filter(function (sub) {
                    return sub.branchKey === branchKey;
                });
            }
            return subscriptions;
        };
        ServerStreaming.prototype.getBranchList = function (streamingMethod) {
            if (typeof streamingMethod !== "object") {
                return [];
            }
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return [];
            }
            var subscriptionsMap = streamingMethod.protocolState.subscriptionsMap;
            var allSubscriptions = Object.keys(subscriptionsMap)
                .map(function (key) {
                return subscriptionsMap[key];
            });
            var result = [];
            allSubscriptions.forEach(function (sub) {
                var branch = "";
                if (typeof sub === "object" && typeof sub.branchKey === "string") {
                    branch = sub.branchKey;
                }
                if (result.indexOf(branch) === -1) {
                    result.push(branch);
                }
            });
            return result;
        };
        ServerStreaming.prototype.onSubAdded = function (callback) {
            this.onSubscriptionLifetimeEvent(SUBSCRIPTION_ADDED$1, callback);
        };
        ServerStreaming.prototype.onSubRequest = function (callback) {
            this.onSubscriptionLifetimeEvent(SUBSCRIPTION_REQUEST$1, callback);
        };
        ServerStreaming.prototype.onSubRemoved = function (callback) {
            this.onSubscriptionLifetimeEvent(SUBSCRIPTION_REMOVED$1, callback);
        };
        ServerStreaming.prototype.handleRemoveInterest = function (msg) {
            var streamingMethod = this.serverRepository.getById(msg.method_id);
            if (typeof msg.subscription_id !== "string" ||
                typeof streamingMethod !== "object") {
                return;
            }
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return;
            }
            if (typeof streamingMethod.protocolState.subscriptionsMap[msg.subscription_id] !== "object") {
                return;
            }
            var subscription = streamingMethod.protocolState.subscriptionsMap[msg.subscription_id];
            delete streamingMethod.protocolState.subscriptionsMap[msg.subscription_id];
            this.callbacks.execute(SUBSCRIPTION_REMOVED$1, subscription, streamingMethod);
        };
        ServerStreaming.prototype.onSubscriptionLifetimeEvent = function (eventName, handlerFunc) {
            this.callbacks.add(eventName, handlerFunc);
        };
        ServerStreaming.prototype.getNextStreamId = function () {
            return this.nextStreamId++ + "";
        };
        ServerStreaming.prototype.handleAddInterest = function (msg) {
            var caller = this.repository.getServerById(msg.caller_id);
            var instance = caller.instance;
            var requestContext = {
                msg: msg,
                arguments: msg.arguments_kv || {},
                instance: instance,
            };
            var streamingMethod = this.serverRepository.getById(msg.method_id);
            if (streamingMethod === undefined) {
                var errorMsg = "No method with id " + msg.method_id + " on this server.";
                this.sendSubscriptionFailed(errorMsg, msg.subscription_id);
                return;
            }
            if (streamingMethod.protocolState.subscriptionsMap &&
                streamingMethod.protocolState.subscriptionsMap[msg.subscription_id]) {
                this.sendSubscriptionFailed("A subscription with id " + msg.subscription_id + " already exists.", msg.subscription_id);
                return;
            }
            this.callbacks.execute(SUBSCRIPTION_REQUEST$1, requestContext, streamingMethod);
        };
        ServerStreaming.prototype.sendSubscriptionFailed = function (reason, subscriptionId) {
            var errorMessage = {
                type: "error",
                reason_uri: this.ERR_URI_SUBSCRIPTION_FAILED,
                reason: reason,
                request_id: subscriptionId,
            };
            this.session.sendFireAndForget(errorMessage);
        };
        ServerStreaming.prototype.getStreamId = function (streamingMethod, branchKey) {
            if (typeof branchKey !== "string") {
                branchKey = "";
            }
            if (!streamingMethod.protocolState.branchKeyToStreamIdMap) {
                throw new Error("streaming ".concat(streamingMethod.definition.name, " method without protocol state"));
            }
            var needleBranch = streamingMethod.protocolState.branchKeyToStreamIdMap.filter(function (branch) {
                return branch.key === branchKey;
            })[0];
            var streamId = (needleBranch ? needleBranch.streamId : undefined);
            if (typeof streamId !== "string" || streamId === "") {
                streamId = this.getNextStreamId();
                streamingMethod.protocolState.branchKeyToStreamIdMap.push({ key: branchKey, streamId: streamId });
            }
            return streamId;
        };
        return ServerStreaming;
    }());

    var ServerProtocol$1 = (function () {
        function ServerProtocol(session, clientRepository, serverRepository, logger) {
            var _this = this;
            this.session = session;
            this.clientRepository = clientRepository;
            this.serverRepository = serverRepository;
            this.logger = logger;
            this.callbacks = lib$1$1();
            this.streaming = new ServerStreaming$2(session, clientRepository, serverRepository);
            this.session.on("invoke", function (msg) { return _this.handleInvokeMessage(msg); });
        }
        ServerProtocol.prototype.createStream = function (repoMethod) {
            repoMethod.protocolState.subscriptionsMap = {};
            repoMethod.protocolState.branchKeyToStreamIdMap = [];
            return this.register(repoMethod, true);
        };
        ServerProtocol.prototype.register = function (repoMethod, isStreaming) {
            var _this = this;
            var _a;
            var methodDef = repoMethod.definition;
            var flags = Object.assign({}, { metadata: (_a = methodDef.flags) !== null && _a !== void 0 ? _a : {} }, { streaming: isStreaming || false });
            var registerMsg = {
                type: "register",
                methods: [{
                        id: repoMethod.repoId,
                        name: methodDef.name,
                        display_name: methodDef.displayName,
                        description: methodDef.description,
                        version: methodDef.version,
                        flags: flags,
                        object_types: methodDef.objectTypes || methodDef.object_types,
                        input_signature: methodDef.accepts,
                        result_signature: methodDef.returns,
                        restrictions: undefined,
                    }],
            };
            return this.session.send(registerMsg, { methodId: repoMethod.repoId })
                .then(function () {
                _this.logger.debug("registered method " + repoMethod.definition.name + " with id " + repoMethod.repoId);
            })
                .catch(function (msg) {
                _this.logger.warn("failed to register method ".concat(repoMethod.definition.name, " with id ").concat(repoMethod.repoId, " - ").concat(JSON.stringify(msg)));
                throw msg;
            });
        };
        ServerProtocol.prototype.onInvoked = function (callback) {
            this.callbacks.add("onInvoked", callback);
        };
        ServerProtocol.prototype.methodInvocationResult = function (method, invocationId, err, result) {
            var msg;
            if (err || err === "") {
                msg = {
                    type: "error",
                    request_id: invocationId,
                    reason_uri: "agm.errors.client_error",
                    reason: err,
                    context: result,
                    peer_id: undefined,
                };
            }
            else {
                msg = {
                    type: "yield",
                    invocation_id: invocationId,
                    peer_id: this.session.peerId,
                    result: result,
                    request_id: undefined,
                };
            }
            this.session.sendFireAndForget(msg);
        };
        ServerProtocol.prototype.unregister = function (method) {
            return __awaiter$2(this, void 0, void 0, function () {
                var msg;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            msg = {
                                type: "unregister",
                                methods: [method.repoId],
                            };
                            return [4, this.session.send(msg)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ServerProtocol.prototype.getBranchList = function (method) {
            return this.streaming.getBranchList(method);
        };
        ServerProtocol.prototype.getSubscriptionList = function (method, branchKey) {
            return this.streaming.getSubscriptionList(method, branchKey);
        };
        ServerProtocol.prototype.closeAllSubscriptions = function (method, branchKey) {
            this.streaming.closeMultipleSubscriptions(method, branchKey);
        };
        ServerProtocol.prototype.pushData = function (method, data, branches) {
            this.streaming.pushData(method, data, branches);
        };
        ServerProtocol.prototype.pushDataToSingle = function (method, subscription, data) {
            this.streaming.pushDataToSingle(method, subscription, data);
        };
        ServerProtocol.prototype.closeSingleSubscription = function (method, subscription) {
            this.streaming.closeSingleSubscription(method, subscription);
        };
        ServerProtocol.prototype.acceptRequestOnBranch = function (requestContext, method, branch) {
            this.streaming.acceptRequestOnBranch(requestContext, method, branch);
        };
        ServerProtocol.prototype.rejectRequest = function (requestContext, method, reason) {
            this.streaming.rejectRequest(requestContext, method, reason);
        };
        ServerProtocol.prototype.onSubRequest = function (callback) {
            this.streaming.onSubRequest(callback);
        };
        ServerProtocol.prototype.onSubAdded = function (callback) {
            this.streaming.onSubAdded(callback);
        };
        ServerProtocol.prototype.onSubRemoved = function (callback) {
            this.streaming.onSubRemoved(callback);
        };
        ServerProtocol.prototype.handleInvokeMessage = function (msg) {
            var invocationId = msg.invocation_id;
            var callerId = msg.caller_id;
            var methodId = msg.method_id;
            var args = msg.arguments_kv;
            var methodList = this.serverRepository.getList();
            var method = methodList.filter(function (m) {
                return m.repoId === methodId;
            })[0];
            if (method === undefined) {
                return;
            }
            var client = this.clientRepository.getServerById(callerId).instance;
            var invocationArgs = { args: args, instance: client };
            this.callbacks.execute("onInvoked", method, invocationId, invocationArgs);
        };
        return ServerProtocol;
    }());

    var UserSubscription$1 = (function () {
        function UserSubscription(repository, subscriptionData) {
            this.repository = repository;
            this.subscriptionData = subscriptionData;
        }
        Object.defineProperty(UserSubscription.prototype, "requestArguments", {
            get: function () {
                return this.subscriptionData.params.arguments || {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserSubscription.prototype, "servers", {
            get: function () {
                var _this = this;
                return this.subscriptionData.trackedServers
                    .filter(function (pair) { return pair.subscriptionId; })
                    .map(function (pair) { return _this.repository.getServerById(pair.serverId).instance; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserSubscription.prototype, "serverInstance", {
            get: function () {
                return this.servers[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserSubscription.prototype, "stream", {
            get: function () {
                return this.subscriptionData.method;
            },
            enumerable: false,
            configurable: true
        });
        UserSubscription.prototype.onData = function (dataCallback) {
            if (typeof dataCallback !== "function") {
                throw new TypeError("The data callback must be a function.");
            }
            this.subscriptionData.handlers.onData.push(dataCallback);
            if (this.subscriptionData.handlers.onData.length === 1 && this.subscriptionData.queued.data.length > 0) {
                this.subscriptionData.queued.data.forEach(function (dataItem) {
                    dataCallback(dataItem);
                });
            }
        };
        UserSubscription.prototype.onClosed = function (closedCallback) {
            if (typeof closedCallback !== "function") {
                throw new TypeError("The callback must be a function.");
            }
            this.subscriptionData.handlers.onClosed.push(closedCallback);
        };
        UserSubscription.prototype.onFailed = function (callback) {
        };
        UserSubscription.prototype.onConnected = function (callback) {
            if (typeof callback !== "function") {
                throw new TypeError("The callback must be a function.");
            }
            this.subscriptionData.handlers.onConnected.push(callback);
        };
        UserSubscription.prototype.close = function () {
            this.subscriptionData.close();
        };
        UserSubscription.prototype.setNewSubscription = function (newSub) {
            this.subscriptionData = newSub;
        };
        return UserSubscription;
    }());

    var TimedCache$1 = (function () {
        function TimedCache(config) {
            this.config = config;
            this.cache = [];
            this.timeoutIds = [];
        }
        TimedCache.prototype.add = function (element) {
            var _this = this;
            var id = shortid$4();
            this.cache.push({ id: id, element: element });
            var timeoutId = setTimeout(function () {
                var elementIdx = _this.cache.findIndex(function (entry) { return entry.id === id; });
                if (elementIdx < 0) {
                    return;
                }
                _this.cache.splice(elementIdx, 1);
            }, this.config.ELEMENT_TTL_MS);
            this.timeoutIds.push(timeoutId);
        };
        TimedCache.prototype.flush = function () {
            var elements = this.cache.map(function (entry) { return entry.element; });
            this.timeoutIds.forEach(function (id) { return clearInterval(id); });
            this.cache = [];
            this.timeoutIds = [];
            return elements;
        };
        return TimedCache;
    }());

    var STATUS_AWAITING_ACCEPT$1 = "awaitingAccept";
    var STATUS_SUBSCRIBED$1 = "subscribed";
    var ERR_MSG_SUB_FAILED$1 = "Subscription failed.";
    var ERR_MSG_SUB_REJECTED$1 = "Subscription rejected.";
    var ON_CLOSE_MSG_SERVER_INIT$1 = "ServerInitiated";
    var ON_CLOSE_MSG_CLIENT_INIT$1 = "ClientInitiated";
    var ClientStreaming$1 = (function () {
        function ClientStreaming(session, repository, logger) {
            var _this = this;
            this.session = session;
            this.repository = repository;
            this.logger = logger;
            this.subscriptionsList = {};
            this.timedCache = new TimedCache$1({ ELEMENT_TTL_MS: 10000 });
            this.subscriptionIdToLocalKeyMap = {};
            this.nextSubLocalKey = 0;
            this.handleErrorSubscribing = function (errorResponse) {
                var tag = errorResponse._tag;
                var subLocalKey = tag.subLocalKey;
                var pendingSub = _this.subscriptionsList[subLocalKey];
                if (typeof pendingSub !== "object") {
                    return;
                }
                pendingSub.trackedServers = pendingSub.trackedServers.filter(function (server) {
                    return server.serverId !== tag.serverId;
                });
                if (pendingSub.trackedServers.length <= 0) {
                    clearTimeout(pendingSub.timeoutId);
                    if (pendingSub.status === STATUS_AWAITING_ACCEPT$1) {
                        var reason = (typeof errorResponse.reason === "string" && errorResponse.reason !== "") ?
                            ' Publisher said "' + errorResponse.reason + '".' :
                            " No reason given.";
                        var callArgs = typeof pendingSub.params.arguments === "object" ?
                            JSON.stringify(pendingSub.params.arguments) :
                            "{}";
                        pendingSub.error({
                            message: ERR_MSG_SUB_REJECTED$1 + reason + " Called with:" + callArgs,
                            called_with: pendingSub.params.arguments,
                            method: pendingSub.method,
                        });
                    }
                    else if (pendingSub.status === STATUS_SUBSCRIBED$1) {
                        _this.callOnClosedHandlers(pendingSub);
                    }
                    delete _this.subscriptionsList[subLocalKey];
                }
            };
            this.handleSubscribed = function (msg) {
                var subLocalKey = msg._tag.subLocalKey;
                var pendingSub = _this.subscriptionsList[subLocalKey];
                if (typeof pendingSub !== "object") {
                    return;
                }
                var serverId = msg._tag.serverId;
                var acceptingServer = pendingSub.trackedServers
                    .filter(function (server) {
                    return server.serverId === serverId;
                })[0];
                if (typeof acceptingServer !== "object") {
                    return;
                }
                acceptingServer.subscriptionId = msg.subscription_id;
                _this.subscriptionIdToLocalKeyMap[msg.subscription_id] = subLocalKey;
                var isFirstResponse = (pendingSub.status === STATUS_AWAITING_ACCEPT$1);
                pendingSub.status = STATUS_SUBSCRIBED$1;
                if (isFirstResponse) {
                    var reconnect = false;
                    var sub = pendingSub.subscription;
                    if (sub) {
                        sub.setNewSubscription(pendingSub);
                        pendingSub.success(sub);
                        reconnect = true;
                    }
                    else {
                        sub = new UserSubscription$1(_this.repository, pendingSub);
                        pendingSub.subscription = sub;
                        pendingSub.success(sub);
                    }
                    for (var _i = 0, _a = pendingSub.handlers.onConnected; _i < _a.length; _i++) {
                        var handler = _a[_i];
                        try {
                            handler(sub.serverInstance, reconnect);
                        }
                        catch (e) {
                        }
                    }
                }
            };
            this.handleEventData = function (msg) {
                var subLocalKey = _this.subscriptionIdToLocalKeyMap[msg.subscription_id];
                if (typeof subLocalKey === "undefined") {
                    return;
                }
                var subscription = _this.subscriptionsList[subLocalKey];
                if (typeof subscription !== "object") {
                    return;
                }
                var trackedServersFound = subscription.trackedServers.filter(function (server) {
                    return server.subscriptionId === msg.subscription_id;
                });
                if (trackedServersFound.length !== 1) {
                    return;
                }
                var isPrivateData = msg.oob;
                var sendingServerId = trackedServersFound[0].serverId;
                var receivedStreamData = function () {
                    return {
                        data: msg.data,
                        server: _this.repository.getServerById(sendingServerId).instance,
                        requestArguments: subscription.params.arguments,
                        message: undefined,
                        private: isPrivateData,
                    };
                };
                var onDataHandlers = subscription.handlers.onData;
                var queuedData = subscription.queued.data;
                if (onDataHandlers.length > 0) {
                    onDataHandlers.forEach(function (callback) {
                        if (typeof callback === "function") {
                            callback(receivedStreamData());
                        }
                    });
                }
                else {
                    queuedData.push(receivedStreamData());
                }
            };
            this.handleSubscriptionCancelled = function (msg) {
                var subLocalKey = _this.subscriptionIdToLocalKeyMap[msg.subscription_id];
                if (typeof subLocalKey === "undefined") {
                    return;
                }
                var subscription = _this.subscriptionsList[subLocalKey];
                if (typeof subscription !== "object") {
                    return;
                }
                var expectedNewLength = subscription.trackedServers.length - 1;
                subscription.trackedServers = subscription.trackedServers.filter(function (server) {
                    if (server.subscriptionId === msg.subscription_id) {
                        subscription.queued.closers.push(server.serverId);
                        return false;
                    }
                    else {
                        return true;
                    }
                });
                if (subscription.trackedServers.length !== expectedNewLength) {
                    return;
                }
                if (subscription.trackedServers.length <= 0) {
                    _this.timedCache.add(subscription);
                    clearTimeout(subscription.timeoutId);
                    _this.callOnClosedHandlers(subscription);
                    delete _this.subscriptionsList[subLocalKey];
                }
                delete _this.subscriptionIdToLocalKeyMap[msg.subscription_id];
            };
            session.on("subscribed", this.handleSubscribed);
            session.on("event", this.handleEventData);
            session.on("subscription-cancelled", this.handleSubscriptionCancelled);
        }
        ClientStreaming.prototype.subscribe = function (streamingMethod, params, targetServers, success, error, existingSub) {
            var _this = this;
            if (targetServers.length === 0) {
                error({
                    method: streamingMethod,
                    called_with: params.arguments,
                    message: ERR_MSG_SUB_FAILED$1 + " No available servers matched the target params.",
                });
                return;
            }
            var subLocalKey = this.getNextSubscriptionLocalKey();
            var pendingSub = this.registerSubscription(subLocalKey, streamingMethod, params, success, error, params.methodResponseTimeout || 10000, existingSub);
            if (typeof pendingSub !== "object") {
                error({
                    method: streamingMethod,
                    called_with: params.arguments,
                    message: ERR_MSG_SUB_FAILED$1 + " Unable to register the user callbacks.",
                });
                return;
            }
            targetServers.forEach(function (target) {
                var serverId = target.server.id;
                var method = target.methods.find(function (m) { return m.name === streamingMethod.name; });
                if (!method) {
                    _this.logger.error("can not find method ".concat(streamingMethod.name, " for target ").concat(target.server.id));
                    return;
                }
                pendingSub.trackedServers.push({
                    serverId: serverId,
                    subscriptionId: undefined,
                });
                var msg = {
                    type: "subscribe",
                    server_id: serverId,
                    method_id: method.gatewayId,
                    arguments_kv: params.arguments,
                };
                _this.session.send(msg, { serverId: serverId, subLocalKey: subLocalKey })
                    .then(function (m) { return _this.handleSubscribed(m); })
                    .catch(function (err) { return _this.handleErrorSubscribing(err); });
            });
        };
        ClientStreaming.prototype.drainSubscriptions = function () {
            var existing = Object.values(this.subscriptionsList);
            this.subscriptionsList = {};
            this.subscriptionIdToLocalKeyMap = {};
            return existing;
        };
        ClientStreaming.prototype.drainSubscriptionsCache = function () {
            return this.timedCache.flush();
        };
        ClientStreaming.prototype.getNextSubscriptionLocalKey = function () {
            var current = this.nextSubLocalKey;
            this.nextSubLocalKey += 1;
            return current;
        };
        ClientStreaming.prototype.registerSubscription = function (subLocalKey, method, params, success, error, timeout, existingSub) {
            var _this = this;
            var subsInfo = {
                localKey: subLocalKey,
                status: STATUS_AWAITING_ACCEPT$1,
                method: method,
                params: params,
                success: success,
                error: error,
                trackedServers: [],
                handlers: {
                    onData: (existingSub === null || existingSub === void 0 ? void 0 : existingSub.handlers.onData) || [],
                    onClosed: (existingSub === null || existingSub === void 0 ? void 0 : existingSub.handlers.onClosed) || [],
                    onConnected: (existingSub === null || existingSub === void 0 ? void 0 : existingSub.handlers.onConnected) || [],
                },
                queued: {
                    data: [],
                    closers: [],
                },
                timeoutId: undefined,
                close: function () { return _this.closeSubscription(subLocalKey); },
                subscription: existingSub === null || existingSub === void 0 ? void 0 : existingSub.subscription
            };
            if (!existingSub) {
                if (params.onData) {
                    subsInfo.handlers.onData.push(params.onData);
                }
                if (params.onClosed) {
                    subsInfo.handlers.onClosed.push(params.onClosed);
                }
                if (params.onConnected) {
                    subsInfo.handlers.onConnected.push(params.onConnected);
                }
            }
            this.subscriptionsList[subLocalKey] = subsInfo;
            subsInfo.timeoutId = setTimeout(function () {
                if (_this.subscriptionsList[subLocalKey] === undefined) {
                    return;
                }
                var pendingSub = _this.subscriptionsList[subLocalKey];
                if (pendingSub.status === STATUS_AWAITING_ACCEPT$1) {
                    error({
                        method: method,
                        called_with: params.arguments,
                        message: ERR_MSG_SUB_FAILED$1 + " Subscription attempt timed out after " + timeout + " ms.",
                    });
                    delete _this.subscriptionsList[subLocalKey];
                }
                else if (pendingSub.status === STATUS_SUBSCRIBED$1 && pendingSub.trackedServers.length > 0) {
                    pendingSub.trackedServers = pendingSub.trackedServers.filter(function (server) {
                        return (typeof server.subscriptionId !== "undefined");
                    });
                    delete pendingSub.timeoutId;
                    if (pendingSub.trackedServers.length <= 0) {
                        _this.callOnClosedHandlers(pendingSub);
                        delete _this.subscriptionsList[subLocalKey];
                    }
                }
            }, timeout);
            return subsInfo;
        };
        ClientStreaming.prototype.callOnClosedHandlers = function (subscription, reason) {
            var closersCount = subscription.queued.closers.length;
            var closingServerId = (closersCount > 0) ? subscription.queued.closers[closersCount - 1] : null;
            var closingServer;
            if (closingServerId !== undefined && typeof closingServerId === "string") {
                closingServer = this.repository.getServerById(closingServerId).instance;
            }
            subscription.handlers.onClosed.forEach(function (callback) {
                if (typeof callback !== "function") {
                    return;
                }
                callback({
                    message: reason || ON_CLOSE_MSG_SERVER_INIT$1,
                    requestArguments: subscription.params.arguments || {},
                    server: closingServer,
                    stream: subscription.method,
                });
            });
        };
        ClientStreaming.prototype.closeSubscription = function (subLocalKey) {
            var _this = this;
            var subscription = this.subscriptionsList[subLocalKey];
            if (typeof subscription !== "object") {
                return;
            }
            subscription.trackedServers.forEach(function (server) {
                if (typeof server.subscriptionId === "undefined") {
                    return;
                }
                subscription.queued.closers.push(server.serverId);
                _this.session.sendFireAndForget({
                    type: "unsubscribe",
                    subscription_id: server.subscriptionId,
                    reason_uri: "",
                    reason: ON_CLOSE_MSG_CLIENT_INIT$1,
                });
                delete _this.subscriptionIdToLocalKeyMap[server.subscriptionId];
            });
            subscription.trackedServers = [];
            this.callOnClosedHandlers(subscription, ON_CLOSE_MSG_CLIENT_INIT$1);
            delete this.subscriptionsList[subLocalKey];
        };
        return ClientStreaming;
    }());

    var ClientProtocol$1 = (function () {
        function ClientProtocol(session, repository, logger) {
            var _this = this;
            this.session = session;
            this.repository = repository;
            this.logger = logger;
            session.on("peer-added", function (msg) { return _this.handlePeerAdded(msg); });
            session.on("peer-removed", function (msg) { return _this.handlePeerRemoved(msg); });
            session.on("methods-added", function (msg) { return _this.handleMethodsAddedMessage(msg); });
            session.on("methods-removed", function (msg) { return _this.handleMethodsRemovedMessage(msg); });
            this.streaming = new ClientStreaming$1(session, repository, logger);
        }
        ClientProtocol.prototype.subscribe = function (stream, options, targetServers, success, error, existingSub) {
            this.streaming.subscribe(stream, options, targetServers, success, error, existingSub);
        };
        ClientProtocol.prototype.invoke = function (id, method, args, target) {
            var _this = this;
            var serverId = target.id;
            var methodId = method.gatewayId;
            var msg = {
                type: "call",
                server_id: serverId,
                method_id: methodId,
                arguments_kv: args,
            };
            return this.session.send(msg, { invocationId: id, serverId: serverId })
                .then(function (m) { return _this.handleResultMessage(m); })
                .catch(function (err) { return _this.handleInvocationError(err); });
        };
        ClientProtocol.prototype.drainSubscriptions = function () {
            return this.streaming.drainSubscriptions();
        };
        ClientProtocol.prototype.drainSubscriptionsCache = function () {
            return this.streaming.drainSubscriptionsCache();
        };
        ClientProtocol.prototype.handlePeerAdded = function (msg) {
            var newPeerId = msg.new_peer_id;
            var remoteId = msg.identity;
            var isLocal = msg.meta ? msg.meta.local : true;
            var pid = Number(remoteId.process);
            var serverInfo = {
                machine: remoteId.machine,
                pid: isNaN(pid) ? remoteId.process : pid,
                instance: remoteId.instance,
                application: remoteId.application,
                applicationName: remoteId.applicationName,
                environment: remoteId.environment,
                region: remoteId.region,
                user: remoteId.user,
                windowId: remoteId.windowId,
                peerId: newPeerId,
                api: remoteId.api,
                isLocal: isLocal
            };
            this.repository.addServer(serverInfo, newPeerId);
        };
        ClientProtocol.prototype.handlePeerRemoved = function (msg) {
            var removedPeerId = msg.removed_id;
            var reason = msg.reason;
            this.repository.removeServerById(removedPeerId, reason);
        };
        ClientProtocol.prototype.handleMethodsAddedMessage = function (msg) {
            var _this = this;
            var serverId = msg.server_id;
            var methods = msg.methods;
            methods.forEach(function (method) {
                _this.repository.addServerMethod(serverId, method);
            });
        };
        ClientProtocol.prototype.handleMethodsRemovedMessage = function (msg) {
            var _this = this;
            var serverId = msg.server_id;
            var methodIdList = msg.methods;
            var server = this.repository.getServerById(serverId);
            var serverMethodKeys = Object.keys(server.methods);
            serverMethodKeys.forEach(function (methodKey) {
                var method = server.methods[methodKey];
                if (methodIdList.indexOf(method.gatewayId) > -1) {
                    _this.repository.removeServerMethod(serverId, methodKey);
                }
            });
        };
        ClientProtocol.prototype.handleResultMessage = function (msg) {
            var invocationId = msg._tag.invocationId;
            var result = msg.result;
            var serverId = msg._tag.serverId;
            var server = this.repository.getServerById(serverId);
            return {
                invocationId: invocationId,
                result: result,
                instance: server.instance,
                status: InvokeStatus$1.Success,
                message: ""
            };
        };
        ClientProtocol.prototype.handleInvocationError = function (msg) {
            this.logger.debug("handle invocation error ".concat(JSON.stringify(msg)));
            if ("_tag" in msg) {
                var invocationId = msg._tag.invocationId;
                var serverId = msg._tag.serverId;
                var server = this.repository.getServerById(serverId);
                var message = msg.reason;
                var context_1 = msg.context;
                return {
                    invocationId: invocationId,
                    result: context_1,
                    instance: server.instance,
                    status: InvokeStatus$1.Error,
                    message: message
                };
            }
            else {
                return {
                    invocationId: "",
                    message: msg.message,
                    status: InvokeStatus$1.Error,
                    error: msg
                };
            }
        };
        return ClientProtocol;
    }());

    function gW3ProtocolFactory$1 (instance, connection, clientRepository, serverRepository, libConfig, interop) {
        var logger = libConfig.logger.subLogger("gw3-protocol");
        var resolveReadyPromise;
        var readyPromise = new Promise(function (resolve) {
            resolveReadyPromise = resolve;
        });
        var session = connection.domain("agm", ["subscribed"]);
        var server = new ServerProtocol$1(session, clientRepository, serverRepository, logger.subLogger("server"));
        var client = new ClientProtocol$1(session, clientRepository, logger.subLogger("client"));
        function handleReconnect() {
            return __awaiter$2(this, void 0, void 0, function () {
                var reconnectionPromises, existingSubscriptions, _loop_1, _i, existingSubscriptions_1, sub, registeredMethods, _loop_2, _a, registeredMethods_1, method;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logger.info("reconnected - will replay registered methods and subscriptions");
                            client.drainSubscriptionsCache().forEach(function (sub) {
                                var methodInfo = sub.method;
                                var params = Object.assign({}, sub.params);
                                logger.info("trying to soft-re-subscribe to method ".concat(methodInfo.name, ", with params: ").concat(JSON.stringify(params)));
                                interop.client.subscribe(methodInfo, params, undefined, undefined, sub).then(function () { return logger.info("soft-subscribing to method ".concat(methodInfo.name, " DONE")); }).catch(function (error) { return logger.warn("subscribing to method ".concat(methodInfo.name, " failed: ").concat(JSON.stringify(error), "}")); });
                            });
                            reconnectionPromises = [];
                            existingSubscriptions = client.drainSubscriptions();
                            _loop_1 = function (sub) {
                                var methodInfo = sub.method;
                                var params = Object.assign({}, sub.params);
                                logger.info("trying to re-subscribe to method ".concat(methodInfo.name, ", with params: ").concat(JSON.stringify(params)));
                                reconnectionPromises.push(interop.client.subscribe(methodInfo, params, undefined, undefined, sub).then(function () { return logger.info("subscribing to method ".concat(methodInfo.name, " DONE")); }));
                            };
                            for (_i = 0, existingSubscriptions_1 = existingSubscriptions; _i < existingSubscriptions_1.length; _i++) {
                                sub = existingSubscriptions_1[_i];
                                _loop_1(sub);
                            }
                            registeredMethods = serverRepository.getList();
                            serverRepository.reset();
                            _loop_2 = function (method) {
                                var def = method.definition;
                                logger.info("re-publishing method ".concat(def.name));
                                if (method.stream) {
                                    reconnectionPromises.push(interop.server.createStream(def, method.streamCallbacks, undefined, undefined, method.stream).then(function () { return logger.info("subscribing to method ".concat(def.name, " DONE")); }));
                                }
                                else if (method.theFunction && method.theFunction.userCallback) {
                                    reconnectionPromises.push(interop.register(def, method.theFunction.userCallback).then(function () { return logger.info("subscribing to method ".concat(def.name, " DONE")); }));
                                }
                                else if (method.theFunction && method.theFunction.userCallbackAsync) {
                                    reconnectionPromises.push(interop.registerAsync(def, method.theFunction.userCallbackAsync).then(function () { return logger.info("subscribing to method ".concat(def.name, " DONE")); }));
                                }
                                logger.info("re-publishing method ".concat(def.name, " DONE"));
                            };
                            for (_a = 0, registeredMethods_1 = registeredMethods; _a < registeredMethods_1.length; _a++) {
                                method = registeredMethods_1[_a];
                                _loop_2(method);
                            }
                            return [4, Promise.all(reconnectionPromises)];
                        case 1:
                            _b.sent();
                            logger.info("Interop is re-announced");
                            return [2];
                    }
                });
            });
        }
        function handleInitialJoin() {
            if (resolveReadyPromise) {
                resolveReadyPromise({
                    client: client,
                    server: server,
                });
                resolveReadyPromise = undefined;
            }
        }
        session.onJoined(function (reconnect) {
            clientRepository.addServer(instance, connection.peerId);
            if (reconnect) {
                handleReconnect().then(function () { return connection.setLibReAnnounced({ name: "interop" }); }).catch(function (error) { return logger.warn("Error while re-announcing interop: ".concat(JSON.stringify(error))); });
            }
            else {
                handleInitialJoin();
            }
        });
        session.onLeft(function () {
            clientRepository.reset();
        });
        session.join();
        return readyPromise;
    }

    var Interop$1 = (function () {
        function Interop(configuration) {
            var _this = this;
            if (typeof configuration === "undefined") {
                throw new Error("configuration is required");
            }
            if (typeof configuration.connection === "undefined") {
                throw new Error("configuration.connections is required");
            }
            var connection = configuration.connection;
            if (typeof configuration.methodResponseTimeout !== "number") {
                configuration.methodResponseTimeout = 30 * 1000;
            }
            if (typeof configuration.waitTimeoutMs !== "number") {
                configuration.waitTimeoutMs = 30 * 1000;
            }
            this.unwrappedInstance = new InstanceWrapper$1(this, undefined, connection);
            this.instance = this.unwrappedInstance.unwrap();
            this.clientRepository = new ClientRepository$1(configuration.logger.subLogger("cRep"), this);
            this.serverRepository = new ServerRepository$1();
            var protocolPromise;
            if (connection.protocolVersion === 3) {
                protocolPromise = gW3ProtocolFactory$1(this.instance, connection, this.clientRepository, this.serverRepository, configuration, this);
            }
            else {
                throw new Error("protocol ".concat(connection.protocolVersion, " not supported"));
            }
            this.readyPromise = protocolPromise.then(function (protocol) {
                _this.protocol = protocol;
                _this.client = new Client$1(_this.protocol, _this.clientRepository, _this.instance, configuration);
                _this.server = new Server$1(_this.protocol, _this.serverRepository);
                return _this;
            });
        }
        Interop.prototype.ready = function () {
            return this.readyPromise;
        };
        Interop.prototype.serverRemoved = function (callback) {
            return this.client.serverRemoved(callback);
        };
        Interop.prototype.serverAdded = function (callback) {
            return this.client.serverAdded(callback);
        };
        Interop.prototype.serverMethodRemoved = function (callback) {
            return this.client.serverMethodRemoved(callback);
        };
        Interop.prototype.serverMethodAdded = function (callback) {
            return this.client.serverMethodAdded(callback);
        };
        Interop.prototype.methodRemoved = function (callback) {
            return this.client.methodRemoved(callback);
        };
        Interop.prototype.methodAdded = function (callback) {
            return this.client.methodAdded(callback);
        };
        Interop.prototype.methodsForInstance = function (instance) {
            return this.client.methodsForInstance(instance);
        };
        Interop.prototype.methods = function (methodFilter) {
            return this.client.methods(methodFilter);
        };
        Interop.prototype.servers = function (methodFilter) {
            return this.client.servers(methodFilter);
        };
        Interop.prototype.subscribe = function (method, options, successCallback, errorCallback) {
            return this.client.subscribe(method, options, successCallback, errorCallback);
        };
        Interop.prototype.createStream = function (streamDef, callbacks, successCallback, errorCallback) {
            return this.server.createStream(streamDef, callbacks, successCallback, errorCallback);
        };
        Interop.prototype.unregister = function (methodFilter) {
            return this.server.unregister(methodFilter);
        };
        Interop.prototype.registerAsync = function (methodDefinition, callback) {
            return this.server.registerAsync(methodDefinition, callback);
        };
        Interop.prototype.register = function (methodDefinition, callback) {
            return this.server.register(methodDefinition, callback);
        };
        Interop.prototype.invoke = function (methodFilter, argumentObj, target, additionalOptions, success, error) {
            return this.client.invoke(methodFilter, argumentObj, target, additionalOptions, success, error);
        };
        Interop.prototype.waitForMethod = function (name) {
            var pw = new PromiseWrapper$1();
            var unsubscribe = this.client.methodAdded(function (m) {
                if (m.name === name) {
                    unsubscribe();
                    pw.resolve(m);
                }
            });
            return pw.promise;
        };
        return Interop;
    }());

    var successMessages$1 = ["subscribed", "success"];
    var MessageBus$1 = (function () {
        function MessageBus(connection, logger) {
            var _this = this;
            this.publish = function (topic, data, options) {
                var _a = options || {}, routingKey = _a.routingKey, target = _a.target;
                var args = _this.removeEmptyValues({
                    type: "publish",
                    topic: topic,
                    data: data,
                    peer_id: _this.peerId,
                    routing_key: routingKey,
                    target_identity: target
                });
                _this.session.send(args);
            };
            this.subscribe = function (topic, callback, options) {
                return new Promise(function (resolve, reject) {
                    var _a = options || {}, routingKey = _a.routingKey, target = _a.target;
                    var args = _this.removeEmptyValues({
                        type: "subscribe",
                        topic: topic,
                        peer_id: _this.peerId,
                        routing_key: routingKey,
                        source: target
                    });
                    _this.session.send(args)
                        .then(function (response) {
                        var subscription_id = response.subscription_id;
                        _this.subscriptions.push({ subscription_id: subscription_id, topic: topic, callback: callback, source: target });
                        resolve({
                            unsubscribe: function () {
                                _this.session.send({ type: "unsubscribe", subscription_id: subscription_id, peer_id: _this.peerId });
                                _this.subscriptions = _this.subscriptions.filter(function (s) { return s.subscription_id !== subscription_id; });
                                return Promise.resolve();
                            }
                        });
                    })
                        .catch(function (error) { return reject(error); });
                });
            };
            this.watchOnEvent = function () {
                _this.session.on("event", function (args) {
                    var data = args.data, subscription_id = args.subscription_id;
                    var source = args["publisher-identity"];
                    var subscription = _this.subscriptions.find(function (s) { return s.subscription_id === subscription_id; });
                    if (subscription) {
                        if (!subscription.source) {
                            subscription.callback(data, subscription.topic, source);
                        }
                        else {
                            if (_this.keysMatch(subscription.source, source)) {
                                subscription.callback(data, subscription.topic, source);
                            }
                        }
                    }
                });
            };
            this.connection = connection;
            this.logger = logger;
            this.peerId = connection.peerId;
            this.subscriptions = [];
            this.session = connection.domain("bus", successMessages$1);
            this.readyPromise = this.session.join();
            this.readyPromise.then(function () {
                _this.watchOnEvent();
            });
        }
        MessageBus.prototype.ready = function () {
            return this.readyPromise;
        };
        MessageBus.prototype.removeEmptyValues = function (obj) {
            var cleaned = {};
            Object.keys(obj).forEach(function (key) {
                if (obj[key] !== undefined && obj[key] !== null) {
                    cleaned[key] = obj[key];
                }
            });
            return cleaned;
        };
        MessageBus.prototype.keysMatch = function (obj1, obj2) {
            var keysObj1 = Object.keys(obj1);
            var allMatch = true;
            keysObj1.forEach(function (key) {
                if (obj1[key] !== obj2[key]) {
                    allMatch = false;
                }
            });
            return allMatch;
        };
        return MessageBus;
    }());

    var GlueCore$1 = function (userConfig, ext) {
        var gdVersion = Utils$1.getGDMajorVersion();
        var glue42gd;
        var preloadPromise = Promise.resolve();
        if (gdVersion) {
            if (gdVersion < 3) {
                throw new Error("GD v2 is not supported. Use v4 of the API to run in that context.");
            }
            else if (gdVersion >= 3) {
                glue42gd = window.glue42gd;
                preloadPromise = window.gdPreloadPromise || preloadPromise;
            }
        }
        var glueInitTimer = timer$1("glue");
        userConfig = userConfig || {};
        ext = ext || {};
        var internalConfig = prepareConfig$1(userConfig, ext, glue42gd);
        var _connection;
        var _interop;
        var _logger;
        var _metrics;
        var _contexts;
        var _bus;
        var _allowTrace;
        var libs = {};
        function registerLib(name, inner, t) {
            _allowTrace = _logger.canPublish("trace");
            if (_allowTrace) {
                _logger.trace("registering ".concat(name, " module"));
            }
            var done = function () {
                inner.initTime = t.stop();
                inner.initEndTime = t.endTime;
                inner.marks = t.marks;
                if (_allowTrace) {
                    _logger.trace("".concat(name, " is ready - ").concat(t.endTime - t.startTime));
                }
            };
            inner.initStartTime = t.startTime;
            if (inner.ready) {
                inner.ready().then(function () {
                    done();
                });
            }
            else {
                done();
            }
            if (!Array.isArray(name)) {
                name = [name];
            }
            name.forEach(function (n) {
                libs[n] = inner;
                GlueCore$1[n] = inner;
            });
        }
        function setupConnection() {
            var initTimer = timer$1("connection");
            _connection = new Connection$1(internalConfig.connection, _logger.subLogger("connection"));
            var authPromise = Promise.resolve(internalConfig.auth);
            if (internalConfig.connection && !internalConfig.auth) {
                if (glue42gd) {
                    authPromise = glue42gd.getGWToken()
                        .then(function (token) {
                        return {
                            gatewayToken: token
                        };
                    });
                }
                else if (typeof window !== "undefined" && (window === null || window === void 0 ? void 0 : window.glue42electron)) {
                    if (typeof window.glue42electron.gwToken === "string") {
                        authPromise = Promise.resolve({
                            gatewayToken: window.glue42electron.gwToken
                        });
                    }
                }
                else {
                    authPromise = Promise.reject("You need to provide auth information");
                }
            }
            return authPromise
                .then(function (authConfig) {
                initTimer.mark("auth-promise-resolved");
                var authRequest;
                if (Object.prototype.toString.call(authConfig) === "[object Object]") {
                    authRequest = authConfig;
                }
                else {
                    throw new Error("Invalid auth object - " + JSON.stringify(authConfig));
                }
                return _connection.login(authRequest);
            })
                .then(function () {
                registerLib("connection", _connection, initTimer);
                return internalConfig;
            })
                .catch(function (e) {
                if (_connection) {
                    _connection.logout();
                }
                throw e;
            });
        }
        function setupLogger() {
            var _a;
            var initTimer = timer$1("logger");
            _logger = new Logger$1("".concat((_a = internalConfig.connection.identity) === null || _a === void 0 ? void 0 : _a.application), undefined, internalConfig.customLogger);
            _logger.consoleLevel(internalConfig.logger.console);
            _logger.publishLevel(internalConfig.logger.publish);
            if (_logger.canPublish("debug")) {
                _logger.debug("initializing glue...");
            }
            registerLib("logger", _logger, initTimer);
            return Promise.resolve(undefined);
        }
        function setupMetrics() {
            var _a, _b, _c, _d, _e;
            var initTimer = timer$1("metrics");
            var config = internalConfig.metrics;
            var metricsPublishingEnabledFunc = glue42gd === null || glue42gd === void 0 ? void 0 : glue42gd.getMetricsPublishingEnabled;
            var identity = internalConfig.connection.identity;
            var canUpdateMetric = metricsPublishingEnabledFunc ? metricsPublishingEnabledFunc : function () { return true; };
            var disableAutoAppSystem = (_a = (typeof config !== "boolean" && config.disableAutoAppSystem)) !== null && _a !== void 0 ? _a : false;
            _metrics = metrics$1({
                connection: config ? _connection : undefined,
                logger: _logger.subLogger("metrics"),
                canUpdateMetric: canUpdateMetric,
                system: "Glue42",
                service: (_c = (_b = identity === null || identity === void 0 ? void 0 : identity.service) !== null && _b !== void 0 ? _b : glue42gd === null || glue42gd === void 0 ? void 0 : glue42gd.applicationName) !== null && _c !== void 0 ? _c : internalConfig.application,
                instance: (_e = (_d = identity === null || identity === void 0 ? void 0 : identity.instance) !== null && _d !== void 0 ? _d : identity === null || identity === void 0 ? void 0 : identity.windowId) !== null && _e !== void 0 ? _e : shortid$4(),
                disableAutoAppSystem: disableAutoAppSystem,
                pagePerformanceMetrics: typeof config !== "boolean" ? config === null || config === void 0 ? void 0 : config.pagePerformanceMetrics : undefined
            });
            registerLib("metrics", _metrics, initTimer);
            return Promise.resolve();
        }
        function setupInterop() {
            var initTimer = timer$1("interop");
            var agmConfig = {
                connection: _connection,
                logger: _logger.subLogger("interop"),
            };
            _interop = new Interop$1(agmConfig);
            Logger$1.Interop = _interop;
            registerLib(["interop", "agm"], _interop, initTimer);
            return Promise.resolve();
        }
        function setupContexts() {
            var hasActivities = (internalConfig.activities && _connection.protocolVersion === 3);
            var needsContexts = internalConfig.contexts || hasActivities;
            if (needsContexts) {
                var initTimer = timer$1("contexts");
                _contexts = new ContextsModule$1({
                    connection: _connection,
                    logger: _logger.subLogger("contexts"),
                    trackAllContexts: typeof internalConfig.contexts === "object" ? internalConfig.contexts.trackAllContexts : false,
                    reAnnounceKnownContexts: typeof internalConfig.contexts === "object" ? internalConfig.contexts.reAnnounceKnownContexts : false
                });
                registerLib("contexts", _contexts, initTimer);
                return _contexts;
            }
            else {
                var replayer = _connection.replayer;
                if (replayer) {
                    replayer.drain(ContextMessageReplaySpec$1.name);
                }
            }
        }
        function setupBus() {
            return __awaiter$2(this, void 0, void 0, function () {
                var initTimer;
                return __generator$1(this, function (_a) {
                    if (!internalConfig.bus) {
                        return [2, Promise.resolve()];
                    }
                    initTimer = timer$1("bus");
                    _bus = new MessageBus$1(_connection, _logger.subLogger("bus"));
                    registerLib("bus", _bus, initTimer);
                    return [2, Promise.resolve()];
                });
            });
        }
        function setupExternalLibs(externalLibs) {
            try {
                externalLibs.forEach(function (lib) {
                    setupExternalLib(lib.name, lib.create);
                });
                return Promise.resolve();
            }
            catch (e) {
                return Promise.reject(e);
            }
        }
        function setupExternalLib(name, createCallback) {
            var initTimer = timer$1(name);
            var lib = createCallback(libs);
            if (lib) {
                registerLib(name, lib, initTimer);
            }
        }
        function waitForLibs() {
            var libsReadyPromises = Object.keys(libs).map(function (key) {
                var lib = libs[key];
                return lib.ready ?
                    lib.ready() : Promise.resolve();
            });
            return Promise.all(libsReadyPromises);
        }
        function constructGlueObject() {
            var feedbackFunc = function (feedbackInfo) {
                if (!_interop) {
                    return;
                }
                _interop.invoke("T42.ACS.Feedback", feedbackInfo, "best");
            };
            var info = {
                coreVersion: version$4,
                version: internalConfig.version
            };
            glueInitTimer.stop();
            var glue = {
                feedback: feedbackFunc,
                info: info,
                logger: _logger,
                interop: _interop,
                agm: _interop,
                connection: _connection,
                metrics: _metrics,
                contexts: _contexts,
                bus: _bus,
                version: internalConfig.version,
                userConfig: userConfig,
                done: function () {
                    _logger === null || _logger === void 0 ? void 0 : _logger.info("done called by user...");
                    return _connection.logout();
                }
            };
            glue.performance = {
                get glueVer() {
                    return internalConfig.version;
                },
                get glueConfig() {
                    return JSON.stringify(userConfig);
                },
                get browser() {
                    return window.performance.timing.toJSON();
                },
                get memory() {
                    return window.performance.memory;
                },
                get initTimes() {
                    var all = getAllTimers$1();
                    return Object.keys(all).map(function (key) {
                        var t = all[key];
                        return {
                            name: key,
                            duration: t.endTime - t.startTime,
                            marks: t.marks,
                            startTime: t.startTime,
                            endTime: t.endTime
                        };
                    });
                }
            };
            Object.keys(libs).forEach(function (key) {
                var lib = libs[key];
                glue[key] = lib;
            });
            glue.config = {};
            Object.keys(internalConfig).forEach(function (k) {
                glue.config[k] = internalConfig[k];
            });
            if (ext && ext.extOptions) {
                Object.keys(ext.extOptions).forEach(function (k) {
                    glue.config[k] = ext === null || ext === void 0 ? void 0 : ext.extOptions[k];
                });
            }
            if (ext === null || ext === void 0 ? void 0 : ext.enrichGlue) {
                ext.enrichGlue(glue);
            }
            if (glue42gd && glue42gd.updatePerfData) {
                glue42gd.updatePerfData(glue.performance);
            }
            if (glue.agm) {
                var deprecatedDecorator = function (fn, wrong, proper) {
                    return function () {
                        glue.logger.warn("glue.js - 'glue.agm.".concat(wrong, "' method is deprecated, use 'glue.interop.").concat(proper, "' instead."));
                        return fn.apply(glue.agm, arguments);
                    };
                };
                var agmAny = glue.agm;
                agmAny.method_added = deprecatedDecorator(glue.agm.methodAdded, "method_added", "methodAdded");
                agmAny.method_removed = deprecatedDecorator(glue.agm.methodRemoved, "method_removed", "methodRemoved");
                agmAny.server_added = deprecatedDecorator(glue.agm.serverAdded, "server_added", "serverAdded");
                agmAny.server_method_aded = deprecatedDecorator(glue.agm.serverMethodAdded, "server_method_aded", "serverMethodAdded");
                agmAny.server_method_removed = deprecatedDecorator(glue.agm.serverMethodRemoved, "server_method_removed", "serverMethodRemoved");
            }
            return glue;
        }
        function registerInstanceIfNeeded() {
            return __awaiter$2(this, void 0, void 0, function () {
                var RegisterInstanceMethodName, isMethodAvailable, error_1, typedError;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            RegisterInstanceMethodName = "T42.ACS.RegisterInstance";
                            if (!(Utils$1.isNode() && typeof process.env._GD_STARTING_CONTEXT_ === "undefined" && typeof (userConfig === null || userConfig === void 0 ? void 0 : userConfig.application) !== "undefined")) return [3, 4];
                            isMethodAvailable = _interop.methods({ name: RegisterInstanceMethodName }).length > 0;
                            if (!isMethodAvailable) return [3, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, _interop.invoke(RegisterInstanceMethodName, { appName: userConfig === null || userConfig === void 0 ? void 0 : userConfig.application, pid: process.pid })];
                        case 2:
                            _a.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _a.sent();
                            typedError = error_1;
                            _logger.error("Cannot register as an instance: ".concat(JSON.stringify(typedError.message)));
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            });
        }
        return preloadPromise
            .then(setupLogger)
            .then(setupConnection)
            .then(function () { return Promise.all([setupMetrics(), setupInterop(), setupContexts(), setupBus()]); })
            .then(function () { return _interop.readyPromise; })
            .then(function () { return registerInstanceIfNeeded(); })
            .then(function () {
            return setupExternalLibs(internalConfig.libs || []);
        })
            .then(waitForLibs)
            .then(constructGlueObject)
            .catch(function (err) {
            return Promise.reject({
                err: err,
                libs: libs
            });
        });
    };
    if (typeof window !== "undefined") {
        window.GlueCore = GlueCore$1;
    }
    GlueCore$1.version = version$4;
    GlueCore$1.default = GlueCore$1;

    const glueWebFactory = createFactoryFunction(GlueCore$1);
    if (typeof window !== "undefined") {
        const windowAny = window;
        windowAny.GlueWeb = glueWebFactory;
        delete windowAny.GlueCore;
    }
    if (!window.glue42gd && !window.glue42core) {
        window.glue42core = { webStarted: false };
    }
    glueWebFactory.version = version$2$1;

    const Glue42CoreMessageTypes = {
        connectionRequest: { name: "connectionRequest" },
        connectionAccepted: { name: "connectionAccepted" },
        platformPing: { name: "platformPing" },
        platformReady: { name: "platformReady" },
        platformUnload: { name: "platformUnload" },
        clientUnload: { name: "clientUnload" },
        parentPing: { name: "parentPing" },
        parentReady: { name: "parentReady" },
        gatewayDisconnect: { name: "gatewayDisconnect" },
        gatewayInternalConnect: { name: "gatewayInternalConnect" },
        transportSwitchRequest: { name: "transportSwitchRequest" },
        transportSwitchResponse: { name: "transportSwitchResponse" },
        getCurrentTransport: { name: "getCurrentTransport" },
        getCurrentTransportResponse: { name: "getCurrentTransportResponse" },
        checkPreferredLogic: { name: "checkPreferredLogic" },
        checkPreferredConnection: { name: "checkPreferredConnection" },
        checkPreferredLogicResponse: { name: "checkPreferredLogicResponse" },
        checkPreferredConnectionResponse: { name: "checkPreferredConnectionResponse" }
    };
    const GlueWebPlatformControlName = "T42.Web.Platform.Control";
    const GlueWebPlatformStreamName = "T42.Web.Platform.Stream";
    const GlueClientControlName = "T42.Web.Client.Control";
    const GlueWebPlatformWorkspacesStreamName = "T42.Web.Platform.WSP.Stream";
    const GlueWorkspaceFrameClientControlName = "T42.Workspaces.Control";
    const GlueWorkspacesEventsReceiverName = "T42.Workspaces.Events";
    const GlueWebIntentsPrefix = "Tick42.FDC3.Intents.";
    const ChannelContextPrefix = "___channel___";
    const dbName = "glue42core";
    const serviceWorkerBroadcastChannelName = "glue42-core-worker";
    const dbVersion = 2;
    const webPlatformTransportName = "web-platform";
    const defaultNoAppWindowComponentAppName = "no-app-window";

    const defaultPlatformConfig = {
        windows: {
            windowResponseTimeoutMs: 10000,
            defaultWindowOpenBounds: {
                top: 0,
                left: 0,
                width: 800,
                height: 600
            }
        },
        notifications: {
            enable: true,
            enableToasts: true,
            clearNotificationOnClick: true
        },
        applications: {
            local: []
        },
        layouts: {
            mode: "idb",
            local: []
        },
        channels: {
            definitions: []
        },
        plugins: {
            definitions: []
        },
        gateway: {
            logging: {
                level: "info"
            }
        },
        connection: {},
        glue: {},
        environment: {},
        workspacesFrameCache: true
    };
    const defaultFetchTimeoutMs = 3000;
    const defaultOpenerTimeoutMs = 1000;
    const defaultPreferredDiscoveryIntervalMS = 15000;
    const defaultClientPortRequestTimeoutMS = 15000;
    const defaultClientPreferredLogicTestTimeoutMS = 5000;

    const checkIsOpenerGlue = () => {
        if (!window.opener) {
            return Promise.resolve(false);
        }
        if (window.name.includes("g42-")) {
            return Promise.resolve(true);
        }
        return new Promise((resolve) => {
            const pingListener = (event) => {
                var _a;
                const data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
                if (!data || data.type !== Glue42CoreMessageTypes.platformReady.name) {
                    return;
                }
                window.removeEventListener("message", pingListener);
                resolve(true);
            };
            window.addEventListener("message", pingListener);
            const message = {
                glue42core: {
                    type: Glue42CoreMessageTypes.platformPing.name
                }
            };
            window.opener.postMessage(message, "*");
            setTimeout(() => resolve(false), defaultOpenerTimeoutMs);
        });
    };
    const checkIfPlacedInWorkspace = () => {
        const hasWspSuffix = window.name.indexOf("#wsp") !== -1;
        return hasWspSuffix;
    };

    const fallbackToEnterprise = (config) => __awaiter$3(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const glue = (config === null || config === void 0 ? void 0 : config.glueFactory) ?
            yield (config === null || config === void 0 ? void 0 : config.glueFactory(config === null || config === void 0 ? void 0 : config.glue)) :
            yield glueWebFactory(config === null || config === void 0 ? void 0 : config.glue);
        if ((_b = (_a = config === null || config === void 0 ? void 0 : config.applications) === null || _a === void 0 ? void 0 : _a.local) === null || _b === void 0 ? void 0 : _b.length) {
            yield glue.appManager.inMemory.import(config.applications.local, "merge");
        }
        if ((_d = (_c = config === null || config === void 0 ? void 0 : config.layouts) === null || _c === void 0 ? void 0 : _c.local) === null || _d === void 0 ? void 0 : _d.length) {
            yield glue.layouts.import(config.layouts.local, "merge");
        }
        return { glue };
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs$1 (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function a () {
    			if (this instanceof a) {
    				var args = [null];
    				args.push.apply(args, arguments);
    				var Ctor = Function.bind.apply(f, args);
    				return new Ctor();
    			}
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    (function(){
    var h,aa=this||self;function ba(a){var b=typeof a;return "object"!=b?b:a?Array.isArray(a)?"array":b:"null"}function ca(a){var b=ba(a);return "array"==b||"object"==b&&"number"==typeof a.length}function ea(a){return Object.prototype.hasOwnProperty.call(a,fa)&&a[fa]||(a[fa]=++ha)}var fa="closure_uid_"+(1E9*Math.random()>>>0),ha=0;function ka(a,b,c){return a.call.apply(a.bind,arguments)}
    function la(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function na(a,b,c){na=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ka:la;return na.apply(null,arguments)}
    function oa(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function pa(a,b){a=a.split(".");var c=aa;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}:c[d]=b;}
    function ra(a,b){function c(){}c.prototype=b.prototype;a.gi=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.de=function(d,e,f){for(var g=Array(arguments.length-2),l=2;l<arguments.length;l++)g[l-2]=arguments[l];return b.prototype[e].apply(d,g)};}function sa(a,b){return new va(a,b)}function wa(a){return 0<a?0x7fffffffffffffff<=a?ya:new va(a,a/4294967296):0>a?-0x7fffffffffffffff>=a?za:Aa(new va(-a,-a/4294967296)):Da}function Aa(a){var b=~a.oa+1|0;return sa(b,~a.ja+!b|0)}function Ea(a){return 4294967296*a.ja+(a.oa>>>0)}
    function Ga(a,b){if(Ha(b))throw Error("division by zero");if(0>a.ja){if(La(a,za)){if(La(b,Ia)||La(b,Ja))return za;if(La(b,za))return Ia;var c=1;if(0==c)c=a;else {var d=a.ja;c=32>c?sa(a.oa>>>c|d<<32-c,d>>c):sa(d>>c-32,0<=d?0:-1);}c=Ga(c,b).shiftLeft(1);if(La(c,Da))return 0>b.ja?Ia:Ja;d=b.multiply(c);a=a.add(Aa(d));return c.add(Ga(a,b))}return 0>b.ja?Ga(Aa(a),Aa(b)):Aa(Ga(Aa(a),b))}if(Ha(a))return Da;if(0>b.ja)return La(b,za)?Da:Aa(Ga(a,Aa(b)));for(d=Da;0<=a.compare(b);){c=Math.max(1,Math.floor(Ea(a)/
    Ea(b)));var e=Math.ceil(Math.log(c)/Math.LN2);e=48>=e?1:Math.pow(2,e-48);for(var f=wa(c),g=f.multiply(b);0>g.ja||0<g.compare(a);)c-=e,f=wa(c),g=f.multiply(b);Ha(f)&&(f=Ia);d=d.add(f);a=a.add(Aa(g));}return d}function Ha(a){return 0==a.oa&&0==a.ja}function La(a,b){return a.oa==b.oa&&a.ja==b.ja}
    class va{constructor(a,b){this.oa=a|0;this.ja=b|0;}isSafeInteger(){var a=this.ja>>21;return 0==a||-1==a&&!(0==this.oa&&-2097152==this.ja)}toString(a){a=a||10;if(2>a||36<a)throw Error("radix out of range: "+a);if(this.isSafeInteger()){var b=Ea(this);return 10==a?""+b:b.toString(a)}b=14-(a>>2);var c=Math.pow(a,b),d=sa(c,c/4294967296);c=Ga(this,d);var e=Math,f=e.abs;d=c.multiply(d);d=this.add(Aa(d));e=f.call(e,Ea(d));f=10==a?""+e:e.toString(a);f.length<b&&(f="0000000000000".substr(f.length-b)+f);e=Ea(c);
    return (10==a?e:e.toString(a))+f}compare(a){return this.ja==a.ja?this.oa==a.oa?0:this.oa>>>0>a.oa>>>0?1:-1:this.ja>a.ja?1:-1}add(a){var b=this.ja>>>16,c=this.ja&65535,d=this.oa>>>16,e=a.ja>>>16,f=a.ja&65535,g=a.oa>>>16;a=(this.oa&65535)+(a.oa&65535);g=(a>>>16)+(d+g);d=g>>>16;d+=c+f;b=(d>>>16)+(b+e)&65535;return sa((g&65535)<<16|a&65535,b<<16|d&65535)}multiply(a){if(Ha(this))return this;if(Ha(a))return a;var b=this.ja>>>16,c=this.ja&65535,d=this.oa>>>16,e=this.oa&65535,f=a.ja>>>16,g=a.ja&65535,l=a.oa>>>
    16;a=a.oa&65535;var m=e*a;var q=(m>>>16)+d*a;var t=q>>>16;q=(q&65535)+e*l;t+=q>>>16;t+=c*a;var v=t>>>16;t=(t&65535)+d*l;v+=t>>>16;t=(t&65535)+e*g;v=v+(t>>>16)+(b*a+c*l+d*g+e*f)&65535;return sa((q&65535)<<16|m&65535,v<<16|t&65535)}and(a){return sa(this.oa&a.oa,this.ja&a.ja)}or(a){return sa(this.oa|a.oa,this.ja|a.ja)}xor(a){return sa(this.oa^a.oa,this.ja^a.ja)}shiftLeft(a){a&=63;if(0==a)return this;var b=this.oa;return 32>a?sa(b<<a,this.ja<<a|b>>>32-a):sa(0,b<<a-32)}}
    const Da=sa(0,0),Ia=sa(1,0),Ja=sa(-1,-1),ya=sa(4294967295,2147483647),za=sa(0,2147483648);function Xa(a,b){const c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c}function Ya(a){return /^[\s\xa0]*$/.test(a)}function Va(a){const b=[];let c=0;for(const d in a)b[c++]=d;return b}function Wa(a,b,c){return null!==a&&b in a?a[b]:c}function Ma(a){return Array.prototype.concat.apply([],arguments)}function Na(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return []}function Oa(a,b,c,d){return Array.prototype.splice.apply(a,Pa(arguments,1))}function Pa(a,b,c){return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)}function Qa(a,b){a.sort(b||Ra);}
    function Sa(a,b){const c=Array(a.length);for(let e=0;e<a.length;e++)c[e]={index:e,value:a[e]};const d=b||Ra;Qa(c,function(e,f){return d(e.value,f.value)||e.index-f.index});for(b=0;b<a.length;b++)a[b]=c[b].value;}function Ra(a,b){return a>b?1:a<b?-1:0}function Ua(a){const b=[];for(let c=0;c<a;c++)b[c]=0;return b}var Za;a:{const a=aa.navigator;if(a){const b=a.userAgent;if(b){Za=b;break a}}Za="";}let $a=Za;function ab(a){return -1!=$a.indexOf(a)}function bb(){return ab("Firefox")||ab("FxiOS")}function cb(){return (ab("Chrome")||ab("CriOS"))&&!ab("Edge")}function eb(a){return 1==a.length&&" "<=a&&"~">=a||""<=a&&"�">=a}var fb=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};function db(a,b){a=String(a);let c=a.indexOf(".");-1===c&&(c=a.length);const d="-"===a[0]?"-":"";d&&(a=a.substring(1));return d+fb("0",Math.max(0,b-c))+a}function pb(a,b){null!=a&&this.append.apply(this,arguments);}h=pb.prototype;h.Pc="";h.set=function(a){this.Pc=""+a;};h.append=function(a,b,c){this.Pc+=String(a);if(null!=b)for(let d=1;d<arguments.length;d++)this.Pc+=arguments[d];return this};h.clear=function(){this.Pc="";};h.getLength=function(){return this.Pc.length};h.toString=function(){return this.Pc};var qb={},rb={},gb,tb={},ub=null,vb=null,wb=!0,xb=!0,yb=null,zb=null;function Ab(){return new k(null,5,[hb,!0,ib,xb,kb,!1,lb,!1,mb,yb],null)}function Hb(){wb=!1;vb=function(){var a=arguments;return console.log.apply(console,Na(a))};}function n(a){return null!=a&&!1!==a}function Ib(a){return null==a}function Jb(a){return a instanceof Array}function Kb(a){return "number"===typeof a}function Lb(a){return null==a?!0:!1===a?!0:!1}function Mb(a){return null!=a}function Nb(a){return "string"===ba(a)}
    function Pb(){return !0}function Qb(a,b){return a[ba(null==b?null:b)]?!0:a._?!0:!1}function Rb(a){return null==a?null:a.constructor}function Sb(a,b){var c=Rb(b);return Error(["No protocol method ",a," defined for type ",n(n(c)?c.Za:c)?c.Xa:ba(b),": ",b].join(""))}function Tb(a){var b=a.Xa;return n(b)?b:p.g(a)}
    var Ub="undefined"!==typeof Symbol&&"function"===ba(Symbol)?Symbol.iterator:"@@iterator",Vb={"]":"_RBRACK_","'":"_SINGLEQUOTE_","\x3d":"_EQ_",'"':"_DOUBLEQUOTE_","!":"_BANG_","*":"_STAR_","%":"_PERCENT_","|":"_BAR_","~":"_TILDE_","/":"_SLASH_","\\":"_BSLASH_","-":"_","?":"_QMARK_","\x26":"_AMPERSAND_",":":"_COLON_","\x3c":"_LT_","{":"_LBRACE_","}":"_RBRACE_","[":"_LBRACK_","#":"_SHARP_","^":"_CARET_","+":"_PLUS_","@":"_CIRCA_","\x3e":"_GT_"},Wb={_RBRACE_:"}",_COLON_:":",_BANG_:"!",_QMARK_:"?",_BSLASH_:"\\\\",
    _SLASH_:"/",_PERCENT_:"%",_PLUS_:"+",_SHARP_:"#",_LBRACE_:"{",_BAR_:"|",_LBRACK_:"[",_EQ_:"\x3d",_:"-",_TILDE_:"~",_RBRACK_:"]",_GT_:"\x3e",_SINGLEQUOTE_:"'",_CIRCA_:"@",_AMPERSAND_:"\x26",_DOUBLEQUOTE_:'\\"',_CARET_:"^",_LT_:"\x3c",_STAR_:"*"},Xb=null;function Yb(a){for(var b=a.length,c=Array(b),d=0;;)if(d<b)c[d]=a[d],d+=1;else break;return c}function Zb(a){function b(d,e){d.push(e);return d}var c=[];return $b.j?$b.j(b,c,a):$b.call(null,b,c,a)}function ac(){}function bc(){}function cc(){}
    function dc(a){if(null!=a&&null!=a.ca)a=a.ca(a);else {var b=dc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=dc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("ICounted.-count",a);}return a}function ec(){}function fc(a){if(null!=a&&null!=a.ua)a=a.ua(a);else {var b=fc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=fc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IEmptyableCollection.-empty",a);}return a}function gc(){}
    function hc(a,b){if(null!=a&&null!=a.ka)a=a.ka(a,b);else {var c=hc[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=hc._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("ICollection.-conj",a);}return a}function ic(){}
    var nb=function(){function a(d,e,f){var g=jc[ba(null==d?null:d)];if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);g=jc._;if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);throw Sb("IIndexed.-nth",d);}function b(d,e){var f=jc[ba(null==d?null:d)];if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);f=jc._;if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);throw Sb("IIndexed.-nth",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,d,e,f)}throw Error("Invalid arity: "+
    arguments.length);};c.h=b;c.j=a;return c}(),jc=function jc(a){switch(arguments.length){case 2:return jc.h(arguments[0],arguments[1]);case 3:return jc.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};jc.h=function(a,b){return null!=a&&null!=a.V?a.V(a,b):nb(a,b)};jc.j=function(a,b,c){return null!=a&&null!=a.ra?a.ra(a,b,c):nb(a,b,c)};jc.I=3;function lc(){}
    function mc(a){if(null!=a&&null!=a.Va)a=a.Va(a);else {var b=mc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=mc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("ISeq.-first",a);}return a}function nc(a){if(null!=a&&null!=a.Wa)a=a.Wa(a);else {var b=nc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=nc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("ISeq.-rest",a);}return a}function oc(){}
    function pc(a){if(null!=a&&null!=a.Da)a=a.Da(a);else {var b=pc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=pc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("INext.-next",a);}return a}function qc(){}
    var ob=function(){function a(d,e,f){var g=rc[ba(null==d?null:d)];if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);g=rc._;if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);throw Sb("ILookup.-lookup",d);}function b(d,e){var f=rc[ba(null==d?null:d)];if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);f=rc._;if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);throw Sb("ILookup.-lookup",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,d,e,
    f)}throw Error("Invalid arity: "+arguments.length);};c.h=b;c.j=a;return c}(),rc=function rc(a){switch(arguments.length){case 2:return rc.h(arguments[0],arguments[1]);case 3:return rc.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};rc.h=function(a,b){return null!=a&&null!=a.da?a.da(a,b):ob(a,b)};rc.j=function(a,b,c){return null!=a&&null!=a.S?a.S(a,b,c):ob(a,b,c)};rc.I=3;function tc(){}
    function uc(a,b){if(null!=a&&null!=a.Ca)a=a.Ca(a,b);else {var c=uc[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=uc._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IAssociative.-contains-key?",a);}return a}function vc(a,b,c){if(null!=a&&null!=a.la)a=a.la(a,b,c);else {var d=vc[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=vc._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("IAssociative.-assoc",a);}return a}
    function xc(a,b){if(null!=a&&null!=a.Cc)a=a.Cc(a,b);else {var c=xc[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=xc._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IFind.-find",a);}return a}function yc(){}function zc(a,b){if(null!=a&&null!=a.nb)a=a.nb(a,b);else {var c=zc[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=zc._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IMap.-dissoc",a);}return a}
    function Ac(a){if(null!=a&&null!=a.Oe)a=a.key;else {var b=Ac[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Ac._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IMapEntry.-key",a);}return a}function Bc(a){if(null!=a&&null!=a.Pe)a=a.o;else {var b=Bc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Bc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IMapEntry.-val",a);}return a}function Cc(){}
    function Dc(a,b){if(null!=a&&null!=a.Jf)a=a.Jf(a,b);else {var c=Dc[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=Dc._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("ISet.-disjoin",a);}return a}function Ec(a){if(null!=a&&null!=a.Vb)a=a.Vb(a);else {var b=Ec[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Ec._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IStack.-peek",a);}return a}
    function Fc(a){if(null!=a&&null!=a.Wb)a=a.Wb(a);else {var b=Fc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Fc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IStack.-pop",a);}return a}function Gc(){}function Hc(a,b,c){if(null!=a&&null!=a.Lb)a=a.Lb(a,b,c);else {var d=Hc[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=Hc._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("IVector.-assoc-n",a);}return a}function Ic(){}
    function r(a){if(null!=a&&null!=a.Db)a=a.Db(a);else {var b=r[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=r._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IDeref.-deref",a);}return a}function Jc(){}function Kc(a){if(null!=a&&null!=a.T)a=a.T(a);else {var b=Kc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Kc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IMeta.-meta",a);}return a}function Lc(){}
    function Mc(a,b){if(null!=a&&null!=a.U)a=a.U(a,b);else {var c=Mc[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=Mc._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IWithMeta.-with-meta",a);}return a}function Nc(){}
    var sb=function(){function a(d,e,f){var g=Oc[ba(null==d?null:d)];if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);g=Oc._;if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);throw Sb("IReduce.-reduce",d);}function b(d,e){var f=Oc[ba(null==d?null:d)];if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);f=Oc._;if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);throw Sb("IReduce.-reduce",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,d,e,
    f)}throw Error("Invalid arity: "+arguments.length);};c.h=b;c.j=a;return c}(),Oc=function Oc(a){switch(arguments.length){case 2:return Oc.h(arguments[0],arguments[1]);case 3:return Oc.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};Oc.h=function(a,b){return null!=a&&null!=a.Ta?a.Ta(a,b):sb(a,b)};Oc.j=function(a,b,c){return null!=a&&null!=a.Ua?a.Ua(a,b,c):sb(a,b,c)};Oc.I=3;function Qc(){}
    function Rc(a,b,c){if(null!=a&&null!=a.Ya)a=a.Ya(a,b,c);else {var d=Rc[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=Rc._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("IKVReduce.-kv-reduce",a);}return a}function Sc(a,b){if(null!=a&&null!=a.aa)a=a.aa(a,b);else {var c=Sc[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=Sc._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IEquiv.-equiv",a);}return a}
    function Tc(a){if(null!=a&&null!=a.ba)a=a.ba(a);else {var b=Tc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Tc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IHash.-hash",a);}return a}function Uc(){}function Vc(a){if(null!=a&&null!=a.ea)a=a.ea(a);else {var b=Vc[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Vc._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("ISeqable.-seq",a);}return a}function Wc(){}function Xc(){}function Yc(){}
    function Zc(){}function $c(a){if(null!=a&&null!=a.Dc)a=a.Dc(a);else {var b=$c[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=$c._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IReversible.-rseq",a);}return a}function ad(a,b){if(null!=a&&null!=a.Sc)a=a.Sc(a,b);else {var c=ad[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=ad._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IWriter.-write",a);}return a}
    function bd(a){if(null!=a&&null!=a.pc)a=a.pc(a);else {var b=bd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=bd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IWriter.-flush",a);}return a}function cd(){}function dd(a,b,c){if(null!=a&&null!=a.W)a=a.W(a,b,c);else {var d=dd[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=dd._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("IPrintWithWriter.-pr-writer",a);}return a}function ed(){}
    function fd(a){if(null!=a&&null!=a.Hd)a=a.Hd(a);else {var b=fd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=fd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IPending.-realized?",a);}return a}function gd(a,b,c){if(null!=a&&null!=a.Se)a.Se(a,b,c);else {var d=gd[ba(null==a?null:a)];if(null!=d)d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=gd._,null!=d)d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("IWatchable.-notify-watches",a);}}
    function hd(a){if(null!=a&&null!=a.kd)a=a.kd(a);else {var b=hd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=hd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IEditableCollection.-as-transient",a);}return a}function id(a,b){if(null!=a&&null!=a.nd)a=a.nd(a,b);else {var c=id[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=id._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("ITransientCollection.-conj!",a);}return a}
    function jd(a){if(null!=a&&null!=a.Id)a=a.Id(a);else {var b=jd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=jd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("ITransientCollection.-persistent!",a);}return a}function kd(a,b,c){if(null!=a&&null!=a.md)a=a.md(a,b,c);else {var d=kd[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=kd._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("ITransientAssociative.-assoc!",a);}return a}
    function ld(a,b){if(null!=a&&null!=a.Re)a=a.Re(a,b);else {var c=ld[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=ld._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("ITransientMap.-dissoc!",a);}return a}function md(){}function nd(a,b){if(null!=a&&null!=a.Ub)a=a.Ub(a,b);else {var c=nd[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=nd._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IComparable.-compare",a);}return a}
    function od(a){if(null!=a&&null!=a.Ne)a=a.Ne(a);else {var b=od[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=od._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IChunk.-drop-first",a);}return a}function pd(a){if(null!=a&&null!=a.Cd)a=a.Cd(a);else {var b=pd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=pd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IChunkedSeq.-chunked-first",a);}return a}
    function qd(a){if(null!=a&&null!=a.Qc)a=a.Qc(a);else {var b=qd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=qd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IChunkedSeq.-chunked-rest",a);}return a}function sd(a){if(null!=a&&null!=a.Ed)a=a.Ed(a);else {var b=sd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=sd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("INamed.-name",a);}return a}
    function td(a){if(null!=a&&null!=a.Fd)a=a.Fd(a);else {var b=td[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=td._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("INamed.-namespace",a);}return a}function ud(a,b){if(null!=a&&null!=a.Mg)a=a.Mg(a,b);else {var c=ud[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=ud._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IReset.-reset!",a);}return a}
    var Cb=function(){function a(f,g,l,m,q){var t=vd[ba(null==f?null:f)];if(null!=t)return t.R?t.R(f,g,l,m,q):t.call(null,f,g,l,m,q);t=vd._;if(null!=t)return t.R?t.R(f,g,l,m,q):t.call(null,f,g,l,m,q);throw Sb("ISwap.-swap!",f);}function b(f,g,l,m){var q=vd[ba(null==f?null:f)];if(null!=q)return q.D?q.D(f,g,l,m):q.call(null,f,g,l,m);q=vd._;if(null!=q)return q.D?q.D(f,g,l,m):q.call(null,f,g,l,m);throw Sb("ISwap.-swap!",f);}function c(f,g,l){var m=vd[ba(null==f?null:f)];if(null!=m)return m.j?m.j(f,g,l):m.call(null,
    f,g,l);m=vd._;if(null!=m)return m.j?m.j(f,g,l):m.call(null,f,g,l);throw Sb("ISwap.-swap!",f);}function d(f,g){var l=vd[ba(null==f?null:f)];if(null!=l)return l.h?l.h(f,g):l.call(null,f,g);l=vd._;if(null!=l)return l.h?l.h(f,g):l.call(null,f,g);throw Sb("ISwap.-swap!",f);}var e=null;e=function(f,g,l,m,q){switch(arguments.length){case 2:return d.call(this,f,g);case 3:return c.call(this,f,g,l);case 4:return b.call(this,f,g,l,m);case 5:return a.call(this,f,g,l,m,q)}throw Error("Invalid arity: "+arguments.length);
    };e.h=d;e.j=c;e.D=b;e.R=a;return e}(),vd=function vd(a){switch(arguments.length){case 2:return vd.h(arguments[0],arguments[1]);case 3:return vd.j(arguments[0],arguments[1],arguments[2]);case 4:return vd.D(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return vd.R(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};vd.h=function(a,b){return null!=a&&null!=a.Ng?a.Ng(a,b):Cb(a,b)};
    vd.j=function(a,b,c){return null!=a&&null!=a.Og?a.Og(a,b,c):Cb(a,b,c)};vd.D=function(a,b,c,d){return null!=a&&null!=a.Pg?a.Pg(a,b,c,d):Cb(a,b,c,d)};vd.R=function(a,b,c,d,e){return null!=a&&null!=a.Qg?a.Qg(a,b,c,d,e):Cb(a,b,c,d,e)};vd.I=5;function xd(a,b){if(null!=a&&null!=a.Ec)a.Ec(a,b);else {var c=xd[ba(null==a?null:a)];if(null!=c)c.h?c.h(a,b):c.call(null,a,b);else if(c=xd._,null!=c)c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IVolatile.-vreset!",a);}}function yd(){}
    function zd(a){if(null!=a&&null!=a.Aa)a=a.Aa(a);else {var b=zd[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=zd._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IIterable.-iterator",a);}return a}function Ad(a){this.ei=a;this.C=1073741824;this.O=0;}Ad.prototype.Sc=function(a,b){return this.ei.append(b)};Ad.prototype.pc=function(){return null};function Bd(a){var b=new pb,c=new Ad(b);a.W(null,c,Ab());c.pc(null);return p.g(b)}
    var Cd="undefined"!==typeof Math&&"undefined"!==typeof Math.imul?function(a,b){return Math.imul(a,b)}:function(a,b){var c=a&65535,d=b&65535;return c*d+((a>>>16&65535)*d+c*(b>>>16&65535)<<16>>>0)|0};function Dd(a){a=Cd(a|0,-862048943);return Cd(a<<15|a>>>-15,461845907)}function Ed(a,b){a=(a|0)^(b|0);return Cd(a<<13|a>>>-13,5)+-430675100|0}function Fd(a,b){a=(a|0)^b;a=Cd(a^a>>>16,-2048144789);a=Cd(a^a>>>13,-1028477387);return a^a>>>16}var Gd={},Hd=0;
    function Id(a){255<Hd&&(Gd={},Hd=0);if(null==a)return 0;var b=Gd[a];if("number"===typeof b)a=b;else {a:if(null!=a)if(b=a.length,0<b)for(var c=0,d=0;;)if(c<b)d=Cd(31,d)+a.charCodeAt(c),c+=1;else {b=d;break a}else b=0;else b=0;Gd[a]=b;Hd+=1;a=b;}return a}
    function Jd(a){if(null!=a&&(a.C&4194304||tb===a.oi))return a.ba(null)^0;if("number"===typeof a){if(isFinite(a))return Math.floor(a)%2147483647;switch(a){case Infinity:return 2146435072;case -Infinity:return -1048576;default:return 2146959360}}else return !0===a?a=1231:!1===a?a=1237:"string"===typeof a?(a=Id(a),a=0===a?a:Fd(Ed(0,Dd(a)),4)):a=a instanceof Date?a.valueOf()^0:null==a?0:Tc(a)^0,a}
    function Kd(a){var b=a.name;a:{var c=1;for(var d=0;;)if(c<b.length)d=Ed(d,Dd(b.charCodeAt(c-1)|b.charCodeAt(c)<<16)),c+=2;else {c=d;break a}}b=Fd(1===(b.length&1)?c^Dd(b.charCodeAt(b.length-1)):c,Cd(2,b.length));a=Id(a.zb);return b^a+2654435769+(b<<6)+(b>>2)}function Ld(a,b){if(a.xc===b.xc)return 0;var c=Lb(a.zb);if(n(c?b.zb:c))return -1;if(n(a.zb)){if(Lb(b.zb))return 1;c=Ra(a.zb,b.zb);return 0===c?Ra(a.name,b.name):c}return Ra(a.name,b.name)}
    function Md(a,b,c,d,e){this.zb=a;this.name=b;this.xc=c;this.hd=d;this.Nb=e;this.C=2154168321;this.O=4096;}h=Md.prototype;h.toString=function(){return this.xc};h.aa=function(a,b){return b instanceof Md?this.xc===b.xc:!1};h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};
    h.g=function(a){return u.h?u.h(a,this):u.call(null,a,this)};h.h=function(a,b){return u.j?u.j(a,this,b):u.call(null,a,this,b)};h.T=function(){return this.Nb};h.U=function(a,b){return new Md(this.zb,this.name,this.xc,this.hd,b)};h.ba=function(){var a=this.hd;return null!=a?a:this.hd=a=Kd(this)};h.Ed=function(){return this.name};h.Fd=function(){return this.zb};h.W=function(a,b){return ad(b,this.xc)};
    var Nd=function Nd(a){switch(arguments.length){case 1:return Nd.g(arguments[0]);case 2:return Nd.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};Nd.g=function(a){for(;;){if(a instanceof Md)return a;if("string"===typeof a){var b=a.indexOf("/");return 1>b?Nd.h(null,a):Nd.h(a.substring(0,b),a.substring(b+1,a.length))}if(a instanceof Od)return a.fd;if(a instanceof w)a=a.X;else throw Error("no conversion to symbol");}};
    Nd.h=function(a,b){var c=null!=a?[p.g(a),"/",p.g(b)].join(""):b;return new Md(a,b,c,null,null)};Nd.I=2;function Od(a,b,c){this.o=a;this.fd=b;this.Nb=c;this.C=6717441;this.O=0;}h=Od.prototype;h.toString=function(){return ["#'",p.g(this.fd)].join("")};h.Db=function(){return this.o.v?this.o.v():this.o.call(null)};h.T=function(){return this.Nb};h.U=function(a,b){return new Od(this.o,this.fd,b)};h.aa=function(a,b){return b instanceof Od?(a=this.fd,b=b.fd,x.h?x.h(a,b):x.call(null,a,b)):!1};h.ba=function(){return Kd(this.fd)};
    h.Ef=tb;
    h.call=function(a){switch(arguments.length-1){case 0:return this.v();case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);case 3:return this.j(arguments[1],arguments[2],arguments[3]);case 4:return this.D(arguments[1],arguments[2],arguments[3],arguments[4]);case 5:return this.R(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 6:return this.ga(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);case 7:return this.Sa(arguments[1],arguments[2],
    arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]);case 8:return this.za(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]);case 9:return this.Ea(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]);case 10:return this.Ha(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10]);case 11:return this.Ia(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]);case 12:return this.Ja(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12]);case 13:return this.Ka(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13]);
    case 14:return this.La(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14]);case 15:return this.Ma(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]);case 16:return this.Na(arguments[1],arguments[2],arguments[3],arguments[4],
    arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16]);case 17:return this.Oa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]);case 18:return this.Pa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],
    arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18]);case 19:return this.Qa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]);case 20:return this.Ra(arguments[1],arguments[2],
    arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20]);case 21:return this.rc(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],
    arguments[19],arguments[20],arguments[21]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.v=function(){var a=this.o.v?this.o.v():this.o.call(null);return a.v?a.v():a.call(null)};h.g=function(a){var b=this.o.v?this.o.v():this.o.call(null);return b.g?b.g(a):b.call(null,a)};h.h=function(a,b){var c=this.o.v?this.o.v():this.o.call(null);return c.h?c.h(a,b):c.call(null,a,b)};
    h.j=function(a,b,c){var d=this.o.v?this.o.v():this.o.call(null);return d.j?d.j(a,b,c):d.call(null,a,b,c)};h.D=function(a,b,c,d){var e=this.o.v?this.o.v():this.o.call(null);return e.D?e.D(a,b,c,d):e.call(null,a,b,c,d)};h.R=function(a,b,c,d,e){var f=this.o.v?this.o.v():this.o.call(null);return f.R?f.R(a,b,c,d,e):f.call(null,a,b,c,d,e)};h.ga=function(a,b,c,d,e,f){var g=this.o.v?this.o.v():this.o.call(null);return g.ga?g.ga(a,b,c,d,e,f):g.call(null,a,b,c,d,e,f)};
    h.Sa=function(a,b,c,d,e,f,g){var l=this.o.v?this.o.v():this.o.call(null);return l.Sa?l.Sa(a,b,c,d,e,f,g):l.call(null,a,b,c,d,e,f,g)};h.za=function(a,b,c,d,e,f,g,l){var m=this.o.v?this.o.v():this.o.call(null);return m.za?m.za(a,b,c,d,e,f,g,l):m.call(null,a,b,c,d,e,f,g,l)};h.Ea=function(a,b,c,d,e,f,g,l,m){var q=this.o.v?this.o.v():this.o.call(null);return q.Ea?q.Ea(a,b,c,d,e,f,g,l,m):q.call(null,a,b,c,d,e,f,g,l,m)};
    h.Ha=function(a,b,c,d,e,f,g,l,m,q){var t=this.o.v?this.o.v():this.o.call(null);return t.Ha?t.Ha(a,b,c,d,e,f,g,l,m,q):t.call(null,a,b,c,d,e,f,g,l,m,q)};h.Ia=function(a,b,c,d,e,f,g,l,m,q,t){var v=this.o.v?this.o.v():this.o.call(null);return v.Ia?v.Ia(a,b,c,d,e,f,g,l,m,q,t):v.call(null,a,b,c,d,e,f,g,l,m,q,t)};h.Ja=function(a,b,c,d,e,f,g,l,m,q,t,v){var y=this.o.v?this.o.v():this.o.call(null);return y.Ja?y.Ja(a,b,c,d,e,f,g,l,m,q,t,v):y.call(null,a,b,c,d,e,f,g,l,m,q,t,v)};
    h.Ka=function(a,b,c,d,e,f,g,l,m,q,t,v,y){var E=this.o.v?this.o.v():this.o.call(null);return E.Ka?E.Ka(a,b,c,d,e,f,g,l,m,q,t,v,y):E.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y)};h.La=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E){var J=this.o.v?this.o.v():this.o.call(null);return J.La?J.La(a,b,c,d,e,f,g,l,m,q,t,v,y,E):J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E)};
    h.Ma=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J){var W=this.o.v?this.o.v():this.o.call(null);return W.Ma?W.Ma(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J):W.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J)};h.Na=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W){var Z=this.o.v?this.o.v():this.o.call(null);return Z.Na?Z.Na(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W):Z.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W)};
    h.Oa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z){var ma=this.o.v?this.o.v():this.o.call(null);return ma.Oa?ma.Oa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z):ma.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z)};h.Pa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma){var ja=this.o.v?this.o.v():this.o.call(null);return ja.Pa?ja.Pa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma):ja.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma)};
    h.Qa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja){var Ca=this.o.v?this.o.v():this.o.call(null);return Ca.Qa?Ca.Qa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja):Ca.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja)};h.Ra=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca){var Ba=this.o.v?this.o.v():this.o.call(null);return Ba.Ra?Ba.Ra(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca):Ba.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca)};
    h.rc=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba){var ta=this.o.v?this.o.v():this.o.call(null);return Pd.Wc?Pd.Wc(ta,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba):Pd.call(null,ta,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba)};function Qd(a){return null!=a?a.O&131072||tb===a.pi?!0:a.O?!1:Qb(yd,a):Qb(yd,a)}
    function z(a){if(null==a)return null;if(null!=a&&(a.C&8388608||tb===a.If))return a.ea(null);if(Jb(a)||"string"===typeof a)return 0===a.length?null:new Rd(a,0,null);if(null!=a&&null!=a[Ub])return a=Wa(a,Ub).call(a),Sd.g?Sd.g(a):Sd.call(null,a);if(Qb(Uc,a))return Vc(a);throw Error([p.g(a)," is not ISeqable"].join(""));}function A(a){if(null==a)return null;if(null!=a&&(a.C&64||tb===a.ld))return a.Va(null);a=z(a);return null==a?null:mc(a)}
    function Td(a){return null!=a?null!=a&&(a.C&64||tb===a.ld)?a.Wa(null):(a=z(a))?a.Wa(null):Ud:Ud}function C(a){return null==a?null:null!=a&&(a.C&128||tb===a.Gd)?a.Da(null):z(Td(a))}var x=function x(a){switch(arguments.length){case 1:return x.g(arguments[0]);case 2:return x.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return x.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};x.g=function(){return !0};
    x.h=function(a,b){return null==a?null==b:a===b||Sc(a,b)};x.l=function(a,b,c){for(;;)if(x.h(a,b))if(C(c))a=b,b=A(c),c=C(c);else return x.h(b,A(c));else return !1};x.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};x.I=2;function Vd(a){this.ma=a;}Vd.prototype.next=function(){if(null!=this.ma){var a=A(this.ma);this.ma=C(this.ma);return {value:a,done:!1}}return {value:null,done:!0}};function Wd(a){return new Vd(z(a))}
    function Xd(a,b){this.value=a;this.vd=b;this.Ie=null;this.C=8388672;this.O=0;}Xd.prototype.ea=function(){return this};Xd.prototype.Va=function(){return this.value};Xd.prototype.Wa=function(){null==this.Ie&&(this.Ie=Sd.g?Sd.g(this.vd):Sd.call(null,this.vd));return this.Ie};function Sd(a){var b=a.next();return n(b.done)?null:new Xd(b.value,a)}function Yd(a,b){return Fd(Ed(0,Dd(a)),b)}function Zd(a){var b=0,c=1;for(a=z(a);;)if(null!=a)b+=1,c=Cd(31,c)+Jd(A(a))|0,a=C(a);else return Yd(c,b)}
    var $d=Yd(1,0);function ae(a){var b=0,c=0;for(a=z(a);;)if(null!=a)b+=1,c=c+Jd(A(a))|0,a=C(a);else return Yd(c,b)}var be=Yd(0,0);cc["null"]=!0;dc["null"]=function(){return 0};Date.prototype.aa=function(a,b){return b instanceof Date&&this.valueOf()===b.valueOf()};Date.prototype.Rc=tb;Date.prototype.Ub=function(a,b){if(b instanceof Date)return Ra(this.valueOf(),b.valueOf());throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};Sc.number=function(a,b){return a===b};ac["function"]=!0;
    Jc["function"]=!0;Kc["function"]=function(){return null};Tc._=function(a){return ea(a)};function ce(a){return a+1}function de(a){this.o=a;this.C=32768;this.O=0;}de.prototype.Db=function(){return this.o};function ee(a){return new de(a)}function fe(a){return a instanceof de}function ge(a){return fe(a)?he.g?he.g(a):he.call(null,a):a}function he(a){return r(a)}
    function ie(a,b){var c=a.ca(null);if(0===c)return b.v?b.v():b.call(null);for(var d=a.V(null,0),e=1;;)if(e<c){var f=a.V(null,e);d=b.h?b.h(d,f):b.call(null,d,f);if(fe(d))return r(d);e+=1;}else return d}function je(a,b,c){var d=a.ca(null),e=c;for(c=0;;)if(c<d){var f=a.V(null,c);e=b.h?b.h(e,f):b.call(null,e,f);if(fe(e))return r(e);c+=1;}else return e}
    function ke(a,b){var c=a.length;if(0===a.length)return b.v?b.v():b.call(null);for(var d=a[0],e=1;;)if(e<c){var f=a[e];d=b.h?b.h(d,f):b.call(null,d,f);if(fe(d))return r(d);e+=1;}else return d}function le(a,b,c){var d=a.length,e=c;for(c=0;;)if(c<d){var f=a[c];e=b.h?b.h(e,f):b.call(null,e,f);if(fe(e))return r(e);c+=1;}else return e}function me(a,b,c,d){for(var e=a.length;;)if(d<e){var f=a[d];c=b.h?b.h(c,f):b.call(null,c,f);if(fe(c))return r(c);d+=1;}else return c}
    function ne(a){return null!=a?a.C&2||tb===a.Bg?!0:a.C?!1:Qb(cc,a):Qb(cc,a)}function oe(a){return null!=a?a.C&16||tb===a.Hf?!0:a.C?!1:Qb(ic,a):Qb(ic,a)}function pe(a,b,c){var d=D.g?D.g(a):D.call(null,a);if(c>=d)return -1;!(0<c)&&0>c&&(c+=d,c=0>c?0:c);for(;;)if(c<d){if(x.h(qe?qe(a,c):re.call(null,a,c),b))return c;c+=1;}else return -1}
    function se(a,b,c){var d=D.g?D.g(a):D.call(null,a);if(0===d)return -1;0<c?(--d,c=d<c?d:c):c=0>c?d+c:c;for(;;)if(0<=c){if(x.h(qe?qe(a,c):re.call(null,a,c),b))return c;--c;}else return -1}function te(a,b){this.A=a;this.P=b;}te.prototype.wa=function(){return this.P<this.A.length};te.prototype.next=function(){var a=this.A[this.P];this.P+=1;return a};function Rd(a,b,c){this.A=a;this.P=b;this.N=c;this.C=166592766;this.O=139264;}h=Rd.prototype;h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D.g?D.g(this):D.call(null,this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.V=function(a,b){a=b+this.P;if(0<=a&&a<this.A.length)return this.A[a];throw Error("Index out of bounds");};h.ra=function(a,b,c){a=b+this.P;return 0<=a&&a<this.A.length?this.A[a]:c};
    h.Aa=function(){return new te(this.A,this.P)};h.T=function(){return this.N};h.Da=function(){return this.P+1<this.A.length?new Rd(this.A,this.P+1,null):null};h.ca=function(){var a=this.A.length-this.P;return 0>a?0:a};h.Dc=function(){var a=this.ca(null);return 0<a?new ue(this,a-1,null):null};h.ba=function(){return Zd(this)};h.aa=function(a,b){return ve.h?ve.h(this,b):ve.call(null,this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return me(this.A,b,this.A[this.P],this.P+1)};
    h.Ua=function(a,b,c){return me(this.A,b,c,this.P)};h.Va=function(){return this.A[this.P]};h.Wa=function(){return this.P+1<this.A.length?new Rd(this.A,this.P+1,null):Ud};h.ea=function(){return this.P<this.A.length?this:null};h.U=function(a,b){return b===this.N?this:new Rd(this.A,this.P,b)};h.ka=function(a,b){return we.h?we.h(b,this):we.call(null,b,this)};Rd.prototype[Ub]=function(){return Wd(this)};function F(a){return 0<a.length?new Rd(a,0,null):null}
    function ue(a,b,c){this.ie=a;this.P=b;this.N=c;this.C=32374990;this.O=8192;}h=ue.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D.g?D.g(this):D.call(null,this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){return 0<this.P?new ue(this.ie,this.P-1,null):null};h.ca=function(){return this.P+1};h.ba=function(){return Zd(this)};
    h.aa=function(a,b){return ve.h?ve.h(this,b):ve.call(null,this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe?xe(b,this):ye.call(null,b,this)};h.Ua=function(a,b,c){return ze?ze(b,c,this):ye.call(null,b,c,this)};h.Va=function(){return jc(this.ie,this.P)};h.Wa=function(){return 0<this.P?new ue(this.ie,this.P-1,null):Ud};h.ea=function(){return this};h.U=function(a,b){return b===this.N?this:new ue(this.ie,this.P,b)};h.ka=function(a,b){return we.h?we.h(b,this):we.call(null,b,this)};
    ue.prototype[Ub]=function(){return Wd(this)};function Ae(a){return A(C(a))}function Be(a){return A(C(a))}function Ce(a){for(;;){var b=C(a);if(null!=b)a=b;else return A(a)}}Sc._=function(a,b){return a===b};var De=function De(a){switch(arguments.length){case 0:return De.v();case 1:return De.g(arguments[0]);case 2:return De.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return De.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};
    De.v=function(){return G};De.g=function(a){return a};De.h=function(a,b){return null!=a?hc(a,b):new Ee(null,b,null,1,null)};De.l=function(a,b,c){for(;;)if(n(c))a=De.h(a,b),b=A(c),c=C(c);else return De.h(a,b)};De.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};De.I=2;function Fe(a){return null==a?null:null!=a&&(a.C&4||tb===a.Dg)?a.ua(null):(null!=a?a.C&4||tb===a.Dg||(a.C?0:Qb(ec,a)):Qb(ec,a))?fc(a):null}
    function D(a){if(null!=a)if(null!=a&&(a.C&2||tb===a.Bg))a=a.ca(null);else if(Jb(a))a=a.length;else if("string"===typeof a)a=a.length;else if(null!=a&&(a.C&8388608||tb===a.If))a:{a=z(a);for(var b=0;;){if(ne(a)){a=b+dc(a);break a}a=C(a);b+=1;}}else a=dc(a);else a=0;return a}function Ge(a,b,c){for(;;){if(null==a)return c;if(0===b)return z(a)?A(a):c;if(oe(a))return jc(a,b,c);if(z(a))a=C(a),--b;else return c}}
    function re(a){switch(arguments.length){case 2:return qe(arguments[0],arguments[1]);case 3:return H(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}
    function qe(a,b){if("number"!==typeof b)throw Error("Index argument to nth must be a number");if(null==a)return a;if(null!=a&&(a.C&16||tb===a.Hf))return a.V(null,b);if(Jb(a)){if(-1<b&&b<a.length)return a[b|0];throw Error("Index out of bounds");}if("string"===typeof a){if(-1<b&&b<a.length)return a.charAt(b|0);throw Error("Index out of bounds");}if(null!=a&&(a.C&64||tb===a.ld)||null!=a&&(a.C&16777216||tb===a.Qe)){if(0>b)throw Error("Index out of bounds");a:for(;;){if(null==a)throw Error("Index out of bounds");
    if(0===b){if(z(a)){a=A(a);break a}throw Error("Index out of bounds");}if(oe(a)){a=jc(a,b);break a}if(z(a))a=C(a),--b;else throw Error("Index out of bounds");}return a}if(Qb(ic,a))return jc(a,b);throw Error(["nth not supported on this type ",p.g(Tb(Rb(a)))].join(""));}
    function H(a,b,c){if("number"!==typeof b)throw Error("Index argument to nth must be a number.");if(null==a)return c;if(null!=a&&(a.C&16||tb===a.Hf))return a.ra(null,b,c);if(Jb(a))return -1<b&&b<a.length?a[b|0]:c;if("string"===typeof a)return -1<b&&b<a.length?a.charAt(b|0):c;if(null!=a&&(a.C&64||tb===a.ld)||null!=a&&(a.C&16777216||tb===a.Qe))return 0>b?c:Ge(a,b,c);if(Qb(ic,a))return jc(a,b,c);throw Error(["nth not supported on this type ",p.g(Tb(Rb(a)))].join(""));}
    var u=function u(a){switch(arguments.length){case 2:return u.h(arguments[0],arguments[1]);case 3:return u.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};u.h=function(a,b){return null==a?null:null!=a&&(a.C&256||tb===a.Hg)?a.da(null,b):Jb(a)?null!=b&&b<a.length?a[b|0]:null:"string"===typeof a?null!=b&&-1<b&&b<a.length?a.charAt(b|0):null:Qb(qc,a)?rc(a,b):null};
    u.j=function(a,b,c){return null!=a?null!=a&&(a.C&256||tb===a.Hg)?a.S(null,b,c):Jb(a)?null!=b&&-1<b&&b<a.length?a[b|0]:c:"string"===typeof a?null!=b&&-1<b&&b<a.length?a.charAt(b|0):c:Qb(qc,a)?rc(a,b,c):c:c};u.I=3;var He=function He(a){switch(arguments.length){case 3:return He.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return He.l(arguments[0],arguments[1],arguments[2],new Rd(c.slice(3),0,null))}};
    He.j=function(a,b,c){return null!=a&&(a.C&512||tb===a.Ff)?a.la(null,b,c):null!=a?vc(a,b,c):Ie([b,c])};He.l=function(a,b,c,d){for(;;)if(a=He.j(a,b,c),n(d))b=A(d),c=Ae(d),d=C(C(d));else return a};He.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);d=C(d);return this.l(b,a,c,d)};He.I=3;
    var Je=function Je(a){switch(arguments.length){case 1:return Je.g(arguments[0]);case 2:return Je.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Je.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};Je.g=function(a){return a};Je.h=function(a,b){return null==a?null:zc(a,b)};Je.l=function(a,b,c){for(;;){if(null==a)return null;a=Je.h(a,b);if(n(c))b=A(c),c=C(c);else return a}};
    Je.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};Je.I=2;function Ke(a){var b="function"===typeof a;return b?b:null!=a?tb===a.Ef?!0:a.We?!1:Qb(ac,a):Qb(ac,a)}function Le(a,b){this.J=a;this.N=b;this.C=393217;this.O=0;}h=Le.prototype;h.T=function(){return this.N};h.U=function(a,b){return new Le(this.J,b)};h.Ef=tb;
    h.call=function(a){switch(arguments.length-1){case 0:return this.v();case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);case 3:return this.j(arguments[1],arguments[2],arguments[3]);case 4:return this.D(arguments[1],arguments[2],arguments[3],arguments[4]);case 5:return this.R(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 6:return this.ga(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);case 7:return this.Sa(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]);case 8:return this.za(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]);case 9:return this.Ea(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]);case 10:return this.Ha(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10]);
    case 11:return this.Ia(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]);case 12:return this.Ja(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12]);case 13:return this.Ka(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],
    arguments[11],arguments[12],arguments[13]);case 14:return this.La(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14]);case 15:return this.Ma(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]);case 16:return this.Na(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16]);case 17:return this.Oa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]);case 18:return this.Pa(arguments[1],arguments[2],
    arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18]);case 19:return this.Qa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]);case 20:return this.Ra(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20]);case 21:return this.rc(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],
    arguments[18],arguments[19],arguments[20],arguments[21]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.v=function(){return this.J.v?this.J.v():this.J.call(null)};h.g=function(a){return this.J.g?this.J.g(a):this.J.call(null,a)};h.h=function(a,b){return this.J.h?this.J.h(a,b):this.J.call(null,a,b)};h.j=function(a,b,c){return this.J.j?this.J.j(a,b,c):this.J.call(null,a,b,c)};
    h.D=function(a,b,c,d){return this.J.D?this.J.D(a,b,c,d):this.J.call(null,a,b,c,d)};h.R=function(a,b,c,d,e){return this.J.R?this.J.R(a,b,c,d,e):this.J.call(null,a,b,c,d,e)};h.ga=function(a,b,c,d,e,f){return this.J.ga?this.J.ga(a,b,c,d,e,f):this.J.call(null,a,b,c,d,e,f)};h.Sa=function(a,b,c,d,e,f,g){return this.J.Sa?this.J.Sa(a,b,c,d,e,f,g):this.J.call(null,a,b,c,d,e,f,g)};h.za=function(a,b,c,d,e,f,g,l){return this.J.za?this.J.za(a,b,c,d,e,f,g,l):this.J.call(null,a,b,c,d,e,f,g,l)};
    h.Ea=function(a,b,c,d,e,f,g,l,m){return this.J.Ea?this.J.Ea(a,b,c,d,e,f,g,l,m):this.J.call(null,a,b,c,d,e,f,g,l,m)};h.Ha=function(a,b,c,d,e,f,g,l,m,q){return this.J.Ha?this.J.Ha(a,b,c,d,e,f,g,l,m,q):this.J.call(null,a,b,c,d,e,f,g,l,m,q)};h.Ia=function(a,b,c,d,e,f,g,l,m,q,t){return this.J.Ia?this.J.Ia(a,b,c,d,e,f,g,l,m,q,t):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t)};h.Ja=function(a,b,c,d,e,f,g,l,m,q,t,v){return this.J.Ja?this.J.Ja(a,b,c,d,e,f,g,l,m,q,t,v):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v)};
    h.Ka=function(a,b,c,d,e,f,g,l,m,q,t,v,y){return this.J.Ka?this.J.Ka(a,b,c,d,e,f,g,l,m,q,t,v,y):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y)};h.La=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E){return this.J.La?this.J.La(a,b,c,d,e,f,g,l,m,q,t,v,y,E):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E)};h.Ma=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J){return this.J.Ma?this.J.Ma(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J)};
    h.Na=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W){return this.J.Na?this.J.Na(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W)};h.Oa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z){return this.J.Oa?this.J.Oa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z)};h.Pa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma){return this.J.Pa?this.J.Pa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma)};
    h.Qa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja){return this.J.Qa?this.J.Qa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja)};h.Ra=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca){return this.J.Ra?this.J.Ra(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca):this.J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca)};
    h.rc=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba){return Pd.Wc?Pd.Wc(this.J,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba):Pd.call(null,this.J,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba)};function Me(a,b){return "function"===typeof a?new Le(a,b):null==a?null:Mc(a,b)}function Ne(a){var b=null!=a;return (b?null!=a?a.C&131072||tb===a.Dd||(a.C?0:Qb(Jc,a)):Qb(Jc,a):b)?Kc(a):null}function Oe(a){return null==a?null:Ec(a)}function Pe(a){return null==a?null:Fc(a)}
    var Qe=function Qe(a){switch(arguments.length){case 1:return Qe.g(arguments[0]);case 2:return Qe.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Qe.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};Qe.g=function(a){return a};Qe.h=function(a,b){return null==a?null:Dc(a,b)};Qe.l=function(a,b,c){for(;;){if(null==a)return null;a=Qe.h(a,b);if(n(c))b=A(c),c=C(c);else return a}};
    Qe.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};Qe.I=2;function Re(a){return null==a||Lb(z(a))}function Se(a){return null==a?!1:null!=a?a.C&8||tb===a.li?!0:a.C?!1:Qb(gc,a):Qb(gc,a)}function Te(a){return null==a?!1:null!=a?a.C&4096||tb===a.xi?!0:a.C?!1:Qb(Cc,a):Qb(Cc,a)}function Ue(a){return null!=a?a.C&512||tb===a.Ff?!0:a.C?!1:Qb(tc,a):Qb(tc,a)}function Ve(a){return null!=a?a.C&16777216||tb===a.Qe?!0:a.C?!1:Qb(Wc,a):Qb(Wc,a)}
    function We(a){return null==a?!1:null!=a?a.C&1024||tb===a.ti?!0:a.C?!1:Qb(yc,a):Qb(yc,a)}function Xe(a){return null!=a?a.C&67108864||tb===a.Kg?!0:a.C?!1:Qb(Yc,a):Qb(Yc,a)}function Ye(a){return null!=a?a.C&16384||tb===a.yi?!0:a.C?!1:Qb(Gc,a):Qb(Gc,a)}function Ze(a){return null!=a?a.O&512||tb===a.ki?!0:!1:!1}function $e(a,b,c,d,e){for(;;){if(0===e)return c;c[d]=a[b];d+=1;--e;b+=1;}}var bf={};function cf(a){return !0===a||!1===a}
    function df(a){return null==a?!1:null!=a?a.C&64||tb===a.ld?!0:a.C?!1:Qb(lc,a):Qb(lc,a)}function ef(a){return null==a?!1:!1===a?!1:!0}function ff(a){return "number"===typeof a&&!isNaN(a)&&Infinity!==a&&parseFloat(a)===parseInt(a,10)}function gf(a){return ff(a)||a instanceof va}function M(a,b){return null!=a&&(a.C&512||tb===a.Ff)?a.Ca(null,b):Qb(tc,a)?uc(a,b):u.j(a,b,bf)===bf?!1:!0}
    function hf(a,b){if(a===b)return 0;if(null==a)return -1;if(null==b)return 1;if("number"===typeof a){if("number"===typeof b)return Ra(a,b);throw Error(["Cannot compare ",p.g(a)," to ",p.g(b)].join(""));}if(null!=a?a.O&2048||tb===a.Rc||(a.O?0:Qb(md,a)):Qb(md,a))return nd(a,b);if("string"!==typeof a&&!Jb(a)&&!0!==a&&!1!==a||Rb(a)!==Rb(b))throw Error(["Cannot compare ",p.g(a)," to ",p.g(b)].join(""));return Ra(a,b)}
    function jf(a,b){var c=D(a),d=D(b);if(c<d)a=-1;else if(c>d)a=1;else if(0===c)a=0;else a:for(d=0;;){var e=hf(qe(a,d),qe(b,d));if(0===e&&d+1<c)d+=1;else {a=e;break a}}return a}function kf(a){return x.h(a,hf)?hf:function(b,c){var d=a.h?a.h(b,c):a.call(null,b,c);return "number"===typeof d?d:n(d)?-1:n(a.h?a.h(c,b):a.call(null,c,b))?1:0}}function lf(a){var b=Va(Wb);if(z(b)){var c=mf.g?mf.g(b):mf.call(null,b);Sa(c,kf(a));return Me(z(c),Ne(b))}return Ud}
    function ye(a){switch(arguments.length){case 2:return xe(arguments[0],arguments[1]);case 3:return ze(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function xe(a,b){var c=z(b);return c?(b=A(c),c=C(c),$b.j?$b.j(a,b,c):$b.call(null,a,b,c)):a.v?a.v():a.call(null)}function ze(a,b,c){for(c=z(c);;)if(c){var d=A(c);b=a.h?a.h(b,d):a.call(null,b,d);if(fe(b))return r(b);c=C(c);}else return b}
    function nf(a,b){a=zd(a);if(n(a.wa()))for(var c=a.next();;)if(a.wa()){var d=a.next();c=b.h?b.h(c,d):b.call(null,c,d);if(fe(c))return r(c)}else return c;else return b.v?b.v():b.call(null)}function of(a,b,c){for(a=zd(a);;)if(a.wa()){var d=a.next();c=b.h?b.h(c,d):b.call(null,c,d);if(fe(c))return r(c)}else return c}
    var $b=function $b(a){switch(arguments.length){case 2:return $b.h(arguments[0],arguments[1]);case 3:return $b.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};$b.h=function(a,b){return null!=b&&(b.C&524288||tb===b.Lg)?b.Ta(null,a):Jb(b)?ke(b,a):"string"===typeof b?ke(b,a):Qb(Nc,b)?Oc(b,a):Qd(b)?nf(b,a):xe(a,b)};
    $b.j=function(a,b,c){return null!=c&&(c.C&524288||tb===c.Lg)?c.Ua(null,a,b):Jb(c)?le(c,a,b):"string"===typeof c?le(c,a,b):Qb(Nc,c)?Oc(c,a,b):Qd(c)?of(c,a,b):ze(a,b,c)};$b.I=3;function pf(a,b,c){return null!=c?Rc(c,a,b):b}function qf(a){return a}
    function rf(a,b){return function(){function c(g,l){return a.h?a.h(g,l):a.call(null,g,l)}function d(g){return b.g?b.g(g):b.call(null,g)}function e(){return a.v?a.v():a.call(null)}var f=null;f=function(g,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,g);case 2:return c.call(this,g,l)}throw Error("Invalid arity: "+arguments.length);};f.v=e;f.g=d;f.h=c;return f}()}function sf(a,b,c){return tf(a,b,b.v?b.v():b.call(null),c)}
    function tf(a,b,c,d){a=a.g?a.g(b):a.call(null,b);c=$b.j(a,c,d);return a.g?a.g(c):a.call(null,c)}var uf=function uf(a){switch(arguments.length){case 0:return uf.v();case 1:return uf.g(arguments[0]);case 2:return uf.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return uf.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};uf.v=function(){return 0};uf.g=function(a){return a};uf.h=function(a,b){return a+b};
    uf.l=function(a,b,c){return $b.j(uf,a+b,c)};uf.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};uf.I=2;var vf=function vf(a){switch(arguments.length){case 1:return vf.g(arguments[0]);case 2:return vf.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return vf.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};vf.g=function(){return !0};vf.h=function(a,b){return a>b};
    vf.l=function(a,b,c){for(;;)if(a>b)if(C(c))a=b,b=A(c),c=C(c);else return b>A(c);else return !1};vf.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};vf.I=2;function wf(a){if("number"===typeof a)return String.fromCharCode(a);if("string"===typeof a&&1===a.length)return a;throw Error("Argument to char must be a character or number");}function xf(a){return 0<=a?Math.floor(a):Math.ceil(a)}function yf(a,b){return xf((a-a%b)/b)}function zf(a,b){return a-b*yf(a,b)}
    function Af(a){a-=a>>1&1431655765;a=(a&858993459)+(a>>2&858993459);return 16843009*(a+(a>>4)&252645135)>>24}function Bf(a){switch(arguments.length){case 1:return !0;case 2:return Sc(arguments[0],arguments[1]);default:for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;a:for(c=arguments[0],d=arguments[1],b=new Rd(b.slice(2),0,null);;)if(c===d)if(C(b))c=d,d=A(b),b=C(b);else {c=d===A(b);break a}else {c=!1;break a}return c}}function Cf(a,b){return Sc(a,b)}
    function Df(a){return 0<a}var p=function p(a){switch(arguments.length){case 0:return p.v();case 1:return p.g(arguments[0]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return p.l(arguments[0],new Rd(c.slice(1),0,null))}};p.v=function(){return ""};p.g=function(a){return null==a?"":[a].join("")};p.l=function(a,b){for(a=new pb(p.g(a));;)if(n(b))a=a.append(p.g(A(b))),b=C(b);else return a.toString()};p.M=function(a){var b=A(a);a=C(a);return this.l(b,a)};
    p.I=1;function Ef(a){switch(arguments.length){case 2:return arguments[0].substring(arguments[1]);case 3:return arguments[0].substring(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function Ff(a,b){return a.substring(b)}function Gf(a,b,c){return a.substring(b,c)}
    function ve(a,b){if(Ve(b))if(ne(a)&&ne(b)&&D(a)!==D(b))a=!1;else a:for(a=z(a),b=z(b);;){if(null==a){a=null==b;break a}if(null!=b&&x.h(A(a),A(b)))a=C(a),b=C(b);else {a=!1;break a}}else a=null;return ef(a)}function Ee(a,b,c,d,e){this.N=a;this.first=b;this.qb=c;this.count=d;this.G=e;this.C=65937646;this.O=8192;}h=Ee.prototype;h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,this.count)}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){return 1===this.count?null:this.qb};h.ca=function(){return this.count};h.Vb=function(){return this.first};h.Wb=function(){return this.Wa(null)};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Mc(Ud,this.N)};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return this.first};h.Wa=function(){return 1===this.count?Ud:this.qb};h.ea=function(){return this};h.U=function(a,b){return b===this.N?this:new Ee(b,this.first,this.qb,this.count,this.G)};h.ka=function(a,b){return new Ee(this.N,b,this,this.count+1,null)};
    function Hf(a){return null!=a?a.C&33554432||tb===a.si?!0:a.C?!1:Qb(Xc,a):Qb(Xc,a)}Ee.prototype[Ub]=function(){return Wd(this)};function If(a){this.N=a;this.C=65937614;this.O=8192;}h=If.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){return null};h.ca=function(){return 0};h.Vb=function(){return null};h.Wb=function(){throw Error("Can't pop empty list");};h.ba=function(){return $d};
    h.aa=function(a,b){return Hf(b)||Ve(b)?null==z(b):!1};h.ua=function(){return this};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return null};h.Wa=function(){return Ud};h.ea=function(){return null};h.U=function(a,b){return b===this.N?this:new If(b)};h.ka=function(a,b){return new Ee(this.N,b,null,1,null)};var Ud=new If(null);If.prototype[Ub]=function(){return Wd(this)};
    function Jf(a){return (null!=a?a.C&134217728||tb===a.wi||(a.C?0:Qb(Zc,a)):Qb(Zc,a))?(a=$c(a))?a:Ud:$b.j(De,Ud,a)}var P=function P(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return P.l(0<c.length?new Rd(c.slice(0),0,null):null)};P.l=function(a){if(a instanceof Rd&&0===a.P)var b=a.A;else a:for(b=[];;)if(null!=a)b.push(mc(a)),a=pc(a);else break a;a=b.length;for(var c=Ud;;)if(0<a){var d=a-1;c=hc(c,b[a-1]);a=d;}else return c};P.I=0;P.M=function(a){return this.l(z(a))};
    function Kf(a,b,c,d){this.N=a;this.first=b;this.qb=c;this.G=d;this.C=65929452;this.O=8192;}h=Kf.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){return null==this.qb?null:z(this.qb)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};
    h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return this.first};h.Wa=function(){return null==this.qb?Ud:this.qb};h.ea=function(){return this};h.U=function(a,b){return b===this.N?this:new Kf(b,this.first,this.qb,this.G)};h.ka=function(a,b){return new Kf(null,b,this,null)};Kf.prototype[Ub]=function(){return Wd(this)};
    function we(a,b){return null==b?new Ee(null,a,null,1,null):null!=b&&(b.C&64||tb===b.ld)?new Kf(null,a,b,null):new Kf(null,a,z(b),null)}function Lf(a,b){if(a.X===b.X)return 0;var c=Lb(a.zb);if(n(c?b.zb:c))return -1;if(n(a.zb)){if(Lb(b.zb))return 1;c=Ra(a.zb,b.zb);return 0===c?Ra(a.name,b.name):c}return Ra(a.name,b.name)}function w(a,b,c,d){this.zb=a;this.name=b;this.X=c;this.hd=d;this.C=2153775105;this.O=4096;}h=w.prototype;h.toString=function(){return [":",p.g(this.X)].join("")};
    h.aa=function(a,b){return b instanceof w?this.X===b.X:!1};h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return u.h(a,this)};h.h=function(a,b){return u.j(a,this,b)};h.ba=function(){var a=this.hd;return null!=a?a:this.hd=a=Kd(this)+2654435769|0};h.Ed=function(){return this.name};
    h.Fd=function(){return this.zb};h.W=function(a,b){return ad(b,[":",p.g(this.X)].join(""))};function Mf(a){return a instanceof w}function Nf(a,b){return a===b?!0:a instanceof w&&b instanceof w?a.X===b.X:!1}function Of(a){if(null!=a&&(a.O&4096||tb===a.Jg))return a.Fd(null);throw Error(["Doesn't support namespace: ",p.g(a)].join(""));}function Pf(a){return a instanceof w||a instanceof Md}
    var Qf=function Qf(a){switch(arguments.length){case 1:return Qf.g(arguments[0]);case 2:return Qf.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};Qf.g=function(a){if(a instanceof w)return a;if(a instanceof Md)return new w(Of(a),Rf.g?Rf.g(a):Rf.call(null,a),a.xc,null);if(x.h("/",a))return new w(null,a,a,null);if("string"===typeof a){var b=a.split("/");return 2===b.length?new w(b[0],b[1],a,null):new w(null,b[0],a,null)}return null};
    Qf.h=function(a,b){a=a instanceof w?Rf.g?Rf.g(a):Rf.call(null,a):a instanceof Md?Rf.g?Rf.g(a):Rf.call(null,a):a;b=b instanceof w?Rf.g?Rf.g(b):Rf.call(null,b):b instanceof Md?Rf.g?Rf.g(b):Rf.call(null,b):b;return new w(a,b,[n(a)?[p.g(a),"/"].join(""):null,p.g(b)].join(""),null)};Qf.I=2;function Sf(a,b,c,d){this.N=a;this.qd=b;this.ma=c;this.G=d;this.C=32374988;this.O=1;}h=Sf.prototype;h.toString=function(){return Bd(this)};
    function Tf(a){null!=a.qd&&(a.ma=a.qd.v?a.qd.v():a.qd.call(null),a.qd=null);return a.ma}h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){this.ea(null);return null==this.ma?null:C(this.ma)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};
    h.ua=function(){return Mc(Ud,this.N)};h.Hd=function(){return Lb(this.qd)};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){this.ea(null);return null==this.ma?null:A(this.ma)};h.Wa=function(){this.ea(null);return null!=this.ma?Td(this.ma):Ud};h.ea=function(){Tf(this);if(null==this.ma)return null;for(var a=this.ma;;)if(a instanceof Sf)a=Tf(a);else return this.ma=a,z(this.ma)};
    h.U=function(a,b){var c=this;return b===this.N?c:new Sf(b,function(){return c.ea(null)},null,this.G)};h.ka=function(a,b){return we(b,this)};Sf.prototype[Ub]=function(){return Wd(this)};function Uf(a){this.ia=a;this.end=0;this.C=2;this.O=0;}Uf.prototype.add=function(a){this.ia[this.end]=a;return this.end+=1};Uf.prototype.$a=function(){var a=new Vf(this.ia,0,this.end);this.ia=null;return a};Uf.prototype.ca=function(){return this.end};function Wf(a){return new Uf(Array(a))}
    function Vf(a,b,c){this.A=a;this.pb=b;this.end=c;this.C=524306;this.O=0;}h=Vf.prototype;h.ca=function(){return this.end-this.pb};h.V=function(a,b){return this.A[this.pb+b]};h.ra=function(a,b,c){return 0<=b&&b<this.end-this.pb?this.A[this.pb+b]:c};h.Ne=function(){if(this.pb===this.end)throw Error("-drop-first of empty chunk");return new Vf(this.A,this.pb+1,this.end)};h.Ta=function(a,b){return me(this.A,b,this.A[this.pb],this.pb+1)};h.Ua=function(a,b,c){return me(this.A,b,c,this.pb)};
    function Xf(a,b,c,d){this.$a=a;this.kc=b;this.N=c;this.G=d;this.C=31850732;this.O=1536;}h=Xf.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){return 1<dc(this.$a)?new Xf(od(this.$a),this.kc,null,null):null==this.kc?null:Vc(this.kc)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};
    h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Va=function(){return jc(this.$a,0)};h.Wa=function(){return 1<dc(this.$a)?new Xf(od(this.$a),this.kc,null,null):null==this.kc?Ud:this.kc};h.ea=function(){return this};h.Cd=function(){return this.$a};h.Qc=function(){return null==this.kc?Ud:this.kc};h.U=function(a,b){return b===this.N?this:new Xf(this.$a,this.kc,b,this.G)};h.ka=function(a,b){return we(b,this)};h.je=function(){return null==this.kc?null:this.kc};Xf.prototype[Ub]=function(){return Wd(this)};
    function Yf(a,b){return 0===dc(a)?b:new Xf(a,b,null,null)}function Zf(a,b){a.add(b);}function $f(a){return a.$a()}function mf(a){var b=[];for(a=z(a);;)if(null!=a)b.push(A(a)),a=C(a);else return b}function ag(a,b){if(ne(b))return D(b);var c=0;for(b=z(b);;)if(null!=b&&c<a)c+=1,b=C(b);else return c}
    var bg=function bg(a){if(null==a)return null;var c=C(a);return null==c?z(A(a)):we(A(a),bg.g?bg.g(c):bg.call(null,c))},cg=function cg(a){switch(arguments.length){case 0:return cg.v();case 1:return cg.g(arguments[0]);case 2:return cg.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return cg.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};cg.v=function(){return new Sf(null,function(){return null},null,null)};
    cg.g=function(a){return new Sf(null,function(){return a},null,null)};cg.h=function(a,b){return new Sf(null,function(){var c=z(a);return c?Ze(c)?Yf(pd(c),cg.h(qd(c),b)):we(A(c),cg.h(Td(c),b)):b},null,null)};cg.l=function(a,b,c){return function g(e,f){return new Sf(null,function(){var l=z(e);return l?Ze(l)?Yf(pd(l),g(qd(l),f)):we(A(l),g(Td(l),f)):n(f)?g(A(f),C(f)):null},null,null)}(cg.h(a,b),c)};cg.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};cg.I=2;
    var dg=function dg(a){switch(arguments.length){case 0:return dg.v();case 1:return dg.g(arguments[0]);case 2:return dg.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return dg.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};dg.v=function(){return hd(G)};dg.g=function(a){return a};dg.h=function(a,b){return id(a,b)};dg.l=function(a,b,c){for(;;)if(a=id(a,b),n(c))b=A(c),c=C(c);else return a};
    dg.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};dg.I=2;function eg(a,b,c){return kd(a,b,c)}
    function fg(a,b,c){var d=z(c);if(0===b)return a.v?a.v():a.call(null);c=mc(d);var e=nc(d);if(1===b)return a.g?a.g(c):a.call(null,c);d=mc(e);var f=nc(e);if(2===b)return a.h?a.h(c,d):a.call(null,c,d);e=mc(f);var g=nc(f);if(3===b)return a.j?a.j(c,d,e):a.call(null,c,d,e);f=mc(g);var l=nc(g);if(4===b)return a.D?a.D(c,d,e,f):a.call(null,c,d,e,f);g=mc(l);var m=nc(l);if(5===b)return a.R?a.R(c,d,e,f,g):a.call(null,c,d,e,f,g);l=mc(m);var q=nc(m);if(6===b)return a.ga?a.ga(c,d,e,f,g,l):a.call(null,c,d,e,f,g,l);
    m=mc(q);var t=nc(q);if(7===b)return a.Sa?a.Sa(c,d,e,f,g,l,m):a.call(null,c,d,e,f,g,l,m);q=mc(t);var v=nc(t);if(8===b)return a.za?a.za(c,d,e,f,g,l,m,q):a.call(null,c,d,e,f,g,l,m,q);t=mc(v);var y=nc(v);if(9===b)return a.Ea?a.Ea(c,d,e,f,g,l,m,q,t):a.call(null,c,d,e,f,g,l,m,q,t);v=mc(y);var E=nc(y);if(10===b)return a.Ha?a.Ha(c,d,e,f,g,l,m,q,t,v):a.call(null,c,d,e,f,g,l,m,q,t,v);y=mc(E);var J=nc(E);if(11===b)return a.Ia?a.Ia(c,d,e,f,g,l,m,q,t,v,y):a.call(null,c,d,e,f,g,l,m,q,t,v,y);E=mc(J);var W=nc(J);
    if(12===b)return a.Ja?a.Ja(c,d,e,f,g,l,m,q,t,v,y,E):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E);J=mc(W);var Z=nc(W);if(13===b)return a.Ka?a.Ka(c,d,e,f,g,l,m,q,t,v,y,E,J):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J);W=mc(Z);var ma=nc(Z);if(14===b)return a.La?a.La(c,d,e,f,g,l,m,q,t,v,y,E,J,W):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J,W);Z=mc(ma);var ja=nc(ma);if(15===b)return a.Ma?a.Ma(c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z);ma=mc(ja);var Ca=nc(ja);if(16===b)return a.Na?a.Na(c,d,e,
    f,g,l,m,q,t,v,y,E,J,W,Z,ma):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma);ja=mc(Ca);var Ba=nc(Ca);if(17===b)return a.Oa?a.Oa(c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja);Ca=mc(Ba);var ta=nc(Ba);if(18===b)return a.Pa?a.Pa(c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca);Ba=mc(ta);ta=nc(ta);if(19===b)return a.Qa?a.Qa(c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba);var B=
    mc(ta);nc(ta);if(20===b)return a.Ra?a.Ra(c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba,B):a.call(null,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba,B);throw Error("Only up to 20 arguments supported on functions");}function gg(a){return null!=a&&(a.C&128||tb===a.Gd)?a.Da(null):z(Td(a))}function hg(a,b,c){return null==c?a.g?a.g(b):a.call(a,b):ig(a,b,mc(c),gg(c))}function ig(a,b,c,d){return null==d?a.h?a.h(b,c):a.call(a,b,c):jg(a,b,c,mc(d),gg(d))}
    function jg(a,b,c,d,e){return null==e?a.j?a.j(b,c,d):a.call(a,b,c,d):kg(a,b,c,d,mc(e),gg(e))}
    function kg(a,b,c,d,e,f){if(null==f)return a.D?a.D(b,c,d,e):a.call(a,b,c,d,e);var g=mc(f),l=C(f);if(null==l)return a.R?a.R(b,c,d,e,g):a.call(a,b,c,d,e,g);f=mc(l);var m=C(l);if(null==m)return a.ga?a.ga(b,c,d,e,g,f):a.call(a,b,c,d,e,g,f);l=mc(m);var q=C(m);if(null==q)return a.Sa?a.Sa(b,c,d,e,g,f,l):a.call(a,b,c,d,e,g,f,l);m=mc(q);var t=C(q);if(null==t)return a.za?a.za(b,c,d,e,g,f,l,m):a.call(a,b,c,d,e,g,f,l,m);q=mc(t);var v=C(t);if(null==v)return a.Ea?a.Ea(b,c,d,e,g,f,l,m,q):a.call(a,b,c,d,e,g,f,l,
    m,q);t=mc(v);var y=C(v);if(null==y)return a.Ha?a.Ha(b,c,d,e,g,f,l,m,q,t):a.call(a,b,c,d,e,g,f,l,m,q,t);v=mc(y);var E=C(y);if(null==E)return a.Ia?a.Ia(b,c,d,e,g,f,l,m,q,t,v):a.call(a,b,c,d,e,g,f,l,m,q,t,v);y=mc(E);var J=C(E);if(null==J)return a.Ja?a.Ja(b,c,d,e,g,f,l,m,q,t,v,y):a.call(a,b,c,d,e,g,f,l,m,q,t,v,y);E=mc(J);var W=C(J);if(null==W)return a.Ka?a.Ka(b,c,d,e,g,f,l,m,q,t,v,y,E):a.call(a,b,c,d,e,g,f,l,m,q,t,v,y,E);J=mc(W);var Z=C(W);if(null==Z)return a.La?a.La(b,c,d,e,g,f,l,m,q,t,v,y,E,J):a.call(a,
    b,c,d,e,g,f,l,m,q,t,v,y,E,J);W=mc(Z);var ma=C(Z);if(null==ma)return a.Ma?a.Ma(b,c,d,e,g,f,l,m,q,t,v,y,E,J,W):a.call(a,b,c,d,e,g,f,l,m,q,t,v,y,E,J,W);Z=mc(ma);var ja=C(ma);if(null==ja)return a.Na?a.Na(b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z):a.call(a,b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z);ma=mc(ja);var Ca=C(ja);if(null==Ca)return a.Oa?a.Oa(b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma):a.call(a,b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma);ja=mc(Ca);var Ba=C(Ca);if(null==Ba)return a.Pa?a.Pa(b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma,ja):a.call(a,
    b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma,ja);Ca=mc(Ba);var ta=C(Ba);if(null==ta)return a.Qa?a.Qa(b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca):a.call(a,b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca);Ba=mc(ta);ta=C(ta);if(null==ta)return a.Ra?a.Ra(b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba):a.call(a,b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba);b=[b,c,d,e,g,f,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba];for(c=ta;;)if(c)b.push(mc(c)),c=C(c);else break;return a.apply(a,b)}
    function Pd(a){switch(arguments.length){case 2:return lg(arguments[0],arguments[1]);case 3:return mg(arguments[0],arguments[1],arguments[2]);case 4:return ng(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return og(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return pg(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],new Rd(b.slice(5),0,null))}}
    function lg(a,b){if(a.M){var c=a.I,d=ag(c+1,b);return d<=c?fg(a,d,b):a.M(b)}b=z(b);return null==b?a.v?a.v():a.call(a):hg(a,mc(b),gg(b))}function mg(a,b,c){if(a.M){b=we(b,c);var d=a.I;c=ag(d,c)+1;return c<=d?fg(a,c,b):a.M(b)}return hg(a,b,z(c))}function ng(a,b,c,d){return a.M?(b=we(b,we(c,d)),c=a.I,d=2+ag(c-1,d),d<=c?fg(a,d,b):a.M(b)):ig(a,b,c,z(d))}function og(a,b,c,d,e){return a.M?(b=we(b,we(c,we(d,e))),c=a.I,e=3+ag(c-2,e),e<=c?fg(a,e,b):a.M(b)):jg(a,b,c,d,z(e))}
    function pg(a,b,c,d,e,f){return a.M?(f=bg(f),b=we(b,we(c,we(d,we(e,f)))),c=a.I,f=4+ag(c-3,f),f<=c?fg(a,f,b):a.M(b)):kg(a,b,c,d,e,bg(f))}function qg(a){return null!=a&&(a.C&64||tb===a.ld)?C(a)?Ie(mf(a)):z(a)?A(a):R:a}var sg=function sg(a){switch(arguments.length){case 1:return sg.g(arguments[0]);case 2:return sg.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return sg.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};
    sg.g=function(){return !1};sg.h=function(a,b){return !x.h(a,b)};sg.l=function(a,b,c){return Lb(ng(x,a,b,c))};sg.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};sg.I=2;function tg(a){return z(a)?a:null}
    function ug(){if("undefined"===typeof qb||"undefined"===typeof rb||"undefined"===typeof gb)gb=function(a){this.Lh=a;this.C=393216;this.O=0;},gb.prototype.U=function(a,b){return new gb(b)},gb.prototype.T=function(){return this.Lh},gb.prototype.wa=function(){return !1},gb.prototype.next=function(){return Error("No such element")},gb.prototype.remove=function(){return Error("Unsupported operation")},gb.Za=!0,gb.Xa="cljs.core/t_cljs$core6516",gb.ab=function(a){return ad(a,"cljs.core/t_cljs$core6516")};
    return new gb(R)}function vg(a){this.ma=a;this.P=0;}vg.prototype.wa=function(){return this.P<this.ma.length};vg.prototype.next=function(){var a=this.ma.charAt(this.P);this.P+=1;return a};vg.prototype.remove=function(){return Error("Unsupported operation")};function wg(a){this.A=a;this.P=0;}wg.prototype.wa=function(){return this.P<this.A.length};wg.prototype.next=function(){var a=this.A[this.P];this.P+=1;return a};wg.prototype.remove=function(){return Error("Unsupported operation")};var xg={},yg={};
    function zg(a){this.Ad=xg;this.Kb=a;}zg.prototype.wa=function(){this.Ad===xg?(this.Ad=yg,this.Kb=z(this.Kb)):this.Ad===this.Kb&&(this.Kb=C(this.Ad));return null!=this.Kb};zg.prototype.next=function(){if(this.wa())return this.Ad=this.Kb,A(this.Kb);throw Error("No such element");};zg.prototype.remove=function(){return Error("Unsupported operation")};
    function Ag(a){if(Qd(a))return zd(a);if(null==a)return ug();if("string"===typeof a)return new vg(a);if(Jb(a))return new wg(a);var b=null==a;b||(b=(b=null!=a?a.C&8388608||tb===a.If?!0:a.C?!1:Qb(Uc,a):Qb(Uc,a))?b:Jb(a)||"string"===typeof a);if(b)return new zg(a);throw Error(["Cannot create iterator from ",p.g(a)].join(""));}function Bg(a){this.Fe=a;}Bg.prototype.add=function(a){this.Fe.push(a);return this};Bg.prototype.remove=function(){return this.Fe.shift()};Bg.prototype.ud=function(){return 0===this.Fe.length};
    Bg.prototype.toString=function(){return ["Many: ",p.g(this.Fe)].join("")};var Cg={};function Dg(a){this.o=a;}Dg.prototype.add=function(a){return this.o===Cg?(this.o=a,this):new Bg([this.o,a])};Dg.prototype.remove=function(){if(this.o===Cg)throw Error("Removing object from empty buffer");var a=this.o;this.o=Cg;return a};Dg.prototype.ud=function(){return this.o===Cg};Dg.prototype.toString=function(){return ["Single: ",p.g(this.o)].join("")};function Eg(){}Eg.prototype.add=function(a){return new Dg(a)};
    Eg.prototype.remove=function(){throw Error("Removing object from empty buffer");};Eg.prototype.ud=function(){return !0};Eg.prototype.toString=function(){return "Empty"};var Fg=new Eg,Gg=function Gg(a){return new Sf(null,function(){if(a.wa())for(var c=[],d=0;;){var e=a.wa();if(n(n(e)?32>d:e))c[d]=a.next(),d+=1;else return Yf(new Vf(c,0,d),Gg.g?Gg.g(a):Gg.call(null,a))}else return null},null,null)};function Hg(a){this.buffer=Fg;this.Kb=Cg;this.Ze=!1;this.oc=null;this.qf=a;this.Oh=!1;}
    Hg.prototype.step=function(){if(this.Kb!==Cg)return !0;for(;;)if(this.Kb===Cg)if(this.buffer.ud()){if(this.Ze)return !1;if(this.qf.wa()){if(this.Oh)var a=lg(this.oc,we(null,this.qf.next()));else a=this.qf.next(),a=this.oc.h?this.oc.h(null,a):this.oc.call(null,null,a);fe(a)&&(this.oc.g?this.oc.g(null):this.oc.call(null,null),this.Ze=!0);}else this.oc.g?this.oc.g(null):this.oc.call(null,null),this.Ze=!0;}else this.Kb=this.buffer.remove();else return !0};Hg.prototype.wa=function(){return this.step()};
    Hg.prototype.next=function(){if(this.wa()){var a=this.Kb;this.Kb=Cg;return a}throw Error("No such element");};Hg.prototype.remove=function(){return Error("Unsupported operation")};Hg.prototype[Ub]=function(){return Wd(this)};
    function Ig(a,b){var c=new Hg(b);c.oc=function(){var d=function(){function e(g,l){c.buffer=c.buffer.add(l);return g}var f=null;f=function(g,l){switch(arguments.length){case 0:return null;case 1:return g;case 2:return e.call(this,g,l)}throw Error("Invalid arity: "+arguments.length);};f.v=function(){return null};f.g=function(g){return g};f.h=e;return f}();return a.g?a.g(d):a.call(null,d)}();return c}function Jg(a){return df(a)?a:(a=z(a))?a:Ud}
    function Kg(a,b){for(;;){if(null==z(b))return !0;var c=A(b);c=a.g?a.g(c):a.call(null,c);if(n(c))b=C(b);else return !1}}function Lg(a,b){for(;;)if(b=z(b)){var c=A(b);c=a.g?a.g(c):a.call(null,c);if(n(c))return c;b=C(b);}else return null}function Mg(a){if(ff(a))return 0===(a&1);throw Error(["Argument must be an integer: ",p.g(a)].join(""));}
    function Ng(a){return function(){function b(g,l){return Lb(a.h?a.h(g,l):a.call(null,g,l))}function c(g){return Lb(a.g?a.g(g):a.call(null,g))}function d(){return Lb(a.v?a.v():a.call(null))}var e=null,f=function(){function g(m,q,t){var v=null;if(2<arguments.length){v=0;for(var y=Array(arguments.length-2);v<y.length;)y[v]=arguments[v+2],++v;v=new Rd(y,0,null);}return l.call(this,m,q,v)}function l(m,q,t){return Lb(ng(a,m,q,t))}g.I=2;g.M=function(m){var q=A(m);m=C(m);var t=A(m);m=Td(m);return l(q,t,m)};
    g.l=l;return g}();e=function(g,l,m){switch(arguments.length){case 0:return d.call(this);case 1:return c.call(this,g);case 2:return b.call(this,g,l);default:var q=null;if(2<arguments.length){q=0;for(var t=Array(arguments.length-2);q<t.length;)t[q]=arguments[q+2],++q;q=new Rd(t,0,null);}return f.l(g,l,q)}};e.I=2;e.M=f.M;e.v=d;e.g=c;e.h=b;e.l=f.l;return e}()}
    function Og(a){return function(){function b(c){if(0<arguments.length)for(var d=0,e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;return a}b.I=0;b.M=function(c){z(c);return a};b.l=function(){return a};return b}()}
    var Pg=function Pg(a){switch(arguments.length){case 0:return Pg.v();case 1:return Pg.g(arguments[0]);case 2:return Pg.h(arguments[0],arguments[1]);case 3:return Pg.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Pg.l(arguments[0],arguments[1],arguments[2],new Rd(c.slice(3),0,null))}};Pg.v=function(){return qf};Pg.g=function(a){return a};
    Pg.h=function(a,b){return function(){function c(m,q,t){m=b.j?b.j(m,q,t):b.call(null,m,q,t);return a.g?a.g(m):a.call(null,m)}function d(m,q){m=b.h?b.h(m,q):b.call(null,m,q);return a.g?a.g(m):a.call(null,m)}function e(m){m=b.g?b.g(m):b.call(null,m);return a.g?a.g(m):a.call(null,m)}function f(){var m=b.v?b.v():b.call(null);return a.g?a.g(m):a.call(null,m)}var g=null,l=function(){function m(t,v,y,E){var J=null;if(3<arguments.length){J=0;for(var W=Array(arguments.length-3);J<W.length;)W[J]=arguments[J+
    3],++J;J=new Rd(W,0,null);}return q.call(this,t,v,y,J)}function q(t,v,y,E){t=og(b,t,v,y,E);return a.g?a.g(t):a.call(null,t)}m.I=3;m.M=function(t){var v=A(t);t=C(t);var y=A(t);t=C(t);var E=A(t);t=Td(t);return q(v,y,E,t)};m.l=q;return m}();g=function(m,q,t,v){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,m);case 2:return d.call(this,m,q);case 3:return c.call(this,m,q,t);default:var y=null;if(3<arguments.length){y=0;for(var E=Array(arguments.length-3);y<E.length;)E[y]=
    arguments[y+3],++y;y=new Rd(E,0,null);}return l.l(m,q,t,y)}};g.I=3;g.M=l.M;g.v=f;g.g=e;g.h=d;g.j=c;g.l=l.l;return g}()};
    Pg.j=function(a,b,c){return function(){function d(q,t,v){q=c.j?c.j(q,t,v):c.call(null,q,t,v);q=b.g?b.g(q):b.call(null,q);return a.g?a.g(q):a.call(null,q)}function e(q,t){q=c.h?c.h(q,t):c.call(null,q,t);q=b.g?b.g(q):b.call(null,q);return a.g?a.g(q):a.call(null,q)}function f(q){q=c.g?c.g(q):c.call(null,q);q=b.g?b.g(q):b.call(null,q);return a.g?a.g(q):a.call(null,q)}function g(){var q=c.v?c.v():c.call(null);q=b.g?b.g(q):b.call(null,q);return a.g?a.g(q):a.call(null,q)}var l=null,m=function(){function q(v,
    y,E,J){var W=null;if(3<arguments.length){W=0;for(var Z=Array(arguments.length-3);W<Z.length;)Z[W]=arguments[W+3],++W;W=new Rd(Z,0,null);}return t.call(this,v,y,E,W)}function t(v,y,E,J){v=og(c,v,y,E,J);v=b.g?b.g(v):b.call(null,v);return a.g?a.g(v):a.call(null,v)}q.I=3;q.M=function(v){var y=A(v);v=C(v);var E=A(v);v=C(v);var J=A(v);v=Td(v);return t(y,E,J,v)};q.l=t;return q}();l=function(q,t,v,y){switch(arguments.length){case 0:return g.call(this);case 1:return f.call(this,q);case 2:return e.call(this,
    q,t);case 3:return d.call(this,q,t,v);default:var E=null;if(3<arguments.length){E=0;for(var J=Array(arguments.length-3);E<J.length;)J[E]=arguments[E+3],++E;E=new Rd(J,0,null);}return m.l(q,t,v,E)}};l.I=3;l.M=m.M;l.v=g;l.g=f;l.h=e;l.j=d;l.l=m.l;return l}()};
    Pg.l=function(a,b,c,d){var e=Jf(we(a,we(b,we(c,d))));return function(){function f(l){var m=null;if(0<arguments.length){m=0;for(var q=Array(arguments.length-0);m<q.length;)q[m]=arguments[m+0],++m;m=new Rd(q,0,null);}return g.call(this,m)}function g(l){l=lg(A(e),l);for(var m=C(e);;)if(m){var q=A(m);l=q.g?q.g(l):q.call(null,l);m=C(m);}else return l}f.I=0;f.M=function(l){l=z(l);return g(l)};f.l=g;return f}()};Pg.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);d=C(d);return this.l(b,a,c,d)};
    Pg.I=3;
    function Qg(a,b){return function(){function c(m,q,t){return a.D?a.D(b,m,q,t):a.call(null,b,m,q,t)}function d(m,q){return a.j?a.j(b,m,q):a.call(null,b,m,q)}function e(m){return a.h?a.h(b,m):a.call(null,b,m)}function f(){return a.g?a.g(b):a.call(null,b)}var g=null,l=function(){function m(t,v,y,E){var J=null;if(3<arguments.length){J=0;for(var W=Array(arguments.length-3);J<W.length;)W[J]=arguments[J+3],++J;J=new Rd(W,0,null);}return q.call(this,t,v,y,J)}function q(t,v,y,E){return pg(a,b,t,v,y,F([E]))}m.I=
    3;m.M=function(t){var v=A(t);t=C(t);var y=A(t);t=C(t);var E=A(t);t=Td(t);return q(v,y,E,t)};m.l=q;return m}();g=function(m,q,t,v){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,m);case 2:return d.call(this,m,q);case 3:return c.call(this,m,q,t);default:var y=null;if(3<arguments.length){y=0;for(var E=Array(arguments.length-3);y<E.length;)E[y]=arguments[y+3],++y;y=new Rd(E,0,null);}return l.l(m,q,t,y)}};g.I=3;g.M=l.M;g.v=f;
    g.g=e;g.h=d;g.j=c;g.l=l.l;return g}()}
    function Rg(a,b,c){return function(){function d(q,t,v){return a.R?a.R(b,c,q,t,v):a.call(null,b,c,q,t,v)}function e(q,t){return a.D?a.D(b,c,q,t):a.call(null,b,c,q,t)}function f(q){return a.j?a.j(b,c,q):a.call(null,b,c,q)}function g(){return a.h?a.h(b,c):a.call(null,b,c)}var l=null,m=function(){function q(v,y,E,J){var W=null;if(3<arguments.length){W=0;for(var Z=Array(arguments.length-3);W<Z.length;)Z[W]=arguments[W+3],++W;W=new Rd(Z,0,null);}return t.call(this,v,y,E,W)}function t(v,y,E,J){return pg(a,
    b,c,v,y,F([E,J]))}q.I=3;q.M=function(v){var y=A(v);v=C(v);var E=A(v);v=C(v);var J=A(v);v=Td(v);return t(y,E,J,v)};q.l=t;return q}();l=function(q,t,v,y){switch(arguments.length){case 0:return g.call(this);case 1:return f.call(this,q);case 2:return e.call(this,q,t);case 3:return d.call(this,q,t,v);default:var E=null;if(3<arguments.length){E=0;for(var J=Array(arguments.length-3);E<J.length;)J[E]=arguments[E+3],++E;E=new Rd(J,0,null);}return m.l(q,t,v,E)}};l.I=3;l.M=m.M;l.v=g;l.g=f;l.h=e;l.j=d;l.l=m.l;return l}()}
    function Sg(a,b,c,d){return function(){function e(t,v,y){return a.ga?a.ga(b,c,d,t,v,y):a.call(null,b,c,d,t,v,y)}function f(t,v){return a.R?a.R(b,c,d,t,v):a.call(null,b,c,d,t,v)}function g(t){return a.D?a.D(b,c,d,t):a.call(null,b,c,d,t)}function l(){return a.j?a.j(b,c,d):a.call(null,b,c,d)}var m=null,q=function(){function t(y,E,J,W){var Z=null;if(3<arguments.length){Z=0;for(var ma=Array(arguments.length-3);Z<ma.length;)ma[Z]=arguments[Z+3],++Z;Z=new Rd(ma,0,null);}return v.call(this,y,E,J,Z)}function v(y,
    E,J,W){return pg(a,b,c,d,y,F([E,J,W]))}t.I=3;t.M=function(y){var E=A(y);y=C(y);var J=A(y);y=C(y);var W=A(y);y=Td(y);return v(E,J,W,y)};t.l=v;return t}();m=function(t,v,y,E){switch(arguments.length){case 0:return l.call(this);case 1:return g.call(this,t);case 2:return f.call(this,t,v);case 3:return e.call(this,t,v,y);default:var J=null;if(3<arguments.length){J=0;for(var W=Array(arguments.length-3);J<W.length;)W[J]=arguments[J+3],++J;J=new Rd(W,0,null);}return q.l(t,v,y,J)}};m.I=3;m.M=q.M;m.v=l;m.g=g;m.h=f;m.j=e;m.l=q.l;return m}()}
    function Tg(a,b){return function(){function c(l,m,q){l=null==l?b:l;return a.j?a.j(l,m,q):a.call(null,l,m,q)}function d(l,m){l=null==l?b:l;return a.h?a.h(l,m):a.call(null,l,m)}function e(l){l=null==l?b:l;return a.g?a.g(l):a.call(null,l)}var f=null,g=function(){function l(q,t,v,y){var E=null;if(3<arguments.length){E=0;for(var J=Array(arguments.length-3);E<J.length;)J[E]=arguments[E+3],++E;E=new Rd(J,0,null);}return m.call(this,q,t,v,E)}function m(q,t,v,y){return og(a,null==q?b:q,t,v,y)}l.I=3;l.M=function(q){var t=
    A(q);q=C(q);var v=A(q);q=C(q);var y=A(q);q=Td(q);return m(t,v,y,q)};l.l=m;return l}();f=function(l,m,q,t){switch(arguments.length){case 1:return e.call(this,l);case 2:return d.call(this,l,m);case 3:return c.call(this,l,m,q);default:var v=null;if(3<arguments.length){v=0;for(var y=Array(arguments.length-3);v<y.length;)y[v]=arguments[v+3],++v;v=new Rd(y,0,null);}return g.l(l,m,q,v)}};f.I=3;f.M=g.M;f.g=e;f.h=d;f.j=c;f.l=g.l;return f}()}
    function Ug(a){this.state=a;this.uf=this.wg=this.N=null;this.O=16386;this.C=6455296;}h=Ug.prototype;h.aa=function(a,b){return this===b};h.Db=function(){return this.state};h.T=function(){return this.N};
    h.Se=function(a,b,c){a=z(this.uf);for(var d=null,e=0,f=0;;)if(f<e){var g=d.V(null,f),l=H(g,0,null);g=H(g,1,null);g.D?g.D(l,this,b,c):g.call(null,l,this,b,c);f+=1;}else if(a=z(a))Ze(a)?(d=pd(a),a=qd(a),l=d,e=D(d),d=l):(d=A(a),l=H(d,0,null),g=H(d,1,null),g.D?g.D(l,this,b,c):g.call(null,l,this,b,c),a=C(a),d=null,e=0),f=0;else return null};h.ba=function(){return ea(this)};function Vg(a){return new Ug(a)}
    function Wg(a,b){if(a instanceof Ug){var c=a.wg;if(null!=c&&!n(c.g?c.g(b):c.call(null,b)))throw Error("Validator rejected reference state");c=a.state;a.state=b;null!=a.uf&&a.Se(null,c,b);return b}return ud(a,b)}function Xg(a,b){var c=a.wg;if(null!=c&&!n(c.g?c.g(b):c.call(null,b)))throw Error("Validator rejected reference state");c=a.state;a.state=b;null!=a.uf&&gd(a,c,b);return new S(null,2,5,T,[c,b],null)}
    var Yg=function Yg(a){switch(arguments.length){case 2:return Yg.h(arguments[0],arguments[1]);case 3:return Yg.j(arguments[0],arguments[1],arguments[2]);case 4:return Yg.D(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Yg.l(arguments[0],arguments[1],arguments[2],arguments[3],new Rd(c.slice(4),0,null))}};
    Yg.h=function(a,b){if(a instanceof Ug){var c=a.state;b=b.g?b.g(c):b.call(null,c);a=Wg(a,b);}else a=vd(a,b);return a};Yg.j=function(a,b,c){if(a instanceof Ug){var d=a.state;b=b.h?b.h(d,c):b.call(null,d,c);a=Wg(a,b);}else a=vd(a,b,c);return a};Yg.D=function(a,b,c,d){if(a instanceof Ug){var e=a.state;b=b.j?b.j(e,c,d):b.call(null,e,c,d);a=Wg(a,b);}else a=vd(a,b,c,d);return a};Yg.l=function(a,b,c,d,e){return a instanceof Ug?Wg(a,og(b,a.state,c,d,e)):vd(a,b,c,d,e)};
    Yg.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);var e=C(d);d=A(e);e=C(e);return this.l(b,a,c,d,e)};Yg.I=4;function Zg(a,b){var c=a.state;b=b.g?b.g(c):b.call(null,c);return Xg(a,b)}function $g(a,b){var c=a.state;b=Je.h?Je.h(c,b):Je.call(null,c,b);return Xg(a,b)}function ah(a){this.state=a;this.C=32768;this.O=0;}ah.prototype.Ec=function(a,b){return this.state=b};ah.prototype.Db=function(){return this.state};function bh(a,b){xd(a,b);}
    var ch=function ch(a){switch(arguments.length){case 1:return ch.g(arguments[0]);case 2:return ch.h(arguments[0],arguments[1]);case 3:return ch.j(arguments[0],arguments[1],arguments[2]);case 4:return ch.D(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return ch.l(arguments[0],arguments[1],arguments[2],arguments[3],new Rd(c.slice(4),0,null))}};
    ch.g=function(a){return function(b){return function(){function c(l,m){m=a.g?a.g(m):a.call(null,m);return b.h?b.h(l,m):b.call(null,l,m)}function d(l){return b.g?b.g(l):b.call(null,l)}function e(){return b.v?b.v():b.call(null)}var f=null,g=function(){function l(q,t,v){var y=null;if(2<arguments.length){y=0;for(var E=Array(arguments.length-2);y<E.length;)E[y]=arguments[y+2],++y;y=new Rd(E,0,null);}return m.call(this,q,t,y)}function m(q,t,v){t=mg(a,t,v);return b.h?b.h(q,t):b.call(null,q,t)}l.I=2;l.M=function(q){var t=
    A(q);q=C(q);var v=A(q);q=Td(q);return m(t,v,q)};l.l=m;return l}();f=function(l,m,q){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,l);case 2:return c.call(this,l,m);default:var t=null;if(2<arguments.length){t=0;for(var v=Array(arguments.length-2);t<v.length;)v[t]=arguments[t+2],++t;t=new Rd(v,0,null);}return g.l(l,m,t)}};f.I=2;f.M=g.M;f.v=e;f.g=d;f.h=c;f.l=g.l;return f}()}};
    ch.h=function(a,b){return new Sf(null,function(){var c=z(b);if(c){if(Ze(c)){for(var d=pd(c),e=D(d),f=Wf(e),g=0;;)if(g<e)Zf(f,function(){var l=jc(d,g);return a.g?a.g(l):a.call(null,l)}()),g+=1;else break;return Yf($f(f),ch.h(a,qd(c)))}return we(function(){var l=A(c);return a.g?a.g(l):a.call(null,l)}(),ch.h(a,Td(c)))}return null},null,null)};
    ch.j=function(a,b,c){return new Sf(null,function(){var d=z(b),e=z(c);if(d&&e){var f=A(d);var g=A(e);f=a.h?a.h(f,g):a.call(null,f,g);d=we(f,ch.j(a,Td(d),Td(e)));}else d=null;return d},null,null)};ch.D=function(a,b,c,d){return new Sf(null,function(){var e=z(b),f=z(c),g=z(d);if(e&&f&&g){var l=A(e);var m=A(f),q=A(g);l=a.j?a.j(l,m,q):a.call(null,l,m,q);e=we(l,ch.D(a,Td(e),Td(f),Td(g)));}else e=null;return e},null,null)};
    ch.l=function(a,b,c,d,e){return ch.h(function(f){return lg(a,f)},function l(g){return new Sf(null,function(){var m=ch.h(z,g);return Kg(qf,m)?we(ch.h(A,m),l(ch.h(Td,m))):null},null,null)}(De.l(e,d,F([c,b]))))};ch.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);var e=C(d);d=A(e);e=C(e);return this.l(b,a,c,d,e)};ch.I=4;
    var dh=function dh(a){switch(arguments.length){case 1:return dh.g(arguments[0]);case 2:return dh.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};
    dh.g=function(a){return function(b){var c=new ah(a);return function(){function d(l,m){var q=r(c),t=c.Ec(null,c.Db(null)-1);l=0<q?b.h?b.h(l,m):b.call(null,l,m):l;return 0<t?l:fe(l)?l:ee(l)}function e(l){return b.g?b.g(l):b.call(null,l)}function f(){return b.v?b.v():b.call(null)}var g=null;g=function(l,m){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,l);case 2:return d.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};g.v=f;g.g=e;g.h=d;return g}()}};
    dh.h=function(a,b){return new Sf(null,function(){if(0<a){var c=z(b);return c?we(A(c),dh.h(a-1,Td(c))):null}return null},null,null)};dh.I=2;function eh(a,b){return new Sf(null,function(){a:for(var c=a,d=b;;)if(d=z(d),0<c&&d)--c,d=Td(d);else break a;return d},null,null)}function fh(a,b){return ch.j(function(c){return c},b,eh(a,b))}function gh(a,b,c,d){this.N=a;this.count=b;this.o=c;this.next=d;this.G=null;this.C=32374988;this.O=1;}h=gh.prototype;h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,this.count)}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){return null==this.next?1<this.count?this.next=new gh(null,this.count-1,this.o,null):-1===this.count?this:null:this.next};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Hd=function(){return !1};h.Ta=function(a,b){if(-1===this.count)for(var c=b.h?b.h(this.o,this.o):b.call(null,this.o,this.o);;){if(fe(c))return r(c);c=b.h?b.h(c,this.o):b.call(null,c,this.o);}else for(a=1,c=this.o;;)if(a<this.count){c=b.h?b.h(c,this.o):b.call(null,c,this.o);if(fe(c))return r(c);a+=1;}else return c};
    h.Ua=function(a,b,c){if(-1===this.count)for(c=b.h?b.h(c,this.o):b.call(null,c,this.o);;){if(fe(c))return r(c);c=b.h?b.h(c,this.o):b.call(null,c,this.o);}else for(a=0;;)if(a<this.count){c=b.h?b.h(c,this.o):b.call(null,c,this.o);if(fe(c))return r(c);a+=1;}else return c};h.Va=function(){return this.o};h.Wa=function(){return null==this.next?1<this.count?this.next=new gh(null,this.count-1,this.o,null):-1===this.count?this:Ud:this.next};h.ea=function(){return this};
    h.U=function(a,b){return b===this.N?this:new gh(b,this.count,this.o,this.next)};h.ka=function(a,b){return we(b,this)};function Db(a){return new gh(null,-1,a,null)}function hh(a,b){return 0<a?new gh(null,a,b,null):Ud}
    var ih=function ih(a){switch(arguments.length){case 0:return ih.v();case 1:return ih.g(arguments[0]);case 2:return ih.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return ih.l(arguments[0],arguments[1],new Rd(c.slice(2),0,null))}};ih.v=function(){return Ud};ih.g=function(a){return new Sf(null,function(){return a},null,null)};
    ih.h=function(a,b){return new Sf(null,function(){var c=z(a),d=z(b);return c&&d?we(A(c),we(A(d),ih.h(Td(c),Td(d)))):null},null,null)};ih.l=function(a,b,c){return new Sf(null,function(){var d=ch.h(z,De.l(c,b,F([a])));return Kg(qf,d)?cg.h(ch.h(A,d),lg(ih,ch.h(Td,d))):null},null,null)};ih.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};ih.I=2;
    function jh(){return function(a){var b=new ah(!1);return function(){function c(g,l){if(n(r(b)))return g=a.h?a.h(g," "):a.call(null,g," "),fe(g)?g:a.h?a.h(g,l):a.call(null,g,l);xd(b,!0);return a.h?a.h(g,l):a.call(null,g,l)}function d(g){return a.g?a.g(g):a.call(null,g)}function e(){return a.v?a.v():a.call(null)}var f=null;f=function(g,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,g);case 2:return c.call(this,g,l)}throw Error("Invalid arity: "+arguments.length);};
    f.v=e;f.g=d;f.h=c;return f}()}}function lh(a,b){return lg(cg,mg(ch,a,b))}var mh=function mh(a){switch(arguments.length){case 1:return mh.g(arguments[0]);case 2:return mh.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};
    mh.g=function(a){return function(b){return function(){function c(g,l){return n(a.g?a.g(l):a.call(null,l))?b.h?b.h(g,l):b.call(null,g,l):g}function d(g){return b.g?b.g(g):b.call(null,g)}function e(){return b.v?b.v():b.call(null)}var f=null;f=function(g,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,g);case 2:return c.call(this,g,l)}throw Error("Invalid arity: "+arguments.length);};f.v=e;f.g=d;f.h=c;return f}()}};
    mh.h=function(a,b){return new Sf(null,function(){var c=z(b);if(c){if(Ze(c)){for(var d=pd(c),e=D(d),f=Wf(e),g=0;;)if(g<e){var l=jc(d,g);l=a.g?a.g(l):a.call(null,l);n(l)&&(l=jc(d,g),f.add(l));g+=1;}else break;return Yf($f(f),mh.h(a,qd(c)))}d=A(c);c=Td(c);return n(a.g?a.g(d):a.call(null,d))?we(d,mh.h(a,c)):mh.h(a,c)}return null},null,null)};mh.I=2;
    var nh=function nh(a){switch(arguments.length){case 1:return nh.g(arguments[0]);case 2:return nh.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};nh.g=function(a){return mh.g(Ng(a))};nh.h=function(a,b){return mh.h(Ng(a),b)};nh.I=2;function oh(a){return function d(c){return new Sf(null,function(){return we(c,n(Ve.g?Ve.g(c):Ve.call(null,c))?lh(d,F([z.g?z.g(c):z.call(null,c)])):null)},null,null)}(a)}
    function ph(a){return mh.h(function(b){return !Ve(b)},Td(oh(a)))}var qh=function qh(a){switch(arguments.length){case 0:return qh.v();case 1:return qh.g(arguments[0]);case 2:return qh.h(arguments[0],arguments[1]);case 3:return qh.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};qh.v=function(){return G};qh.g=function(a){return a};
    qh.h=function(a,b){return null!=a?null!=a&&(a.O&4||tb===a.Cg)?Mc(jd($b.j(id,hd(a),b)),Ne(a)):$b.j(hc,a,b):$b.j(De,a,b)};qh.j=function(a,b,c){if(null!=a&&(a.O&4||tb===a.Cg)){var d=Ne(a);return tf(b,function(){function e(l,m){return dg.h(l,m)}function f(l){return Mc(jd(l),d)}var g=null;g=function(l,m){switch(arguments.length){case 1:return f.call(this,l);case 2:return e.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};g.g=f;g.h=e;return g}(),hd(a),c)}return tf(b,De,a,c)};qh.I=3;
    var rh=function rh(a){switch(arguments.length){case 2:return rh.h(arguments[0],arguments[1]);case 3:return rh.j(arguments[0],arguments[1],arguments[2]);case 4:return rh.D(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return rh.l(arguments[0],arguments[1],arguments[2],arguments[3],new Rd(c.slice(4),0,null))}};
    rh.h=function(a,b){return jd($b.j(function(c,d){return dg.h(c,a.g?a.g(d):a.call(null,d))},hd(G),b))};rh.j=function(a,b,c){return qh.h(G,ch.j(a,b,c))};rh.D=function(a,b,c,d){return qh.h(G,ch.D(a,b,c,d))};rh.l=function(a,b,c,d,e){return qh.h(G,pg(ch,a,b,c,d,F([e])))};rh.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);var e=C(d);d=A(e);e=C(e);return this.l(b,a,c,d,e)};rh.I=4;function sh(a,b){return jd($b.j(function(c,d){return n(a.g?a.g(d):a.call(null,d))?dg.h(c,d):c},hd(G),b))}
    var th=function th(a){switch(arguments.length){case 2:return th.h(arguments[0],arguments[1]);case 3:return th.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};th.h=function(a,b){return $b.j(u,a,b)};th.j=function(a,b,c){var d=bf;for(b=z(b);;)if(null!=b){a=u.j(a,A(b),d);if(d===a)return c;b=C(b);}else return a};th.I=3;
    var uh=function uh(a,b,c){var e=z(b);b=A(e);var f=C(e);if(f){e=He.j;var g=u.h(a,b);c=uh.j?uh.j(g,f,c):uh.call(null,g,f,c);a=e.call(He,a,b,c);}else a=He.j(a,b,c);return a},vh=function vh(a){switch(arguments.length){case 3:return vh.j(arguments[0],arguments[1],arguments[2]);case 4:return vh.D(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return vh.R(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);case 6:return vh.ga(arguments[0],arguments[1],arguments[2],arguments[3],
    arguments[4],arguments[5]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return vh.l(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],new Rd(c.slice(6),0,null))}};vh.j=function(a,b,c){var d=z(b);b=A(d);if(d=C(d))a=He.j(a,b,vh.j(u.h(a,b),d,c));else {d=He.j;var e=u.h(a,b);c=c.g?c.g(e):c.call(null,e);a=d.call(He,a,b,c);}return a};
    vh.D=function(a,b,c,d){var e=z(b);b=A(e);if(e=C(e))a=He.j(a,b,vh.D(u.h(a,b),e,c,d));else {e=He.j;var f=u.h(a,b);c=c.h?c.h(f,d):c.call(null,f,d);a=e.call(He,a,b,c);}return a};vh.R=function(a,b,c,d,e){var f=z(b);b=A(f);if(f=C(f))a=He.j(a,b,vh.R(u.h(a,b),f,c,d,e));else {f=He.j;var g=u.h(a,b);c=c.j?c.j(g,d,e):c.call(null,g,d,e);a=f.call(He,a,b,c);}return a};
    vh.ga=function(a,b,c,d,e,f){var g=z(b);b=A(g);if(g=C(g))a=He.j(a,b,vh.ga(u.h(a,b),g,c,d,e,f));else {g=He.j;var l=u.h(a,b);c=c.D?c.D(l,d,e,f):c.call(null,l,d,e,f);a=g.call(He,a,b,c);}return a};vh.l=function(a,b,c,d,e,f,g){var l=z(b);b=A(l);return (l=C(l))?He.j(a,b,pg(vh,u.h(a,b),l,c,d,F([e,f,g]))):He.j(a,b,pg(c,u.h(a,b),d,e,f,F([g])))};vh.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);var e=C(d);d=A(e);var f=C(e);e=A(f);var g=C(f);f=A(g);g=C(g);return this.l(b,a,c,d,e,f,g)};vh.I=6;
    function wh(a,b,c){var d=He.j,e=u.h(a,b);c=c.g?c.g(e):c.call(null,e);return d.call(He,a,b,c)}function xh(a,b,c,d){var e=He.j,f=u.h(a,b);c=c.h?c.h(f,d):c.call(null,f,d);return e.call(He,a,b,c)}function yh(a,b){this.Ba=a;this.A=b;}function zh(a){return new yh(a,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null])}function Ah(a){return new yh(a.Ba,Yb(a.A))}
    function Bh(a){a=a.H;return 32>a?0:a-1>>>5<<5}function Ch(a,b,c){for(;;){if(0===b)return c;var d=zh(a);d.A[0]=c;c=d;b-=5;}}var Dh=function Dh(a,b,c,d){var f=Ah(c),g=a.H-1>>>b&31;5===b?f.A[g]=d:(c=c.A[g],null!=c?(b-=5,a=Dh.D?Dh.D(a,b,c,d):Dh.call(null,a,b,c,d)):a=Ch(null,b-5,d),f.A[g]=a);return f};function Eh(a,b){throw Error(["No item ",p.g(a)," in vector of length ",p.g(b)].join(""));}
    function Fh(a,b){if(b>=Bh(a))return a.ya;var c=a.root;for(a=a.shift;;)if(0<a){var d=a-5;c=c.A[b>>>a&31];a=d;}else return c.A}function Gh(a,b){return 0<=b&&b<a.H?Fh(a,b):Eh(b,a.H)}
    var Hh=function Hh(a,b,c,d,e){var g=Ah(c);if(0===b)g.A[d&31]=e;else {var l=d>>>b&31;b-=5;c=c.A[l];a=Hh.R?Hh.R(a,b,c,d,e):Hh.call(null,a,b,c,d,e);g.A[l]=a;}return g},Ih=function Ih(a,b,c){var e=a.H-2>>>b&31;if(5<b){b-=5;var f=c.A[e];a=Ih.j?Ih.j(a,b,f):Ih.call(null,a,b,f);if(null==a&&0===e)return null;c=Ah(c);c.A[e]=a;return c}if(0===e)return null;c=Ah(c);c.A[e]=null;return c};function Jh(a,b,c,d,e,f){this.P=a;this.de=b;this.A=c;this.pa=d;this.start=e;this.end=f;}
    Jh.prototype.wa=function(){return this.P<this.end};Jh.prototype.next=function(){32===this.P-this.de&&(this.A=Fh(this.pa,this.P),this.de+=32);var a=this.A[this.P&31];this.P+=1;return a};function Kh(a,b,c){return new Jh(b,b-b%32,b<D(a)?Fh(a,b):null,a,b,c)}function Lh(a,b,c,d){return c<d?Mh(a,b,qe(a,c),c+1,d):b.v?b.v():b.call(null)}function Mh(a,b,c,d,e){var f=c;c=d;for(d=Fh(a,d);;)if(c<e){var g=c&31;d=0===g?Fh(a,c):d;g=d[g];f=b.h?b.h(f,g):b.call(null,f,g);if(fe(f))return r(f);c+=1;}else return f}
    function S(a,b,c,d,e,f){this.N=a;this.H=b;this.shift=c;this.root=d;this.ya=e;this.G=f;this.C=167666463;this.O=139268;}h=S.prototype;h.Cc=function(a,b){return 0<=b&&b<this.H?new Nh(b,Fh(this,b)[b&31]):null};h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){return "number"===typeof b?this.ra(null,b,c):c};
    h.Ya=function(a,b,c){a=0;for(var d=c;;)if(a<this.H){var e=Fh(this,a);c=e.length;a:for(var f=0;;)if(f<c){var g=f+a,l=e[f];d=b.j?b.j(d,g,l):b.call(null,d,g,l);if(fe(d)){e=d;break a}f+=1;}else {e=d;break a}if(fe(e))return r(e);a+=c;d=e;}else return d};h.Me=tb;h.V=function(a,b){return Gh(this,b)[b&31]};h.ra=function(a,b,c){return 0<=b&&b<this.H?Fh(this,b)[b&31]:c};
    h.Lb=function(a,b,c){if(0<=b&&b<this.H)return Bh(this)<=b?(a=Yb(this.ya),a[b&31]=c,new S(this.N,this.H,this.shift,this.root,a,null)):new S(this.N,this.H,this.shift,Hh(this,this.shift,this.root,b,c),this.ya,null);if(b===this.H)return this.ka(null,c);throw Error(["Index ",p.g(b)," out of bounds  [0,",p.g(this.H),"]"].join(""));};h.Aa=function(){return Kh(this,0,this.H)};h.T=function(){return this.N};h.ca=function(){return this.H};h.Vb=function(){return 0<this.H?this.V(null,this.H-1):null};
    h.Wb=function(){if(0===this.H)throw Error("Can't pop empty vector");if(1===this.H)return Mc(G,this.N);if(1<this.H-Bh(this))return new S(this.N,this.H-1,this.shift,this.root,this.ya.slice(0,-1),null);var a=Fh(this,this.H-2),b=Ih(this,this.shift,this.root);b=null==b?T:b;var c=this.H-1;return 5<this.shift&&null==b.A[1]?new S(this.N,c,this.shift-5,b.A[0],a,null):new S(this.N,c,this.shift,b,a,null)};h.Dc=function(){return 0<this.H?new ue(this,this.H-1,null):null};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){if(b instanceof S)if(this.H===D(b))for(a=this.Aa(null),b=b.Aa(null);;)if(a.wa()){var c=a.next(),d=b.next();if(!x.h(c,d))return !1}else return !0;else return !1;else return ve(this,b)};h.kd=function(){return new Oh(this.H,this.shift,Ph.g?Ph.g(this.root):Ph.call(null,this.root),Qh.g?Qh.g(this.ya):Qh.call(null,this.ya))};h.ua=function(){return Mc(G,this.N)};h.Ta=function(a,b){return Lh(this,b,0,this.H)};
    h.Ua=function(a,b,c){a=0;for(var d=c;;)if(a<this.H){var e=Fh(this,a);c=e.length;a:for(var f=0;;)if(f<c){var g=e[f];d=b.h?b.h(d,g):b.call(null,d,g);if(fe(d)){e=d;break a}f+=1;}else {e=d;break a}if(fe(e))return r(e);a+=c;d=e;}else return d};h.la=function(a,b,c){if("number"===typeof b)return this.Lb(null,b,c);throw Error("Vector's key for assoc must be a number.");};h.Ca=function(a,b){return ff(b)?0<=b&&b<this.H:!1};
    h.ea=function(){if(0===this.H)return null;if(32>=this.H)return new Rd(this.ya,0,null);a:{var a=this.root;for(var b=this.shift;;)if(0<b)b-=5,a=a.A[0];else {a=a.A;break a}}return Rh?Rh(this,a,0,0):Sh.call(null,this,a,0,0)};h.U=function(a,b){return b===this.N?this:new S(b,this.H,this.shift,this.root,this.ya,this.G)};
    h.ka=function(a,b){if(32>this.H-Bh(this)){a=this.ya.length;for(var c=Array(a+1),d=0;;)if(d<a)c[d]=this.ya[d],d+=1;else break;c[a]=b;return new S(this.N,this.H+1,this.shift,this.root,c,null)}a=(c=this.H>>>5>1<<this.shift)?this.shift+5:this.shift;c?(c=zh(null),c.A[0]=this.root,d=Ch(null,this.shift,new yh(null,this.ya)),c.A[1]=d):c=Dh(this,this.shift,this.root,new yh(null,this.ya));return new S(this.N,this.H+1,a,c,[b],null)};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){if("number"===typeof a)return this.V(null,a);throw Error("Key must be integer");};
    var T=new yh(null,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]),G=new S(null,0,5,T,[],$d);function Th(a,b){var c=a.length;a=b?a:Yb(a);if(32>c)return new S(null,c,5,T,a,null);b=32;for(var d=(new S(null,32,5,T,a.slice(0,32),null)).kd(null);;)if(b<c){var e=b+1;d=dg.h(d,a[b]);b=e;}else return jd(d)}S.prototype[Ub]=function(){return Wd(this)};
    function Uh(a){return n(Vh.g?Vh.g(a):Vh.call(null,a))?new S(null,2,5,T,[Wh.g?Wh.g(a):Wh.call(null,a),Xh.g?Xh.g(a):Xh.call(null,a)],null):Ye(a)?Me(a,null):Jb(a)?Th(a,!0):jd($b.j(id,hd(G),a))}var Yh=function Yh(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Yh.l(0<c.length?new Rd(c.slice(0),0,null):null)};Yh.l=function(a){return a instanceof Rd&&0===a.P?Th(a.A,!Jb(a.A)):Uh(a)};Yh.I=0;Yh.M=function(a){return this.l(z(a))};
    function Zh(a,b,c,d,e){this.Jb=a;this.node=b;this.P=c;this.pb=d;this.N=e;this.G=null;this.C=32375020;this.O=1536;}h=Zh.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){if(this.pb+1<this.node.length){var a=this.Jb;var b=this.node,c=this.P,d=this.pb+1;a=Rh?Rh(a,b,c,d):Sh.call(null,a,b,c,d);return null==a?null:a}return this.je()};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return Lh(this.Jb,b,this.P+this.pb,D(this.Jb))};h.Ua=function(a,b,c){return Mh(this.Jb,b,c,this.P+this.pb,D(this.Jb))};h.Va=function(){return this.node[this.pb]};h.Wa=function(){if(this.pb+1<this.node.length){var a=this.Jb;var b=this.node,c=this.P,d=this.pb+1;a=Rh?Rh(a,b,c,d):Sh.call(null,a,b,c,d);return null==a?Ud:a}return this.Qc(null)};h.ea=function(){return this};
    h.Cd=function(){var a=this.node;return new Vf(a,this.pb,a.length)};h.Qc=function(){var a=this.P+this.node.length;if(a<dc(this.Jb)){var b=this.Jb,c=Fh(this.Jb,a);return Rh?Rh(b,c,a,0):Sh.call(null,b,c,a,0)}return Ud};h.U=function(a,b){return b===this.N?this:$h?$h(this.Jb,this.node,this.P,this.pb,b):Sh.call(null,this.Jb,this.node,this.P,this.pb,b)};h.ka=function(a,b){return we(b,this)};
    h.je=function(){var a=this.P+this.node.length;if(a<dc(this.Jb)){var b=this.Jb,c=Fh(this.Jb,a);return Rh?Rh(b,c,a,0):Sh.call(null,b,c,a,0)}return null};Zh.prototype[Ub]=function(){return Wd(this)};
    function Sh(a){switch(arguments.length){case 3:var b=arguments[0],c=arguments[1],d=arguments[2];return new Zh(b,Gh(b,c),c,d,null);case 4:return Rh(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return $h(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function Rh(a,b,c,d){return new Zh(a,b,c,d,null)}function $h(a,b,c,d,e){return new Zh(a,b,c,d,e)}
    function ai(a,b,c,d,e){this.N=a;this.pa=b;this.start=c;this.end=d;this.G=e;this.C=167666463;this.O=139264;}h=ai.prototype;h.Cc=function(a,b){if(0>b)return null;a=this.start+b;return a<this.end?new Nh(b,rc(this.pa,a)):null};h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){return "number"===typeof b?this.ra(null,b,c):c};
    h.Ya=function(a,b,c){a=this.start;for(var d=0;;)if(a<this.end){var e=d,f=jc(this.pa,a);c=b.j?b.j(c,e,f):b.call(null,c,e,f);if(fe(c))return r(c);d+=1;a+=1;}else return c};h.V=function(a,b){return 0>b||this.end<=this.start+b?Eh(b,this.end-this.start):jc(this.pa,this.start+b)};h.ra=function(a,b,c){return 0>b||this.end<=this.start+b?c:jc(this.pa,this.start+b,c)};
    h.Lb=function(a,b,c){a=this.start+b;if(0>b||this.end+1<=a)throw Error(["Index ",p.g(b)," out of bounds [0,",p.g(this.ca(null)),"]"].join(""));b=this.N;c=He.j(this.pa,a,c);var d=this.start,e=this.end;a+=1;a=e>a?e:a;return bi.R?bi.R(b,c,d,a,null):bi.call(null,b,c,d,a,null)};h.Aa=function(){return null!=this.pa&&tb===this.pa.Me?Kh(this.pa,this.start,this.end):new zg(this)};h.T=function(){return this.N};h.ca=function(){return this.end-this.start};
    h.Vb=function(){return this.start===this.end?null:jc(this.pa,this.end-1)};h.Wb=function(){if(this.start===this.end)throw Error("Can't pop empty vector");var a=this.N,b=this.pa,c=this.start,d=this.end-1;return bi.R?bi.R(a,b,c,d,null):bi.call(null,a,b,c,d,null)};h.Dc=function(){return this.start!==this.end?new ue(this,this.end-this.start-1,null):null};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Mc(G,this.N)};
    h.Ta=function(a,b){return null!=this.pa&&tb===this.pa.Me?Lh(this.pa,b,this.start,this.end):ie(this,b)};h.Ua=function(a,b,c){return null!=this.pa&&tb===this.pa.Me?Mh(this.pa,b,c,this.start,this.end):je(this,b,c)};h.la=function(a,b,c){if("number"===typeof b)return this.Lb(null,b,c);throw Error("Subvec's key for assoc must be a number.");};h.Ca=function(a,b){return ff(b)?0<=b&&b<this.end-this.start:!1};
    h.ea=function(){var a=this;return function d(c){return c===a.end?null:we(jc(a.pa,c),new Sf(null,function(){return d(c+1)},null,null))}(a.start)};h.U=function(a,b){return b===this.N?this:bi.R?bi.R(b,this.pa,this.start,this.end,this.G):bi.call(null,b,this.pa,this.start,this.end,this.G)};h.ka=function(a,b){a=this.N;b=Hc(this.pa,this.end,b);var c=this.start,d=this.end+1;return bi.R?bi.R(a,b,c,d,null):bi.call(null,a,b,c,d,null)};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.V(null,a)};h.h=function(a,b){return this.ra(null,a,b)};ai.prototype[Ub]=function(){return Wd(this)};
    function bi(a,b,c,d,e){for(;;)if(b instanceof ai)c=b.start+c,d=b.start+d,b=b.pa;else {if(!Ye(b))throw Error("v must satisfy IVector");if(0>c||d<c||d>D(b))throw Error("Index out of bounds");return new ai(a,b,c,d,e)}}function ci(a,b,c){return bi(null,a,b|0,c|0,null)}function di(a,b){return a===b.Ba?b:new yh(a,Yb(b.A))}function Ph(a){return new yh({},Yb(a.A))}
    function Qh(a){var b=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];$e(a,0,b,0,a.length);return b}var ei=function ei(a,b,c,d){c=di(a.root.Ba,c);var f=a.H-1>>>b&31;if(5===b)a=d;else {var g=c.A[f];null!=g?(b-=5,a=ei.D?ei.D(a,b,g,d):ei.call(null,a,b,g,d)):a=Ch(a.root.Ba,b-5,d);}c.A[f]=a;return c};function Oh(a,b,c,d){this.H=a;this.shift=b;this.root=c;this.ya=d;this.O=88;this.C=275;}h=Oh.prototype;
    h.nd=function(a,b){if(this.root.Ba){if(32>this.H-Bh(this))this.ya[this.H&31]=b;else {a=new yh(this.root.Ba,this.ya);var c=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];c[0]=b;this.ya=c;this.H>>>5>1<<this.shift?(b=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],c=this.shift+
    5,b[0]=this.root,b[1]=Ch(this.root.Ba,this.shift,a),this.root=new yh(this.root.Ba,b),this.shift=c):this.root=ei(this,this.shift,this.root,a);}this.H+=1;return this}throw Error("conj! after persistent!");};h.Id=function(){if(this.root.Ba){this.root.Ba=null;var a=this.H-Bh(this),b=Array(a);$e(this.ya,0,b,0,a);return new S(null,this.H,this.shift,this.root,b,null)}throw Error("persistent! called twice");};
    h.md=function(a,b,c){if("number"===typeof b)return fi(this,b,c);throw Error("TransientVector's key for assoc! must be a number.");};
    function fi(a,b,c){if(a.root.Ba){if(0<=b&&b<a.H){if(Bh(a)<=b)a.ya[b&31]=c;else {var d=function l(f,g){g=di(a.root.Ba,g);if(0===f)g.A[b&31]=c;else {var m=b>>>f&31;f=l(f-5,g.A[m]);g.A[m]=f;}return g}(a.shift,a.root);a.root=d;}return a}if(b===a.H)return a.nd(null,c);throw Error(["Index ",p.g(b)," out of bounds for TransientVector of length",p.g(a.H)].join(""));}throw Error("assoc! after persistent!");}h.ca=function(){if(this.root.Ba)return this.H;throw Error("count after persistent!");};
    h.V=function(a,b){if(this.root.Ba)return Gh(this,b)[b&31];throw Error("nth after persistent!");};h.ra=function(a,b,c){return 0<=b&&b<this.H?this.V(null,b):c};h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){if(this.root.Ba)return "number"===typeof b?this.ra(null,b,c):c;throw Error("lookup after persistent!");};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.da(null,a)};h.h=function(a,b){return this.S(null,a,b)};function gi(a,b){this.rd=a;this.$d=b;}gi.prototype.wa=function(){var a=null!=this.rd&&z(this.rd);return a?a:(a=null!=this.$d)?this.$d.wa():a};
    gi.prototype.next=function(){if(null!=this.rd){var a=A(this.rd);this.rd=C(this.rd);return a}if(null!=this.$d&&this.$d.wa())return this.$d.next();throw Error("No such element");};gi.prototype.remove=function(){return Error("Unsupported operation")};function hi(a,b,c,d){this.N=a;this.Eb=b;this.Ib=c;this.G=d;this.C=31850700;this.O=0;}h=hi.prototype;h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){var a=C(this.Eb);return a?new hi(this.N,a,this.Ib,null):null!=this.Ib?new hi(this.N,this.Ib,null,null):null};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};
    h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Mc(Ud,this.N)};h.Va=function(){return A(this.Eb)};h.Wa=function(){var a=C(this.Eb);return a?new hi(this.N,a,this.Ib,null):null==this.Ib?this.ua(null):new hi(this.N,this.Ib,null,null)};h.ea=function(){return this};h.U=function(a,b){return b===this.N?this:new hi(b,this.Eb,this.Ib,this.G)};h.ka=function(a,b){return we(b,this)};hi.prototype[Ub]=function(){return Wd(this)};
    function ii(a,b,c,d,e){this.N=a;this.count=b;this.Eb=c;this.Ib=d;this.G=e;this.O=139264;this.C=31858766;}h=ii.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,this.count.g?this.count.g(this):this.count.call(null,this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.Aa=function(){return new gi(this.Eb,zd(this.Ib))};h.T=function(){return this.N};h.ca=function(){return this.count};h.Vb=function(){return A(this.Eb)};
    h.Wb=function(){if(n(this.Eb)){var a=C(this.Eb);return a?new ii(this.N,this.count-1,a,this.Ib,null):new ii(this.N,this.count-1,z(this.Ib),G,null)}return this};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Mc(ji,this.N)};h.Va=function(){return A(this.Eb)};h.Wa=function(){return Td(z(this))};h.ea=function(){var a=z(this.Ib),b=this.Eb;return n(n(b)?b:a)?new hi(null,this.Eb,z(a),null):null};
    h.U=function(a,b){return b===this.N?this:new ii(b,this.count,this.Eb,this.Ib,this.G)};h.ka=function(a,b){n(this.Eb)?(a=this.Ib,b=new ii(this.N,this.count+1,this.Eb,De.h(n(a)?a:G,b),null)):b=new ii(this.N,this.count+1,De.h(this.Eb,b),G,null);return b};var ji=new ii(null,0,null,G,$d);ii.prototype[Ub]=function(){return Wd(this)};function ki(){this.C=2097152;this.O=0;}ki.prototype.aa=function(){return !1};var li=new ki;
    function mi(a,b){return ef(We(b)&&!Xe(b)?D(a)===D(b)?(null!=a?a.C&1048576||tb===a.ri||(a.C?0:Qb(Qc,a)):Qb(Qc,a))?pf(function(c,d,e){return x.h(u.j(b,d,li),e)?!0:ee(!1)},!0,a):Kg(function(c){return x.h(u.j(b,A(c),li),Ae(c))},a):null:null)}function ni(a,b,c,d){this.P=0;this.Zh=a;this.Bf=b;this.$c=c;this.Rf=d;}ni.prototype.wa=function(){var a=this.P<this.Bf;return a?a:this.Rf.wa()};ni.prototype.next=function(){if(this.P<this.Bf){var a=qe(this.$c,this.P);this.P+=1;return new Nh(a,rc(this.Zh,a))}return this.Rf.next()};
    ni.prototype.remove=function(){return Error("Unsupported operation")};function oi(a){this.ma=a;}oi.prototype.next=function(){if(null!=this.ma){var a=A(this.ma),b=H(a,0,null);a=H(a,1,null);this.ma=C(this.ma);return {value:[b,a],done:!1}}return {value:null,done:!0}};function pi(a){this.ma=a;}pi.prototype.next=function(){if(null!=this.ma){var a=A(this.ma);this.ma=C(this.ma);return {value:[a,a],done:!1}}return {value:null,done:!0}};
    function qi(a,b){if(b instanceof w)a:{var c=a.length;b=b.X;for(var d=0;;){if(c<=d){a=-1;break a}if(a[d]instanceof w&&b===a[d].X){a=d;break a}d+=2;}}else if("string"===typeof b||"number"===typeof b)a:for(c=a.length,d=0;;){if(c<=d){a=-1;break a}if(b===a[d]){a=d;break a}d+=2;}else if(b instanceof Md)a:for(c=a.length,b=b.xc,d=0;;){if(c<=d){a=-1;break a}if(a[d]instanceof Md&&b===a[d].xc){a=d;break a}d+=2;}else if(null==b)a:for(b=a.length,c=0;;){if(b<=c){a=-1;break a}if(null==a[c]){a=c;break a}c+=2;}else a:for(c=
    a.length,d=0;;){if(c<=d){a=-1;break a}if(x.h(b,a[d])){a=d;break a}d+=2;}return a}function Nh(a,b){this.key=a;this.o=b;this.G=null;this.C=166619935;this.O=0;}h=Nh.prototype;h.Cc=function(a,b){switch(b){case 0:return new Nh(0,this.key);case 1:return new Nh(1,this.o);default:return null}};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.da=function(a,b){return this.ra(null,b,null)};h.S=function(a,b,c){return this.ra(null,b,c)};h.V=function(a,b){if(0===b)return this.key;if(1===b)return this.o;throw Error("Index out of bounds");};
    h.ra=function(a,b,c){return 0===b?this.key:1===b?this.o:c};h.Lb=function(a,b,c){return (new S(null,2,5,T,[this.key,this.o],null)).Lb(null,b,c)};h.T=function(){return null};h.ca=function(){return 2};h.Oe=function(){return this.key};h.Pe=function(){return this.o};h.Vb=function(){return this.o};h.Wb=function(){return new S(null,1,5,T,[this.key],null)};h.Dc=function(){return new Rd([this.o,this.key],0,null)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};
    h.aa=function(a,b){return ve(this,b)};h.ua=function(){return null};h.Ta=function(a,b){return ie(this,b)};h.Ua=function(a,b,c){return je(this,b,c)};h.la=function(a,b,c){return He.j(new S(null,2,5,T,[this.key,this.o],null),b,c)};h.Ca=function(a,b){return 0===b||1===b};h.ea=function(){return new Rd([this.key,this.o],0,null)};h.U=function(a,b){return Me(new S(null,2,5,T,[this.key,this.o],null),b)};h.ka=function(a,b){return new S(null,3,5,T,[this.key,this.o,b],null)};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.V(null,a)};h.h=function(a,b){return this.ra(null,a,b)};function Vh(a){return null!=a?a.C&2048||tb===a.ui?!0:!1:!1}function ri(a,b,c){this.A=a;this.P=b;this.Nb=c;this.C=32374990;this.O=0;}h=ri.prototype;
    h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.Nb};h.Da=function(){return this.P<this.A.length-2?new ri(this.A,this.P+2,null):null};h.ca=function(){return (this.A.length-this.P)/2};h.ba=function(){return Zd(this)};
    h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return new Nh(this.A[this.P],this.A[this.P+1])};h.Wa=function(){return this.P<this.A.length-2?new ri(this.A,this.P+2,null):Ud};h.ea=function(){return this};h.U=function(a,b){return b===this.Nb?this:new ri(this.A,this.P,b)};h.ka=function(a,b){return we(b,this)};ri.prototype[Ub]=function(){return Wd(this)};
    function si(a,b){this.A=a;this.P=0;this.H=b;}si.prototype.wa=function(){return this.P<this.H};si.prototype.next=function(){var a=new Nh(this.A[this.P],this.A[this.P+1]);this.P+=2;return a};function k(a,b,c,d){this.N=a;this.H=b;this.A=c;this.G=d;this.C=16647951;this.O=139268;}h=k.prototype;h.Cc=function(a,b){a=qi(this.A,b);return -1===a?null:new Nh(this.A[a],this.A[a+1])};h.toString=function(){return Bd(this)};h.keys=function(){return Wd(ti.g?ti.g(this):ti.call(null,this))};h.entries=function(){return new oi(z(z(this)))};
    h.values=function(){return Wd(ui.g?ui.g(this):ui.call(null,this))};h.has=function(a){return M(this,a)};h.get=function(a,b){return this.S(null,a,b)};h.forEach=function(a){for(var b=z(this),c=null,d=0,e=0;;)if(e<d){var f=c.V(null,e),g=H(f,0,null);f=H(f,1,null);a.h?a.h(f,g):a.call(null,f,g);e+=1;}else if(b=z(b))Ze(b)?(c=pd(b),b=qd(b),g=c,d=D(c),c=g):(c=A(b),g=H(c,0,null),f=H(c,1,null),a.h?a.h(f,g):a.call(null,f,g),b=C(b),c=null,d=0),e=0;else return null};h.da=function(a,b){return this.S(null,b,null)};
    h.S=function(a,b,c){a=qi(this.A,b);return -1===a?c:this.A[a+1]};h.Ya=function(a,b,c){a=this.A.length;for(var d=0;;)if(d<a){var e=this.A[d],f=this.A[d+1];c=b.j?b.j(c,e,f):b.call(null,c,e,f);if(fe(c))return r(c);d+=2;}else return c};h.Aa=function(){return new si(this.A,2*this.H)};h.T=function(){return this.N};h.ca=function(){return this.H};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=ae(this)};
    h.aa=function(a,b){if(We(b)&&!Xe(b))if(a=this.A.length,this.H===b.ca(null))for(var c=0;;)if(c<a){var d=b.S(null,this.A[c],bf);if(d!==bf)if(x.h(this.A[c+1],d))c+=2;else return !1;else return !1}else return !0;else return !1;else return !1};h.kd=function(){return new vi(this.A.length,Yb(this.A))};h.ua=function(){return Mc(R,this.N)};h.Ta=function(a,b){return nf(this,b)};h.Ua=function(a,b,c){return of(this,b,c)};
    h.nb=function(a,b){if(0<=qi(this.A,b)){a=this.A.length;var c=a-2;if(0===c)return this.ua(null);c=Array(c);for(var d=0,e=0;;){if(d>=a)return new k(this.N,this.H-1,c,null);x.h(b,this.A[d])?d+=2:(c[e]=this.A[d],c[e+1]=this.A[d+1],e+=2,d+=2);}}else return this};
    h.la=function(a,b,c){a=qi(this.A,b);if(-1===a){if(this.H<wi){a=this.A;for(var d=a.length,e=Array(d+2),f=0;;)if(f<d)e[f]=a[f],f+=1;else break;e[d]=b;e[d+1]=c;return new k(this.N,this.H+1,e,null)}return Mc(vc(qh.h(xi,this),b,c),this.N)}if(c===this.A[a+1])return this;b=Yb(this.A);b[a+1]=c;return new k(this.N,this.H,b,null)};h.Ca=function(a,b){return -1!==qi(this.A,b)};h.ea=function(){var a=this.A;return 0<=a.length-2?new ri(a,0,null):null};
    h.U=function(a,b){return b===this.N?this:new k(b,this.H,this.A,this.G)};h.ka=function(a,b){if(Ye(b))return this.la(null,jc(b,0),jc(b,1));a=this;for(b=z(b);;){if(null==b)return a;var c=A(b);if(Ye(c))a=vc(a,jc(c,0),jc(c,1)),b=C(b);else throw Error("conj on a map takes map entries or seqables of map entries");}};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.da(null,a)};h.h=function(a,b){return this.S(null,a,b)};var R=new k(null,0,[],be),wi=8;function yi(a){return new k(null,a.length/2,a,null)}function Bi(a,b){return a===b?!0:Nf(a,b)?!0:x.h(a,b)}
    function Eb(a){for(var b=0,c=0;;)if(b<a.length){var d;a:for(d=0;;)if(d<b){var e=Bi(a[b],a[d]);if(e){d=e;break a}d=2+d;}else {d=!1;break a}c=d?c:c+2;b=2+b;}else return c}function Fb(a,b){var c=a.length-1,d=z(b);b=Array(c+2*D(d));a=$e(a,0,b,0,c);for(b=c;;)if(d){var e=A(d);a[b]=Ac(e);a[b+1]=Bc(e);b=2+c;d=C(d);}else return a}
    function Ie(a){var b=a.length,c=1===(b&1),d;if(!(d=c))a:for(d=0;;)if(d<a.length){var e;b:for(e=0;;)if(e<d){var f=Bi(a[d],a[e]);if(f){e=f;break b}e=2+e;}else {e=!1;break b}if(e){d=e;break a}d=2+d;}else {d=!1;break a}return d?Gb(a,c):new k(null,b/2,a,null)}
    function Gb(a,b){var c=b?Fb(a,qh.h(R,a[a.length-1])):a;a=Eb(c);var d=c.length;if(a<d){a=Array(a);for(var e=0,f=0;;)if(e<d)(function(){for(var g=0;;)if(g<f){var l=Bi(c[e],c[g]);if(l)return l;g=2+g;}else return !1})()?(b=f,e=2+e,f=b):(b=function(){for(var g=d-2;;)if(g>=e){if(Bi(c[e],c[g]))return g;g-=2;}else return g}(),a[f]=c[e],a[f+1]=c[b+1],b=2+f,e=2+e,f=b);else break;return new k(null,a.length/2,a,null)}return new k(null,c.length/2,c,null)}k.prototype[Ub]=function(){return Wd(this)};
    function vi(a,b){this.Yc={};this.ic=a;this.A=b;this.C=259;this.O=56;}h=vi.prototype;h.ca=function(){if(this.Yc)return yf(this.ic,2);throw Error("count after persistent!");};h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){if(this.Yc)return a=qi(this.A,b),-1===a?c:this.A[a+1];throw Error("lookup after persistent!");};
    h.nd=function(a,b){if(this.Yc){if(Vh(b))return this.md(null,Wh.g?Wh.g(b):Wh.call(null,b),Xh.g?Xh.g(b):Xh.call(null,b));if(Ye(b))return this.md(null,b.g?b.g(0):b.call(null,0),b.g?b.g(1):b.call(null,1));a=z(b);for(b=this;;){var c=A(a);if(n(c))a=C(a),b=kd(b,Wh.g?Wh.g(c):Wh.call(null,c),Xh.g?Xh.g(c):Xh.call(null,c));else return b}}else throw Error("conj! after persistent!");};h.Id=function(){if(this.Yc)return this.Yc=!1,new k(null,yf(this.ic,2),this.A,null);throw Error("persistent! called twice");};
    h.md=function(a,b,c){if(this.Yc){a=qi(this.A,b);if(-1===a)return this.ic+2<=2*wi?(this.ic+=2,this.A.push(b),this.A.push(c),this):eg(zi.h?zi.h(this.ic,this.A):zi.call(null,this.ic,this.A),b,c);c!==this.A[a+1]&&(this.A[a+1]=c);return this}throw Error("assoc! after persistent!");};h.Re=function(a,b){if(this.Yc)return a=qi(this.A,b),0<=a&&(this.A[a]=this.A[this.ic-2],this.A[a+1]=this.A[this.ic-1],a=this.A,a.pop(),a.pop(),this.ic-=2),this;throw Error("dissoc! after persistent!");};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.S(null,a,null)};h.h=function(a,b){return this.S(null,a,b)};function zi(a,b){for(var c=hd(xi),d=0;;)if(d<a)c=kd(c,b[d],b[d+1]),d+=2;else return c}function Ai(){this.o=!1;}
    function Ci(a,b,c){a=Yb(a);a[b]=c;return a}function Di(a,b){var c=Array(a.length-2);$e(a,0,c,0,2*b);$e(a,2*(b+1),c,2*b,c.length-2*b);return c}function Ei(a,b,c,d){a=a.Ic(b);a.A[c]=d;return a}function Fi(a,b,c){for(var d=a.length,e=0,f=c;;)if(e<d){c=a[e];if(null!=c){var g=a[e+1];c=b.j?b.j(f,c,g):b.call(null,f,c,g);}else c=a[e+1],c=null!=c?c.ed(b,f):f;if(fe(c))return c;e+=2;f=c;}else return f}function Gi(a){this.A=a;this.P=0;this.lc=this.Xd=null;}
    Gi.prototype.advance=function(){for(var a=this.A.length;;)if(this.P<a){var b=this.A[this.P],c=this.A[this.P+1];null!=b?b=this.Xd=new Nh(b,c):null!=c?(b=zd(c),b=b.wa()?this.lc=b:!1):b=!1;this.P+=2;if(b)return !0}else return !1};Gi.prototype.wa=function(){var a=null!=this.Xd;return a?a:(a=null!=this.lc)?a:this.advance()};
    Gi.prototype.next=function(){if(null!=this.Xd){var a=this.Xd;this.Xd=null;return a}if(null!=this.lc)return a=this.lc.next(),this.lc.wa()||(this.lc=null),a;if(this.advance())return this.next();throw Error("No such element");};Gi.prototype.remove=function(){return Error("Unsupported operation")};function Hi(a,b,c){this.Ba=a;this.ta=b;this.A=c;this.O=131072;this.C=0;}h=Hi.prototype;
    h.Ic=function(a){if(a===this.Ba)return this;var b=Af(this.ta),c=Array(0>b?4:2*(b+1));$e(this.A,0,c,0,2*b);return new Hi(a,this.ta,c)};h.Vd=function(a,b,c,d,e){var f=1<<(c>>>b&31);if(0===(this.ta&f))return this;var g=Af(this.ta&f-1),l=this.A[2*g],m=this.A[2*g+1];return null==l?(b=m.Vd(a,b+5,c,d,e),b===m?this:null!=b?Ei(this,a,2*g+1,b):this.ta===f?null:Ii(this,a,f,g)):Bi(d,l)?(e.o=!0,Ii(this,a,f,g)):this};
    function Ii(a,b,c,d){if(a.ta===c)return null;a=a.Ic(b);b=a.A;var e=b.length;a.ta^=c;$e(b,2*(d+1),b,2*d,e-2*(d+1));b[e-2]=null;b[e-1]=null;return a}h.Td=function(){return Ji?Ji(this.A):Ki.call(null,this.A)};h.ed=function(a,b){return Fi(this.A,a,b)};h.Tc=function(a,b,c,d){var e=1<<(b>>>a&31);if(0===(this.ta&e))return d;var f=Af(this.ta&e-1);e=this.A[2*f];f=this.A[2*f+1];return null==e?f.Tc(a+5,b,c,d):Bi(c,e)?f:d};
    h.hc=function(a,b,c,d,e,f){var g=1<<(c>>>b&31),l=Af(this.ta&g-1);if(0===(this.ta&g)){var m=Af(this.ta);if(2*m<this.A.length){a=this.Ic(a);b=a.A;f.o=!0;c=2*(m-l);f=2*l+(c-1);for(m=2*(l+1)+(c-1);0!==c;)b[m]=b[f],--m,--c,--f;b[2*l]=d;b[2*l+1]=e;a.ta|=g;return a}if(16<=m){l=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];l[c>>>b&31]=Li.hc(a,b+5,c,d,e,f);for(e=d=0;;)if(32>d)0===(this.ta>>>
    d&1)?d+=1:(l[d]=null!=this.A[e]?Li.hc(a,b+5,Jd(this.A[e]),this.A[e],this.A[e+1],f):this.A[e+1],e+=2,d+=1);else break;return new Mi(a,m+1,l)}b=Array(2*(m+4));$e(this.A,0,b,0,2*l);b[2*l]=d;b[2*l+1]=e;$e(this.A,2*l,b,2*(l+1),2*(m-l));f.o=!0;a=this.Ic(a);a.A=b;a.ta|=g;return a}m=this.A[2*l];g=this.A[2*l+1];if(null==m)return m=g.hc(a,b+5,c,d,e,f),m===g?this:Ei(this,a,2*l+1,m);if(Bi(d,m))return e===g?this:Ei(this,a,2*l+1,e);f.o=!0;f=b+5;d=Ni?Ni(a,f,m,g,c,d,e):Oi.call(null,a,f,m,g,c,d,e);e=2*l;l=2*l+1;a=
    this.Ic(a);a.A[e]=null;a.A[l]=d;return a};
    h.fc=function(a,b,c,d,e){var f=1<<(b>>>a&31),g=Af(this.ta&f-1);if(0===(this.ta&f)){var l=Af(this.ta);if(16<=l){g=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];g[b>>>a&31]=Li.fc(a+5,b,c,d,e);for(d=c=0;;)if(32>c)0===(this.ta>>>c&1)?c+=1:(g[c]=null!=this.A[d]?Li.fc(a+5,Jd(this.A[d]),this.A[d],this.A[d+1],e):this.A[d+1],d+=2,c+=1);else break;return new Mi(null,l+1,g)}a=Array(2*(l+1));$e(this.A,
    0,a,0,2*g);a[2*g]=c;a[2*g+1]=d;$e(this.A,2*g,a,2*(g+1),2*(l-g));e.o=!0;return new Hi(null,this.ta|f,a)}var m=this.A[2*g];f=this.A[2*g+1];if(null==m)return l=f.fc(a+5,b,c,d,e),l===f?this:new Hi(null,this.ta,Ci(this.A,2*g+1,l));if(Bi(c,m))return d===f?this:new Hi(null,this.ta,Ci(this.A,2*g+1,d));e.o=!0;e=this.ta;l=this.A;a+=5;a=Pi?Pi(a,m,f,b,c,d):Oi.call(null,a,m,f,b,c,d);c=2*g;g=2*g+1;d=Yb(l);d[c]=null;d[g]=a;return new Hi(null,e,d)};
    h.Sd=function(a,b,c,d){var e=1<<(b>>>a&31);if(0===(this.ta&e))return d;var f=Af(this.ta&e-1);e=this.A[2*f];f=this.A[2*f+1];return null==e?f.Sd(a+5,b,c,d):Bi(c,e)?new Nh(e,f):d};
    h.Ud=function(a,b,c){var d=1<<(b>>>a&31);if(0===(this.ta&d))return this;var e=Af(this.ta&d-1),f=this.A[2*e],g=this.A[2*e+1];return null==f?(a=g.Ud(a+5,b,c),a===g?this:null!=a?new Hi(null,this.ta,Ci(this.A,2*e+1,a)):this.ta===d?null:new Hi(null,this.ta^d,Di(this.A,e))):Bi(c,f)?this.ta===d?null:new Hi(null,this.ta^d,Di(this.A,e)):this};h.Aa=function(){return new Gi(this.A)};var Li=new Hi(null,0,[]);
    function Qi(a,b,c){var d=a.A,e=d.length;a=Array(2*(a.H-1));for(var f=0,g=1,l=0;;)if(f<e)f!==c&&null!=d[f]?(a[g]=d[f],g+=2,l|=1<<f,f+=1):f+=1;else return new Hi(b,l,a)}function Ri(a){this.A=a;this.P=0;this.lc=null;}Ri.prototype.wa=function(){for(var a=this.A.length;;){if(null!=this.lc&&this.lc.wa())return !0;if(this.P<a){var b=this.A[this.P];this.P+=1;null!=b&&(this.lc=zd(b));}else return !1}};Ri.prototype.next=function(){if(this.wa())return this.lc.next();throw Error("No such element");};
    Ri.prototype.remove=function(){return Error("Unsupported operation")};function Mi(a,b,c){this.Ba=a;this.H=b;this.A=c;this.O=131072;this.C=0;}h=Mi.prototype;h.Ic=function(a){return a===this.Ba?this:new Mi(a,this.H,Yb(this.A))};h.Vd=function(a,b,c,d,e){var f=c>>>b&31,g=this.A[f];if(null==g)return this;b=g.Vd(a,b+5,c,d,e);if(b===g)return this;if(null==b){if(8>=this.H)return Qi(this,a,f);a=Ei(this,a,f,b);--a.H;return a}return Ei(this,a,f,b)};h.Td=function(){return Si?Si(this.A):Ti.call(null,this.A)};
    h.ed=function(a,b){for(var c=this.A.length,d=0;;)if(d<c){var e=this.A[d];if(null!=e){b=e.ed(a,b);if(fe(b))return b;d+=1;}else d+=1;}else return b};h.Tc=function(a,b,c,d){var e=this.A[b>>>a&31];return null!=e?e.Tc(a+5,b,c,d):d};h.hc=function(a,b,c,d,e,f){var g=c>>>b&31,l=this.A[g];if(null==l)return a=Ei(this,a,g,Li.hc(a,b+5,c,d,e,f)),a.H+=1,a;b=l.hc(a,b+5,c,d,e,f);return b===l?this:Ei(this,a,g,b)};
    h.fc=function(a,b,c,d,e){var f=b>>>a&31,g=this.A[f];if(null==g)return new Mi(null,this.H+1,Ci(this.A,f,Li.fc(a+5,b,c,d,e)));a=g.fc(a+5,b,c,d,e);return a===g?this:new Mi(null,this.H,Ci(this.A,f,a))};h.Sd=function(a,b,c,d){var e=this.A[b>>>a&31];return null!=e?e.Sd(a+5,b,c,d):d};h.Ud=function(a,b,c){var d=b>>>a&31,e=this.A[d];return null!=e?(a=e.Ud(a+5,b,c),a===e?this:null==a?8>=this.H?Qi(this,null,d):new Mi(null,this.H-1,Ci(this.A,d,a)):new Mi(null,this.H,Ci(this.A,d,a))):this};h.Aa=function(){return new Ri(this.A)};
    function Ui(a,b,c){b*=2;for(var d=0;;)if(d<b){if(Bi(c,a[d]))return d;d+=2;}else return -1}function Vi(a,b,c,d){this.Ba=a;this.Gc=b;this.H=c;this.A=d;this.O=131072;this.C=0;}h=Vi.prototype;h.Ic=function(a){if(a===this.Ba)return this;var b=Array(2*(this.H+1));$e(this.A,0,b,0,2*this.H);return new Vi(a,this.Gc,this.H,b)};
    h.Vd=function(a,b,c,d,e){b=Ui(this.A,this.H,d);if(-1===b)return this;e.o=!0;if(1===this.H)return null;a=this.Ic(a);e=a.A;e[b]=e[2*this.H-2];e[b+1]=e[2*this.H-1];e[2*this.H-1]=null;e[2*this.H-2]=null;--a.H;return a};h.Td=function(){return Ji?Ji(this.A):Ki.call(null,this.A)};h.ed=function(a,b){return Fi(this.A,a,b)};h.Tc=function(a,b,c,d){a=Ui(this.A,this.H,c);return 0>a?d:Bi(c,this.A[a])?this.A[a+1]:d};
    h.hc=function(a,b,c,d,e,f){if(c===this.Gc){b=Ui(this.A,this.H,d);if(-1===b){if(this.A.length>2*this.H)return b=2*this.H,c=2*this.H+1,a=this.Ic(a),a.A[b]=d,a.A[c]=e,f.o=!0,a.H+=1,a;c=this.A.length;b=Array(c+2);$e(this.A,0,b,0,c);b[c]=d;b[c+1]=e;f.o=!0;d=this.H+1;a===this.Ba?(this.A=b,this.H=d,a=this):a=new Vi(this.Ba,this.Gc,d,b);return a}return this.A[b+1]===e?this:Ei(this,a,b+1,e)}return (new Hi(a,1<<(this.Gc>>>b&31),[null,this,null,null])).hc(a,b,c,d,e,f)};
    h.fc=function(a,b,c,d,e){return b===this.Gc?(a=Ui(this.A,this.H,c),-1===a?(a=2*this.H,b=Array(a+2),$e(this.A,0,b,0,a),b[a]=c,b[a+1]=d,e.o=!0,new Vi(null,this.Gc,this.H+1,b)):x.h(this.A[a+1],d)?this:new Vi(null,this.Gc,this.H,Ci(this.A,a+1,d))):(new Hi(null,1<<(this.Gc>>>a&31),[null,this])).fc(a,b,c,d,e)};h.Sd=function(a,b,c,d){a=Ui(this.A,this.H,c);return 0>a?d:Bi(c,this.A[a])?new Nh(this.A[a],this.A[a+1]):d};
    h.Ud=function(a,b,c){a=Ui(this.A,this.H,c);return -1===a?this:1===this.H?null:new Vi(null,this.Gc,this.H-1,Di(this.A,yf(a,2)))};h.Aa=function(){return new Gi(this.A)};function Oi(a){switch(arguments.length){case 6:return Pi(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 7:return Ni(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}
    function Pi(a,b,c,d,e,f){var g=Jd(b);if(g===d)return new Vi(null,g,2,[b,c,e,f]);var l=new Ai;return Li.fc(a,g,b,c,l).fc(a,d,e,f,l)}function Ni(a,b,c,d,e,f,g){var l=Jd(c);if(l===e)return new Vi(null,l,2,[c,d,f,g]);var m=new Ai;return Li.hc(a,b,l,c,d,m).hc(a,b,e,f,g,m)}function Wi(a,b,c,d,e){this.N=a;this.xa=b;this.P=c;this.ma=d;this.G=e;this.C=32374988;this.O=0;}h=Wi.prototype;h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){if(null==this.ma){var a=this.xa,b=this.P+2;return Xi?Xi(a,b,null):Ki.call(null,a,b,null)}a=this.xa;b=this.P;var c=C(this.ma);return Xi?Xi(a,b,c):Ki.call(null,a,b,c)};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return null==this.ma?new Nh(this.xa[this.P],this.xa[this.P+1]):A(this.ma)};
    h.Wa=function(){var a=this,b=null==a.ma?function(){var c=a.xa,d=a.P+2;return Xi?Xi(c,d,null):Ki.call(null,c,d,null)}():function(){var c=a.xa,d=a.P,e=C(a.ma);return Xi?Xi(c,d,e):Ki.call(null,c,d,e)}();return null!=b?b:Ud};h.ea=function(){return this};h.U=function(a,b){return b===this.N?this:new Wi(b,this.xa,this.P,this.ma,this.G)};h.ka=function(a,b){return we(b,this)};Wi.prototype[Ub]=function(){return Wd(this)};
    function Ki(a){switch(arguments.length){case 1:return Ji(arguments[0]);case 3:return Xi(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function Ji(a){return Xi(a,0,null)}function Xi(a,b,c){if(null==c)for(c=a.length;;)if(b<c){if(null!=a[b])return new Wi(null,a,b,null,null);var d=a[b+1];if(n(d)&&(d=d.Td(),n(d)))return new Wi(null,a,b+2,d,null);b+=2;}else return null;else return new Wi(null,a,b,c,null)}
    function Yi(a,b,c,d,e){this.N=a;this.xa=b;this.P=c;this.ma=d;this.G=e;this.C=32374988;this.O=0;}h=Yi.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){var a=this.xa,b=this.P,c=C(this.ma);return Zi?Zi(a,b,c):Ti.call(null,a,b,c)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};
    h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return A(this.ma)};h.Wa=function(){var a=this.xa;var b=this.P,c=C(this.ma);a=Zi?Zi(a,b,c):Ti.call(null,a,b,c);return null!=a?a:Ud};h.ea=function(){return this};h.U=function(a,b){return b===this.N?this:new Yi(b,this.xa,this.P,this.ma,this.G)};h.ka=function(a,b){return we(b,this)};Yi.prototype[Ub]=function(){return Wd(this)};
    function Ti(a){switch(arguments.length){case 1:return Si(arguments[0]);case 3:return Zi(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function Si(a){return Zi(a,0,null)}function Zi(a,b,c){if(null==c)for(c=a.length;;)if(b<c){var d=a[b];if(n(d)&&(d=d.Td(),n(d)))return new Yi(null,a,b+1,d,null);b+=1;}else return null;else return new Yi(null,a,b,c,null)}function $i(a,b){this.ob=a;this.lg=b;this.pf=!1;}
    $i.prototype.wa=function(){return !this.pf||this.lg.wa()};$i.prototype.next=function(){if(this.pf)return this.lg.next();this.pf=!0;return new Nh(null,this.ob)};$i.prototype.remove=function(){return Error("Unsupported operation")};function aj(a,b,c,d,e,f){this.N=a;this.H=b;this.root=c;this.fb=d;this.ob=e;this.G=f;this.C=16123663;this.O=139268;}h=aj.prototype;h.Cc=function(a,b){return null==b?this.fb?new Nh(null,this.ob):null:null==this.root?null:this.root.Sd(0,Jd(b),b,null)};h.toString=function(){return Bd(this)};
    h.keys=function(){return Wd(ti.g?ti.g(this):ti.call(null,this))};h.entries=function(){return new oi(z(z(this)))};h.values=function(){return Wd(ui.g?ui.g(this):ui.call(null,this))};h.has=function(a){return M(this,a)};h.get=function(a,b){return this.S(null,a,b)};
    h.forEach=function(a){for(var b=z(this),c=null,d=0,e=0;;)if(e<d){var f=c.V(null,e),g=H(f,0,null);f=H(f,1,null);a.h?a.h(f,g):a.call(null,f,g);e+=1;}else if(b=z(b))Ze(b)?(c=pd(b),b=qd(b),g=c,d=D(c),c=g):(c=A(b),g=H(c,0,null),f=H(c,1,null),a.h?a.h(f,g):a.call(null,f,g),b=C(b),c=null,d=0),e=0;else return null};h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){return null==b?this.fb?this.ob:c:null==this.root?c:this.root.Tc(0,Jd(b),b,c)};
    h.Ya=function(a,b,c){a=this.fb?b.j?b.j(c,null,this.ob):b.call(null,c,null,this.ob):c;return fe(a)?r(a):null!=this.root?ge(this.root.ed(b,a)):a};h.Aa=function(){var a=this.root?zd(this.root):ug();return this.fb?new $i(this.ob,a):a};h.T=function(){return this.N};h.ca=function(){return this.H};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=ae(this)};h.aa=function(a,b){return mi(this,b)};h.kd=function(){return new bj(this.root,this.H,this.fb,this.ob)};h.ua=function(){return Mc(xi,this.N)};
    h.nb=function(a,b){if(null==b)return this.fb?new aj(this.N,this.H-1,this.root,!1,null,null):this;if(null==this.root)return this;a=this.root.Ud(0,Jd(b),b);return a===this.root?this:new aj(this.N,this.H-1,a,this.fb,this.ob,null)};h.la=function(a,b,c){if(null==b)return this.fb&&c===this.ob?this:new aj(this.N,this.fb?this.H:this.H+1,this.root,!0,c,null);a=new Ai;b=(null==this.root?Li:this.root).fc(0,Jd(b),b,c,a);return b===this.root?this:new aj(this.N,a.o?this.H+1:this.H,b,this.fb,this.ob,null)};
    h.Ca=function(a,b){return null==b?this.fb:null==this.root?!1:this.root.Tc(0,Jd(b),b,bf)!==bf};h.ea=function(){if(0<this.H){var a=null!=this.root?this.root.Td():null;return this.fb?we(new Nh(null,this.ob),a):a}return null};h.U=function(a,b){return b===this.N?this:new aj(b,this.H,this.root,this.fb,this.ob,this.G)};
    h.ka=function(a,b){if(Ye(b))return this.la(null,jc(b,0),jc(b,1));a=this;for(b=z(b);;){if(null==b)return a;var c=A(b);if(Ye(c))a=vc(a,jc(c,0),jc(c,1)),b=C(b);else throw Error("conj on a map takes map entries or seqables of map entries");}};h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};
    h.g=function(a){return this.da(null,a)};h.h=function(a,b){return this.S(null,a,b)};var xi=new aj(null,0,null,!1,null,be);function cj(a){for(var b=a.length,c=0,d=hd(xi);;)if(c<b){var e=c+2;d=kd(d,a[c],a[c+1]);c=e;}else return jd(d)}function dj(a,b){for(var c=a.length,d=0,e=hd(xi);;)if(d<c){if(b.length<=d)throw Error(["No value supplied for key: ",p.g(a[d])].join(""));var f=d+1;e=kd(e,a[d],b[d]);d=f;}else return jd(e)}aj.prototype[Ub]=function(){return Wd(this)};
    function bj(a,b,c,d){this.Ba={};this.root=a;this.count=b;this.fb=c;this.ob=d;this.C=259;this.O=56;}function ej(a,b,c){if(a.Ba){if(null==b)a.ob!==c&&(a.ob=c),a.fb||(a.count+=1,a.fb=!0);else {var d=new Ai;b=(null==a.root?Li:a.root).hc(a.Ba,0,Jd(b),b,c,d);b!==a.root&&(a.root=b);d.o&&(a.count+=1);}return a}throw Error("assoc! after persistent!");}h=bj.prototype;h.ca=function(){if(this.Ba)return this.count;throw Error("count after persistent!");};
    h.da=function(a,b){return null==b?this.fb?this.ob:null:null==this.root?null:this.root.Tc(0,Jd(b),b)};h.S=function(a,b,c){return null==b?this.fb?this.ob:c:null==this.root?c:this.root.Tc(0,Jd(b),b,c)};
    h.nd=function(a,b){a:if(this.Ba)if(Vh(b))a=ej(this,Wh.g?Wh.g(b):Wh.call(null,b),Xh.g?Xh.g(b):Xh.call(null,b));else if(Ye(b))a=ej(this,b.g?b.g(0):b.call(null,0),b.g?b.g(1):b.call(null,1));else for(a=z(b),b=this;;){var c=A(a);if(n(c))a=C(a),b=ej(b,Wh.g?Wh.g(c):Wh.call(null,c),Xh.g?Xh.g(c):Xh.call(null,c));else {a=b;break a}}else throw Error("conj! after persistent");return a};
    h.Id=function(){if(this.Ba){this.Ba=null;var a=new aj(null,this.count,this.root,this.fb,this.ob,null);}else throw Error("persistent! called twice");return a};h.md=function(a,b,c){return ej(this,b,c)};h.Re=function(a,b){if(this.Ba)null==b?this.fb&&(this.fb=!1,this.ob=null,--this.count):null!=this.root&&(a=new Ai,b=this.root.Vd(this.Ba,0,Jd(b),b,a),b!==this.root&&(this.root=b),a.o&&--this.count);else throw Error("dissoc! after persistent!");return this};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.da(null,a)};h.h=function(a,b){return this.S(null,a,b)};function gj(a,b,c){for(var d=b;;)if(null!=a)b=c?a.left:a.right,d=De.h(d,a),a=b;else return d}
    function hj(a,b,c,d,e){this.N=a;this.stack=b;this.Vc=c;this.H=d;this.G=e;this.C=32374990;this.O=0;}h=hj.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.N};h.Da=function(){var a=A(this.stack);a=gj(this.Vc?a.right:a.left,C(this.stack),this.Vc);return null==a?null:new hj(null,a,this.Vc,this.H-1,null)};h.ca=function(){return 0>this.H?D(C(this))+1:this.H};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return Oe(this.stack)};h.Wa=function(){var a=A(this.stack);a=gj(this.Vc?a.right:a.left,C(this.stack),this.Vc);return null!=a?new hj(null,a,this.Vc,this.H-1,null):Ud};h.ea=function(){return this};h.U=function(a,b){return b===this.N?this:new hj(b,this.stack,this.Vc,this.H,this.G)};
    h.ka=function(a,b){return we(b,this)};hj.prototype[Ub]=function(){return Wd(this)};function ij(a,b,c){return new hj(null,gj(a,null,b),b,c,null)}function jj(a,b,c,d){return c instanceof kj?c.left instanceof kj?new kj(c.key,c.o,c.left.yc(),new lj(a,b,c.right,d)):c.right instanceof kj?new kj(c.right.key,c.right.o,new lj(c.key,c.o,c.left,c.right.left),new lj(a,b,c.right.right,d)):new lj(a,b,c,d):new lj(a,b,c,d)}
    function mj(a,b,c,d){return d instanceof kj?d.right instanceof kj?new kj(d.key,d.o,new lj(a,b,c,d.left),d.right.yc()):d.left instanceof kj?new kj(d.left.key,d.left.o,new lj(a,b,c,d.left.left),new lj(d.key,d.o,d.left.right,d.right)):new lj(a,b,c,d):new lj(a,b,c,d)}
    function nj(a,b,c,d){if(c instanceof kj)return new kj(a,b,c.yc(),d);if(d instanceof lj)return mj(a,b,c,d.Zd());if(d instanceof kj&&d.left instanceof lj)return new kj(d.left.key,d.left.o,new lj(a,b,c,d.left.left),mj(d.key,d.o,d.left.right,d.right.Zd()));throw Error("red-black tree invariant violation");}
    function oj(a,b,c,d){if(d instanceof kj)return new kj(a,b,c,d.yc());if(c instanceof lj)return jj(a,b,c.Zd(),d);if(c instanceof kj&&c.right instanceof lj)return new kj(c.right.key,c.right.o,jj(c.key,c.o,c.left.Zd(),c.right.left),new lj(a,b,c.right.right,d));throw Error("red-black tree invariant violation");}
    var pj=function pj(a,b,c){var e=null!=a.left?function(){var l=a.left;return pj.j?pj.j(l,b,c):pj.call(null,l,b,c)}():c;if(fe(e))return e;var f=function(){var l=a.key,m=a.o;return b.j?b.j(e,l,m):b.call(null,e,l,m)}();if(fe(f))return f;if(null!=a.right){var g=a.right;return pj.j?pj.j(g,b,f):pj.call(null,g,b,f)}return f};function lj(a,b,c,d){this.key=a;this.o=b;this.left=c;this.right=d;this.G=null;this.C=166619935;this.O=0;}h=lj.prototype;
    h.Cc=function(a,b){switch(b){case 0:return new Nh(0,this.key);case 1:return new Nh(1,this.o);default:return null}};h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();h.xf=function(a){return a.Af(this)};h.Zd=function(){return new kj(this.key,this.o,this.left,this.right)};h.yc=function(){return this};h.wf=function(a){return a.zf(this)};h.replace=function(a,b,c,d){return new lj(a,b,c,d)};
    h.zf=function(a){return new lj(a.key,a.o,this,a.right)};h.Af=function(a){return new lj(a.key,a.o,a.left,this)};h.ed=function(a,b){return pj(this,a,b)};h.da=function(a,b){return this.ra(null,b,null)};h.S=function(a,b,c){return this.ra(null,b,c)};h.V=function(a,b){if(0===b)return this.key;if(1===b)return this.o;throw Error("Index out of bounds");};h.ra=function(a,b,c){return 0===b?this.key:1===b?this.o:c};h.Lb=function(a,b,c){return (new S(null,2,5,T,[this.key,this.o],null)).Lb(null,b,c)};h.T=function(){return null};
    h.ca=function(){return 2};h.Oe=function(){return this.key};h.Pe=function(){return this.o};h.Vb=function(){return this.o};h.Wb=function(){return new S(null,1,5,T,[this.key],null)};h.Dc=function(){return new Rd([this.o,this.key],0,null)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return null};h.Ta=function(a,b){return ie(this,b)};h.Ua=function(a,b,c){return je(this,b,c)};
    h.la=function(a,b,c){return He.j(new S(null,2,5,T,[this.key,this.o],null),b,c)};h.Ca=function(a,b){return 0===b||1===b};h.ea=function(){return new Rd([this.key,this.o],0,null)};h.U=function(a,b){return Mc(new S(null,2,5,T,[this.key,this.o],null),b)};h.ka=function(a,b){return new S(null,3,5,T,[this.key,this.o,b],null)};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.V(null,a)};h.h=function(a,b){return this.ra(null,a,b)};lj.prototype[Ub]=function(){return Wd(this)};
    function kj(a,b,c,d){this.key=a;this.o=b;this.left=c;this.right=d;this.G=null;this.C=166619935;this.O=0;}h=kj.prototype;h.Cc=function(a,b){switch(b){case 0:return new Nh(0,this.key);case 1:return new Nh(1,this.o);default:return null}};
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();h.xf=function(a){return new kj(this.key,this.o,this.left,a)};h.Zd=function(){throw Error("red-black tree invariant violation");};h.yc=function(){return new lj(this.key,this.o,this.left,this.right)};
    h.wf=function(a){return new kj(this.key,this.o,a,this.right)};h.replace=function(a,b,c,d){return new kj(a,b,c,d)};h.zf=function(a){return this.left instanceof kj?new kj(this.key,this.o,this.left.yc(),new lj(a.key,a.o,this.right,a.right)):this.right instanceof kj?new kj(this.right.key,this.right.o,new lj(this.key,this.o,this.left,this.right.left),new lj(a.key,a.o,this.right.right,a.right)):new lj(a.key,a.o,this,a.right)};
    h.Af=function(a){return this.right instanceof kj?new kj(this.key,this.o,new lj(a.key,a.o,a.left,this.left),this.right.yc()):this.left instanceof kj?new kj(this.left.key,this.left.o,new lj(a.key,a.o,a.left,this.left.left),new lj(this.key,this.o,this.left.right,this.right)):new lj(a.key,a.o,a.left,this)};h.ed=function(a,b){return pj(this,a,b)};h.da=function(a,b){return this.ra(null,b,null)};h.S=function(a,b,c){return this.ra(null,b,c)};
    h.V=function(a,b){if(0===b)return this.key;if(1===b)return this.o;throw Error("Index out of bounds");};h.ra=function(a,b,c){return 0===b?this.key:1===b?this.o:c};h.Lb=function(a,b,c){return (new S(null,2,5,T,[this.key,this.o],null)).Lb(null,b,c)};h.T=function(){return null};h.ca=function(){return 2};h.Oe=function(){return this.key};h.Pe=function(){return this.o};h.Vb=function(){return this.o};h.Wb=function(){return new S(null,1,5,T,[this.key],null)};
    h.Dc=function(){return new Rd([this.o,this.key],0,null)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return null};h.Ta=function(a,b){return ie(this,b)};h.Ua=function(a,b,c){return je(this,b,c)};h.la=function(a,b,c){return He.j(new S(null,2,5,T,[this.key,this.o],null),b,c)};h.Ca=function(a,b){return 0===b||1===b};h.ea=function(){return new Rd([this.key,this.o],0,null)};
    h.U=function(a,b){return Mc(new S(null,2,5,T,[this.key,this.o],null),b)};h.ka=function(a,b){return new S(null,3,5,T,[this.key,this.o,b],null)};h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.V(null,a)};
    h.h=function(a,b){return this.ra(null,a,b)};kj.prototype[Ub]=function(){return Wd(this)};
    var qj=function qj(a,b,c,d,e){if(null==b)return new kj(c,d,null,null);var g=function(){var l=b.key;return a.h?a.h(c,l):a.call(null,c,l)}();if(0===g)return e[0]=b,null;if(0>g)return g=function(){var l=b.left;return qj.R?qj.R(a,l,c,d,e):qj.call(null,a,l,c,d,e)}(),null!=g?b.wf(g):null;g=function(){var l=b.right;return qj.R?qj.R(a,l,c,d,e):qj.call(null,a,l,c,d,e)}();return null!=g?b.xf(g):null},rj=function rj(a,b){if(null==a)return b;if(null==b)return a;if(a instanceof kj){if(b instanceof kj){var d=function(){var e=
    a.right,f=b.left;return rj.h?rj.h(e,f):rj.call(null,e,f)}();return d instanceof kj?new kj(d.key,d.o,new kj(a.key,a.o,a.left,d.left),new kj(b.key,b.o,d.right,b.right)):new kj(a.key,a.o,a.left,new kj(b.key,b.o,d,b.right))}return new kj(a.key,a.o,a.left,function(){var e=a.right;return rj.h?rj.h(e,b):rj.call(null,e,b)}())}if(b instanceof kj)return new kj(b.key,b.o,function(){var e=b.left;return rj.h?rj.h(a,e):rj.call(null,a,e)}(),b.right);d=function(){var e=a.right,f=b.left;return rj.h?rj.h(e,f):rj.call(null,
    e,f)}();return d instanceof kj?new kj(d.key,d.o,new lj(a.key,a.o,a.left,d.left),new lj(b.key,b.o,d.right,b.right)):nj(a.key,a.o,a.left,new lj(b.key,b.o,d,b.right))},sj=function sj(a,b,c,d){if(null!=b){var f=function(){var g=b.key;return a.h?a.h(c,g):a.call(null,c,g)}();if(0===f)return d[0]=b,rj(b.left,b.right);if(0>f)return f=function(){var g=b.left;return sj.D?sj.D(a,g,c,d):sj.call(null,a,g,c,d)}(),null!=f||null!=d[0]?b.left instanceof lj?nj(b.key,b.o,f,b.right):new kj(b.key,b.o,f,b.right):null;
    f=function(){var g=b.right;return sj.D?sj.D(a,g,c,d):sj.call(null,a,g,c,d)}();return null!=f||null!=d[0]?b.right instanceof lj?oj(b.key,b.o,b.left,f):new kj(b.key,b.o,b.left,f):null}return null},tj=function tj(a,b,c,d){var f=b.key,g=a.h?a.h(c,f):a.call(null,c,f);return 0===g?b.replace(f,d,b.left,b.right):0>g?b.replace(f,b.o,function(){var l=b.left;return tj.D?tj.D(a,l,c,d):tj.call(null,a,l,c,d)}(),b.right):b.replace(f,b.o,b.left,function(){var l=b.right;return tj.D?tj.D(a,l,c,d):tj.call(null,a,l,
    c,d)}())};function uj(a,b,c,d,e){this.Pb=a;this.Oc=b;this.H=c;this.N=d;this.G=e;this.C=418776847;this.O=8192;}h=uj.prototype;h.Cc=function(a,b){return vj(this,b)};h.forEach=function(a){for(var b=z(this),c=null,d=0,e=0;;)if(e<d){var f=c.V(null,e),g=H(f,0,null);f=H(f,1,null);a.h?a.h(f,g):a.call(null,f,g);e+=1;}else if(b=z(b))Ze(b)?(c=pd(b),b=qd(b),g=c,d=D(c),c=g):(c=A(b),g=H(c,0,null),f=H(c,1,null),a.h?a.h(f,g):a.call(null,f,g),b=C(b),c=null,d=0),e=0;else return null};
    h.get=function(a,b){return this.S(null,a,b)};h.entries=function(){return new oi(z(z(this)))};h.toString=function(){return Bd(this)};h.keys=function(){return Wd(ti.g?ti.g(this):ti.call(null,this))};h.values=function(){return Wd(ui.g?ui.g(this):ui.call(null,this))};function vj(a,b){for(var c=a.Oc;;)if(null!=c){var d=c.key;d=a.Pb.h?a.Pb.h(b,d):a.Pb.call(null,b,d);if(0===d)return c;c=0>d?c.left:c.right;}else return null}h.has=function(a){return M(this,a)};h.da=function(a,b){return this.S(null,b,null)};
    h.S=function(a,b,c){a=vj(this,b);return null!=a?a.o:c};h.Ya=function(a,b,c){return null!=this.Oc?ge(pj(this.Oc,b,c)):c};h.T=function(){return this.N};h.ca=function(){return this.H};h.Dc=function(){return 0<this.H?ij(this.Oc,!1,this.H):null};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=ae(this)};h.aa=function(a,b){return mi(this,b)};h.ua=function(){return new uj(this.Pb,null,0,this.N,0)};
    h.nb=function(a,b){a=[null];b=sj(this.Pb,this.Oc,b,a);return null==b?null==qe(a,0)?this:new uj(this.Pb,null,0,this.N,null):new uj(this.Pb,b.yc(),this.H-1,this.N,null)};h.la=function(a,b,c){a=[null];var d=qj(this.Pb,this.Oc,b,c,a);return null==d?(a=qe(a,0),x.h(c,a.o)?this:new uj(this.Pb,tj(this.Pb,this.Oc,b,c),this.H,this.N,null)):new uj(this.Pb,d.yc(),this.H+1,this.N,null)};h.Ca=function(a,b){return null!=vj(this,b)};h.ea=function(){return 0<this.H?ij(this.Oc,!0,this.H):null};
    h.U=function(a,b){return b===this.N?this:new uj(this.Pb,this.Oc,this.H,b,this.G)};h.ka=function(a,b){if(Ye(b))return this.la(null,jc(b,0),jc(b,1));a=this;for(b=z(b);;){if(null==b)return a;var c=A(b);if(Ye(c))a=vc(a,jc(c,0),jc(c,1)),b=C(b);else throw Error("conj on a map takes map entries or seqables of map entries");}};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.da(null,a)};h.h=function(a,b){return this.S(null,a,b)};var wj=new uj(hf,null,0,null,be);uj.prototype[Ub]=function(){return Wd(this)};
    var rg=function rg(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return rg.l(0<c.length?new Rd(c.slice(0),0,null):null)};rg.l=function(a){a=z(a);for(var b=hd(xi);;)if(a){var c=C(a);if(null==c)throw Error(["No value supplied for key: ",p.g(A(a))].join(""));var d=C(c);b=eg(b,A(a),A(c));a=d;}else return jd(b)};rg.I=0;rg.M=function(a){return this.l(z(a))};
    var xj=function xj(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return xj.l(0<c.length?new Rd(c.slice(0),0,null):null)};xj.l=function(a){a=a instanceof Rd&&0===a.P?a.A:Zb(a);if(!Mg(a.length))throw Error(["No value supplied for key: ",p.g(Ce(a))].join(""));return Ie(a)};xj.I=0;xj.M=function(a){return this.l(z(a))};
    function yj(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;a:for(b=z(0<b.length?new Rd(b.slice(0),0,null):null),d=wj;;)if(b)c=C(C(b)),d=He.j(d,A(b),Ae(b)),b=c;else break a;return d}function zj(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;a:for(c=arguments[0],b=z(1<b.length?new Rd(b.slice(1),0,null):null),d=new uj(kf(c),null,0,null,0);;)if(b)c=C(C(b)),d=He.j(d,A(b),Ae(b)),b=c;else break a;return d}
    function Aj(a,b){this.sa=a;this.Nb=b;this.C=32374988;this.O=0;}h=Aj.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.Nb};h.Da=function(){var a=(null!=this.sa?this.sa.C&128||tb===this.sa.Gd||(this.sa.C?0:Qb(oc,this.sa)):Qb(oc,this.sa))?this.sa.Da(null):C(this.sa);return null==a?null:new Aj(a,null)};h.ba=function(){return Zd(this)};
    h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return this.sa.Va(null).key};h.Wa=function(){var a=(null!=this.sa?this.sa.C&128||tb===this.sa.Gd||(this.sa.C?0:Qb(oc,this.sa)):Qb(oc,this.sa))?this.sa.Da(null):C(this.sa);return null!=a?new Aj(a,null):Ud};h.ea=function(){return this};h.U=function(a,b){return b===this.Nb?this:new Aj(this.sa,b)};h.ka=function(a,b){return we(b,this)};
    Aj.prototype[Ub]=function(){return Wd(this)};function ti(a){return (a=z(a))?new Aj(a,null):null}function Wh(a){return Ac(a)}function Bj(a,b){this.sa=a;this.Nb=b;this.C=32374988;this.O=0;}h=Bj.prototype;h.toString=function(){return Bd(this)};h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.T=function(){return this.Nb};h.Da=function(){var a=(null!=this.sa?this.sa.C&128||tb===this.sa.Gd||(this.sa.C?0:Qb(oc,this.sa)):Qb(oc,this.sa))?this.sa.Da(null):C(this.sa);return null==a?null:new Bj(a,null)};h.ba=function(){return Zd(this)};
    h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe(b,this)};h.Ua=function(a,b,c){return ze(b,c,this)};h.Va=function(){return this.sa.Va(null).o};h.Wa=function(){var a=(null!=this.sa?this.sa.C&128||tb===this.sa.Gd||(this.sa.C?0:Qb(oc,this.sa)):Qb(oc,this.sa))?this.sa.Da(null):C(this.sa);return null!=a?new Bj(a,null):Ud};h.ea=function(){return this};h.U=function(a,b){return b===this.Nb?this:new Bj(this.sa,b)};h.ka=function(a,b){return we(b,this)};
    Bj.prototype[Ub]=function(){return Wd(this)};function ui(a){return (a=z(a))?new Bj(a,null):null}function Xh(a){return Bc(a)}var Cj=function Cj(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Cj.l(0<c.length?new Rd(c.slice(0),0,null):null)};Cj.l=function(a){return n(Lg(qf,a))?$b.h(function(b,c){return De.h(n(b)?b:R,c)},a):null};Cj.I=0;Cj.M=function(a){return this.l(z(a))};
    var Dj=function Dj(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Dj.l(arguments[0],1<c.length?new Rd(c.slice(1),0,null):null)};Dj.l=function(a,b){if(n(Lg(qf,b))){var c=function(d,e){var f=Ac(e),g=Bc(e);if(M(d,f)){e=He.j;var l=u.h(d,f);g=a.h?a.h(l,g):a.call(null,l,g);d=e.call(He,d,f,g);}else d=He.j(d,f,g);return d};return $b.h(function(d,e){return $b.j(c,n(d)?d:R,z(e))},b)}return null};Dj.I=1;Dj.M=function(a){var b=A(a);a=C(a);return this.l(b,a)};
    function Ej(a,b){var c=R;for(b=z(b);;)if(b){var d=A(b),e=u.j(a,d,kc);c=sg.h(e,kc)?He.j(c,d,e):c;b=C(b);}else return Mc(c,Ne(a))}function Gj(a){this.vd=a;}Gj.prototype.wa=function(){return this.vd.wa()};Gj.prototype.next=function(){if(this.vd.wa())return this.vd.next().key;throw Error("No such element");};Gj.prototype.remove=function(){return Error("Unsupported operation")};function Hj(a,b,c){this.N=a;this.Jc=b;this.G=c;this.C=15077647;this.O=139268;}h=Hj.prototype;h.toString=function(){return Bd(this)};
    h.keys=function(){return Wd(z(this))};h.entries=function(){return new pi(z(z(this)))};h.values=function(){return Wd(z(this))};h.has=function(a){return M(this,a)};h.forEach=function(a){for(var b=z(this),c=null,d=0,e=0;;)if(e<d){var f=c.V(null,e),g=H(f,0,null);f=H(f,1,null);a.h?a.h(f,g):a.call(null,f,g);e+=1;}else if(b=z(b))Ze(b)?(c=pd(b),b=qd(b),g=c,d=D(c),c=g):(c=A(b),g=H(c,0,null),f=H(c,1,null),a.h?a.h(f,g):a.call(null,f,g),b=C(b),c=null,d=0),e=0;else return null};
    h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){a=xc(this.Jc,b);return n(a)?Ac(a):c};h.Aa=function(){return new Gj(zd(this.Jc))};h.T=function(){return this.N};h.ca=function(){return dc(this.Jc)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=ae(this)};h.aa=function(a,b){if(a=Te(b))if(a=D(this)===D(b))try{return pf(function(c,d){return (c=M(b,d))?c:ee(!1)},!0,this.Jc)}catch(c){if(c instanceof Error)return !1;throw c;}else return a;else return a};h.kd=function(){return new Ij(hd(this.Jc))};
    h.ua=function(){return Mc(Jj,this.N)};h.Jf=function(a,b){return new Hj(this.N,zc(this.Jc,b),null)};h.ea=function(){return ti(this.Jc)};h.U=function(a,b){return b===this.N?this:new Hj(b,this.Jc,this.G)};h.ka=function(a,b){return new Hj(this.N,He.j(this.Jc,b,null),null)};h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};
    h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return this.da(null,a)};h.h=function(a,b){return this.S(null,a,b)};var Jj=new Hj(null,R,be);function Kj(a){for(var b=a.length,c=hd(Jj),d=0;;)if(d<b)id(c,a[d]),d+=1;else break;return jd(c)}Hj.prototype[Ub]=function(){return Wd(this)};function Ij(a){this.Nc=a;this.O=136;this.C=259;}h=Ij.prototype;h.nd=function(a,b){this.Nc=kd(this.Nc,b,null);return this};h.Id=function(){return new Hj(null,jd(this.Nc),null)};
    h.ca=function(){return D(this.Nc)};h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){return rc(this.Nc,b,bf)===bf?c:b};h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return rc(this.Nc,a,bf)===bf?null:a};
    h.h=function(a,b){return rc(this.Nc,a,bf)===bf?b:a};function Lj(a){if(Te(a))return Me(a,null);a=z(a);if(null==a)return Jj;if(a instanceof Rd&&0===a.P)return Kj(a.A);for(var b=hd(Jj);;)if(null!=a){var c=C(a);b=id(b,mc(a));a=c;}else return jd(b)}function Mj(a){return function e(c,d){return new Sf(null,function(){var f;a:{var g=c;for(f=d;;){var l=g;g=H(l,0,null);if(l=z(l))if(M(f,g))g=Td(l);else {f=we(g,e(Td(l),De.h(f,g)));break a}else {f=null;break a}}}return f},null,null)}(a,Jj)}
    function Nj(a){for(var b=G;;)if(C(a))b=De.h(b,A(a)),a=C(a);else return z(b)}function Rf(a){if(null!=a&&(a.O&4096||tb===a.Jg))return a.Ed(null);if("string"===typeof a)return a;throw Error(["Doesn't support name: ",p.g(a)].join(""));}function Oj(a,b){var c=hd(R);a=z(a);for(b=z(b);;)if(a&&b)c=eg(c,A(a),A(b)),a=C(a),b=C(b);else return jd(c)}
    var Pj=function Pj(a){switch(arguments.length){case 2:return Pj.h(arguments[0],arguments[1]);case 3:return Pj.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Pj.l(arguments[0],arguments[1],arguments[2],new Rd(c.slice(3),0,null))}};Pj.h=function(a,b){return b};Pj.j=function(a,b,c){return (a.g?a.g(b):a.call(null,b))>(a.g?a.g(c):a.call(null,c))?b:c};
    Pj.l=function(a,b,c,d){return $b.j(function(e,f){return Pj.j(a,e,f)},Pj.j(a,b,c),d)};Pj.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);d=C(d);return this.l(b,a,c,d)};Pj.I=3;function Qj(){this.A=[];}Qj.prototype.add=function(a){return this.A.push(a)};Qj.prototype.size=function(){return this.A.length};Qj.prototype.clear=function(){return this.A=[]};Qj.prototype.ud=function(){return 0===this.A.length};
    function Rj(){return function(a){var b=new Qj;return function(){function c(g,l){b.add(l);return 2===b.size()?(l=Uh(b.A),b.clear(),a.h?a.h(g,l):a.call(null,g,l)):g}function d(g){if(!n(b.ud())){var l=Uh(b.A);b.clear();g=ge(a.h?a.h(g,l):a.call(null,g,l));}return a.g?a.g(g):a.call(null,g)}function e(){return a.v?a.v():a.call(null)}var f=null;f=function(g,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,g);case 2:return c.call(this,g,l)}throw Error("Invalid arity: "+arguments.length);
    };f.v=e;f.g=d;f.h=c;return f}()}}function Sj(a,b){return new Sf(null,function(){var c=z(b);if(c){var d=A(c);d=a.g?a.g(d):a.call(null,d);c=n(d)?we(A(c),Sj(a,Td(c))):null;}else c=null;return c},null,null)}function Tj(a,b,c){this.start=a;this.step=b;this.count=c;this.C=82;this.O=0;}h=Tj.prototype;h.ca=function(){return this.count};h.Va=function(){return this.start};h.V=function(a,b){return this.start+b*this.step};h.ra=function(a,b,c){return 0<=b&&b<this.count?this.start+b*this.step:c};
    h.Ne=function(){if(1>=this.count)throw Error("-drop-first of empty chunk");return new Tj(this.start+this.step,this.step,this.count-1)};function Uj(a,b,c){this.P=a;this.end=b;this.step=c;}Uj.prototype.wa=function(){return 0<this.step?this.P<this.end:this.P>this.end};Uj.prototype.next=function(){var a=this.P;this.P+=this.step;return a};function Vj(a,b,c,d,e,f,g){this.N=a;this.start=b;this.end=c;this.step=d;this.$a=e;this.Bc=f;this.G=g;this.C=32375006;this.O=140800;}h=Vj.prototype;h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.Pd=function(){if(null==this.$a){var a=this.ca(null);32<a?(this.Bc=new Vj(null,this.start+32*this.step,this.end,this.step,null,null,null),this.$a=new Tj(this.start,this.step,32)):this.$a=new Tj(this.start,this.step,a);}};
    h.V=function(a,b){if(0<=b&&b<this.ca(null))return this.start+b*this.step;if(0<=b&&this.start>this.end&&0===this.step)return this.start;throw Error("Index out of bounds");};h.ra=function(a,b,c){return 0<=b&&b<this.ca(null)?this.start+b*this.step:0<=b&&this.start>this.end&&0===this.step?this.start:c};h.Aa=function(){return new Uj(this.start,this.end,this.step)};h.T=function(){return this.N};
    h.Da=function(){return 0<this.step?this.start+this.step<this.end?new Vj(null,this.start+this.step,this.end,this.step,null,null,null):null:this.start+this.step>this.end?new Vj(null,this.start+this.step,this.end,this.step,null,null,null):null};h.ca=function(){return Math.ceil((this.end-this.start)/this.step)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return ie(this,b)};
    h.Ua=function(a,b,c){for(a=this.start;;)if(0<this.step?a<this.end:a>this.end){c=b.h?b.h(c,a):b.call(null,c,a);if(fe(c))return r(c);a+=this.step;}else return c};h.Va=function(){return this.start};h.Wa=function(){var a=this.Da(null);return null==a?Ud:a};h.ea=function(){return this};h.Cd=function(){this.Pd();return this.$a};h.Qc=function(){this.Pd();return null==this.Bc?Ud:this.Bc};h.U=function(a,b){return b===this.N?this:new Vj(b,this.start,this.end,this.step,this.$a,this.Bc,this.G)};
    h.ka=function(a,b){return we(b,this)};h.je=function(){return z(this.Qc(null))};Vj.prototype[Ub]=function(){return Wd(this)};function Wj(a,b,c,d,e,f,g){this.N=a;this.start=b;this.end=c;this.step=d;this.$a=e;this.Bc=f;this.G=g;this.O=140800;this.C=32374988;}h=Wj.prototype;h.toString=function(){return Bd(this)};
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();
    h.Pd=function(){if(null==this.$a){var a=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];a:{var b=0;for(var c=this.start;;)if(32>b){if(a[b]=c,b+=1,c+=this.step,!(0<this.step?c<this.end:c>this.end)){b=this.$a=new Vf(a,0,b);break a}}else {b=c;break a}}null==this.$a&&(this.$a=new Vf(a,0,32),(0<this.step?b<this.end:b>this.end)&&(this.Bc=new Wj(null,b,this.end,this.step,null,null,null)));}};
    h.Aa=function(){return new Uj(this.start,this.end,this.step)};h.T=function(){return this.N};h.Da=function(){return 0<this.step?this.start+this.step<this.end?new Wj(null,this.start+this.step,this.end,this.step,null,null,null):null:this.start+this.step>this.end?new Wj(null,this.start+this.step,this.end,this.step,null,null,null):null};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=Zd(this)};h.aa=function(a,b){return ve(this,b)};h.ua=function(){return Ud};h.Ta=function(a,b){return xe(b,this)};
    h.Ua=function(a,b,c){for(a=this.start;;)if(0<this.step?a<this.end:a>this.end){c=b.h?b.h(c,a):b.call(null,c,a);if(fe(c))return r(c);a+=this.step;}else return c};h.Va=function(){return this.start};h.Wa=function(){var a=this.Da(null);return null==a?Ud:a};h.ea=function(){return this};h.Cd=function(){this.Pd();return this.$a};h.Qc=function(){this.Pd();return null==this.Bc?Ud:this.Bc};h.U=function(a,b){return b===this.N?this:new Wj(b,this.start,this.end,this.step,this.$a,this.Bc,this.G)};
    h.ka=function(a,b){return we(b,this)};h.je=function(){return z(this.Qc(null))};Wj.prototype[Ub]=function(){return Wd(this)};function sc(a){return 1>=a?Ud:ff(1)&&ff(a)&&ff(1)?new Vj(null,1,a,1,null,null,null):new Wj(null,1,a,1,null,null,null)}function Yj(a,b){return new Sf(null,function(){var c=z(b);return c?we(A(c),Yj(a,eh(a,c))):null},null,null)}function Zj(a){return jd($b.j(function(b,c){return eg(b,c,u.j(b,c,0)+1)},hd(R),a))}
    function ak(a,b){return function(){function c(m,q,t){return new S(null,2,5,T,[a.j?a.j(m,q,t):a.call(null,m,q,t),b.j?b.j(m,q,t):b.call(null,m,q,t)],null)}function d(m,q){return new S(null,2,5,T,[a.h?a.h(m,q):a.call(null,m,q),b.h?b.h(m,q):b.call(null,m,q)],null)}function e(m){return new S(null,2,5,T,[a.g?a.g(m):a.call(null,m),b.g?b.g(m):b.call(null,m)],null)}function f(){return new S(null,2,5,T,[a.v?a.v():a.call(null),b.v?b.v():b.call(null)],null)}var g=null,l=function(){function m(t,v,y,E){var J=null;
    if(3<arguments.length){J=0;for(var W=Array(arguments.length-3);J<W.length;)W[J]=arguments[J+3],++J;J=new Rd(W,0,null);}return q.call(this,t,v,y,J)}function q(t,v,y,E){return new S(null,2,5,T,[og(a,t,v,y,E),og(b,t,v,y,E)],null)}m.I=3;m.M=function(t){var v=A(t);t=C(t);var y=A(t);t=C(t);var E=A(t);t=Td(t);return q(v,y,E,t)};m.l=q;return m}();g=function(m,q,t,v){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,m);case 2:return d.call(this,m,q);case 3:return c.call(this,m,q,
    t);default:var y=null;if(3<arguments.length){y=0;for(var E=Array(arguments.length-3);y<E.length;)E[y]=arguments[y+3],++y;y=new Rd(E,0,null);}return l.l(m,q,t,y)}};g.I=3;g.M=l.M;g.v=f;g.g=e;g.h=d;g.j=c;g.l=l.l;return g}()}function bk(a){a:for(var b=a;;)if(b=z(b))b=C(b);else break a;return a}
    function ck(a,b){if("string"===typeof b)return a=a.exec(b),null!=a&&x.h(a[0],b)?1===a.length?a[0]:Uh(a):null;throw new TypeError("re-matches must match against a string.");}function dk(a,b){if("string"===typeof b)return a=a.exec(b),null==a?null:1===a.length?a[0]:Uh(a);throw new TypeError("re-find must match against a string.");}
    var ek=function ek(a,b){var d=a.exec(b);if(null==d)return null;var e=d[0],f=1===d.length?e:Uh(d);return we(f,new Sf(null,function(){var g=e.length;g=d.index+(1>g?1:g);return g<=b.length?(g=b.substring(g),ek.h?ek.h(a,g):ek.call(null,a,g)):null},null,null))};function fk(a){if(a instanceof RegExp)return a;var b=dk(/^\(\?([idmsux]*)\)/,a),c=H(b,0,null);b=H(b,1,null);return new RegExp(a.substring(null==c?0:c.length),n(b)?b:"")}
    function gk(a,b,c,d,e,f,g){var l=zb;zb=null==zb?null:zb-1;try{if(null!=zb&&0>zb)return ad(a,"#");ad(a,c);if(0===mb.g(f))z(g)&&ad(a,function(){var E=Pc.g(f);return n(E)?E:"..."}());else {if(z(g)){var m=A(g);b.j?b.j(m,a,f):b.call(null,m,a,f);}for(var q=C(g),t=mb.g(f)-1;;)if(!q||null!=t&&0===t){z(q)&&0===t&&(ad(a,d),ad(a,function(){var E=Pc.g(f);return n(E)?E:"..."}()));break}else {ad(a,d);var v=A(q);c=a;g=f;b.j?b.j(v,c,g):b.call(null,v,c,g);var y=C(q);c=t-1;q=y;t=c;}}return ad(a,e)}finally{zb=l;}}
    function ik(a,b){b=z(b);for(var c=null,d=0,e=0;;)if(e<d){var f=c.V(null,e);ad(a,f);e+=1;}else if(b=z(b))c=b,Ze(c)?(b=pd(c),d=qd(c),c=b,f=D(b),b=d,d=f):(f=A(c),ad(a,f),b=C(c),c=null,d=0),e=0;else return null}function jk(a){if(null==vb)throw Error("No *print-fn* fn set for evaluation environment");vb.call(null,a);return null}var kk={'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"};
    function lk(a){return ['"',p.g(a.replace(RegExp('[\\\\"\b\f\n\r\t]',"g"),function(b){return kk[b]})),'"'].join("")}function mk(a,b){return (a=ef(u.h(a,kb)))?(a=null!=b?b.C&131072||tb===b.Dd?!0:!1:!1)?null!=Ne(b):a:a}
    function nk(a,b,c){if(null==a)return ad(b,"nil");if(mk(c,a)){ad(b,"^");var d=Ne(a);ok.j?ok.j(d,b,c):ok.call(null,d,b,c);ad(b," ");}if(a.Za)return a.ab(b);if(null!=a?a.C&2147483648||tb===a.qa||(a.C?0:Qb(cd,a)):Qb(cd,a))return dd(a,b,c);if(!0===a||!1===a)return ad(b,p.g(a));if("number"===typeof a)return ad(b,isNaN(a)?"##NaN":a===Number.POSITIVE_INFINITY?"##Inf":a===Number.NEGATIVE_INFINITY?"##-Inf":p.g(a));if(null!=a&&a.constructor===Object)return ad(b,"#js "),d=ch.h(function(f){return new Nh(null!=
    ck(/[A-Za-z_\*\+\?!\-'][\w\*\+\?!\-']*/,f)?Qf.g(f):f,a[f])},Va(a)),pk.D?pk.D(d,ok,b,c):pk.call(null,d,ok,b,c);if(Jb(a))return gk(b,ok,"#js ["," ","]",c,a);if("string"===typeof a)return n(ib.g(c))?ad(b,lk(a)):ad(b,a);if("function"===typeof a){var e=a.name;c=n(function(){var f=null==e;return f?f:Ya(e)}())?"Function":e;return ik(b,F(["#object[",c,n(!1)?[' "',p.g(a),'"'].join(""):"","]"]))}if(a instanceof Date)return c=function(f,g){for(f=p.g(f);;)if(f.length<g)f=["0",f].join("");else return f},ik(b,
    F(['#inst "',c(a.getUTCFullYear(),4),"-",c(a.getUTCMonth()+1,2),"-",c(a.getUTCDate(),2),"T",c(a.getUTCHours(),2),":",c(a.getUTCMinutes(),2),":",c(a.getUTCSeconds(),2),".",c(a.getUTCMilliseconds(),3),"-",'00:00"']));if(a instanceof RegExp)return ik(b,F(['#"',a.source,'"']));if("symbol"===ba(a)||"undefined"!==typeof Symbol&&a instanceof Symbol)return ik(b,F(["#object[",a.toString(),"]"]));if(n(function(){var f=null==a?null:a.constructor;return null==f?null:f.Xa}()))return ik(b,F(["#object[",a.constructor.Xa.replace(RegExp("/",
    "g"),"."),"]"]));e=function(){var f=null==a?null:a.constructor;return null==f?null:f.name}();c=n(function(){var f=null==e;return f?f:Ya(e)}())?"Object":e;return null==a.constructor?ik(b,F(["#object[",c,"]"])):ik(b,F(["#object[",c," ",p.g(a),"]"]))}function ok(a,b,c){var d=wd.g(c);return n(d)?(c=He.j(c,kh,nk),d.j?d.j(a,b,c):d.call(null,a,b,c)):nk(a,b,c)}
    function sk(a,b){if(Re(a))b="";else {var c=p,d=c.g,e=new pb,f=new Ad(e);ok(A(a),f,b);a=z(C(a));for(var g=null,l=0,m=0;;)if(m<l){var q=g.V(null,m);ad(f," ");ok(q,f,b);m+=1;}else if(a=z(a))g=a,Ze(g)?(a=pd(g),l=qd(g),g=a,q=D(a),a=l,l=q):(q=A(g),ad(f," "),ok(q,f,b),a=C(g),g=null,l=0),m=0;else break;f.pc(null);b=d.call(c,e);}return b}function tk(a,b){return jk(sk(a,b))}
    var uk=function uk(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return uk.l(0<c.length?new Rd(c.slice(0),0,null):null)};uk.l=function(a){return sk(a,Ab())};uk.I=0;uk.M=function(a){return this.l(z(a))};
    var vk=function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){return tk(c,He.j(Ab(),ib,!1))}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}(),wk=function wk(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return wk.l(0<c.length?new Rd(c.slice(0),0,null):null)};wk.l=function(a){return sk(a,He.j(Ab(),ib,!1))};wk.I=0;
    wk.M=function(a){return this.l(z(a))};function xk(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;yk(0<b.length?new Rd(b.slice(0),0,null):null);}function yk(a){tk(a,He.j(Ab(),ib,!1));n(wb)?(a=Ab(),jk("\n"),a=(u.h(a,hb),null)):a=null;return a}function zk(a){return a instanceof Md?Nd.h(null,Rf(a)):Qf.h(null,Rf(a))}
    function Ak(a){if(n(!1)){var b=z(a),c=z(b),d=A(c);C(c);H(d,0,null);H(d,1,null);c=Fe(a);for(a=null;;){d=a;b=z(b);a=A(b);var e=C(b),f=a;a=H(f,0,null);b=H(f,1,null);if(n(f))if(a instanceof w||a instanceof Md)if(n(d))if(x.h(d,Of(a)))c=He.j(c,zk(a),b),a=d,b=e;else return null;else if(d=Of(a),n(d))c=He.j(c,zk(a),b),a=d,b=e;else return null;else return null;else return new S(null,2,5,T,[d,c],null)}}else return null}
    function Bk(a,b,c,d,e){return gk(d,function(f,g,l){var m=Ac(f);c.j?c.j(m,g,l):c.call(null,m,g,l);ad(g," ");f=Bc(f);return c.j?c.j(f,g,l):c.call(null,f,g,l)},[p.g(a),"{"].join(""),", ","}",e,z(b))}function pk(a,b,c,d){var e=We(a)?Ak(a):null,f=H(e,0,null);e=H(e,1,null);return n(f)?Bk(["#:",p.g(f)].join(""),e,b,c,d):Bk(null,a,b,c,d)}ah.prototype.qa=tb;ah.prototype.W=function(a,b,c){ad(b,"#object[cljs.core.Volatile ");ok(new k(null,1,[Fj,this.state],null),b,c);return ad(b,"]")};Od.prototype.qa=tb;
    Od.prototype.W=function(a,b,c){ad(b,"#'");return ok(this.fd,b,c)};Rd.prototype.qa=tb;Rd.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Sf.prototype.qa=tb;Sf.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Nh.prototype.qa=tb;Nh.prototype.W=function(a,b,c){return gk(b,ok,"["," ","]",c,this)};hj.prototype.qa=tb;hj.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Wi.prototype.qa=tb;Wi.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};
    lj.prototype.qa=tb;lj.prototype.W=function(a,b,c){return gk(b,ok,"["," ","]",c,this)};ri.prototype.qa=tb;ri.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Xd.prototype.qa=tb;Xd.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Zh.prototype.qa=tb;Zh.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Kf.prototype.qa=tb;Kf.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};ue.prototype.qa=tb;
    ue.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Vj.prototype.qa=tb;Vj.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};aj.prototype.qa=tb;aj.prototype.W=function(a,b,c){return pk(this,ok,b,c)};Yi.prototype.qa=tb;Yi.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};ai.prototype.qa=tb;ai.prototype.W=function(a,b,c){return gk(b,ok,"["," ","]",c,this)};uj.prototype.qa=tb;uj.prototype.W=function(a,b,c){return pk(this,ok,b,c)};Hj.prototype.qa=tb;
    Hj.prototype.W=function(a,b,c){return gk(b,ok,"#{"," ","}",c,this)};Xf.prototype.qa=tb;Xf.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Ug.prototype.qa=tb;Ug.prototype.W=function(a,b,c){ad(b,"#object[cljs.core.Atom ");ok(new k(null,1,[Fj,this.state],null),b,c);return ad(b,"]")};Bj.prototype.qa=tb;Bj.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};kj.prototype.qa=tb;kj.prototype.W=function(a,b,c){return gk(b,ok,"["," ","]",c,this)};gh.prototype.qa=tb;
    gh.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};S.prototype.qa=tb;S.prototype.W=function(a,b,c){return gk(b,ok,"["," ","]",c,this)};hi.prototype.qa=tb;hi.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};If.prototype.qa=tb;If.prototype.W=function(a,b){return ad(b,"()")};ii.prototype.qa=tb;ii.prototype.W=function(a,b,c){return gk(b,ok,"#queue ["," ","]",c,z(this))};k.prototype.qa=tb;k.prototype.W=function(a,b,c){return pk(this,ok,b,c)};Wj.prototype.qa=tb;
    Wj.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Hg.prototype.qa=tb;Hg.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Aj.prototype.qa=tb;Aj.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Ee.prototype.qa=tb;Ee.prototype.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Md.prototype.Rc=tb;Md.prototype.Ub=function(a,b){if(b instanceof Md)return Ld(this,b);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};w.prototype.Rc=tb;
    w.prototype.Ub=function(a,b){if(b instanceof w)return Lf(this,b);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};ai.prototype.Rc=tb;ai.prototype.Ub=function(a,b){if(Ye(b))return jf(this,b);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};S.prototype.Rc=tb;S.prototype.Ub=function(a,b){if(Ye(b))return jf(this,b);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};Nh.prototype.Rc=tb;
    Nh.prototype.Ub=function(a,b){if(Ye(b))return jf(this,b);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};lj.prototype.Rc=tb;lj.prototype.Ub=function(a,b){if(Ye(b))return jf(this,b);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};kj.prototype.Rc=tb;kj.prototype.Ub=function(a,b){if(Ye(b))return jf(this,b);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};function Dk(a){this.f=a;this.value=null;this.C=2147516416;this.O=1;}
    Dk.prototype.Db=function(){n(this.f)&&(this.value=this.f.v?this.f.v():this.f.call(null),this.f=null);return this.value};Dk.prototype.Hd=function(){return Lb(this.f)};Dk.prototype.W=function(a,b,c){ad(b,"#object[cljs.core.Delay ");ok(new k(null,2,[Xj,null==this.f?hk:qk,Fj,this.value],null),b,c);return ad(b,"]")};function Hk(a){return a instanceof Dk?r(a):a}function Ik(a,b){this.Ge=a;this.le=b;this.C=2173173760;this.O=131072;}h=Ik.prototype;
    h.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return pe(this,b,0);case 2:return pe(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.g=function(b){return pe(this,b,0)};a.h=function(b,c){return pe(this,b,c)};return a}();
    h.lastIndexOf=function(){function a(c){return se(this,c,D(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return se(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return se(this,c,d)};return b}();h.Aa=function(){var a=Ag(this.le);return Ig(this.Ge,a)};h.ea=function(){var a=Ag(this.le);a=Ig(this.Ge,a);a=Gg(a);return z(n(a)?a:Ud)};h.Ta=function(a,b){return sf(this.Ge,rf(b,qf),this.le)};
    h.Ua=function(a,b,c){return tf(this.Ge,rf(b,qf),c,this.le)};h.W=function(a,b,c){return gk(b,ok,"("," ",")",c,this)};Ik.prototype[Ub]=function(){return Wd(this)};function Jk(a){return new Ik(lg(Pg,Nj(a)),Ce(a))}function Kk(){}function Lk(a){if(null!=a&&null!=a.Gg)a=a.Gg(a);else {var b=Lk[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=Lk._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IEncodeJS.-clj-\x3ejs",a);}return a}
    function Mk(a,b){return (null!=a?tb===a.Fg||(a.We?0:Qb(Kk,a)):Qb(Kk,a))?Lk(a):"string"===typeof a||"number"===typeof a||a instanceof w||a instanceof Md?b.g?b.g(a):b.call(null,a):uk.l(F([a]))}var Nk=function Nk(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Nk.l(arguments[0],1<c.length?new Rd(c.slice(1),0,null):null)};
    Nk.l=function(a,b){b=qg(b);var c=u.j(b,rk,Rf),d=function g(f){if(null==f)return null;if(null!=f?tb===f.Fg||(f.We?0:Qb(Kk,f)):Qb(Kk,f))return Lk(f);if(f instanceof w)return c.g?c.g(f):c.call(null,f);if(f instanceof Md)return p.g(f);if(We(f)){var l={};f=z(f);for(var m=null,q=0,t=0;;)if(t<q){var v=m.V(null,t),y=H(v,0,null);v=H(v,1,null);y=Mk(y,d);v=g(v);l[y]=v;t+=1;}else if(f=z(f))Ze(f)?(q=pd(f),f=qd(f),m=q,q=D(q)):(q=A(f),m=H(q,0,null),q=H(q,1,null),m=Mk(m,d),q=g(q),l[m]=q,f=C(f),m=null,q=0),t=0;else break;
    return l}if(Se(f)){l=[];f=z(ch.h(g,f));m=null;for(t=q=0;;)if(t<q)y=m.V(null,t),l.push(y),t+=1;else if(f=z(f))m=f,Ze(m)?(f=pd(m),t=qd(m),m=f,q=D(f),f=t):(f=A(m),l.push(f),f=C(m),m=null,q=0),t=0;else break;return l}return f};return d(a)};Nk.I=1;Nk.M=function(a){var b=A(a);a=C(a);return this.l(b,a)};function Pk(){}
    function Qk(a,b){if(null!=a&&null!=a.Eg)a=a.Eg(a,b);else {var c=Qk[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=Qk._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IEncodeClojure.-js-\x3eclj",a);}return a}function Rk(a){return Sk(a,F([Ck,!1]))}
    function Sk(a,b){var c=qg(b);c=u.h(c,Ck);var d=n(c)?Qf:p;return function g(f){return (null!=f?tb===f.mi||(f.We?0:Qb(Pk,f)):Qb(Pk,f))?Qk(f,lg(xj,b)):df(f)?bk(ch.h(g,f)):Vh(f)?new Nh(g(Ac(f)),g(Bc(f))):Se(f)?qh.j(Fe(f),ch.g(g),f):Jb(f)?jd($b.j(function(l,m){return dg.h(l,g(m))},hd(G),f)):Rb(f)===Object?jd($b.j(function(l,m){return eg(l,d.g?d.g(m):d.call(null,m),g(Wa(f,m)))},hd(R),Va(f))):f}(a)}
    function Ek(a){var b=Vg(R);return function(){function c(e){var f=null;if(0<arguments.length){f=0;for(var g=Array(arguments.length-0);f<g.length;)g[f]=arguments[f+0],++f;f=new Rd(g,0,null);}return d.call(this,f)}function d(e){var f=u.j(r(b),e,bf);return f===bf?(f=lg(a,e),Yg.D(b,He,e,f),f):f}c.I=0;c.M=function(e){e=z(e);return d(e)};c.l=d;return c}()}function Uk(a,b){return jd($b.j(function(c,d){var e=a.g?a.g(d):a.call(null,d);return eg(c,e,De.h(u.j(c,e,G),d))},hd(R),b))}var Vk=null;
    function Wk(){null==Vk&&(Vk=Vg(new k(null,3,[Fk,R,Gk,R,Ok,R],null)));return Vk}function $k(a,b,c){var d=x.h(b,c);if(d)return d;d=Ok.g(a);d=d.g?d.g(b):d.call(null,b);if(!(d=M(d,c))&&(d=Ye(c)))if(d=Ye(b))if(d=D(c)===D(b)){d=!0;for(var e=0;;)if(d&&e!==D(c))d=$k(a,b.g?b.g(e):b.call(null,e),c.g?c.g(e):c.call(null,e)),e+=1;else return d}else return d;else return d;else return d}function al(a){var b=r(Wk());return tg(u.h(Fk.g(b),a))}
    function bl(a,b,c,d){Yg.h(a,function(){return r(b)});Yg.h(c,function(){return r(d)});}
    var cl=function cl(a,b,c){var e=function(){var f=r(c);return f.g?f.g(a):f.call(null,a)}();e=n(n(e)?e.g?e.g(b):e.call(null,b):e)?!0:null;if(n(e))return e;e=function(){for(var f=al(b);;)if(0<D(f)){var g=A(f);cl.j?cl.j(a,g,c):cl.call(null,a,g,c);f=Td(f);}else return null}();if(n(e))return e;e=function(){for(var f=al(a);;)if(0<D(f)){var g=A(f);cl.j?cl.j(g,b,c):cl.call(null,g,b,c);f=Td(f);}else return null}();return n(e)?e:!1};function dl(a,b,c,d){c=cl(a,b,c);return n(c)?c:$k(d,a,b)}
    var el=function el(a,b,c,d,e,f,g,l){var q=$b.j(function(v,y){var E=H(y,0,null);H(y,1,null);if($k(r(c),b,E)){v=null==v||dl(E,A(v),e,r(c))?y:v;if(!dl(A(v),E,e,r(c)))throw Error(["Multiple methods in multimethod '",p.g(a),"' match dispatch value: ",p.g(b)," -\x3e ",p.g(E)," and ",p.g(A(v)),", and neither is preferred"].join(""));return v}return v},null,r(d)),t=function(){var v;if(v=null==q)v=r(d),v=v.g?v.g(l):v.call(null,l);return n(v)?new S(null,2,5,T,[l,v],null):q}();if(n(t)){if(x.h(r(g),r(c)))return Yg.D(f,
    He,b,Ae(t)),Ae(t);bl(f,d,g,c);return el.za?el.za(a,b,c,d,e,f,g,l):el.call(null,a,b,c,d,e,f,g,l)}return null};function fl(a,b,c){if(null!=a&&null!=a.B)a.B(a,b,c);else {var d=fl[ba(null==a?null:a)];if(null!=d)d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=fl._,null!=d)d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("IMultiFn.-add-method",a);}}
    function gl(a,b){if(null!=a&&null!=a.na)a=a.na(a,b);else {var c=gl[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=gl._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IMultiFn.-get-method",a);}return a}function hl(a){if(null!=a&&null!=a.Ig)a=a.K;else {var b=hl[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=hl._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IMultiFn.-dispatch-fn",a);}return a}
    function il(a,b){throw Error(["No method in multimethod '",p.g(a),"' for dispatch value: ",p.g(b)].join(""));}function jl(a,b,c,d,e,f,g){var l=Tk;this.name=a;this.K=b;this.Vg=l;this.re=c;this.we=d;this.Yh=e;this.ve=f;this.ee=g;this.C=4194305;this.O=4352;}h=jl.prototype;
    h.call=function(a){switch(arguments.length-1){case 0:return this.v();case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);case 3:return this.j(arguments[1],arguments[2],arguments[3]);case 4:return this.D(arguments[1],arguments[2],arguments[3],arguments[4]);case 5:return this.R(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 6:return this.ga(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);case 7:return this.Sa(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]);case 8:return this.za(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]);case 9:return this.Ea(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]);case 10:return this.Ha(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10]);
    case 11:return this.Ia(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]);case 12:return this.Ja(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12]);case 13:return this.Ka(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],
    arguments[11],arguments[12],arguments[13]);case 14:return this.La(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14]);case 15:return this.Ma(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]);case 16:return this.Na(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16]);case 17:return this.Oa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]);case 18:return this.Pa(arguments[1],arguments[2],
    arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18]);case 19:return this.Qa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]);case 20:return this.Ra(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20]);case 21:return this.rc(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],
    arguments[18],arguments[19],arguments[20],arguments[21]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.v=function(){var a=this.K.v?this.K.v():this.K.call(null),b=this.na(null,a);n(b)||il(this.name,a);return b.v?b.v():b.call(null)};h.g=function(a){var b=this.K.g?this.K.g(a):this.K.call(null,a),c=this.na(null,b);n(c)||il(this.name,b);return c.g?c.g(a):c.call(null,a)};
    h.h=function(a,b){var c=this.K.h?this.K.h(a,b):this.K.call(null,a,b),d=this.na(null,c);n(d)||il(this.name,c);return d.h?d.h(a,b):d.call(null,a,b)};h.j=function(a,b,c){var d=this.K.j?this.K.j(a,b,c):this.K.call(null,a,b,c),e=this.na(null,d);n(e)||il(this.name,d);return e.j?e.j(a,b,c):e.call(null,a,b,c)};h.D=function(a,b,c,d){var e=this.K.D?this.K.D(a,b,c,d):this.K.call(null,a,b,c,d),f=this.na(null,e);n(f)||il(this.name,e);return f.D?f.D(a,b,c,d):f.call(null,a,b,c,d)};
    h.R=function(a,b,c,d,e){var f=this.K.R?this.K.R(a,b,c,d,e):this.K.call(null,a,b,c,d,e),g=this.na(null,f);n(g)||il(this.name,f);return g.R?g.R(a,b,c,d,e):g.call(null,a,b,c,d,e)};h.ga=function(a,b,c,d,e,f){var g=this.K.ga?this.K.ga(a,b,c,d,e,f):this.K.call(null,a,b,c,d,e,f),l=this.na(null,g);n(l)||il(this.name,g);return l.ga?l.ga(a,b,c,d,e,f):l.call(null,a,b,c,d,e,f)};
    h.Sa=function(a,b,c,d,e,f,g){var l=this.K.Sa?this.K.Sa(a,b,c,d,e,f,g):this.K.call(null,a,b,c,d,e,f,g),m=this.na(null,l);n(m)||il(this.name,l);return m.Sa?m.Sa(a,b,c,d,e,f,g):m.call(null,a,b,c,d,e,f,g)};h.za=function(a,b,c,d,e,f,g,l){var m=this.K.za?this.K.za(a,b,c,d,e,f,g,l):this.K.call(null,a,b,c,d,e,f,g,l),q=this.na(null,m);n(q)||il(this.name,m);return q.za?q.za(a,b,c,d,e,f,g,l):q.call(null,a,b,c,d,e,f,g,l)};
    h.Ea=function(a,b,c,d,e,f,g,l,m){var q=this.K.Ea?this.K.Ea(a,b,c,d,e,f,g,l,m):this.K.call(null,a,b,c,d,e,f,g,l,m),t=this.na(null,q);n(t)||il(this.name,q);return t.Ea?t.Ea(a,b,c,d,e,f,g,l,m):t.call(null,a,b,c,d,e,f,g,l,m)};h.Ha=function(a,b,c,d,e,f,g,l,m,q){var t=this.K.Ha?this.K.Ha(a,b,c,d,e,f,g,l,m,q):this.K.call(null,a,b,c,d,e,f,g,l,m,q),v=this.na(null,t);n(v)||il(this.name,t);return v.Ha?v.Ha(a,b,c,d,e,f,g,l,m,q):v.call(null,a,b,c,d,e,f,g,l,m,q)};
    h.Ia=function(a,b,c,d,e,f,g,l,m,q,t){var v=this.K.Ia?this.K.Ia(a,b,c,d,e,f,g,l,m,q,t):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t),y=this.na(null,v);n(y)||il(this.name,v);return y.Ia?y.Ia(a,b,c,d,e,f,g,l,m,q,t):y.call(null,a,b,c,d,e,f,g,l,m,q,t)};h.Ja=function(a,b,c,d,e,f,g,l,m,q,t,v){var y=this.K.Ja?this.K.Ja(a,b,c,d,e,f,g,l,m,q,t,v):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v),E=this.na(null,y);n(E)||il(this.name,y);return E.Ja?E.Ja(a,b,c,d,e,f,g,l,m,q,t,v):E.call(null,a,b,c,d,e,f,g,l,m,q,t,v)};
    h.Ka=function(a,b,c,d,e,f,g,l,m,q,t,v,y){var E=this.K.Ka?this.K.Ka(a,b,c,d,e,f,g,l,m,q,t,v,y):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y),J=this.na(null,E);n(J)||il(this.name,E);return J.Ka?J.Ka(a,b,c,d,e,f,g,l,m,q,t,v,y):J.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y)};
    h.La=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E){var J=this.K.La?this.K.La(a,b,c,d,e,f,g,l,m,q,t,v,y,E):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E),W=this.na(null,J);n(W)||il(this.name,J);return W.La?W.La(a,b,c,d,e,f,g,l,m,q,t,v,y,E):W.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E)};
    h.Ma=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J){var W=this.K.Ma?this.K.Ma(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J),Z=this.na(null,W);n(Z)||il(this.name,W);return Z.Ma?Z.Ma(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J):Z.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J)};
    h.Na=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W){var Z=this.K.Na?this.K.Na(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W),ma=this.na(null,Z);n(ma)||il(this.name,Z);return ma.Na?ma.Na(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W):ma.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W)};
    h.Oa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z){var ma=this.K.Oa?this.K.Oa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z),ja=this.na(null,ma);n(ja)||il(this.name,ma);return ja.Oa?ja.Oa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z):ja.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z)};
    h.Pa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma){var ja=this.K.Pa?this.K.Pa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma),Ca=this.na(null,ja);n(Ca)||il(this.name,ja);return Ca.Pa?Ca.Pa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma):Ca.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma)};
    h.Qa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja){var Ca=this.K.Qa?this.K.Qa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja),Ba=this.na(null,Ca);n(Ba)||il(this.name,Ca);return Ba.Qa?Ba.Qa(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja):Ba.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja)};
    h.Ra=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca){var Ba=this.K.Ra?this.K.Ra(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca):this.K.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca),ta=this.na(null,Ba);n(ta)||il(this.name,Ba);return ta.Ra?ta.Ra(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca):ta.call(null,a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca)};
    h.rc=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba){var ta=pg(this.K,a,b,c,d,F([e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba])),B=this.na(null,ta);n(B)||il(this.name,ta);return pg(B,a,b,c,d,F([e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba]))};h.Ig=function(){return this.K};h.B=function(a,b,c){Yg.D(this.we,He,b,c);bl(this.ve,this.we,this.ee,this.re);return this};
    h.na=function(a,b){x.h(r(this.ee),r(this.re))||bl(this.ve,this.we,this.ee,this.re);a=r(this.ve);a=a.g?a.g(b):a.call(null,b);return n(a)?a:el(this.name,b,this.re,this.we,this.Yh,this.ve,this.ee,this.Vg)};h.Ed=function(){return sd(this.name)};h.Fd=function(){return td(this.name)};h.ba=function(){return ea(this)};function ll(a){this.gd=a;this.G=null;this.C=2153775104;this.O=2048;}h=ll.prototype;h.oh=tb;h.toString=function(){return this.gd};
    h.aa=function(a,b){return (a=null!=b?tb===b.oh?!0:!1:!1)?this.gd===b.gd:a};h.W=function(a,b){return ad(b,['#uuid "',p.g(this.gd),'"'].join(""))};h.ba=function(){null==this.G&&(this.G=Jd(this.gd));return this.G};h.Ub=function(a,b){if(b instanceof ll)return Ra(this.gd,b.gd);throw Error(["Cannot compare ",p.g(this)," to ",p.g(b)].join(""));};
    function ml(){function a(){return Math.floor(16*Math.random()).toString(16)}var b=(8|3&Math.floor(16*Math.random())).toString(16);return new ll([p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),"-",p.g(a()),p.g(a()),p.g(a()),p.g(a()),"-4",p.g(a()),p.g(a()),p.g(a()),"-",p.g(b),p.g(a()),p.g(a()),p.g(a()),"-",p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a()),p.g(a())].join("").toLowerCase())}
    function nl(a,b,c){var d=Error(a);this.message=a;this.data=b;this.cause=c;this.name=d.name;this.description=d.description;this.number=d.number;this.fileName=d.fileName;this.lineNumber=d.lineNumber;this.columnNumber=d.columnNumber;this.stack=d.stack;return this}nl.prototype.__proto__=Error.prototype;nl.prototype.qa=tb;
    nl.prototype.W=function(a,b,c){ad(b,"#error {:message ");ok(this.message,b,c);n(this.data)&&(ad(b,", :data "),ok(this.data,b,c));n(this.cause)&&(ad(b,", :cause "),ok(this.cause,b,c));return ad(b,"}")};nl.prototype.toString=function(){return Bd(this)};function ol(a,b){return pl(a,b,null)}function pl(a,b,c){return new nl(a,b,c)}function rl(a){return a instanceof nl?a.data:null}function sl(a){return a instanceof Error?a.message:null}
    function tl(a){return M(new Hj(null,new k(null,24,[Xk,"null",Yk,"null",Zk,"null",kl,"null",ul,"null",vl,"null",wl,"null",xl,"null",yl,"null",zl,"null",Al,"null",Bl,"null",Cl,"null",Dl,"null",El,"null",Fl,"null",Gl,"null",Hl,"null",Il,"null",Jl,"null",Kl,"null",Ll,"null",Ml,"null",Nl,"null"],null),null),a)}function Sl(a,b){this.tag=a;this.form=b;this.C=2153775360;this.O=0;}h=Sl.prototype;h.toString=function(){return Bd(this)};
    h.aa=function(a,b){return b instanceof Sl&&x.h(this.tag,b.tag)&&x.h(this.form,b.form)};h.ba=function(){return 31*Jd(this.tag)+Jd(this.form)};h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "tag":return this.tag;case "form":return this.form;default:return c}};h.W=function(a,b,c){ad(b,["#",p.g(this.tag)," "].join(""));return ok(this.form,b,c)};
    var Tl="arguments abstract await boolean break byte case catch char class const continue debugger default delete do double else enum export extends final finally float for function goto if implements import in instanceof int interface let long native new package private protected public return short static super switch synchronized this throw throws transient try typeof var void volatile while with yield methods null constructor".split(" "),Ul=null;
    function Vl(a){null==Ul&&(Ul=$b.j(function(b,c){b[c]=!0;return b},{},Tl));return Ul.hasOwnProperty(a)}function Wl(){n(Xb)||(Xb=function(){for(var a=lf(function(e,f){return f.length-e.length}),b="";;)if(z(a)){var c=C(a),d=[function(){var e=b;return ""!==b?[e,"|"].join(""):e}(),p.g(A(a))].join("");a=c;b=d;}else return [b,"|\\$"].join("")}());return Xb}
    function Xl(a){var b=p.g(a);if("_DOT__DOT_"===b)var c="..";else a:{c=new RegExp(Wl(),"g");b=n(Xa(b,"$"))?b.substring(0,b.length-1):b;for(var d="",e=0;;){var f=c.exec(b);if(n(f))f=H(f,0,null),d=[d,p.g(b.substring(e,c.lastIndex-f.length)),p.g("$"===f?"/":Wa(Wb,f))].join(""),e=c.lastIndex;else {c=[d,p.g(b.substring(e,b.length))].join("");break a}}}a=a instanceof Md?Nd:p;return a.g?a.g(c):a.call(null,c)}function Yl(a){this.name=a;this.C=6291456;this.O=0;}Yl.prototype.toString=function(){return p.g(this.name)};
    Yl.prototype.aa=function(a,b){return b instanceof Yl?x.h(this.name,b.name):!1};Yl.prototype.ba=function(){return Jd(this.name)};var Zl=null;"undefined"!==typeof console&&Hb();Hb();var Ol=new w(null,"nil","nil",99600501),Pl=new w(null,"token","token",-1211463215),Ql=new w("gateway.state.spec.common","keyword","gateway.state.spec.common/keyword",-1409778786),Rl=new w("gateway.common.spec.messages","response","gateway.common.spec.messages/response",69665082),$l=new w(null,"exp","exp",-261706262),am=new w(null,"subscribe","subscribe",416253756),bm=new w(null,"bin-char","bin-char",-1662780697),cm=new w("gateway.state.spec.activity","children","gateway.state.spec.activity/children",
    651398237),dm=new w(null,"pattern","pattern",242135423),em=new w(null,"spying?","spying?",1753444487),fm=new w("gateway.domains.global.spec.requests","updated","gateway.domains.global.spec.requests/updated",-1219870803),gm=new w(null,"reader-exception","reader-exception",-1938323098),hm=new w(null,"trailing-white-space","trailing-white-space",1496006996),im=new w("gateway.domains.agm.spec.requests","server_id","gateway.domains.agm.spec.requests/server_id",172340651),jm=new w(null,"relative-to","relative-to",
    -470100051),km=new w("gateway.state.spec.agm","stream-id","gateway.state.spec.agm/stream-id",-1404324586),lm=new w("gateway.common.context.spec.requests","path","gateway.common.context.spec.requests/path",614939647),mm=new Md(null,"p1__15400#","p1__15400#",422589341,null),nm=new w(null,"intra-block-nl","intra-block-nl",1808826875),om=new w(null,"peer-id","peer-id",387144350),pm=new w(null,"exponentchar","exponentchar",1986664222),qm=new w("gateway.domains.global.spec.requests","delta","gateway.domains.global.spec.requests/delta",
    299143136),rm=new w(null,"and","and",-971899817),sm=new w("gateway.state.spec.state","activity-types","gateway.state.spec.state/activity-types",1532142687),tm=new w(null,"number","number",1570378438),um=new w("gateway.state.spec.activity","context","gateway.state.spec.activity/context",798551178),vm=new w(null,"any","any",1705907423),wm=new w(null,"req-specs","req-specs",553962313),xm=new w("gateway.state.spec.state","options","gateway.state.spec.state/options",-722288524),ym=new Md("cljs.core","map",
    "cljs.core/map",-338988913,null),zm=new w("gateway.state.spec.domain-registry","info","gateway.state.spec.domain-registry/info",754617108),Am=new w("gateway.state.spec.restrictions","string-restrictions","gateway.state.spec.restrictions/string-restrictions",-382592371),Bm=new Md(null,"when-let","when-let",-1383043480,null),Cm=new Md(null,"cljs.core","cljs.core",770546058,null),Dm=new w(null,"miser","miser",-556060186),Em=new w(null,"amp","amp",271690571),Fm=new Md("s","coll-of","s/coll-of",-1705285349,
    null),Gm=new w(null,"publish","publish",-1178026850),Hm=new w(null,"neg","neg",1800032960),Im=new w("gateway.auth.spec","access_token","gateway.auth.spec/access_token",-1170576318),Jm=new w(null,"current","current",-1088038603),Km=new w(null,"alg","alg",-830920638),Lm=new w(null,"neq","neq",1883246164),Mm=new Md(null,"-\x3e","-\x3e",-2139605430,null),Nm=new w("gateway.domains.agm.spec.messages","oob","gateway.domains.agm.spec.messages/oob",-285361976),Om=new Md(null,"Inf","Inf",647172781,null),Pm=
    new w(null,"all","all",892129742),Qm=new w(null,"index","index",-1531685915),Rm=new w(null,"alt","alt",-3214426),Sm=new Md(null,"..","..",-300507420,null),Tk=new w(null,"default","default",-1987822328),Tm=new w(null,"fail-index","fail-index",248726923),Um=new w(null,"timestamp_","timestamp_",-954533417),Vm=new w(null,"ex-kind","ex-kind",1581199296),Wm=new w(null,"request-id","request-id",-985684093),Xm=new w(null,"hello","hello",-245025397),Ym=new Md(null,"opts","opts",1795607228,null),Zm=new w(null,
    "err","err",-2089457205),$m=new w("gateway.state.spec.agm","invocation_id","gateway.state.spec.agm/invocation_id",-822050570),an=new w(null,"define","define",-2006590705),bn=new w(null,"reload","reload",863702807),cn=new w(null,"optional","optional",2053951509),dn=new w("cljs.spec.alpha","kfn","cljs.spec.alpha/kfn",672643897),en=new w(null,"nbf","nbf",-1785694926),fn=new w(null,"callee","callee",-156445786),gn=new w(null,"peer_name","peer_name",-245526270),hn=new w(null,"negative-lookahead","negative-lookahead",
    874382387),jn=new w(null,"method-filter-fn","method-filter-fn",-283131748),kn=new w(null,"end-pos","end-pos",-1643883926),ln=new w("gateway.domains.global.internal","authenticated","gateway.domains.global.internal/authenticated",-1621463770),mn=new w(null,"caller","caller",-1275362879),nn=new Md("gateway.state.spec.common","address-type","gateway.state.spec.common/address-type",-283204142,null),on=new w(null,"per-line-prefix","per-line-prefix",846941813),pn=new w(null,"content","content",15833224),
    qn=new w(null,"source_type","source_type",-144028049),rn=new w("gateway.state.spec.activity","context_id","gateway.state.spec.activity/context_id",1100878008),sn=new w(null,"msg_","msg_",-1925147E3),tn=new w(null,"create-peer","create-peer",631977540),un=new Md("cljs.core","nil?","cljs.core/nil?",945071861,null),vn=new w(null,"continue","continue",-207346553),wn=new w(null,"println","println",1920840330),xn=new w(null,"gateway-requests","gateway-requests",2114123587),yn=new w(null,"rules-or-parser",
    "rules-or-parser",-314380386),zn=new w(null,"routing-key","routing-key",238118868),An=new w(null,"eof","eof",-489063237),Bn=new w(null,"ready-members","ready-members",757058983),Cn=new w(null,"initiated","initiated",2096076574),Dn=new w("gateway.state.spec.activity","activity-domain","gateway.state.spec.activity/activity-domain",292185460),En=new Md("cljs.core","pos?","cljs.core/pos?",-652182749,null),Fn=new w("gateway.state.spec.context","creator","gateway.state.spec.context/creator",-11360985),
    Gn=new w(null,"queue","queue",1455835879),Hn=new w("gateway.state.spec.tokens","impersonate-peer","gateway.state.spec.tokens/impersonate-peer",1018065912),In=new Md(null,"if-let","if-let",1803593690,null),Jn=new w(null,"segment","segment",-964921196),Kn=new w("cljs.spec.alpha","name","cljs.spec.alpha/name",205233570),Ln=new w(null,"req-un","req-un",1074571008),Mn=new w(null,"end","end",-268185958),Nn=new w(null,"paren","paren",-294107600),On=new w(null,"subscriber_id","subscriber_id",972810975),Pn=
    new w("gateway.domains.agm.spec.messages","reason","gateway.domains.agm.spec.messages/reason",-1483891292),Qn=new Md(null,"gateway.common.spec.messages","gateway.common.spec.messages",-1797487288,null),Rn=new Md(null,"not-native","not-native",-236392494,null),Sn=new w(null,"provider","provider",-302056900),Tn=new w(null,"reason","reason",-2070751759),Un=new w(null,"num-val","num-val",1497434478),Vn=new w("gateway.common.spec.messages","domain","gateway.common.spec.messages/domain",755510455),Wn=new w(null,
    "properties","properties",685819552),Xn=new w(null,"post","post",269697687),Yn=new w(null,"rules","rules",1198912366),yl=new Md(null,"letfn*","letfn*",-110097810,null),Zn=new Md("cljs.core","empty?","cljs.core/empty?",1866613644,null),$n=new w(null,"unregister","unregister",2105339971),ao=new w(null,"red","red",-969428204),Fk=new w(null,"parents","parents",-2027538891),bo=new w(null,"arg-filter-fn","arg-filter-fn",1576945932),co=new w(null,"context-created","context-created",-436520594),eo=new w(null,
    "rep","rep",-1226820564),fo=new w("gateway.state.spec.domain-registry","domain","gateway.state.spec.domain-registry/domain",-1376202493),go=new w(null,"remaining-arg-count","remaining-arg-count",-1216589335),ho=new w(null,"logical-blocks","logical-blocks",-1466339776),io=new w(null,"process-id","process-id",-2118975265),jo=new w(null,"ret","ret",-468222814),ko=new w(null,"req","req",-326448303),lo=new w(null,"appender-id","appender-id",-1917983538),mo=new Md(null,"defmacro","defmacro",2054157304,
    null),no=new Md(null,"NaN","NaN",666918153,null),oo=new w("gateway.common.context.spec.requests","updated","gateway.common.context.spec.requests/updated",-286888249),po=new w(null,"runtime-exception","runtime-exception",-1495664514),qo=new w(null,"iss","iss",1130086696),ro=new w("gateway.state.spec.mthds","version","gateway.state.spec.mthds/version",1762403198),so=new w(null,"signature-key","signature-key",-1652526996),to=new w(null,"results","results",-1134170113),uo=new w("gateway.state.spec.activity",
    "types","gateway.state.spec.activity/types",-2083568052),vo=new w(null,"updater_id","updater_id",-2125909548),wo=new w("gateway.state.spec.state","state","gateway.state.spec.state/state",-1032276972),hk=new w(null,"ready","ready",1086465795),xo=new w(null,"peer-created","peer-created",-1509421151),yo=new w(null,"output_","output_",-36797880),zo=new w(null,"arglists","arglists",1661989754),Ao=new w(null,"match","match",1220059550),Bo=new w(null,"output-fn","output-fn",1600951539),Co=new Md(null,"when-first",
    "when-first",821699168,null),Do=new w(null,"end-column","end-column",1425389514),Eo=new w(null,"accepted","accepted",-1953464374),Fo=new w(null,"peer-factories-removed","peer-factories-removed",-1429529592),Go=new w("gateway.state.spec.restrictions","restrictions","gateway.state.spec.restrictions/restrictions",181113171),Ho=new w(null,"interests","interests",1200294902),Io=new w("gateway.common.spec.messages","outgoing-messages","gateway.common.spec.messages/outgoing-messages",-924999491),Jo=new w(null,
    "remove-interest","remove-interest",-1017752998),Ko=new w(null,"expr","expr",745722291),Lo=new w("gateway.auth.spec","request","gateway.auth.spec/request",-1915554438),Mo=new w(null,"dump","dump",-356261477),No=new w(null,"raw","raw",1604651272),Oo=new w(null,"start-block-t","start-block-t",-373430594),Po=new Md(null,"binding","binding",-2114503176,null),Qo=new w("cljs.spec.alpha","kind-form","cljs.spec.alpha/kind-form",-1047104697),Ro=new w(null,"OCTET","OCTET",-743420682),So=new w(null,"destroy-context",
    "destroy-context",-1305625710),To=new w("gateway.state.spec.common","node","gateway.state.spec.common/node",-570411717),Uo=new w("gateway.domains.agm.spec.requests","stream_id","gateway.domains.agm.spec.requests/stream_id",-1290121066),Vo=new w("gateway.common.spec.messages","broadcast","gateway.common.spec.messages/broadcast",-1460237246),Wo=new w(null,"activities","activities",1654844313),Xo=new w(null,"bracket-info","bracket-info",-1600092774),Yo=new w("gateway.state.spec.activity","owner_type",
    "gateway.state.spec.activity/owner_type",-1823895667),Zo=new w(null,"member","member",-2012020816),$o=new w(null,"given","given",716253602),ap=new w(null,"?line","?line",-631853385),bp=new w(null,"body","body",-2049205669),cp=new w(null,"mode","mode",654403691),dp=new w("gateway.common.spec.messages","reason_uri","gateway.common.spec.messages/reason_uri",-14574488),ep=new w(null,"console","console",1228072057),fp=new w(null,"method_id","method_id",1349548671),gp=new w(null,"distinct","distinct",-1788879121),
    hp=new w(null,"parsed-restrictions","parsed-restrictions",-1665101931),kh=new w(null,"fallback-impl","fallback-impl",-1501286995),ip=new w(null,"name","name",1843675177),jp=new w(null,"subscribed","subscribed",1012088257),kp=new w("gateway.common.context.spec.requests","commands","gateway.common.context.spec.requests/commands",1656863185),lp=new Md("s","map-of","s/map-of",-1464752791,null),mp=new w(null,"initiator","initiator",217480362),np=new w(null,"service?","service?",-2064761863),op=new w("cljs.spec.alpha",
    "pcat","cljs.spec.alpha/pcat",26406623),pp=new w("gateway.state.spec.domain-registry","version","gateway.state.spec.domain-registry/version",-650577592),qp=new w(null,"illegal-argument","illegal-argument",-1845493170),rp=new w(null,"factory_ids","factory_ids",1173653523),sp=new w(null,"types","types",590030639),tp=new w(null,"subscriber","subscriber",-2064338413),up=new w(null,"writing","writing",-1486865108),vp=new w("gateway.state.spec.restrictions","parsed-restrictions","gateway.state.spec.restrictions/parsed-restrictions",
    1374812996),wp=new w("gateway.state.spec.mthds","description","gateway.state.spec.mthds/description",-129583756),xp=new w(null,"deny-spec","deny-spec",-1074984268),yp=new w(null,"parameter-from-args","parameter-from-args",-758446196),zp=new w("gateway.common.context.spec.requests","lifetime","gateway.common.context.spec.requests/lifetime",-228133926),Ap=new w("gateway.domains.global.spec.messages","remote-identity","gateway.domains.global.spec.messages/remote-identity",1498525882),Ck=new w(null,"keywordize-keys",
    "keywordize-keys",1310784252),Bp=new w("gateway.state.spec.bus","topic","gateway.state.spec.bus/topic",-1241703207),Cp=new w(null,"logical-block-callback","logical-block-callback",1612691194),Dp=new Md(null,"inst","inst",-2008473268,null),Ep=new w("gateway.common.spec.messages","receiver","gateway.common.spec.messages/receiver",679023931),Fp=new w(null,"selector","selector",762528866),Gp=new Md(null,"struct","struct",325972931,null),Hp=new w(null,"participants","participants",673603367),Ip=new w(null,
    "topic-repattern","topic-repattern",1187945138),Jp=new w(null,"call","call",-519999866),Kp=new Md("cljs.core","partial","cljs.core/partial",1483172485,null),Lp=new w(null,"hours","hours",58380855),Mp=new w(null,"start-production","start-production",687546537),Np=new Md(null,"p1__15399#","p1__15399#",-139882539,null),Op=new w(null,"buffer","buffer",617295198),Pp=new w(null,"repo-id","repo-id",-402847325),Qp=new Md("cljs.core","sequence","cljs.core/sequence",1908459032,null),Rp=new w(null,"context",
    "context",-830191113),Sp=new w(null,"restrictions","restrictions",1874752994),Tp=new Md("cljs.spec.alpha","or","cljs.spec.alpha/or",-831679639,null),Up=new w(null,"services","services",970478783),Vp=new w(null,"access_token","access_token",1591156073),Wp=new w(null,"input-format","input-format",-422703481),Xp=new w(null,"invocations","invocations",-1981777494),Yp=new w("gateway.state.spec.agm","stream-peer-info","gateway.state.spec.agm/stream-peer-info",1892226854),Zp=new w(null,"opt-keys","opt-keys",
    1262688261),$p=new w(null,"raw-console?","raw-console?",-2061489061),aq=new w(null,"ref-counted","ref-counted",-1035328654),bq=new Md(null,"reader","reader",1810192380,null),cq=new w(null,"indent","indent",-148200125),Gk=new w(null,"descendants","descendants",1824886031),dq=new w(null,"context-compatibility-mode?","context-compatibility-mode?",564867301),eq=new w("gateway.domains.global.spec.requests","reset","gateway.domains.global.spec.requests/reset",-116815601),fq=new w(null,"types-added","types-added",
    1274011029),gq=new w(null,"publisher-identity","publisher-identity",1716891391),hq=new w("gateway.state.spec.mthds","peer-methods","gateway.state.spec.mthds/peer-methods",-639609469),iq=new w(null,"ALPHA","ALPHA",-1463859144),jq=new w(null,"context-domain","context-domain",-563887528),kq=new w("gateway.domains.global.spec.requests","context-destroy","gateway.domains.global.spec.requests/context-destroy",1322892186),lq=new w(null,"pred-forms","pred-forms",172611832),mq=new w(null,"location","location",
    1815599388),Fj=new w(null,"val","val",128701612),nq=new w("gateway.state.spec.context","data","gateway.state.spec.context/data",790358174),oq=new w("gateway.state.spec.pending-requests","client-request","gateway.state.spec.pending-requests/client-request",1663875818),pq=new Md("cljs.core","contains?","cljs.core/contains?",-976526835,null),qq=new w(null,"destroyed","destroyed",-427566535),rq=new w(null,"subscribed-context","subscribed-context",-451582146),sq=new w(null,"DQUOTE","DQUOTE",-571169808),
    hb=new w(null,"flush-on-newline","flush-on-newline",-151457939),tq=new Md("cljs.spec.alpha","and","cljs.spec.alpha/and",-2060279705,null),uq=new Md(null,"loop","loop",1244978678,null),vq=new w("gateway.state.spec.context","timestamp","gateway.state.spec.context/timestamp",1704984480),wq=new w(null,"dispose-peer","dispose-peer",68303444),xq=new w("gateway.state.spec.tokens","gateway-token","gateway.state.spec.tokens/gateway-token",1169641187),yq=new w(null,"timeout","timeout",-318625318),zq=new w(null,
    "joined_name","joined_name",-1159730335),Aq=new w(null,"illegal-state","illegal-state",-1519851182),Bq=new w(null,"max-columns","max-columns",1742323262),Cq=new w(null,"ids","ids",-998535796),Dq=new w("gateway.domains.global.spec.requests","context-create","gateway.domains.global.spec.requests/context-create",-1370416261),Eq=new w(null,"peer-factories-added","peer-factories-added",-2010470480),Fq=new w(null,"reader-error","reader-error",1610253121),Gq=new w("gateway.state.spec.common","string","gateway.state.spec.common/string",
    885967163),Hq=new w(null,"result_signature","result_signature",-1204398780),Iq=new w(null,"keep","keep",-2133338530),Jq=new w("gateway.domains.agm.spec.requests","arguments","gateway.domains.agm.spec.requests/arguments",-1906298417),Kq=new w(null,"both","both",-393648840),Lq=new w(null,"blacklist-ns","blacklist-ns",1200193567),Mq=new w(null,"symbol","symbol",-1038572696),Nq=new w(null,"CHAR","CHAR",-1280338086),Oq=new w(null,"context-updated","context-updated",744419706),Pq=new w("gateway.common.spec.requests",
    "join","gateway.common.spec.requests/join",-1713603460),Qq=new w(null,"msg-cache","msg-cache",-733775070),Rq=new w(null,"parser","parser",-1543495310),Sq=new w(null,"colnum","colnum",2023796854),Tq=new Md(null,"doseq","doseq",221164135,null),Uq=new w(null,"req-id","req-id",-471642231),Vq=new w(null,"char-val","char-val",1408617933),Wq=new w(null,"min","min",444991522),Xq=new Md("clojure.core","list","clojure.core/list",-1119203325,null),Yq=new w(null,"timestamp-opts","timestamp-opts",-1359534807),
    Ml=new Md(null,"throw","throw",595905694,null),Zq=new w(null,"iat","iat",-353315170),$q=new w(null,"splice","splice",449588165),ar=new Md(null,"gateway.domains.agm.subscriptions","gateway.domains.agm.subscriptions",-340272132,null),br=new w(null,"length","length",588987862),cr=new w(null,"error-level?","error-level?",778415885),dr=new w("gateway.state.spec.pending-requests","gw-request-id","gateway.state.spec.pending-requests/gw-request-id",-996681140),er=new w(null,"char-format","char-format",-1016499218),
    fr=new w(null,"rep+","rep+",-281382396),gr=new w("gateway.domains.global.spec.messages","resolved_identity","gateway.domains.global.spec.messages/resolved_identity",-685850501),hr=new w("gateway.domains.agm.spec.requests","methods","gateway.domains.agm.spec.requests/methods",-366393681),ir=new w("gateway.domains.global.spec.messages","available_domains","gateway.domains.global.spec.messages/available_domains",-1472037229),jr=new w("gateway.state.spec.tokens","gw-request-id","gateway.state.spec.tokens/gw-request-id",
    146927020),kr=new w("gateway.domains.global.spec.requests","leave","gateway.domains.global.spec.requests/leave",101292368),lr=new Md("cljs.spec.alpha","map-of","cljs.spec.alpha/map-of",153715093,null),mr=new w("gateway.state.spec.tokens","token-data","gateway.state.spec.tokens/token-data",-481150767),nr=new w("gateway.domains.agm.spec.messages","new_peer_id","gateway.domains.agm.spec.messages/new_peer_id",-2026004018),or=new w("gateway.domains.agm.spec.register","register","gateway.domains.agm.spec.register/register",
    -572048018),pr=new w("gateway.common.context.spec.messages","context_id","gateway.common.context.spec.messages/context_id",745790948),qr=new w(null,"req-in","req-in",960021885),rr=new w("gateway.state.spec.agm","call","gateway.state.spec.agm/call",399063183),sr=new w(null,"context-added","context-added",-639543900),tr=new w("gateway.common.spec.messages","body","gateway.common.spec.messages/body",-1028765771),ur=new w(null,"grammar","grammar",1881328267),vr=new w(null,"epsilon","epsilon",-730158570),
    wr=new w(null,"prefix","prefix",-265908465),xr=new w(null,"arguments","arguments",-1182834456),yr=new w("gateway.state.spec.state","id","gateway.state.spec.state/id",2050905551),zr=new w(null,"hi","hi",-1821422114),Ar=new w("gateway.state.spec.agm","interest","gateway.state.spec.agm/interest",1248511583),Br=new w("gateway.common.spec.messages","peer_id","gateway.common.spec.messages/peer_id",-1253667286),Fl=new Md(null,"fn*","fn*",-752876845,null),Cr=new w(null,"description","description",-1428560544),
    Dr=new w(null,"visibility","visibility",1338380893),Er=new w("gateway.domains.agm.spec.requests","invocation_id","gateway.domains.agm.spec.requests/invocation_id",-621605438),Fr=new w(null,"peer_factory","peer_factory",1685625260),Gr=new w(null,"dispatch","dispatch",1319337009),Hr=new w(null,"rest","rest",-1241696419),Ir=new w(null,"sqn","sqn",2076851999),Jr=new w("rl","reset","rl/reset",-800926172),Kr=new w(null,"user","user",1532431356),Lr=new w(null,"colon-up-arrow","colon-up-arrow",244853007),
    Mr=new w(null,"activity-domain","activity-domain",1896268503),Nr=new w(null,"message","message",-406056002),Or=new w(null,"alternation","alternation",-1162147630),Pr=new w(null,"eq","eq",-618539067),Qr=new w(null,"required","required",1807647006),Rr=new w("gateway.state.spec.state","no-user","gateway.state.spec.state/no-user",-565346809),Sr=new w(null,"new_peer_id","new_peer_id",1380469887),Tr=new w("gateway.domains.agm.spec.requests","remove-interest","gateway.domains.agm.spec.requests/remove-interest",
    -328528457),V=new Md("cljs.core","fn","cljs.core/fn",-1065745098,null),Ur=new w(null,"string-ci","string-ci",374631805),Vr=new w(null,"fn","fn",-1175266204),Wr=new w(null,"kind","kind",-717265803),Xr=new w(null,"types_override","types_override",391099757),Yr=new w(null,"histo","histo",-821552278),Zr=new w("gateway.state.spec.mthds","no-methods","gateway.state.spec.mthds/no-methods",658181793),$r=new w(null,"hide-tag-rule","hide-tag-rule",150267589),as=new w("gateway.state.spec.mthds","id","gateway.state.spec.mthds/id",
    2078923376),bs=new w("gateway.state.spec.pending-requests","gateway-requests","gateway.state.spec.pending-requests/gateway-requests",-1212651271),cs=new w(null,"parser1","parser1",-439601422),ds=new w(null,"parser2","parser2",1013754688),es=new w(null,"types-removed","types-removed",-1458332519),fs=new w(null,"target_identity","target_identity",-786887198),gs=new w(null,"joined_type","joined_type",973647374),hs=new Md("cljs.spec.alpha","conform","cljs.spec.alpha/conform",763100824,null),is=new w(null,
    "generation","generation",-2132542044),js=new w("gateway.common.context.spec.messages","reason","gateway.common.context.spec.messages/reason",-795974116),ks=new Md(null,"pending-forms","pending-forms",-1225172071,null),ls=new Md("clojure.walk","keywordize-keys","clojure.walk/keywordize-keys",-1055520580,null),ms=new w(null,"vargs","vargs",-966597273),El=new Md(null,"js*","js*",-1134233646,null),ns=new w(null,"repeat","repeat",832692087),os=new w(null,"suffix","suffix",367373057),ps=new w(null,"whitelist",
    "whitelist",-979294437),qs=new w(null,"fatal","fatal",1874419888),rs=new Md("s","keys","s/keys",-1586011188,null),ss=new w("gateway.common.context.spec.requests","context-update","gateway.common.context.spec.requests/context-update",562123698),ts=new w(null,"rulename-right","rulename-right",1125609193),us=new w(null,"at","at",1476951349),vs=new w(null,"created_id","created_id",-1653142250),ws=new w(null,"nl-t","nl-t",-1608382114),xs=new w(null,"activity_types","activity_types",-1792673047),ys=new Md("cljs.tools.reader",
    "read-string*","cljs.tools.reader/read-string*",1492661621,null),zs=new w(null,"remaining","remaining",-138926777),As=new w("gateway.state.spec.state","handler-ch","gateway.state.spec.state/handler-ch",-891933338),Bs=new w(null,"read-cond","read-cond",1056899244),Cs=new w("gateway.auth.spec","message","gateway.auth.spec/message",212934373),Ds=new w(null,"gen-max","gen-max",-793680445),Es=new w(null,"column","column",2078222095),Fs=new w(null,"metrics","metrics",394093469),Gs=new w(null,"joined","joined",
    -231861661),Hs=new w(null,"or","or",235744169),Is=new w(null,"os","os",795021913),Js=new w(null,"directive","directive",793559132),Ks=new w(null,"unsubscribe-context","unsubscribe-context",-1695207834),Ls=new w(null,"buffer-level","buffer-level",928864731),Ms=new w(null,"ps","ps",292358046),Ns=new Md(null,"keyword?","keyword?",1917797069,null),Os=new w("gateway.state.spec.activity","context-id","gateway.state.spec.activity/context-id",341891962),Ps=new w("gateway.domains.global.spec.requests","authentication",
    "gateway.domains.global.spec.requests/authentication",2133771245),Qs=new w(null,"form","form",-1624062471),Rs=new w(null,"group","group",582596132),Ss=new w(null,"ms","ms",-1152709733),Ts=new w(null,"?err","?err",549653299),Us=new Md("cljs.core","any?","cljs.core/any?",-2068111842,null),Vs=new w(null,"mandatory","mandatory",542802336),Ws=new w(null,"rulelist","rulelist",-1871218473),Xs=new w("gateway.state.spec.mthds","flags","gateway.state.spec.mthds/flags",408816343),Ys=new w(null,"parsers","parsers",
    -804353827),Zs=new w(null,"p1","p1",-936759954),$s=new w(null,"pretty-writer","pretty-writer",-1222834267),at=new w(null,"nt","nt",-835425781),bt=new w("gateway.domains.global.spec.messages","context_id","gateway.domains.global.spec.messages/context_id",-1799893258),ct=new w(null,"p2","p2",905500641),dt=new w(null,"ns","ns",441598760),et=new w("gateway.state.spec.common","type","gateway.state.spec.common/type",-877512429),ft=new w(null,"config","config",994861415),gt=new w(null,"done-nl","done-nl",
    -381024340),ht=new w(null,"initial_context","initial_context",-797433349),it=new w(null,"removed","removed",609626430),jt=new Md(null,"address-type","address-type",-1732576165,null),kt=new w("gateway.domains.agm.spec.unregister","methods","gateway.domains.agm.spec.unregister/methods",1593198071),lt=new w(null,"ks","ks",1900203942),mt=new w(null,"source","source",-433931539),nt=new Md(null,"condp","condp",1054325175,null),ot=new w(null,"keyword","keyword",811389747),pt=new w("gateway.domains.agm.spec.requests",
    "context","gateway.domains.agm.spec.requests/context",-1915055426),qt=new w(null,"authenticator","authenticator",728866366),rt=new w(null,"vargs_","vargs_",552132148),st=new w(null,"lo","lo",-931799889),tt=new w("gateway.state.spec.activity","ready-members","gateway.state.spec.activity/ready-members",-939559218),ut=new w("gateway.domains.global.spec.requests","added","gateway.domains.global.spec.requests/added",-1820753011),vt=new w(null,"debug","debug",-1608172596),wt=new w(null,"hide","hide",-596913169),
    xt=new w(null,"id","id",-1388402092),yt=new w(null,"else","else",-1508377146),zt=new w(null,"seq","seq",-1817803783),At=new Md(null,"defn","defn",-126010802,null),Bt=new w("gateway.state.spec.agm","calls","gateway.state.spec.agm/calls",16611731),Ct=new w(null,"set","set",304602554),Dt=new w(null,"join","join",-758861890),Et=new w("gateway.state.spec.context","owner","gateway.state.spec.context/owner",-1445790718),Ft=new w("gateway.domains.agm.spec.requests","accepted","gateway.domains.agm.spec.requests/accepted",
    1383451047),Gt=new w(null,"js","js",1768080579),Ht=new w(null,"origin","origin",1037372088),It=new w(null,"LWSP","LWSP",782998598),Jt=new w("instaparse.gll","end-index","instaparse.gll/end-index",-1851404441),Kt=new w(null,"colinc","colinc",-584873385),Lt=new w("gateway.domains.agm.spec.register","methods","gateway.domains.agm.spec.register/methods",-209946928),Mt=new w(null,"node","node",581201198),Xk=new Md(null,"\x26","\x26",-2144855648,null),Nt=new w(null,"deny","deny",1589338523),X=new Md(null,
    "%","%",-950237169,null),mb=new w(null,"print-length","print-length",1931866356),Ot=new w(null,"up-arrow","up-arrow",1705310333),Il=new Md(null,".",".",1975675962,null),Pt=new Md(null,"/","/",-1371932971,null),Qt=new w(null,"ns-filter","ns-filter",108598448),Rt=new w("gateway.state.spec.factory","factories","gateway.state.spec.factory/factories",-1725265010),St=new w("gateway.domains.global.internal","authentication-failed","gateway.domains.global.internal/authentication-failed",1518002013),Tt=new w(null,
    "input_signature","input_signature",158735218),Ut=new w("gateway.common.context.spec.messages","creator_id","gateway.common.context.spec.messages/creator_id",2137586424),Vt=new w(null,"partial","partial",241141745),Wt=new w(null,"hostname_","hostname_",-2091647379),Xt=new w(null,"char-range","char-range",1443391389),Yt=new w("cljs.spec.alpha","kvs-\x3emap","cljs.spec.alpha/kvs-\x3emap",579713455),Zt=new w(null,"large-msg","large-msg",2140041016),$t=new w("gateway.state.spec.context","contexts","gateway.state.spec.context/contexts",
    -1052863269),au=new w(null,"right-bracket","right-bracket",951856080),bu=new w("gateway.domains.agm.spec.requests","publish","gateway.domains.agm.spec.requests/publish",-1020033829),cu=new Md(null,"_","_",-1201019570,null),du=new w(null,"context_id","context_id",1618636315),eu=new w("gateway.state.spec.activity","helper_types","gateway.state.spec.activity/helper_types",-920321960),fu=new Md(null,"k","k",-505765866,null),gu=new Md(null,"m","m",-1021758608,null),hu=new w(null,"options","options",99638489),
    iu=new Md(null,"v","v",1661996586,null),ju=new w(null,"service","service",-1963054559),ku=new w(null,"auth","auth",1389754926),lu=new Md(null,"\x3d","\x3d",-1501502141,null),mu=new w(null,"high","high",2027297808),nu=new w(null,"auto","auto",-566279492),ou=new w(null,"whitespace","whitespace",-1340035483),pu=new w("gateway.state.spec.pending-requests","gateway-request","gateway.state.spec.pending-requests/gateway-request",796467142),qu=new w(null,"authentication","authentication",1746273042),ru=new Md("cljs.core",
    "number?","cljs.core/number?",-811857295,null),su=new w(null,"hierarchy","hierarchy",-1053470341),tu=new w(null,"plus","plus",211540661),uu=new w("gateway.state.spec.tokens","lifetime","gateway.state.spec.tokens/lifetime",887565809),vu=new w(null,"hex-val","hex-val",1267737401),wu=new w(null,"comma","comma",1699024745),xu=new w(null,"radix","radix",857016463),yu=new w(null,"subscribe-context","subscribe-context",1009129400),zu=new w(null,"first","first",-644103046),Au=new w(null,"add-peer-factories",
    "add-peer-factories",-1612194889),Bu=new w(null,"methods-added","methods-added",2044022595),Cu=new w(null,"stream_id","stream_id",-871396659),Du=new w(null,"middleware-fn","middleware-fn",-61585752),Eu=new Md("cljs.core","vec","cljs.core/vec",307622519,null),Fu=new w(null,"state","state",-1988618099),Gu=new w(null,"enlive","enlive",1679023921),Hu=new w(null,"allow","allow",-1857325745),Iu=new w(null,"domain","domain",1847214937),Ju=new w("gateway.domain","operation-result","gateway.domain/operation-result",
    -1509018323),Ku=new w(null,"sections","sections",-886710106),Lu=new w(null,"activity-subscribers","activity-subscribers",12051372),Mu=new w(null,"secs","secs",1532330091),Nu=new w(null,"drop-subscription","drop-subscription",-1853238873),Ou=new Md(null,"partial","partial",1881673272,null),Pu=new w(null,"identities","identities",-2100677764),Qu=new w(null,"instant","instant",655498374),Ru=new w(null,"min-count","min-count",1594709013),Su=new w(null,"snapshot","snapshot",-1274785710),Tu=new w(null,
    "hide-tag","hide-tag",1347642501),Uu=new w(null,"alt-or-ord","alt-or-ord",310249425),Vu=new w(null,"HTAB","HTAB",11392612),Wu=new w(null,"start","start",-355208981),Xu=new w("gateway.state.spec.state","peer","gateway.state.spec.state/peer",-2119577277),Yu=new w(null,"nodes","nodes",-2099585805),Zu=new w(null,"trace?","trace?",1730690679),$u=new w(null,"metrics-domain","metrics-domain",-1136423917),av=new w(null,"commands","commands",161008658),bv=new w(null,"create-context","create-context",-1362772644),
    cv=new w(null,"owner","owner",-392611939),dv=new w(null,"non-matched","non-matched",-624651186),ev=new w("gateway.common.context.spec.requests","context-unsubscribe","gateway.common.context.spec.requests/context-unsubscribe",46104946),fv=new w(null,"owner-changed","owner-changed",-1569176886),gv=new w(null,"allowed","allowed",1436019743),hv=new Md("cljs.core","map?","cljs.core/map?",-1390345523,null),iv=new w(null,"min-version","min-version",-1697197126),Gl=new Md(null,"recur","recur",1202958259,
    null),jv=new w("gateway.state.spec.common","activity-id","gateway.state.spec.common/activity-id",245315645),kv=new w(null,"current-id","current-id",210783650),lv=new w(null,"created","created",-704993748),mv=new w(null,"element","element",1974019749),nv=new w(null,"now","now",-1650525531),ov=new w(null,"middleware","middleware",1462115504),pv=new w("gateway.domains.global.spec.requests","removed","gateway.domains.global.spec.requests/removed",-1641157465),qv=new w(null,"skip-validation","skip-validation",
    -195677600),rv=new w(null,"recur","recur",-437573268),sv=new w("gateway.state.spec.agm","method_id","gateway.state.spec.agm/method_id",1007252604),tv=new Md(null,"message-body","message-body",-554118051,null),uv=new w(null,"available_domains","available_domains",-981328192),vv=new w(null,"invocation_id","invocation_id",1947784937),wv=new w(null,"aud","aud",357659490),xv=new Md("cljs.core","unquote","cljs.core/unquote",1013085760,null),yv=new w("gateway.domain","leave","gateway.domain/leave",-1366936831),
    zv=new Md("cljs.core","hash-set","cljs.core/hash-set",1130426749,null),Av=new w(null,"allow-spec","allow-spec",448749872),Bv=new Md(null,"defn-","defn-",1097765044,null),Cv=new w(null,"no-user","no-user",793713538),Dv=new w(null,"output-format","output-format",-1826382676),Ev=new Md("cljs.core","deref","cljs.core/deref",1901963335,null),Fv=new w(null,"measurements","measurements",82224007),Gv=new w("gateway.common.spec.messages","meta","gateway.common.spec.messages/meta",-2108831238),Hv=new w(null,
    "block","block",664686210),Iv=new w(null,"context_snapshot","context_snapshot",-703318056),Jv=new w(null,"enabled","enabled",1195909756),Kv=new w(null,"endpoint","endpoint",447890044),Lv=new Md(null,"when","when",1064114221,null),Mv=new w("gateway.auth.spec","login","gateway.auth.spec/login",532129350),Nv=new w(null,"register","register",1968522516),Ov=new w(null,"handler-ch","handler-ch",2044105199),Pv=new w(null,"unhide","unhide",-413983695),Pc=new w(null,"more-marker","more-marker",-14717935),
    Qv=new w(null,"default_context","default_context",-1148569539),Rv=new w(null,"stacktrace-fonts","stacktrace-fonts",830799382),Sv=new w(null,"repos","repos",647483789),Tv=new w(null,"context-destroyed","context-destroyed",-1281742589),Uv=new w("gateway.domains.agm.spec.requests","data","gateway.domains.agm.spec.requests/data",688691322),Vv=new w("gateway.state.spec.activity","ready?","gateway.state.spec.activity/ready?",-1768127396),Wv=new w(null,"basic","basic",1043717368),ul=new Md(null,"ns*","ns*",
    1840949383,null),Xv=new w("gateway.state.spec.activity","type","gateway.state.spec.activity/type",-462200009),Yv=new w(null,"type","type",1174270348),Zv=new w(null,"none","none",1333468478),$v=new w("cljs.spec.alpha","gfn","cljs.spec.alpha/gfn",-593120375),aw=new w(null,"activity_id","activity_id",-240070853),bw=new w(null,"messages","messages",345434482),cw=new w(null,"cause","cause",231901252),dw=new w("cljs.spec.alpha","conform-all","cljs.spec.alpha/conform-all",45201917),ew=new w(null,"creation-request",
    "creation-request",1261647120),fw=new w("gateway.domains.global.spec.requests","write_permissions","gateway.domains.global.spec.requests/write_permissions",774911915),gw=new w(null,"else-params","else-params",-832171646),hw=new w("gateway.state.spec.state","node-id","gateway.state.spec.state/node-id",-982277841),iw=new w(null,"instance","instance",-2121349050),jw=new w(null,"reduction-type","reduction-type",-488293450),kw=new Md("cljs.core","int?","cljs.core/int?",50730120,null),lw=new w(null,"creator",
    "creator",-1069241724),mw=new w(null,"left","left",-399115937),nw=new w(null,"async?","async?",1523057758),ow=new w(null,"publishers","publishers",1474752298),pw=new w(null,"line","line",212345235),qw=new w(null,"subscription-cancelled","subscription-cancelled",1868207049),rw=new w(null,"methods","methods",453930866),sw=new w(null,"method","method",55703592),tw=new Md(null,"js","js",-886355190,null),uw=new w("gateway.state.spec.state","creation-request","gateway.state.spec.state/creation-request",
    473028997),vw=new Md(null,"gateway.state.spec.common","gateway.state.spec.common",27478502,null),Yk=new Md(null,"case*","case*",-1938255072,null),ww=new w(null,"node-id","node-id",779482292),xw=new w(null,"clients","clients",1436018090),yw=new w("gateway.state.spec.context","name","gateway.state.spec.context/name",-1494107954),zw=new w(null,"count","count",2139924085),Aw=new w(null,"available","available",-1470697127),Bw=new w(null,"right","right",-452581833),Cw=new w("gateway.state.spec.state","peers",
    "gateway.state.spec.state/peers",75810773),Dw=new w(null,"linear","linear",872268697),Ew=new w(null,"removed_id","removed_id",1940625745),Fw=new w("gateway.state.spec.common","identity","gateway.state.spec.common/identity",-343306948),Gw=new w(null,"next-stack","next-stack",-481930728),Hw=new w(null,"add-interest","add-interest",-1148631141),ib=new w(null,"readably","readably",1129599760),Iw=new w(null,"ttl","ttl",-1115275118),Jw=new w("gateway.common.context.spec.requests","read_permissions","gateway.common.context.spec.requests/read_permissions",
    -45173714),Kw=new w(null,"sequence","sequence",926807414),Lw=new w("gateway.state.spec.activity","user","gateway.state.spec.activity/user",-93065379),Mw=new w("gateway.state.spec.domain-registry","uri","gateway.state.spec.domain-registry/uri",301088755),Nw=new w("gateway.state.spec.bus","subscription-id","gateway.state.spec.bus/subscription-id",-1920104157),Ow=new w("gateway.state.spec.bus","subscription","gateway.state.spec.bus/subscription",1556343370),Pw=new w(null,"added","added",2057651688),
    Qw=new w(null,"environment","environment",-666037640),Rw=new w(null,"optimize","optimize",-1912349448),Sw=new w(null,"data","data",-232669377),Tw=new w(null,"VCHAR","VCHAR",1962437706),Uw=new w(null,"whitelist-ns","whitelist-ns",868974100),Vw=new w(null,"?meta","?meta",-793560773),Ww=new w("gateway.state.spec.agm","subscription","gateway.state.spec.agm/subscription",1556334291),Xw=new w("gateway.common.context.spec.requests","command","gateway.common.context.spec.requests/command",-1702281587),Yw=
    new w(null,"appender","appender",1267426510),Zw=new Md("cljs.core","boolean?","cljs.core/boolean?",1400713761,null),$w=new w(null,"gw-request-id","gw-request-id",2114687330),ax=new w(null,"lookahead","lookahead",-400102393),bx=new w(null,"client-request","client-request",-1402967032),cx=new w(null,"validation","validation",-2141396518),dx=new Md(null,"when-not","when-not",-1223136340,null),ex=new w(null,"CR","CR",-1654295403),fx=new w(null,"create","create",-1301499256),Bl=new Md(null,"ns","ns",2082130287,
    null),gx=new w(null,"stack","stack",-793405930),hx=new w("gateway.common.spec.messages","reason","gateway.common.spec.messages/reason",1129095963),qk=new w(null,"pending","pending",-220036727),ix=new w("gateway.state.spec.mthds","input_signature","gateway.state.spec.mthds/input_signature",2082802494),jx=new w(null,"subscription","subscription",1949009182),kx=new w(null,"padchar","padchar",2018584530),lx=new w(null,"strable","strable",1877668047),mx=new w(null,"peer-removed","peer-removed",1752359546),
    nx=new w(null,"defined-as","defined-as",-474679152),ox=new w(null,"col","col",-1959363084),px=new w(null,"days","days",-1394072564),qx=new w("gateway.common.context.spec.requests","context-destroy","gateway.common.context.spec.requests/context-destroy",-2019226956),rx=new w("gateway.state.spec.restrictions","empty-restrictions","gateway.state.spec.restrictions/empty-restrictions",1011650447),sx=new w(null,"destroy","destroy",-843660405),tx=new w(null,"failure","failure",720415879),ux=new w(null,"factories",
    "factories",1443149712),vx=new w("gateway.state.spec.activity","configuration","gateway.state.spec.activity/configuration",1853083827),wx=new w(null,"offset","offset",296498311),xx=new w(null,"conform-keys","conform-keys",-1800041814),yx=new Md(null,"set?","set?",1636014792,null),zx=new w(null,"resolved_identity","resolved_identity",-874947112),Ax=new w(null,"mincol","mincol",1230695445),Bx=new w("gateway.domains.agm.spec.requests","data-message","gateway.domains.agm.spec.requests/data-message",-153411654),
    Cx=new w(null,"dec-val","dec-val",-1263870894),Hl=new Md(null,"set!","set!",250714521,null),Dx=new w("gateway.state.spec.mthds","method-def","gateway.state.spec.mthds/method-def",858475302),Ex=new w(null,"not-delivered","not-delivered",1599158697),Fx=new w("gateway.common.context.spec.requests","removed","gateway.common.context.spec.requests/removed",-732316803),Gx=new w(null,"hash_","hash_",-827203612),Hx=new w(null,"miser-width","miser-width",-1310049437),Ix=new w(null,"hash","hash",-13781596),
    Jx=new w(null,"hide-nt","hide-nt",-228813845),Kx=new w(null,"hiccup","hiccup",1218876238),Lx=new w(null,"welcome","welcome",-578152123),Mx=new Md("cljs.spec.alpha","tuple","cljs.spec.alpha/tuple",-415901908,null),Nx=new w("gateway.domains.agm.spec.requests","method_id","gateway.domains.agm.spec.requests/method_id",926663112),Ox=new w("gateway.state.spec.factory","flags","gateway.state.spec.factory/flags",-1898127651),Px=new w(null,"error","error",-978969032),Qx=new w(null,"WSP","WSP",-1046948716),
    Rx=new w(null,"rule-separator","rule-separator",1539322213),Sx=new Md(null,"with-local-vars","with-local-vars",837642072,null),Tx=new Md("cljs.spec.alpha","multi-spec","cljs.spec.alpha/multi-spec",175821274,null),Ux=new w("gateway.common.context.spec.requests","join","gateway.common.context.spec.requests/join",94453629),Vx=new w("gateway.common.spec.messages","request","gateway.common.spec.messages/request",712202569),Wx=new w(null,"args","args",1315556576),Xx=new w("gateway.state.spec.agm","interests",
    "gateway.state.spec.agm/interests",1622331889),Yx=new w("gateway.state.spec.agm","caller","gateway.state.spec.agm/caller",-1898628116),Zx=new w("gateway.domains.agm.core","peer-methods","gateway.domains.agm.core/peer-methods",639951360),$x=new w(null,"display_name","display_name",-1494335013),ay=new w("gateway.domains.global.spec.requests","lifetime","gateway.domains.global.spec.requests/lifetime",-1145821948),by=new w("gateway.state.spec.agm","callee","gateway.state.spec.agm/callee",1100257697),
    cy=new w(null,"BIT","BIT",-1854474115),Al=new Md(null,"new","new",-444906321,null),dy=new Md("cljs.core","with-meta","cljs.core/with-meta",749126446,null),ey=new w(null,"cache?","cache?",-1601953949),fy=new Md("cljs.core","list","cljs.core/list",-1331406371,null),gy=new w(null,"calls","calls",-433802344),hy=new Md(null,"lift-ns","lift-ns",602311926,null),iy=new w(null,"allows-separator","allows-separator",-818967742),jy=new w(null,"list","list",765357683),ky=new Md("cljs.core","seq","cljs.core/seq",
    -1649497689,null),ly=new w(null,"node-builder","node-builder",-1956562605),my=new w(null,"buffering","buffering",-876713613),ny=new w(null,"arg1","arg1",951899358),oy=new w(null,"base-args","base-args",-1268706822),py=new w(null,"arg3","arg3",-1486822496),qy=new w(null,"arg2","arg2",1729550917),ry=new w(null,"owner_type","owner_type",846064882),sy=new w("gateway.state.spec.activity","activity-peer","gateway.state.spec.activity/activity-peer",-1499406427),ty=new w(null,"event","event",301435442),uy=
    new Md("gateway.domains.agm.subscriptions","drop-interest-rq","gateway.domains.agm.subscriptions/drop-interest-rq",1736302176,null),vy=new w(null,"rate-limit","rate-limit",1748082022),wy=new w(null,"?ns-str","?ns-str",2012733966),xy=new w(null,"commainterval","commainterval",-1980061083),yy=new w("gateway.state.spec.activity","default_context","gateway.state.spec.activity/default_context",1517722536),zy=new w(null,"ping","ping",-1670114784),Ay=new w(null,"min-level","min-level",1634684919),By=new w(null,
    "value","value",305978217),Cy=new w("gateway.domains.agm.spec.requests","flags","gateway.domains.agm.spec.requests/flags",989202486),Dy=new w(null,"peer","peer",1319662792),Ey=new w("gateway.state.spec.activity","activities","gateway.state.spec.activity/activities",1132481734),Fy=new w(null,"LF","LF",1177033158),Gy=new w("gateway.state.spec.state","ids","gateway.state.spec.state/ids",259664151),Hy=new w(null,"ns-blacklist","ns-blacklist",1957763142),Iy=new w(null,"composite","composite",-257118970),
    Jy=new Md("cljs.core","concat","cljs.core/concat",-1133584918,null),Ky=new Md("cljs.spec.alpha","coll-of","cljs.spec.alpha/coll-of",1019430407,null),Ly=new w("gateway.auth.spec","type","gateway.auth.spec/type",552402611),My=new w(null,"ready?","ready?",-105765697),Ny=new w(null,"machine","machine",-1389886154),Oy=new w("gateway.state.spec.activity","activity-subscribers","gateway.state.spec.activity/activity-subscribers",-1579465715),Py=new w(null,"trace","trace",-1082747415),Qy=new w("instaparse.gll",
    "start-index","instaparse.gll/start-index",404653620),Ry=new w(null,"subscriptions","subscriptions",1250949776),Sy=new w(null,"right-margin","right-margin",-810413306),Ty=new w("gateway.state.spec.state","user-name","gateway.state.spec.state/user-name",-1129365610),Uy=new w("gateway.auth.spec","remote_identity","gateway.auth.spec/remote_identity",-1701598746),Vy=new w(null,"ident","ident",-742346),Wy=new Md("cljs.core","set?","cljs.core/set?",-1176684971,null),Xy=new Md("cljs.core","keyword","cljs.core/keyword",
    -337316415,null),Yy=new w("gateway.state.spec.activity","properties","gateway.state.spec.activity/properties",-914053381),Zy=new w("gateway.domains.global.spec.requests","context-update","gateway.domains.global.spec.requests/context-update",-1728804708),$y=new w("gateway.state.spec.domain-registry","registered-domains","gateway.state.spec.domain-registry/registered-domains",511803772),az=new Md("cljs.core","list?","cljs.core/list?",-684796618,null),bz=new w("gateway.auth.spec","authentication","gateway.auth.spec/authentication",
    -2005184469),cz=new w(null,"buffer-blob","buffer-blob",-1830112173),dz=new w("gateway.domains.global.spec.requests","read_permissions","gateway.domains.global.spec.requests/read_permissions",75711320),ez=new w(null,"features","features",-1146962336),fz=new w(null,"context-id","context-id",1979873501),gz=new w(null,"inactive_seconds","inactive_seconds",-1714688448),hz=new w(null,"full-listeners","full-listeners",50621827),iz=new Md(null,"with-open","with-open",172119667,null),jz=new Md("cljs.spec.alpha",
    "merge","cljs.spec.alpha/merge",1420080689,null),kz=new w("gateway.state.spec.state","activity-subscribers","gateway.state.spec.state/activity-subscribers",-776389065),lz=new Md(null,"response-type","response-type",146761069,null),mz=new w(null,"cat","cat",-1457810207),nz=new w("gateway.state.spec.state","users","gateway.state.spec.state/users",-2072351172),oz=new w(null,"activity","activity",-1179221455),pz=new w("gateway.common.spec.messages","new_peer_id","gateway.common.spec.messages/new_peer_id",
    326805829),qz=new Md("cljs.spec.alpha","conformer","cljs.spec.alpha/conformer",2140085535,null),rz=new w(null,"gw-request","gw-request",1009584674),sz=new w(null,"local","local",-1497766724),tz=new w("gateway.state.spec.domain-registry","description","gateway.state.spec.domain-registry/description",-350920838),uz=new w(null,"login","login",55217519),vz=new Md("cljs.spec.alpha","nilable","cljs.spec.alpha/nilable",1628308748,null),wz=new Md("cljs.core","lift-ns","cljs.core/lift-ns",463499081,null),
    xz=new w("gateway.domains.agm.spec.requests","add-interest","gateway.domains.agm.spec.requests/add-interest",1660124918),yz=new w("gateway.state.spec.agm","subscription-id","gateway.state.spec.agm/subscription-id",-1920105558),zz=new w("gateway.domains.global.spec.requests","context-unsubscribe","gateway.domains.global.spec.requests/context-unsubscribe",-602451908),Az=new w(null,"channel","channel",734187692),Bz=new w(null,"caller_id","caller_id",5404558),Cz=new w(null,"remote-identity","remote-identity",
    1289489893),Dz=new w(null,"full","full",436801220),Ez=new w(null,"lines","lines",-700165781),Fz=new w(null,"warn","warn",-436710552),Gz=new w(null,"SP","SP",124290284),Hz=new w("gateway.common.context.spec.requests","value","gateway.common.context.spec.requests/value",1114622378),Iz=new w(null,"tag","tag",-1290361223),Jz=new w(null,"indent-t","indent-t",528318969),Kz=new w(null,"destination","destination",-253872483),Lz=new w(null,"routing_key","routing_key",1236069137),Mz=new w(null,"rulename","rulename",
    948914160),Nz=new w("gateway.state.spec.activity","name","gateway.state.spec.activity/name",113237718),Oz=new w(null,"gfn","gfn",791517474),Pz=new w(null,"activity-types","activity-types",-397260556),Qz=new w("gateway.state.spec.bus","subscriptions","gateway.state.spec.bus/subscriptions",359149340),Rz=new w(null,"years","years",-1298579689),Sz=new w("gateway.state.spec.agm","subscriptions","gateway.state.spec.agm/subscriptions",359122069),Tz=new w(null,"regex","regex",939488856),Uz=new w(null,"streams",
    "streams",1465783789),wl=new Md(null,"loop*","loop*",615029416,null),Vz=new w("cljs.spec.alpha","cpred","cljs.spec.alpha/cpred",-693471218),Wz=new w("gateway.state.spec.context","lifetime","gateway.state.spec.context/lifetime",-510268810),Xz=new w(null,"DIGIT","DIGIT",341251338),Yz=new w(null,"activity_type","activity_type",-194821832),Zz=new w("gateway.domains.global.spec.messages","creator_id","gateway.domains.global.spec.messages/creator_id",2015161290),$z=new w(null,"NUM","NUM",-218662260),aA=
    new w(null,"leave","leave",1022579443),bA=new w("gateway.domains.agm.spec.requests","snapshot","gateway.domains.agm.spec.requests/snapshot",476154767),cA=new Md("cljs.core","apply","cljs.core/apply",1757277831,null),dA=new w(null,"right-params","right-params",-1790676237),eA=new w(null,"scavenger","scavenger",107984617),fA=new w(null,"identity","identity",1647396035),gA=new w("gateway.state.spec.common","endpoint","gateway.state.spec.common/endpoint",-2063041997),hA=new w(null,"colon","colon",-965200945),
    iA=new w(null,"owner?","owner?",-839891990),jA=new w("gateway.state.spec.state","contexts","gateway.state.spec.state/contexts",-1321025323),kA=new w("gateway.state.spec.agm","server","gateway.state.spec.agm/server",1918098797),lA=new w(null,"CRLF","CRLF",11418756),mA=new Md(null,"if-not","if-not",-265415609,null),nA=new w("gateway.state.spec.activity","participants","gateway.state.spec.activity/participants",-1995832242),oA=new w("gateway.domains.agm.spec.requests","unsubscribe","gateway.domains.agm.spec.requests/unsubscribe",
    -1898794870),kc=new w("cljs.core","not-found","cljs.core/not-found",-1572889185),pA=new w(null,"appenders","appenders",1245583998),qA=new w("gateway.state.spec.context","updates","gateway.state.spec.context/updates",-1191134395),rA=new w(null,"concatenation","concatenation",-951369614),sA=new w("gateway.state.spec.pending-requests","activity","gateway.state.spec.pending-requests/activity",1935677687),tA=new w(null,"vector","vector",1902966158),uA=new Md(null,"drop-interest-rq","drop-interest-rq",
    -842860790,null),vA=new w("gateway.common.context.spec.requests","context-subscribe","gateway.common.context.spec.requests/context-subscribe",-318176635),wA=new w(null,"weeks","weeks",1844596125),xA=new w("gateway.domains.agm.spec.requests","arguments_kv","gateway.domains.agm.spec.requests/arguments_kv",-220182488),yA=new w(null,"remove","remove",-131428414),zA=new w(null,"token-ttl","token-ttl",-103977687),AA=new w(null,"last-access","last-access",1110221580),BA=new w(null,"peer_type","peer_type",
    371163309),CA=new w("gateway.state.spec.factory","peer_type","gateway.state.spec.factory/peer_type",-885367633),DA=new w(null,"bin-val","bin-val",1705209105),EA=new w("cljs.spec.alpha","accept","cljs.spec.alpha/accept",370988198),FA=new Md("cljs.core","keyword?","cljs.core/keyword?",713156450,null),GA=new w(null,"timestamp","timestamp",579478971),vl=new Md(null,"finally","finally",-1065347064,null),HA=new w(null,"func","func",-238706040),IA=new w(null,"yield","yield",177875009),JA=new w(null,"result",
    "result",1415092211),KA=new w(null,"ord","ord",1142548323),LA=new w("gateway.state.spec.mthds","methods","gateway.state.spec.mthds/methods",-868139122),xl=new Md(null,"do","do",1686842252,null),MA=new w(null,"NOT","NOT",-1689245341),NA=new w(null,"opt","opt",-794706369),OA=new w(null,"msecs","msecs",1711980553),PA=new w("gateway.state.spec.common","source","gateway.state.spec.common/source",1883706108),QA=new w(null,"comment","comment",532206069),RA=new w(null,"requestor_id","requestor_id",-1253857801),
    SA=new w(null,"sym","sym",-1444860305),TA=new w(null,"auto-whitespace","auto-whitespace",741152317),Kl=new Md(null,"quote","quote",1377916282,null),UA=new w(null,"last","last",1105735132),VA=new w(null,"preserve","preserve",1276846509),WA=new w("gateway.state.spec.pending-requests","owner?","gateway.state.spec.pending-requests/owner?",346289860),XA=new w(null,"join-activity","join-activity",1683531460),YA=new w(null,"buffer-size","buffer-size",1047120420),ZA=new w(null,"secret","secret",618547054),
    $A=new w(null,"joined_id","joined_id",35485948),aB=new w(null,"read_permissions","read_permissions",766082539),bB=new w("gateway.domains.global.spec.requests","join","gateway.domains.global.spec.requests/join",-837980557),cB=new w(null,"regexp","regexp",-541372782),dB=new w("gateway.state.spec.activity","initiator","gateway.state.spec.activity/initiator",735796495),eB=new w("gateway.common.spec.messages","peer-message","gateway.common.spec.messages/peer-message",823378764),fB=new w(null,"deref","deref",
    -145586795),gB=new w("rl","all","rl/all",892118056),hB=new Md(null,"fn","fn",465265323,null),iB=new w("gateway.state.spec.state","current-id","gateway.state.spec.state/current-id",798109991),jB=new w("gateway.state.spec.pending-requests","type","gateway.state.spec.pending-requests/type",-1681171358),kB=new Md(null,"dotimes","dotimes",-818708397,null),lB=new w("gateway.domains.agm.spec.requests","yield","gateway.domains.agm.spec.requests/yield",1398099968),mB=new w(null,"max-iterations","max-iterations",
    2021275563),nB=new w(null,"char","char",-641587586),oB=new w(null,"oob","oob",707302005),pB=new w(null,"start-time","start-time",814801386),qB=new Md(null,"cond","cond",1606708055,null),rB=new w(null,"unsubscribe","unsubscribe",632650147),sB=new w(null,"key","key",-1516042587),tB=new w(null,"opt-whitespace","opt-whitespace",1115207927),uB=new Md("cljs.core","vector?","cljs.core/vector?",-1550392028,null),vB=new w("gateway.state.spec.common","peer_id","gateway.state.spec.common/peer_id",1217199451),
    wB=new w(null,"your-version","your-version",-351781765),xB=new Md("clojure.core","deref","clojure.core/deref",188719157,null),wd=new w(null,"alt-impl","alt-impl",670969595),yB=new w(null,"str","str",1089608819),zB=new w("gateway.state.spec.state","identities","gateway.state.spec.state/identities",-204237049),Jl=new Md(null,"var","var",870848730,null),AB=new w(null,"minpad","minpad",323570901),BB=new w("cljs.spec.alpha","invalid","cljs.spec.alpha/invalid",-1220295119),CB=new w("gateway.state.spec.mthds",
    "display_name","gateway.state.spec.mthds/display_name",1469788607),DB=new w(null,"logical-block","logical-block",-581022564),zl=new Md(null,"if","if",1181717262,null),EB=new w(null,"initial-context","initial-context",-32910095),FB=new w(null,"receiver","receiver",1768630781),GB=new w("gateway.domains.global.spec.messages","reason","gateway.domains.global.spec.messages/reason",-1756219178),HB=new w("gateway.domains.agm.spec.messages","meta","gateway.domains.agm.spec.messages/meta",520804499),IB=new Md("cljs.core",
    "some?","cljs.core/some?",-440439360,null),JB=new w(null,"users","users",-713552705),KB=new w(null,"max-age","max-age",-270129271),LB=new w("gateway.common.commands","source-removed","gateway.common.commands/source-removed",701959101),MB=new w(null,"pred-exprs","pred-exprs",1792271395),NB=new Md(null,"any?","any?",-318999933,null),OB=new w(null,"string","string",-1989541586),PB=new w(null,"configuration","configuration",1431842520),QB=new w("gateway.common.context.spec.messages","updater_id","gateway.common.context.spec.messages/updater_id",
    -850230629),RB=new w(null,"repetition","repetition",1938392115),SB=new w("gateway.domains.global.spec.messages","updater_id","gateway.domains.global.spec.messages/updater_id",-1794190419),TB=new w(null,"updated","updated",-1627192056),UB=new w("gateway.state.spec.common","peer-id","gateway.state.spec.common/peer-id",-1398853323),VB=new w(null,"domains","domains",1410387719),WB=new Md(null,"uuid","uuid",-504564192,null),XB=new w(null,"repository-factories","repository-factories",-545628132),YB=new w(null,
    "CTL","CTL",-9995632),lb=new w(null,"dup","dup",556298533),ZB=new w(null,"enabled?","enabled?",-1376075057),$B=new w(null,"updates","updates",2013983452),aC=new w("gateway.domains.global.spec.requests","context_id","gateway.domains.global.spec.requests/context_id",-1750912658),Xj=new w(null,"status","status",-1997798413),bC=new w(null,"server","server",1499190120),cC=new w(null,"memory","memory",-1449401430),dC=new w(null,"ownership","ownership",892314581),eC=new w("cljs.spec.alpha","nil","cljs.spec.alpha/nil",
    1733813950),fC=new w(null,"creator_id","creator_id",1398967087),gC=new w("cljs.spec.alpha","k","cljs.spec.alpha/k",-1602615178),hC=new w("gateway.common.spec.messages","removed_id","gateway.common.spec.messages/removed_id",-1304577413),iC=new w("gateway.domains.global.spec.messages","reason_uri","gateway.domains.global.spec.messages/reason_uri",1393708653),jC=new w("gateway.state.spec.activity","child","gateway.state.spec.activity/child",-942548506),kC=new w(null,"destroy-peer","destroy-peer",-1747489061),
    lC=new Md(null,"struct-map","struct-map",-1387540878,null),mC=new w(null,"end-block-t","end-block-t",1544648735),nC=new w(null,"owner_id","owner_id",1001956033),oC=new w("gateway.state.spec.context","version","gateway.state.spec.context/version",-664315203),pC=new w("cljs.spec.alpha","v","cljs.spec.alpha/v",552625740),Cl=new Md(null,"deftype*","deftype*",962659890,null),qC=new w(null,"filters","filters",974726919),rC=new w(null,"report","report",1394055010),sC=new w(null,"qualifier","qualifier",125841738),
    tC=new w("gateway.state.spec.bus","routing-key","gateway.state.spec.bus/routing-key",554216520),uC=new w(null,"negative-listeners","negative-listeners",55241092),vC=new w(null,"success","success",1890645906),wC=new w(null,"stream","stream",1534941648),xC=new w(null,"target_id","target_id",-124012080),yC=new w(null,"retained","retained",630238157),zC=new w(null,"children","children",-940561982),AC=new Md(null,"string?","string?",-1129175764,null),BC=new w("gateway.common.spec.requests","restrictions",
    "gateway.common.spec.requests/restrictions",-1264539352),CC=new w(null,"HEXDIG","HEXDIG",-200221072),DC=new w(null,"listeners","listeners",394544445),EC=new w("gateway.state.spec.common","request_id","gateway.state.spec.common/request_id",2099278405),FC=new w("gateway.domains.agm.spec.requests","call","gateway.domains.agm.spec.requests/call",442214083),GC=new w(null,"mins","mins",467369676),HC=new w(null,"option","option",65132272),IC=new w(null,"months","months",-45571637),JC=new w("gateway.domains.agm.spec.requests",
    "drop-subscription","gateway.domains.agm.spec.requests/drop-subscription",938907886),KC=new w("gateway.common.context.spec.requests","added","gateway.common.context.spec.requests/added",-1410443097),LC=new w("gateway.state.spec.context","id","gateway.state.spec.context/id",1782620593),MC=new w("gateway.common.context.spec.requests","write_permissions","gateway.common.context.spec.requests/write_permissions",-194247007),Nl=new Md(null,"def","def",597100991,null),NC=new w(null,"map","map",1371690461),
    OC=new w(null,"params","params",710516235),PC=new w(null,"iso8601","iso8601",609352650),QC=new w(null,"max","max",61366548),RC=new w(null,"interop","interop",-1183783726),SC=new w(null,"uri","uri",-774711847),TC=new w("gateway.state.spec.factory","id","gateway.state.spec.factory/id",-395012522),UC=new w(null,"arguments_kv","arguments_kv",739148125),VC=new w(null,"activity-joined","activity-joined",-1584889318),WC=new w(null,"doc","doc",1913296891),XC=new w(null,"readers","readers",-2118263030),Ll=
    new Md(null,"catch","catch",-1616370245,null),YC=new w(null,"dec-char","dec-char",-646625154),ZC=new w(null,"path","path",-188191168),$C=new w(null,"server_id","server_id",-518165566),aD=new w(null,"tags","tags",1771418977),bD=new w("gateway.state.spec.agm","subscriber","gateway.state.spec.agm/subscriber",2009954326),cD=new w("gateway.state.spec.activity","visibility","gateway.state.spec.activity/visibility",-1264422156),dD=new Md("cljs.core","string?","cljs.core/string?",-2072921719,null),eD=new w(null,
    "max-count","max-count",1539185305),fD=new w(null,"request_id","request_id",-208950594),gD=new w("gateway.state.spec.domain-registry","domain-uri","gateway.state.spec.domain-registry/domain-uri",636341057),hD=new w("gateway.domains.global.spec.requests","context-subscribe","gateway.domains.global.spec.requests/context-subscribe",614257563),iD=new w(null,"separator","separator",-1628749125),jD=new w(null,"contexts","contexts",4351546),kD=new w(null,"create-token","create-token",-1564000484),lD=new w("gateway.auth.spec",
    "user","gateway.auth.spec/user",803364081),mD=new w("gateway.state.spec.agm","request_id","gateway.state.spec.agm/request_id",-1401687879),nD=new w(null,"version","version",425292698),oD=new Md("clojure.core","unquote","clojure.core/unquote",843087510,null),pD=new w(null,"opt-un","opt-un",883442496),qD=new Md("cljs.spec.alpha","keys","cljs.spec.alpha/keys",1109346032,null),rD=new w(null,"circle","circle",1903212362),sD=new Md(null,"gateway.auth.spec","gateway.auth.spec",1721169563,null),tD=new w("gateway.state.spec.context",
    "members","gateway.state.spec.context/members",1219498589),uD=new w(null,"impersonate-peer","impersonate-peer",-1409232482),vD=new w(null,"cluster","cluster",535175621),wD=new Md(null,"-Inf","-Inf",-2123243689,null),xD=new w("gateway.state.spec.agm","streams","gateway.state.spec.agm/streams",-460960790),yD=new w(null,"limits","limits",-2101003399),zD=new w(null,"start-pos","start-pos",668789086),AD=new w(null,"flags","flags",1775418075),BD=new w(null,"info","info",-317069002),CD=new w(null,"subscription_id",
    "subscription_id",1241304848),DD=new w(null,"splicing?","splicing?",-428596366),ED=new w(null,"write_permissions","write_permissions",-2075461534),FD=new w("cljs.spec.alpha","describe","cljs.spec.alpha/describe",1883026911),GD=new w("gateway.state.spec.context","read_permissions","gateway.state.spec.context/read_permissions",-559958390),HD=new w("gateway.domains.agm.spec.requests","sequence","gateway.domains.agm.spec.requests/sequence",1051925549),ID=new w(null,"test","test",577538877),JD=new w("gateway.common.context.spec.requests",
    "context-create","gateway.common.context.spec.requests/context-create",-947794767),KD=new w(null,"fill","fill",883462889),LD=new w(null,"end-of-string","end-of-string",1567354241),MD=new w(null,"reset","reset",-800929946),ND=new w("cljs.spec.alpha","amp","cljs.spec.alpha/amp",831147508),OD=new w(null,"file","file",-1269645878),PD=new w("rl","peek","rl/peek",-291391771),QD=new w(null,"buffer-block","buffer-block",-10937307),RD=new w("cljs.spec.alpha","alt","cljs.spec.alpha/alt",523685437),SD=new w("gateway.state.spec.activity",
    "activity","gateway.state.spec.activity/activity",449324238),TD=new w("gateway.state.spec.state","signature-key","gateway.state.spec.state/signature-key",1283598087),UD=new w(null,"generator-fn","generator-fn",811851656),VD=new w(null,"keys-pred","keys-pred",858984739),WD=new w("gateway.domains.agm.spec.messages","reason_uri","gateway.domains.agm.spec.messages/reason_uri",577151711),XD=new Md("cljs.core","array-map","cljs.core/array-map",-1519210683,null),YD=new w(null,"topic","topic",-1960480691),
    ZD=new w("gateway.common.context.spec.requests","delta","gateway.common.context.spec.requests/delta",-694068490),$D=new w("gateway.domains.agm.spec.requests","invoke","gateway.domains.agm.spec.requests/invoke",1837084336),aE=new w(null,"members","members",159001018),bE=new w(null,"?msg-fmt","?msg-fmt",-852453891),cE=new w(null,"buffer_size","buffer_size",-2122723051),dE=new Md(null,"queue","queue",-1198599890,null),eE=new w(null,"text","text",-1790561697),fE=new w("gateway.domains.global.spec.requests",
    "hello","gateway.domains.global.spec.requests/hello",-398737422),gE=new w("gateway.state.spec.mthds","result_signature","gateway.state.spec.mthds/result_signature",-1987803736),hE=new Md("s","or","s/or",1876282981,null),iE=new w("gateway.state.spec.activity","parent","gateway.state.spec.activity/parent",-359694046),jE=new w("gateway.common.context.spec.messages","reason_uri","gateway.common.context.spec.messages/reason_uri",-1687789209),kE=new w(null,"?err_","?err_",789480858),lE=new w("gateway.domains.agm.spec.unregister",
    "unregister","gateway.domains.agm.spec.unregister/unregister",388278210),mE=new w("gateway.state.spec.agm","stream","gateway.state.spec.agm/stream",1961075649),nE=new w(null,"level","level",1290497552),oE=new w(null,"start-col","start-col",668080143),pE=new w("gateway.common.spec.messages","outgoing-message","gateway.common.spec.messages/outgoing-message",1952031218),kb=new w(null,"meta","meta",1499536964),qE=new w("gateway.state.spec.pending-requests","id","gateway.state.spec.pending-requests/id",
    -199997554),rE=new w(null,"started?","started?",-1301062863),sE=new w(null,"invoke","invoke",1145927159),tE=new w(null,"local-ip","local-ip",302001740),uE=new w(null,"w","w",354169001),vE=new w(null,"rulename-left","rulename-left",-1824251564),Ok=new w(null,"ancestors","ancestors",-776045424),wE=new w(null,"n","n",562130025),xE=new w(null,"p","p",151049309),yE=new w(null,"helper_types","helper_types",1747427755),zE=new w(null,"system","system",-29381724),AE=new w(null,"def","def",-1043430536),BE=
    new w(null,"reason_uri","reason_uri",1062203786),CE=new w(null,"leeway","leeway",-355669977),DE=new w(null,"req-keys","req-keys",514319221),Zk=new Md(null,"defrecord*","defrecord*",-1936366207,null),EE=new w("gateway.domains.global.internal","authentication-request","gateway.domains.global.internal/authentication-request",502904463),FE=new w(null,"k","k",-2146297393),GE=new w(null,"f","f",-1597136552),HE=new w(null,"e","e",1381269198),IE=new w(null,"d","d",1972142424),JE=new Md(null,"cljs.tools.reader",
    "cljs.tools.reader",-831293977,null),KE=new w("gateway.state.spec.common","address","gateway.state.spec.common/address",394563279),LE=new w(null,"overflowchar","overflowchar",-1620088106),ME=new w(null,"opt-specs","opt-specs",-384905450),NE=new w(null,"min-remaining","min-remaining",962687677),OE=new w(null,"application","application",551185447),PE=new w("gateway.state.spec.factory","factory","gateway.state.spec.factory/factory",1055781172),QE=new w("gateway.common.spec.messages","incoming-message",
    "gateway.common.spec.messages/incoming-message",-528171747),RE=new w(null,"max-connections-per-user","max-connections-per-user",-1995174555),SE=new w("gateway.common.context.spec.requests","restrictions","gateway.common.context.spec.requests/restrictions",-1766361),TE=new w(null,"commachar","commachar",652859327),Dl=new Md(null,"let*","let*",1920721458,null),UE=new w(null,"inherit","inherit",-1840815422),VE=new Md("cljs.core","hash-map","cljs.core/hash-map",303385767,null),WE=new w("gateway.state.spec.factory",
    "configuration","gateway.state.spec.factory/configuration",154272470),XE=new w("gateway.domains.global.spec.requests","destination","gateway.domains.global.spec.requests/destination",165081940),YE=new w("gateway.state.spec.common","channel","gateway.state.spec.common/channel",426185507),ZE=new w("gateway.common.spec.messages","local","gateway.common.spec.messages/local",1736687122),$E=new w(null,"add-types","add-types",-711550002),aF=new w(null,"registered-domains","registered-domains",-559729182),
    kl=new Md(null,"try","try",-1273693247,null),bF=new w(null,"ns-whitelist","ns-whitelist",-1717299774),cF=new Md("clojure.core","unquote-splicing","clojure.core/unquote-splicing",-552003150,null),dF=new w("gateway.state.spec.pending-requests","gateway_token","gateway.state.spec.pending-requests/gateway_token",-1747123785),eF=new w("gateway.auth.spec","response","gateway.auth.spec/response",1690727657),fF=new w("gateway.domains.global.spec.messages","type","gateway.domains.global.spec.messages/type",
    708595817),rk=new w(null,"keyword-fn","keyword-fn",-64566675),gF=new w(null,"section","section",-300141526),hF=new w("gateway.state.spec.mthds","method","gateway.state.spec.mthds/method",1887447044),iF=new w("gateway.common.spec.messages","type","gateway.common.spec.messages/type",2118883938),jF=new w(null,"hex-char","hex-char",764443568),kF=new w(null,"private","private",-558947994),lF=new w("gateway.state.spec.context","write_permissions","gateway.state.spec.context/write_permissions",1195182789),
    mF=new w(null,"into","into",-150836029),nF=new w("cljs.spec.alpha","rep","cljs.spec.alpha/rep",1483217317),oF=new w(null,"star","star",279424429),pF=new w("cljs.spec.alpha","op","cljs.spec.alpha/op",-1269055252),qF=new w(null,"reloading","reloading",961158984),rF=new w(null,"full-results","full-results",-1500225407),sF=new w(null,"low","low",-1601362409),tF=new Md(null,"some?","some?",234752293,null),uF=new w(null,"pretty","pretty",-1916372486),vF=new w("gateway.state.spec.context","context","gateway.state.spec.context/context",
    -1884667246),wF=new w("gateway.domains.agm.spec.messages","removed_id","gateway.domains.agm.spec.messages/removed_id",-1904544764),xF=new w(null,"own-ident","own-ident",1422237852),yF=new w("gateway.state.spec.mthds","name","gateway.state.spec.mthds/name",393834509),zF=new w(null,"authentication-request","authentication-request",-2091151542),AF=new Md("gateway.auth.spec","response-type","gateway.auth.spec/response-type",724325508,null),BF=new w(null,"remove-peer-factories","remove-peer-factories",
    -316522514),CF=new w(null,"values","values",372645556),DF=new w(null,"unsupported-operation","unsupported-operation",1890540953),EF=new Md(null,"let","let",358118826,null),FF=new w(null,"bus-domain","bus-domain",1136396472),GF=new w("gateway.state.spec.bus","bus-domain","gateway.state.spec.bus/bus-domain",1755593660),HF=new w(null,"leave-activity","leave-activity",-484899731),IF=new w(null,"peer-requested","peer-requested",1452118887),JF=new w("gateway.domains.agm.spec.requests","post","gateway.domains.agm.spec.requests/post",
    -1221170496),KF=new Md("gateway.common.spec.messages","message-body","gateway.common.spec.messages/message-body",-1647648637,null),LF=new w(null,"forms","forms",2045992350),MF=new w("gateway.domains.agm.spec.requests","result","gateway.domains.agm.spec.requests/result",1027857196),NF=new w("gateway.domains.agm.spec.messages","source_type","gateway.domains.agm.spec.messages/source_type",276727970),OF=new w(null,"agm-domain","agm-domain",1137239322),PF=new w(null,"destroy_peer_id","destroy_peer_id",
    388079342),QF=new w(null,"expecting","expecting",-57706705),RF=new w(null,"rule","rule",729973257),SF=new w("gateway.domains.agm.spec.requests","caller_id","gateway.domains.agm.spec.requests/caller_id",-211861801),TF=new w(null,"parent","parent",-878878779),UF=new w("gateway.common.context.spec.requests","type","gateway.common.context.spec.requests/type",372560587),VF=new w(null,"lifetime","lifetime",-1568939561),WF=new w(null,"update-context","update-context",1410241659),XF=new w(null,"standard",
    "standard",-1769206695),YF=new w(null,"clauses","clauses",1454841241),ZF=new w(null,"blacklist","blacklist",1248093170),$F=new Md(null,"defonce","defonce",-1681484013,null),aG=new w("gateway.state.spec.agm","agm-domain","gateway.state.spec.agm/agm-domain",686860067),bG=new w("gateway.state.spec.state","services","gateway.state.spec.state/services",-925305284),cG=new w(null,"Epsilon","Epsilon",133418452),dG=new w(null,"base","base",185279322),eG=new Md(null,"read-string*","read-string*",1046768315,
    null),fG=new w(null,"remove-types","remove-types",-1777229898),gG=new w(null,"inside-comment","inside-comment",1258069708),hG=new w(null,"no-stacktrace?","no-stacktrace?",1701072694),iG=new w("gateway.state.spec.agm","invocations","gateway.state.spec.agm/invocations",-1391969355),jG=new w(null,"character","character",380652989),kG=new w(null,"publisher","publisher",-153364540),lG=new w("gateway.domains.agm.subscriptions","drop-interest","gateway.domains.agm.subscriptions/drop-interest",-1584375112),
    mG=new w("gateway.state.spec.bus","topic-repattern","gateway.state.spec.bus/topic-repattern",736554526),nG=new w(null,"delta","delta",108939957),oG=new w("promesa.core","default","promesa.core/default",1773193826),pG=new w("gateway.state.spec.agm","invocation","gateway.state.spec.agm/invocation",-928333769),qG=new Md("cljs.core","\x3d","cljs.core/\x3d",-1891498332,null),rG=new w(null,"look","look",-539441433),sG=new w(null,"methods-removed","methods-removed",-724408194),tG=new Md(null,"p1__15671#",
    "p1__15671#",-308049675,null),uG=new w(null,"local?","local?",-1422786101),vG=new w("cljs.spec.alpha","unknown","cljs.spec.alpha/unknown",651034818),wG=new w(null,"type-tag","type-tag",-1873863267),xG=new w(null,"peer-added","peer-added",322139575),yG=new w(null,"namespaced-map","namespaced-map",1235665380),zG=new w(null,"peer_id","peer_id",1920005364),AG=new Md(null,"locking","locking",1542862874,null),BG=new w("gateway.state.spec.activity","id","gateway.state.spec.activity/id",1251756953),CG=new w("gateway.common.context.spec.requests",
    "context_id","gateway.common.context.spec.requests/context_id",1348419676),DG=new w(null,"factor","factor",-2103172748),EG=new w("gateway.state.spec.activity","activity-type","gateway.state.spec.activity/activity-type",1221900323),FG=new w("gateway.common.context.spec.requests","reset","gateway.common.context.spec.requests/reset",6157861),GG=new w(null,"peers","peers",2005345354),HG=new w("gateway.domains.agm.spec.requests","subscribe","gateway.domains.agm.spec.requests/subscribe",1050374291),IG=
    new w("gateway.domains.agm.spec.requests","subscription_id","gateway.domains.agm.spec.requests/subscription_id",1666574151),JG=new w("gateway.domains.agm.spec.messages","local","gateway.domains.agm.spec.messages/local",63355787),KG=new w(null,"typ","typ",-1304536900),LG=new w("gateway.state.spec.activity","owner","gateway.state.spec.activity/owner",-1983556102),MG=new w(null,"pos","pos",-864607220),NG=new w(null,"remote_identity","remote_identity",1864550587),OG=new w(null,"max-pending-requests",
    "max-pending-requests",-1862384536),PG=new w(null,"?file","?file",1533429675),QG=new Md("cljs.core","zipmap","cljs.core/zipmap",-1902130674,null),RG=new w(null,"left_id","left_id",730267975),SG=new w(null,"total","total",1916810418),TG=new w(null,"suppress-namespaces","suppress-namespaces",2130686956),UG=new w("gateway.common.spec.messages","message-type","gateway.common.spec.messages/message-type",929650450),VG=new w("instaparse","failure","instaparse/failure",1422918607),WG=new w(null,"end-line",
    "end-line",1837326455),XG=new w("gateway.domain","join","gateway.domain/join",1465372684),YG=new w(null,"gateway_token","gateway_token",1638490713),ZG=new w(null,"cur","cur",1153190599),$G=new w(null,"ebnf","ebnf",31967825);var kH={},aH,mH={};function nH(a,b){var c=oH;if(null!=a&&null!=a.Ve)a=a.Ve(a,b,c);else {var d=nH[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=nH._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("WritePort.put!",a);}return a}function pH(a){if(null!=a&&null!=a.Kd)a=a.Kd(a);else {var b=pH[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=pH._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("Channel.close!",a);}return a}
    function qH(a){if(null!=a&&null!=a.Kf)a=!0;else {var b=qH[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=qH._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("Handler.active?",a);}return a}function rH(a){if(null!=a&&null!=a.Lf)a=a.f;else {var b=rH[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=rH._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("Handler.commit",a);}return a}
    function sH(a,b){if(null!=a&&null!=a.ke)a=a.ke(a,b);else {var c=sH[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=sH._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Buffer.add!*",a);}return a}var tH=function tH(a){switch(arguments.length){case 1:return tH.g(arguments[0]);case 2:return tH.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};tH.g=function(a){return a};tH.h=function(a,b){return sH(a,b)};tH.I=2;function uH(a,b,c,d,e){for(var f=0;;)if(f<e)c[d+f]=a[b+f],f+=1;else break}function vH(a){this.length=this.ya=this.head=0;this.A=a;}h=vH.prototype;h.pop=function(){if(0===this.length)return null;var a=this.A[this.ya];this.A[this.ya]=null;this.ya=(this.ya+1)%this.A.length;--this.length;return a};h.unshift=function(a){this.A[this.head]=a;this.head=(this.head+1)%this.A.length;this.length+=1;return null};h.unbounded_unshift=function(a){this.length+1===this.A.length&&this.resize();return this.unshift(a)};
    h.resize=function(){var a=Array(2*this.A.length);return this.ya<this.head?(uH(this.A,this.ya,a,0,this.length),this.ya=0,this.head=this.length,this.A=a):this.ya>this.head?(uH(this.A,this.ya,a,0,this.A.length-this.ya),uH(this.A,0,a,this.A.length-this.ya,this.head),this.ya=0,this.head=this.length,this.A=a):this.ya===this.head?(this.head=this.ya=0,this.A=a):null};h.cleanup=function(a){for(var b=this.length,c=0;;)if(c<b){var d=this.pop();(a.g?a.g(d):a.call(null,d))&&this.unshift(d);c+=1;}else return null};
    function yH(a){return new vH(Array(a))}function zH(a,b){this.ia=a;this.n=b;this.C=2;this.O=0;}zH.prototype.Jd=function(){return this.ia.length>=this.n};zH.prototype.ke=function(a,b){this.ia.unbounded_unshift(b);return this};zH.prototype.ca=function(){return this.ia.length};function AH(a,b){this.ia=a;this.n=b;this.C=2;this.O=0;}AH.prototype.Jd=function(){return !1};AH.prototype.ke=function(a,b){this.ia.length!==this.n&&this.ia.unshift(b);return this};AH.prototype.ca=function(){return this.ia.length};function bH(){return ab("iPhone")&&!ab("iPod")&&!ab("iPad")}ab("Opera");var DH=ab("Trident")||ab("MSIE");ab("Edge");var EH=ab("Gecko")&&!(-1!=$a.toLowerCase().indexOf("webkit")&&!ab("Edge"))&&!(ab("Trident")||ab("MSIE"))&&!ab("Edge"),FH=-1!=$a.toLowerCase().indexOf("webkit")&&!ab("Edge");FH&&ab("Mobile");ab("Macintosh");ab("Windows");ab("Linux")||ab("CrOS");var cH=aa.navigator||null;cH&&(cH.appVersion||"").indexOf("X11");ab("Android");bH();ab("iPad");ab("iPod");bH()||ab("iPad")||ab("iPod");$a.toLowerCase().indexOf("kaios");function HH(){var a=document;var b="IFRAME";"application/xhtml+xml"===a.contentType&&(b=b.toLowerCase());return a.createElement(b)}var IH;
    function JH(){var a=aa.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!ab("Presto")&&(a=function(){var e=HH();e.style.display="none";document.documentElement.appendChild(e);var f=e.contentWindow;e=f.document;e.open();e.close();var g="callImmediate"+Math.random(),l="file:"==f.location.protocol?"*":f.location.protocol+"//"+f.location.host;e=na(function(m){if(("*"==l||m.origin==l)&&m.data==g)this.port1.onmessage();},this);f.addEventListener("message",e,
    !1);this.port1={};this.port2={postMessage:function(){f.postMessage(g,l);}};});if("undefined"!==typeof a&&!ab("Trident")&&!ab("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var e=c.ge;c.ge=null;e();}};return function(e){d.next={ge:e};d=d.next;b.port2.postMessage(0);}}return function(e){aa.setTimeout(e,0);}}var KH=yH(32),LH=!1,MH=!1;function NH(){LH=!0;MH=!1;for(var a=0;;){var b=KH.pop();if(null!=b&&(b.v?b.v():b.call(null),1024>a)){a+=1;continue}break}LH=!1;return 0<KH.length?OH.v?OH.v():OH.call(null):null}function OH(){if(MH&&LH)return null;MH=!0;"function"!==typeof aa.setImmediate||aa.Window&&aa.Window.prototype&&!ab("Edge")&&aa.Window.prototype.setImmediate==aa.setImmediate?(IH||(IH=JH()),IH(NH)):aa.setImmediate(NH);}function PH(a){KH.unbounded_unshift(a);OH();}var QH={},dH;
    function SH(a){if("undefined"===typeof qb||"undefined"===typeof rb||"undefined"===typeof kH||"undefined"===typeof mH||"undefined"===typeof QH||"undefined"===typeof dH)dH=function(b,c){this.o=b;this.Uh=c;this.C=425984;this.O=0;},dH.prototype.U=function(b,c){return new dH(this.o,c)},dH.prototype.T=function(){return this.Uh},dH.prototype.Db=function(){return this.o},dH.Za=!0,dH.Xa="cljs.core.async.impl.channels/t_cljs$core$async$impl$channels9567",dH.ab=function(b){return ad(b,"cljs.core.async.impl.channels/t_cljs$core$async$impl$channels9567")};return new dH(a,
    R)}function TH(a,b){this.Rd=a;this.o=b;}function UH(a){return qH(a.Rd)}function VH(a,b,c,d){this.zd=a;this.oe=0;this.Lc=b;this.ne=0;this.ia=c;this.closed=!1;this.Ob=d;}function WH(a){for(;;){var b=a.Lc.pop();if(null!=b){var c=b.Rd;PH(function(d){return function(){return d.g?d.g(!0):d.call(null,!0)}}(c.f,c,b.o));}break}a.Lc.cleanup(Og(!1));a.Kd(null);}
    VH.prototype.Ve=function(a,b,c){var d=this,e=this,f=d.closed;if(f)return SH(!1);if(n(function(){var v=d.ia;return n(v)?Lb(d.ia.Jd()):v}())){var g=fe(d.Ob.h?d.Ob.h(d.ia,b):d.Ob.call(null,d.ia,b));c=function(){for(var v=G;;)if(0<d.zd.length&&0<D(d.ia)){var y=d.zd.pop(),E=y.f,J=d.ia.ia.pop();v=De.h(v,function(W,Z,ma){return function(){return Z.g?Z.g(ma):Z.call(null,ma)}}(v,E,J));}else return v}();g&&WH(e);if(z(c)){c=z(c);a=null;for(var l=0,m=0;;)if(m<l){var q=a.V(null,m);PH(q);m+=1;}else if(c=
    z(c))a=c,Ze(a)?(c=pd(a),m=qd(a),a=c,l=D(c),c=m):(c=A(a),PH(c),c=C(a),a=null,l=0),m=0;else break}return SH(!0)}a=function(){for(;;){var v=d.zd.pop();if(n(v)){if(n(!0))return v}else return null}}();if(n(a)){var t=a.f;PH(function(){return t.g?t.g(b):t.call(null,b)});return SH(!0)}64<d.ne?(d.ne=0,d.Lc.cleanup(UH)):d.ne+=1;n(c.Ue())&&d.Lc.unbounded_unshift(new TH(c,b));return null};
    function XH(a,b){if(null!=a.ia&&0<D(a.ia)){b=b.f;if(n(b)){var c=a.ia.ia.pop(),d=Lb(a.ia.Jd())&&0<a.Lc.length?function(){for(var J=G;;){var W=a.Lc.pop(),Z=W.o;W=W.Rd.f;J=n(W)?De.h(J,W):J;Z=n(W)?fe(a.Ob.h?a.Ob.h(a.ia,Z):a.Ob.call(null,a.ia,Z)):null;if(!(Lb(Z)&&Lb(a.ia.Jd())&&0<a.Lc.length))return new S(null,2,5,T,[Z,J],null)}}():null,e=H(d,0,null),f=H(d,1,null);n(e)&&WH(a);for(var g=z(f),l=null,m=0,q=0;;)if(q<m){var t=l.V(null,q);PH(function(J,W,Z,ma,ja){return function(){return ja.g?ja.g(!0):ja.call(null,
    !0)}}(g,l,m,q,t));q+=1;}else {var v=z(g);if(v){t=v;if(Ze(t))g=pd(t),q=qd(t),l=g,m=D(g),g=q;else {var y=A(t);PH(function(J,W,Z,ma,ja){return function(){return ja.g?ja.g(!0):ja.call(null,!0)}}(g,l,m,q,y));g=C(t);l=null;m=0;}q=0;}else break}return SH(c)}return null}c=function(){for(;;){var J=a.Lc.pop();if(n(J)){if(qH(J.Rd))return J}else return null}}();if(n(c)){var E=rH(c.Rd);PH(function(){return E.g?E.g(!0):E.call(null,!0)});return SH(c.o)}if(n(a.closed))return n(a.ia)&&(a.Ob.g?
    a.Ob.g(a.ia):a.Ob.call(null,a.ia)),n(n(!0)?b.f:!0)?(b=function(){var J=a.ia;return n(J)?0<D(a.ia):J}(),c=n(b)?a.ia.ia.pop():null,SH(c)):null;64<a.oe?(a.oe=0,a.zd.cleanup(qH)):a.oe+=1;n(b.Ue())&&a.zd.unbounded_unshift(b);return null}
    VH.prototype.Kd=function(){var a=this;if(!a.closed)for(a.closed=!0,n(function(){var e=a.ia;return n(e)?0===a.Lc.length:e}())&&(a.Ob.g?a.Ob.g(a.ia):a.Ob.call(null,a.ia));;){var b=a.zd.pop();if(null!=b){var c=b.f,d=n(function(){var e=a.ia;return n(e)?0<D(a.ia):e}())?a.ia.ia.pop():null;PH(function(e,f){return function(){return e.g?e.g(f):e.call(null,f)}}(c,d));}else break}return null};function YH(a){console.log(a);return null}
    function ZH(a,b){var c=n(null)?null:YH;b=c.g?c.g(b):c.call(null,b);return null==b?a:tH.h(a,b)}
    function $H(a){return new VH(yH(32),yH(32),a,function(){var b=n(null)?null.g?null.g(tH):null.call(null,tH):tH;return function(){function c(f,g){try{return b.h?b.h(f,g):b.call(null,f,g)}catch(l){return ZH(f,l)}}function d(f){try{return b.g?b.g(f):b.call(null,f)}catch(g){return ZH(f,g)}}var e=null;e=function(f,g){switch(arguments.length){case 1:return d.call(this,f);case 2:return c.call(this,f,g)}throw Error("Invalid arity: "+arguments.length);};e.g=d;e.h=c;return e}()}())}function eH(a,b,c){this.key=a;this.o=b;this.forward=c;this.C=2155872256;this.O=0;}eH.prototype.ea=function(){return new Ee(null,this.key,new Ee(null,this.o,null,1,null),2,null)};eH.prototype.W=function(a,b,c){return gk(b,ok,"["," ","]",c,this)};function fH(a,b,c){c=Array(c+1);for(var d=0;;)if(d<c.length)c[d]=null,d+=1;else break;return new eH(a,b,c)}
    function gH(a,b,c,d){for(;;){if(0>c)return a;a:for(;;){var e=c<a.forward.length?a.forward[c]:null;if(n(e))if(e.key<b)a=e;else break a;else break a}null!=d&&(d[c]=a);--c;}}function hH(){this.xb=fH(null,null,0);this.level=0;this.C=2155872256;this.O=0;}h=hH.prototype;
    h.put=function(a,b){var c=Array(15),d=gH(this.xb,a,this.level,c).forward[0];if(null!=d&&d.key===a)return d.o=b;a:for(d=0;;)if(.5>Math.random()&&15>d)d+=1;else break a;if(d>this.level){for(var e=this.level+1;;)if(e<=d+1)c[e]=this.xb,e+=1;else break;this.level=d;}a=fH(a,b,Array(d));for(b=0;;)if(b<=this.level)d=c[b].forward,b<a.forward.length?a.forward[b]=d[b]:a.forward.push(b<d.length?d[b]:null),b<d.length?d[b]=a:d.push(a),b+=1;else return null};
    h.remove=function(a){var b=Array(15),c=gH(this.xb,a,this.level,b);c=0===c.forward.length?null:c.forward[0];if(null!=c&&c.key===a){for(a=0;;)if(a<=this.level){var d=b[a].forward;c===(a<d.length?d[a]:null)&&(d[a]=c.forward[a]);a+=1;}else break;for(;;)if(0<this.level&&this.level<this.xb.forward.length&&null==this.xb.forward[this.level])--this.level;else return null}else return null};
    h.ceilingEntry=function(a){for(var b=this.xb,c=this.level;;){if(0>c)return x.h(b.key,a)?b:b.forward[0];var d;a:for(d=b;;){var e=c<d.forward.length?d.forward[c]:null;if(null!=e){if(e.key>a)break a;d=e;}else {d=0===c?d:null;break a}}n(d)?(--c,b=d):--c;}};h.floorEntry=function(a){for(var b=this.xb,c=this.level;;){if(0>c)return b===this.xb?null:b;var d;a:for(d=b;;){var e=c<d.forward.length?d.forward[c]:null;if(null!=e){if(e.key>a)break a;d=e;}else {d=0===c?d:null;break a}}n(d)?(--c,b=d):--c;}};
    h.ea=function(){return function c(b){return new Sf(null,function(){return null==b?null:we(new S(null,2,5,T,[b.key,b.o],null),c(b.forward[0]))},null,null)}(this.xb.forward[0])};h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"{",", ","}",c,this)};new hH;var aI={},iH;
    function cI(a){if("undefined"===typeof qb||"undefined"===typeof rb||"undefined"===typeof kH||"undefined"===typeof mH||"undefined"===typeof aI||"undefined"===typeof iH)iH=function(b,c){this.f=b;this.Ph=c;this.C=393216;this.O=0;},iH.prototype.U=function(b,c){return new iH(this.f,c)},iH.prototype.T=function(){return this.Ph},iH.prototype.Kf=function(){return !0},iH.prototype.Ue=function(){return !0},iH.prototype.Lf=function(){return this.f},iH.Za=!0,iH.Xa="cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers9378",iH.ab=
    function(b){return ad(b,"cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers9378")};return new iH(a,R)}function dI(a){try{var b=a[0];return b.g?b.g(a):b.call(null,a)}catch(c){if(c instanceof Object)throw b=c,a[6].Kd(null),b;throw c;}}function eI(a,b){b=XH(b,cI(function(c){a[2]=c;a[1]=4;return dI(a)}));return n(b)?(a[2]=r(b),a[1]=4,rv):null}function fI(a,b){a=a[6];null!=b&&a.Ve(null,b,cI(function(){return null}));a.Kd(null);return a}function gI(a){a=x.h(a,0)?null:a;return $H("number"===typeof a?new zH(yH(a),a):a)}
    var oH=function(a){if("undefined"===typeof qb||"undefined"===typeof rb||"undefined"===typeof kH||"undefined"===typeof aH)aH=function(b,c,d){this.f=b;this.Cf=c;this.sh=d;this.C=393216;this.O=0;},aH.prototype.U=function(b,c){return new aH(this.f,this.Cf,c)},aH.prototype.T=function(){return this.sh},aH.prototype.Kf=function(){return !0},aH.prototype.Ue=function(){return this.Cf},aH.prototype.Lf=function(){return this.f},aH.Za=!0,aH.Xa="cljs.core.async/t_cljs$core$async10016",aH.ab=function(b){return ad(b,
    "cljs.core.async/t_cljs$core$async10016")};return new aH(a,!0,R)}(function(){return null});function hI(a,b){a=nH(a,b);return n(a)?r(a):!0}
    function iI(a,b){var c=G,d=gI(1);PH(function(){var e=function(){function g(l){var m=l[1];if(7===m)return l[2]=l[2],l[1]=3,rv;if(1===m)return m=c,l[7]=m,l[2]=null,l[1]=2,rv;if(4===m)return m=l[2],l[8]=m,l[1]=n(null==m)?5:6,rv;if(6===m){var q=l[8];m=l[7];m=a.h?a.h(m,q):a.call(null,m,q);q=fe(m);l[9]=m;l[1]=q?8:9;return rv}return 3===m?fI(l,l[2]):2===m?eI(l,b):9===m?(m=l[9],l[7]=m,l[2]=null,l[1]=2,rv):5===m?(m=l[7],l[2]=m,l[1]=7,rv):10===m?(l[2]=l[2],l[1]=7,rv):8===m?(m=l[9],m=r(m),l[2]=m,l[1]=10,rv):
    null}return function(){function l(t){for(;;){a:try{for(;;){var v=g(t);if(!Nf(v,rv)){var y=v;break a}}}catch(E){y=E;t[2]=y;if(z(t[4]))t[1]=A(t[4]);else throw y;y=rv;}if(!Nf(y,rv))return y}}function m(){var t=[null,null,null,null,null,null,null,null,null,null];t[0]=q;t[1]=1;return t}var q=null;q=function(t){switch(arguments.length){case 0:return m.call(this);case 1:return l.call(this,t)}throw Error("Invalid arity: "+arguments.length);};q.v=m;q.g=l;return q}()}(),f=function(){var g=e();g[6]=d;return g}();
    return dI(f)});return d}var jI={};function kI(){return (new Date).getTime()}var lI=function lI(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return lI.l(arguments[0],arguments[1],2<c.length?new Rd(c.slice(2),0,null):null)};lI.l=function(a,b,c){c=H(c,0,null);if(We(a)&&(b=z(b))){var d=z(b);b=A(d);d=C(d);return z(d)?(d=lI.l(u.h(a,b),d,F([c])),0===D(d)&&Lb(Iq.g(c))?Je.h(a,b):He.j(a,b,d)):Je.h(a,b)}return a};lI.I=2;lI.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};
    function mI(a,b,c){return og(vh,a,b,Tg(De,Jj),c)}function nI(a,b,c){return vh.D(a,b,qh,c)}var oI=function oI(a,b,c){if(n(b)){var e=z(b);b=A(e);e=C(e);if(Lb(z(e)))c=Qe.h(u.h(a,b),c);else {var f=u.h(a,b);c=oI.j?oI.j(f,e,c):oI.call(null,f,e,c);}return 0===D(c)?Je.h(a,b):He.j(a,b,c)}return a};function pI(a){return n(a)?(pH(a),iI(function(){return null},a)):null}function qI(a,b){return $b.j(function(c,d){return x.h(d,a)?c:De.h(c,d)},G,b)}
    function rI(a,b){return $b.h(function(c,d){return n(a.g?a.g(d):a.call(null,d))?ee(d):null},b)}function sI(a,b){return Lb(u.h(a,b))?He.j(a,b,R):a}function tI(a){return pf(function(b,c,d){return He.j(b,Qf.g(c),d)},R,a)}function uI(){return lg(p,nh.h(new Hj(null,new k(null,1,["-",null],null),null),p.g(ml())))}function vI(a){return ww.g(a)}function wI(a){var b=kv.h(a,1),c=["r-",p.g(ww.g(a)),"-",p.g(b)].join("");return new S(null,2,5,T,[He.j(a,kv,b+1),c],null)}function xI(a){var b=kv.h(a,1),c=["c-",p.g(ww.g(a)),"-",p.g(b)].join("");return new S(null,2,5,T,[He.j(a,kv,b+1),c],null)}function yI(a){var b=kv.h(a,1),c=["p-",p.g(ww.g(a)),"-",p.g(b)].join("");return new S(null,2,5,T,[He.j(a,kv,b+1),c],null)}function zI(a,b,c,d,e){this.uri=a;this.message=b;this.F=c;this.m=d;this.G=e;this.C=2230716170;this.O=139264;}h=zI.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "uri":return this.uri;case "message":return this.message;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#gateway.reason.Reason{",", ","}",c,cg.h(new S(null,2,5,T,[new S(null,2,5,T,[SC,this.uri],null),new S(null,2,5,T,[Nr,this.message],null)],null),this.m))};h.Aa=function(){return new ni(this,2,new S(null,2,5,T,[SC,Nr],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 2+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=57548305^ae(this)};
    h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.uri,b.uri)&&x.h(this.message,b.message)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,2,[SC,null,Nr,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new zI(this.uri,this.message,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "uri":case "message":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(SC,b):Nf.call(null,SC,b))?new zI(c,this.message,this.F,this.m,null):n(Nf.h?Nf.h(Nr,b):Nf.call(null,Nr,b))?new zI(this.uri,c,this.F,this.m,null):new zI(this.uri,this.message,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,2,5,T,[new Nh(SC,this.uri),new Nh(Nr,this.message)],null),this.m))};h.U=function(a,b){return new zI(this.uri,this.message,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    function AI(a,b){return new zI(a,b,null,null,null)}function BI(a,b){var c=rl(a);b=SC.h(c,b);c=Nr.g(c);return new zI(b,n(c)?c:sl(a),null,null,null)}function CI(a,b){throw ol(b,AI(a,b));}function DI(a){return AI(BE.g(a),Tn.g(a))}function EI(a,b){return AI(a,b)}function FI(a){var b=uI();return new k(null,2,[Cq,new k(null,2,[ww,a,kv,1],null),so,b],null)}function GI(a,b,c,d){return vh.D(uh(a,new S(null,3,5,T,[GG,b,c],null),n(d)?new k(null,1,[Sp,d],null):R),new S(null,2,5,T,[VB,c],null),Tg(De,Jj),b)}function HI(a,b,c){return oI(vh.D(a,new S(null,2,5,T,[GG,b],null),Je,c),new S(null,2,5,T,[VB,c],null),b)}function II(a,b,c){return th.h(a,new S(null,3,5,T,[VB,c,b],null))}function JI(a,b,c){return n(b)?uh(a,new S(null,2,5,T,[xn,b],null),c):a}
    function KI(a,b){return ak(lI,th)(a,new S(null,2,5,T,[xn,b],null))}function LI(a,b){return th.h(a,new S(null,3,5,T,[aF,b,Iu],null))}function MI(a,b){return new k(null,2,[FB,a,bp,b],null)}function NI(a,b){return He.j(MI(new k(null,1,[Yv,vD],null),b),mt,a)}function OI(a,b,c){return He.j(MI(b,c),mt,a)}var PI=function PI(a){switch(arguments.length){case 6:return PI.ga(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 5:return PI.R(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};
    PI.ga=function(a,b,c,d,e,f){a=new k(null,6,[Iu,a,Yv,Px,fD,c,zG,d,BE,SC.g(e),Tn,Nr.g(e)],null);f=n(f)?He.j(a,Rp,f):a;return MI(b,f)};PI.R=function(a,b,c,d,e){return PI.ga(a,b,c,d,e,null)};PI.I=6;var QI=function QI(a){switch(arguments.length){case 4:return QI.D(arguments[0],arguments[1],arguments[2],arguments[3]);case 3:return QI.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};QI.D=function(a,b,c,d){return MI(b,QI.j(a,c,d))};
    QI.j=function(a,b,c){return new k(null,4,[Iu,a,Yv,vC,fD,b,zG,c],null)};QI.I=4;function RI(a){return x.h(Yv.g(a),sz)}var SI=function SI(a){switch(arguments.length){case 6:return SI.ga(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 5:return SI.R(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};SI.ga=function(a,b,c,d,e,f){return MI(b,SI.R(a,c,d,e,f))};
    SI.R=function(a,b,c,d,e){return new k(null,6,[Iu,a,Yv,xG,zG,b,Sr,c,fA,d,kb,e],null)};SI.I=6;var TI=function TI(a){switch(arguments.length){case 5:return TI.R(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);case 4:return TI.D(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};TI.R=function(a,b,c,d,e){return MI(b,TI.D(a,c,d,e))};
    TI.D=function(a,b,c,d){return new k(null,6,[Iu,a,Yv,mx,zG,b,Ew,c,BE,SC.g(d),Tn,Nr.g(d)],null)};TI.I=5;function UI(a,b){if(null!=a&&null!=a.Uc)a=a.Uc(a,b);else {var c=UI[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=UI._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("ConjFlat.conj-flat",a);}return a}function VI(a,b){for(a=th.h(a,b);;)if(n(WI.g?WI.g(a):WI.call(null,a)))a=u.h(a,0),b=De.h(b,0);else return b}
    function XI(a,b){return new Sf(null,function(){var c=th.h(a,b);a:{var d=a;for(var e=b;;){if(x.h(D(e),1)){d=Oe(e)<(YI.g?YI.g(d):YI.call(null,d))-1?VI(d,new S(null,1,5,T,[Oe(e)+1],null)):null;break a}var f=Oe(e);var g=th.h(d,Pe(e));g=YI.g?YI.g(g):YI.call(null,g);if(f<g-1){d=VI(d,De.h(Pe(e),Oe(e)+1));break a}e=Pe(e);}}return we(c,n(d)?XI(a,d):null)},null,null)}function ZI(a,b,c,d,e){this.pa=a;this.Be=b;this.Kc=c;this.H=d;this.pd=e;this.fe=null;this.C=31850958;this.O=0;}h=ZI.prototype;h.toString=function(){return Bd(z(this))};
    h.da=function(a,b){return this.pa.da(null,b)};h.S=function(a,b,c){return this.pa.S(null,b,c)};h.T=function(){return Ne(this.pa)};h.Da=function(){return C(z(this))};h.ca=function(){return this.H};h.ba=function(){return this.Kc};h.aa=function(a,b){return x.h(this.Kc,Jd(b))&&x.h(this.H,D(b))&&(x.h(this.H,0)||x.h(z(this),b))};h.ua=function(){return Me($I,Ne(this))};h.Va=function(){return A(z(this))};h.Wa=function(){return Td(z(this))};
    h.ea=function(){if(!n(this.fe)){if(this.pd){var a=this.pa;a=0<D(a)?XI(a,VI(a,new S(null,1,5,T,[0],null))):null;}else a=z(this.pa);this.fe=a;}return this.fe};h.U=function(a,b){return new ZI(Me(this.pa,b),this.Be,this.Kc,this.H,this.pd)};h.ka=function(a,b){return we(b,this)};
    h.Uc=function(a,b){if(null==b)return this;if(n(WI.g?WI.g(b):WI.call(null,b))){if(0===this.H)return b;if(32>=D(b)){a=aJ.h?aJ.h(this,b):aJ.call(null,this,b);var c=this.H+D(b),d=qh.h(this.pa,b),e=this.pd;return new ZI(d,a,Yd(a,c),c,e?e:b.pd)}a=aJ.h?aJ.h(this,b):aJ.call(null,this,b);c=this.H+D(b);return new ZI(De.h(this.pa,b),a,Yd(a,c),c,!0)}a=Cd(31,this.Be)+Jd(b);c=this.H+1;return new ZI(De.h(this.pa,b),a,Yd(a,c),c,this.pd)};
    function aJ(a,b){var c=D(b);a:if(0===c)c=1;else {c|=0;for(var d=1,e=31;;){var f=Mg(c);c=yf(c,2);if(f)e=Cd(e,e);else {if(0===c){c=Cd(e,d);break a}d=Cd(e,d);e=Cd(e,e);}}}c|=0;return Cd(c,a.Be)+(b.Be-c)}h.qa=tb;h.W=function(a,b,c){return dd(z(this),b,c)};function bJ(a){a=Uh(a);a:for(var b=1,c=z(a);;)if(null!=c)b=Cd(31,b)+Jd(A(c))|0,c=C(c);else break a;return new ZI(a,b,Jd(a),D(a),!1)}var $I=bJ(G);function WI(a){return a instanceof ZI}function YI(a){return WI(a)?D(a.pa):D(a)}
    var cJ=function cJ(a,b){for(;;)if(z(b)){var d=A(b);WI(d)?(a=cJ.h?cJ.h(a,d):cJ.call(null,a,d),b=C(b)):(a=dg.h(a,d),b=C(b));}else return a};function dJ(a,b,c,d){this.pa=a;this.Kc=b;this.H=c;this.flat=d;this.C=167142175;this.O=2048;}h=dJ.prototype;h.toString=function(){return Bd(eJ(this))};h.da=function(a,b){return eJ(this).da(null,b)};h.S=function(a,b,c){return eJ(this).S(null,b,c)};
    function eJ(a){Lb(r(a.flat))&&(Yg.h(a.flat,function(){var b=r(a.pa);b=jd(cJ(hd(G),b));return Me(b,Ne(r(a.pa)))}),Yg.h(a.pa,function(){return null}));return r(a.flat)}h.Ya=function(a,b,c){return eJ(this).Ya(null,b,c)};h.V=function(a,b){return eJ(this).V(null,b)};h.ra=function(a,b,c){return eJ(this).ra(null,b,c)};h.Lb=function(a,b,c){return eJ(this).Lb(null,b,c)};h.T=function(){return n(r(this.flat))?Ne(r(this.flat)):Ne(r(this.pa))};h.ca=function(){return this.H};h.Vb=function(){return eJ(this).Vb(null)};
    h.Wb=function(){return eJ(this).Wb(null)};h.Dc=function(){return 0<this.H?$c(eJ(this)):null};h.ba=function(){return this.Kc};h.aa=function(a,b){return x.h(this.Kc,Jd(b))&&x.h(this.H,D(b))&&x.h(eJ(this),b)};h.ua=function(){return Me(G,Ne(this))};h.la=function(a,b,c){return He.j(eJ(this),b,c)};h.Ca=function(a,b){return eJ(this).Ca(null,b)};h.ea=function(){return z(eJ(this))};
    h.U=function(a,b){return n(r(this.flat))?new dJ(Vg(r(this.pa)),this.Kc,this.H,Vg(Me(r(this.flat),b))):new dJ(Vg(Me(r(this.pa),b)),this.Kc,this.H,Vg(r(this.flat)))};h.ka=function(a,b){return De.h(eJ(this),b)};h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 2:return this.h(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};
    h.g=function(a){return eJ(this).h(null,a)};h.h=function(a,b){return eJ(this).j(null,a,b)};h.Ub=function(a,b){return nd(eJ(this),b)};h.qa=tb;h.W=function(a,b,c){return dd(eJ(this),b,c)};function fJ(a){return n(a.pd)?n(a.fe)?Uh(z(a)):new dJ(Vg(a.pa),a.Kc,a.H,Vg(null)):a.pa}function gJ(a,b,c){var d=n(b.ignoreCase)?"gi":"g";d=n(b.multiline)?[d,"m"].join(""):d;return a.replace(new RegExp(b.source,n(b.unicode)?[d,"u"].join(""):d),c)}
    function hJ(a){return function(){function b(d){var e=null;if(0<arguments.length){e=0;for(var f=Array(arguments.length-0);e<f.length;)f[e]=arguments[e+0],++e;e=new Rd(f,0,null);}return c.call(this,e)}function c(d){d=fh(2,d);if(x.h(D(d),1))return d=A(d),a.g?a.g(d):a.call(null,d);d=Uh(d);return a.g?a.g(d):a.call(null,d)}b.I=0;b.M=function(d){d=z(d);return c(d)};b.l=c;return b}()}
    function iJ(a,b,c){if("string"===typeof b)return a.replace(new RegExp(String(b).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08"),"g"),c);if(b instanceof RegExp)return "string"===typeof c?gJ(a,b,c):gJ(a,b,hJ(c));throw ["Invalid match arg: ",p.g(b)].join("");}function jJ(a,b){var c=new pb;for(b=z(b);;)if(null!=b)c.append(p.g(A(b))),b=C(b),null!=b&&c.append(a);else return c.toString()}
    function kJ(a,b){if(0>=b||b>=2+D(a))return De.h(Uh(we("",ch.h(p,z(a)))),"");if(n(Cf?Sc(1,b):Bf.call(null,1,b)))return new S(null,1,5,T,[a],null);if(n(Cf?Sc(2,b):Bf.call(null,2,b)))return new S(null,2,5,T,["",a],null);b-=2;return De.h(Uh(we("",ci(Uh(ch.h(p,z(a))),0,b))),a.substring(b))}
    function lJ(a,b,c){if("/(?:)/"===p.g(b))b=kJ(a,c);else if(1>c)b=Uh(p.g(a).split(b));else a:for(var d=c,e=G;;){if(1===d){b=De.h(e,a);break a}var f=dk(b,a);if(null!=f){var g=a.indexOf(f);f=a.substring(g+D(f));--d;e=De.h(e,a.substring(0,g));a=f;}else {b=De.h(e,a);break a}}if(0===c&&1<D(b))a:for(c=b;;)if(""===Oe(c))c=Pe(c);else break a;else c=b;return c}function mJ(a,b,c){(b=Lb(b))?(b=c.g?c.g(Iz):c.call(null,Iz),a=a.g?a.g(b):a.call(null,b)):a=b;return n(a)?["(",p.g(nJ?nJ(c,!1):oJ.call(null,c,!1)),")"].join(""):nJ?nJ(c,!1):oJ.call(null,c,!1)}var pJ=Qg(mJ,new Hj(null,new k(null,3,[mz,null,KA,null,Rm,null],null),null));function qJ(a){switch(a){case "\n":return "\\n";case "\b":return "\\b";case "\f":return "\\f";case "\r":return "\\r";case "\t":return "\\t";default:return a}}function rJ(a){return iJ(['#"',a.source.substring(1),'"'].join(""),/[\s]/,qJ)}
    function sJ(a){return 4095>=a?["0000",p.g(a.toString(16))].join("").substr(-4):a.toString(16)}function tJ(a){var b=qg(a);a=u.h(b,st);b=u.h(b,zr);return x.h(a,b)?["%x",p.g(sJ(a))].join(""):["%x",p.g(sJ(a)),"-",p.g(sJ(b))].join("")}function oJ(a){switch(arguments.length){case 1:return nJ(arguments[0],!1);case 2:return nJ(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}
    function nJ(a,b){var c=qg(a);a=u.h(c,Rq);var d=u.h(c,cs),e=u.h(c,ds),f=u.h(c,Ys),g=u.h(c,Iz);if(n(function(){var m=Lb(b);return m?wt.g(c):m}()))return ["\x3c",p.g(nJ(c,!0)),"\x3e"].join("");g=g instanceof w?g.X:null;switch(g){case "epsilon":return "ε";case "opt":return [p.g(pJ(b,a)),"?"].join("");case "plus":return [p.g(pJ(b,a)),"+"].join("");case "star":return [p.g(pJ(b,a)),"*"].join("");case "rep":return sg.h(Wq.g(c),QC.g(c))?[p.g(pJ(b,a)),"{",p.g(Wq.g(c)),",",p.g(QC.g(c)),"}"].join(""):[p.g(pJ(b,a)),
    "{",p.g(Wq.g(c)),"}"].join("");case "alt":return jJ(" | ",ch.h(Rg(mJ,new Hj(null,new k(null,1,[KA,null],null),null),b),f));case "ord":return [p.g(mJ(new Hj(null,new k(null,1,[Rm,null],null),null),b,d))," / ",p.g(mJ(new Hj(null,new k(null,1,[Rm,null],null),null),b,e))].join("");case "cat":return jJ(" ",ch.h(Rg(mJ,new Hj(null,new k(null,2,[KA,null,Rm,null],null),null),b),f));case "string":var l=new pb;a=wb;d=vb;wb=!0;vb=function(m){return l.append(m)};try{tk(F([OB.g(c)]),Ab());}finally{vb=d,wb=a;}return p.g(l);
    case "string-ci":l=new pb;a=wb;d=vb;wb=!0;vb=function(m){return l.append(m)};try{tk(F([OB.g(c)]),Ab());}finally{vb=d,wb=a;}return p.g(l);case "char":return tJ(c);case "regexp":return rJ(cB.g(c));case "nt":return Ff(p.g(ot.g(c)),1);case "look":return ["\x26",p.g(pJ(b,a))].join("");case "neg":return ["!",p.g(pJ(b,a))].join("");default:throw Error(["No matching clause: ",p.g(g)].join(""));}}
    function uJ(a,b){return x.h(jw.g(ao.g(b)),No)?["\x3c",Rf(a),"\x3e \x3d ",p.g(nJ(b,!1))].join(""):[Rf(a)," \x3d ",p.g(nJ(b,!1))].join("")}
    function vJ(a){a=qg(a);var b=u.h(a,ur),c=u.h(a,Mp);return jJ("\n",we(uJ(c,b.g?b.g(c):b.call(null,c)),function(){return function f(e){return new Sf(null,function(){for(var g=e;;)if(g=z(g)){if(Ze(g)){var l=pd(g),m=D(l),q=Wf(m);a:for(var t=0;;)if(t<m){var v=jc(l,t),y=H(v,0,null);v=H(v,1,null);sg.h(y,c)&&(y=uJ(y,v),q.add(y));t+=1;}else {l=!0;break a}return l?Yf($f(q),f(qd(g))):Yf($f(q),null)}l=A(g);q=H(l,0,null);l=H(l,1,null);if(sg.h(q,c))return we(uJ(q,l),f(Td(g)));g=Td(g);}else return null},null,null)}(b)}()))}
    function wJ(a){n(MA.g(a))?(vk.l(F(["NOT "])),vk.l(F([MA.g(a)]))):n(Xt.g(a))?vk.l(F([tJ(a)])):a instanceof RegExp?vk.l(F([rJ(a)])):tk(F([a]),Ab());}
    function xJ(a){var b=qg(a);a=u.h(b,pw);var c=u.h(b,Es),d=u.h(b,eE);b=u.h(b,Tn);yk(F([["Parse error at line ",p.g(a),", column ",p.g(c),":"].join("")]));yk(F([d]));yk(F([ff(c)?1>=c?"^":lg(p,cg.h(hh(c-1," "),new S(null,1,5,T,["^"],null))):null]));c=Mj(ch.h(QF,mh.h(Dz,b)));a=Mj(ch.h(QF,mh.h(Ng(Dz),b)));d=D(c)+D(a);0!==d&&(x.h(1,d)?yk(F(["Expected:"])):yk(F(["Expected one of:"])));c=z(c);d=null;for(var e=b=0;;)if(e<b){var f=d.V(null,e);wJ(f);yk(F([" (followed by end-of-string)"]));e+=1;}else if(c=z(c))d=
    c,Ze(d)?(c=pd(d),e=qd(d),d=c,b=D(c),c=e):(c=A(d),wJ(c),yk(F([" (followed by end-of-string)"])),c=C(d),d=null,b=0),e=0;else break;a=z(a);c=null;for(e=b=0;;)if(e<b)d=c.V(null,e),wJ(d),xk(),e+=1;else if(a=z(a))c=a,Ze(c)?(a=pd(c),b=qd(c),c=a,d=D(a),a=b,b=d):(d=A(c),wJ(d),xk(),a=C(c),c=null,b=0),e=0;else break}function yJ(a){throw lg(p,a);}function zJ(a){throw lg(p,a);}function AJ(a){var b=n(a.ignoreCase)?"i":"";b=n(a.multiline)?[b,"m"].join(""):b;return n(a.unicode)?[b,"u"].join(""):b}function BJ(a){return z(a)&&Lb(C(a))}function CJ(a){return He.j(a,ao,DJ)}var DJ=new k(null,1,[jw,No],null),EJ=new k(null,2,[Kx,function(a){return new k(null,2,[jw,Kx,sB,a],null)},Gu,function(a){return new k(null,2,[jw,Gu,sB,a],null)}],null),FJ=new k(null,2,[Gu,function(a,b){return new k(null,2,[Iz,a,pn,new Ee(null,b,null,1,null)],null)},Kx,function(a,b){return new S(null,2,5,T,[a,b],null)}],null);
    function GJ(a,b){var c=jw.g(a);switch(c instanceof w?c.X:null){case "raw":return $I.Uc(null,b);case "hiccup":return fJ(bJ(new S(null,1,5,T,[sB.g(a)],null)).Uc(null,b));case "enlive":return b=$I.Uc(null,b),new k(null,2,[Iz,sB.g(a),pn,0===D(b)?null:b],null);default:return a.g?a.g(b):a.call(null,b)}}
    function HJ(a,b){var c=EJ.g?EJ.g(a):EJ.call(null,a);return n(c)?qh.h(R,function(){return function f(e){return new Sf(null,function(){for(;;){var g=z(e);if(g){if(Ze(g)){var l=pd(g),m=D(l),q=Wf(m);a:for(var t=0;;)if(t<m){var v=jc(l,t),y=H(v,0,null);v=H(v,1,null);y=n(ao.g(v))?new S(null,2,5,T,[y,v],null):new S(null,2,5,T,[y,He.j(v,ao,c.g?c.g(y):c.call(null,y))],null);q.add(y);t+=1;}else {l=!0;break a}return l?Yf($f(q),f(qd(g))):Yf($f(q),null)}l=A(g);q=H(l,0,null);l=H(l,1,null);return we(n(ao.g(l))?new S(null,
    2,5,T,[q,l],null):new S(null,2,5,T,[q,He.j(l,ao,c.g?c.g(q):c.call(null,q))],null),f(Td(g)))}return null}},null,null)}(b)}()):zJ(F(["Invalid output format ",a,". Use :enlive or :hiccup."]))}var IJ=new k(null,1,[Iz,vr],null);function JJ(a){return x.h(a,IJ)?IJ:new k(null,2,[Iz,NA,Rq,a],null)}function KJ(a){return x.h(a,IJ)?IJ:new k(null,2,[Iz,tu,Rq,a],null)}function LJ(a){return x.h(a,IJ)?IJ:new k(null,2,[Iz,oF,Rq,a],null)}function MJ(a,b,c){return x.h(c,IJ)?IJ:new k(null,4,[Iz,eo,Rq,c,Wq,a,QC,b],null)}var NJ=function NJ(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return NJ.l(0<c.length?new Rd(c.slice(0),0,null):null)};
    NJ.l=function(a){return Kg(Qg(x,IJ),a)?IJ:BJ(a)?A(a):new k(null,2,[Iz,Rm,Ys,a],null)};NJ.I=0;NJ.M=function(a){return this.l(z(a))};var OJ=function OJ(a){switch(arguments.length){case 0:return OJ.v();default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return OJ.l(arguments[0],new Rd(c.slice(1),0,null))}};OJ.v=function(){return IJ};OJ.l=function(a,b){b=x.h(a,IJ)?nh.h(Kj([IJ]),b):b;z(b)&&(b=lg(OJ,b),a=new k(null,3,[Iz,KA,cs,a,ds,b],null));return a};
    OJ.M=function(a){var b=A(a);a=C(a);return this.l(b,a)};OJ.I=1;var PJ=function PJ(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return PJ.l(0<c.length?new Rd(c.slice(0),0,null):null)};PJ.l=function(a){if(Kg(Qg(x,IJ),a))return IJ;a=nh.h(Kj([IJ]),a);return BJ(a)?A(a):new k(null,2,[Iz,mz,Ys,a],null)};PJ.I=0;PJ.M=function(a){return this.l(z(a))};function QJ(a){return x.h(a,"")?IJ:new k(null,2,[Iz,OB,OB,a],null)}
    function RJ(a){return x.h(a,"")?IJ:new k(null,2,[Iz,Ur,OB,a],null)}function SJ(a,b){return new k(null,3,[Iz,nB,st,a,zr,b],null)}function TJ(a){x.h(a,"")?a=IJ:(a=fk(a),a=a instanceof RegExp?new RegExp(["^",p.g(a.source)].join(""),AJ(a)):a,a=new k(null,2,[Iz,cB,cB,a],null));return a}function UJ(a){return new k(null,2,[Iz,at,ot,a],null)}function VJ(a){return new k(null,2,[Iz,rG,Rq,a],null)}function WJ(a){return new k(null,2,[Iz,Hm,Rq,a],null)}function XJ(a){return He.j(a,wt,!0)}
    var YJ=function YJ(a){var c=n(wt.g(a))?Je.h(a,wt):a;return n(Rq.g(c))?He.j(c,Rq,function(){var d=Rq.g(c);return YJ.g?YJ.g(d):YJ.call(null,d)}()):n(Ys.g(c))?He.j(c,Ys,ch.h(YJ,Ys.g(c))):x.h(Iz.g(c),KA)?He.l(c,cs,function(){var d=cs.g(c);return YJ.g?YJ.g(d):YJ.call(null,d)}(),F([ds,function(){var d=ds.g(c);return YJ.g?YJ.g(d):YJ.call(null,d)}()])):c};
    function ZJ(a){return qh.h(R,function(){return function d(c){return new Sf(null,function(){for(;;){var e=z(c);if(e){if(Ze(e)){var f=pd(e),g=D(f),l=Wf(g);a:for(var m=0;;)if(m<g){var q=jc(f,m),t=H(q,0,null);q=H(q,1,null);t=new S(null,2,5,T,[t,YJ(q)],null);l.add(t);m+=1;}else {f=!0;break a}return f?Yf($f(l),d(qd(e))):Yf($f(l),null)}f=A(e);l=H(f,0,null);f=H(f,1,null);return we(new S(null,2,5,T,[l,YJ(f)],null),d(Td(e)))}return null}},null,null)}(a)}())}
    function $J(a,b){var c=EJ.g?EJ.g(a):EJ.call(null,a);return n(c)?qh.h(R,function(){return function f(e){return new Sf(null,function(){for(;;){var g=z(e);if(g){if(Ze(g)){var l=pd(g),m=D(l),q=Wf(m);a:for(var t=0;;)if(t<m){var v=jc(l,t),y=H(v,0,null);v=H(v,1,null);y=new S(null,2,5,T,[y,He.j(v,ao,c.g?c.g(y):c.call(null,y))],null);q.add(y);t+=1;}else {l=!0;break a}return l?Yf($f(q),f(qd(g))):Yf($f(q),null)}l=A(g);q=H(l,0,null);l=H(l,1,null);return we(new S(null,2,5,T,[q,He.j(l,ao,c.g?c.g(q):c.call(null,q))],
    null),f(Td(g)))}return null}},null,null)}(b)}()):zJ(F(["Invalid output format ",a,". Use :enlive or :hiccup."]))}
    function aK(a,b){var c=EJ.g?EJ.g(a):EJ.call(null,a);return n(c)?qh.h(R,function(){return function f(e){return new Sf(null,function(){for(;;){var g=z(e);if(g){if(Ze(g)){var l=pd(g),m=D(l),q=Wf(m);a:for(var t=0;;)if(t<m){var v=jc(l,t),y=H(v,0,null);v=H(v,1,null);y=new S(null,2,5,T,[y,He.j(YJ(v),ao,c.g?c.g(y):c.call(null,y))],null);q.add(y);t+=1;}else {l=!0;break a}return l?Yf($f(q),f(qd(g))):Yf($f(q),null)}l=A(g);q=H(l,0,null);l=H(l,1,null);return we(new S(null,2,5,T,[q,He.j(YJ(l),ao,c.g?c.g(q):c.call(null,
    q))],null),f(Td(g)))}return null}},null,null)}(b)}()):zJ(F(["Invalid output format ",a,". Use :enlive or :hiccup."]))}
    var bK=function bK(a,b){var d=Iz.g(a);d=d instanceof w?d.X:null;switch(d){case "nt":case "epsilon":return a;case "opt":case "plus":case "star":case "rep":case "look":case "neg":return vh.D(a,new S(null,1,5,T,[Rq],null),bK,b);case "alt":case "cat":return He.j(a,Ys,ch.h(function(e){return bK.h?bK.h(e,b):bK.call(null,e,b)},Ys.g(a)));case "ord":return He.l(a,cs,function(){var e=cs.g(a);return bK.h?bK.h(e,b):bK.call(null,e,b)}(),F([ds,function(){var e=ds.g(a);return bK.h?bK.h(e,b):bK.call(null,e,b)}()]));
    case "string":case "string-ci":case "regexp":return n(ao.g(a))?He.j(PJ.l(F([b,Je.h(a,ao)])),ao,ao.g(a)):PJ.l(F([b,a]));default:throw Error(["No matching clause: ",p.g(d)].join(""));}};
    function cK(a,b,c,d){var e=XJ(JJ(UJ(d)));c=He.j(c,d,CJ(c.g?c.g(d):c.call(null,d)));d=qh.h(R,function(){return function l(g){return new Sf(null,function(){for(;;){var m=z(g);if(m){if(Ze(m)){var q=pd(m),t=D(q),v=Wf(t);a:for(var y=0;;)if(y<t){var E=jc(q,y),J=H(E,0,null);E=H(E,1,null);J=new S(null,2,5,T,[J,bK(E,e)],null);v.add(J);y+=1;}else {q=!0;break a}return q?Yf($f(v),l(qd(m))):Yf($f(v),null)}q=A(m);v=H(q,0,null);q=H(q,1,null);return we(new S(null,2,5,T,[v,bK(q,e)],null),l(Td(m)))}return null}},null,
    null)}(a)}());b=He.j(d,b,He.j(PJ.l(F([Je.h(d.g?d.g(b):d.call(null,b),ao),e])),ao,ao.g(d.g?d.g(b):d.call(null,b))));return Cj.l(F([b,c]))}function dK(a){if(null==a||!(0<=a&&1114111>=a))return null;if(65536<=a&&1114111>=a){const b=(a&1023)+56320;return String.fromCharCode((a>>10)+55232)+String.fromCharCode(b)}return String.fromCharCode(a)}
    function eK(a,b){const c=a.charCodeAt(b);if(55296<=c&&56319>=c&&b+1<a.length){if(a=a.charCodeAt(b+1),56320<=a&&57343>=a)return 55296<=c&&56319>=c&&56320<=a&&57343>=a?(c<<10)-56623104+(a-56320+65536):null}else if(56320<=c&&57343>=c&&0<b&&(a=a.charCodeAt(b-1),55296<=a&&56319>=a))return -(55296<=a&&56319>=a&&56320<=c&&57343>=c?(a<<10)-56623104+(c-56320+65536):0);return c}function fK(a,b,c){var d=Iz.g(a);d=d instanceof w?d.X:null;switch(d){case "nt":return gK.j?gK.j(a,b,c):gK.call(null,a,b,c);case "alt":return hK.j?hK.j(a,b,c):hK.call(null,a,b,c);case "cat":return iK.j?iK.j(a,b,c):iK.call(null,a,b,c);case "string":return jK.j?jK.j(a,b,c):jK.call(null,a,b,c);case "string-ci":return kK.j?kK.j(a,b,c):kK.call(null,a,b,c);case "char":return lK.j?lK.j(a,b,c):lK.call(null,a,b,c);case "epsilon":return mK.j?mK.j(a,b,c):mK.call(null,a,b,c);case "opt":return nK.j?nK.j(a,b,c):
    nK.call(null,a,b,c);case "plus":return oK.j?oK.j(a,b,c):oK.call(null,a,b,c);case "rep":return pK.j?pK.j(a,b,c):pK.call(null,a,b,c);case "star":return qK.j?qK.j(a,b,c):qK.call(null,a,b,c);case "regexp":return rK.j?rK.j(a,b,c):rK.call(null,a,b,c);case "look":return sK.j?sK.j(a,b,c):sK.call(null,a,b,c);case "neg":return tK.j?tK.j(a,b,c):tK.call(null,a,b,c);case "ord":return uK.j?uK.j(a,b,c):uK.call(null,a,b,c);default:throw Error(["No matching clause: ",p.g(d)].join(""));}}
    function vK(a,b,c){var d=Iz.g(a);d=d instanceof w?d.X:null;switch(d){case "nt":return wK.j?wK.j(a,b,c):wK.call(null,a,b,c);case "alt":return xK.j?xK.j(a,b,c):xK.call(null,a,b,c);case "cat":return yK.j?yK.j(a,b,c):yK.call(null,a,b,c);case "string":return zK.j?zK.j(a,b,c):zK.call(null,a,b,c);case "string-ci":return AK.j?AK.j(a,b,c):AK.call(null,a,b,c);case "char":return BK.j?BK.j(a,b,c):BK.call(null,a,b,c);case "epsilon":return CK.j?CK.j(a,b,c):CK.call(null,a,b,c);case "opt":return DK.j?DK.j(a,b,c):
    DK.call(null,a,b,c);case "plus":return EK.j?EK.j(a,b,c):EK.call(null,a,b,c);case "rep":return FK.j?FK.j(a,b,c):FK.call(null,a,b,c);case "star":return GK.j?GK.j(a,b,c):GK.call(null,a,b,c);case "regexp":return HK.j?HK.j(a,b,c):HK.call(null,a,b,c);case "look":return IK.j?IK.j(a,b,c):IK.call(null,a,b,c);case "neg":return tK.j?tK.j(a,b,c):tK.call(null,a,b,c);case "ord":return JK.j?JK.j(a,b,c):JK.call(null,a,b,c);default:throw Error(["No matching clause: ",p.g(d)].join(""));}}
    function KK(a,b,c,d,e){this.index=a;this.reason=b;this.F=c;this.m=d;this.G=e;this.C=2230716170;this.O=139264;}h=KK.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "index":return this.index;case "reason":return this.reason;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#instaparse.gll.Failure{",", ","}",c,cg.h(new S(null,2,5,T,[new S(null,2,5,T,[Qm,this.index],null),new S(null,2,5,T,[Tn,this.reason],null)],null),this.m))};h.Aa=function(){return new ni(this,2,new S(null,2,5,T,[Qm,Tn],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 2+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-1140991288^ae(this)};
    h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.index,b.index)&&x.h(this.reason,b.reason)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,2,[Qm,null,Tn,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new KK(this.index,this.reason,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "index":case "reason":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(Qm,b):Nf.call(null,Qm,b))?new KK(c,this.reason,this.F,this.m,null):n(Nf.h?Nf.h(Tn,b):Nf.call(null,Tn,b))?new KK(this.index,c,this.F,this.m,null):new KK(this.index,this.reason,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,2,5,T,[new Nh(Qm,this.index),new Nh(Tn,this.reason)],null),this.m))};h.U=function(a,b){return new KK(this.index,this.reason,b,this.m,this.G)};
    h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};h.qa=tb;h.W=function(a,b){var c=this;return ad(b,function(){var d=new pb,e=wb,f=vb;wb=!0;vb=function(g){return d.append(g)};try{xJ(c);}finally{vb=f,wb=e;}return p.g(d)}())};var LK=Rb(new KK(null,null,null,null,null));
    function MK(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z){this.va=a;this.text=b;this.kb=c;this.bb=d;this.jb=e;this.stack=f;this.ib=g;this.eb=l;this.hb=m;this.gb=q;this.xa=t;this.lb=v;this.cb=y;this.mb=E;this.F=J;this.m=W;this.G=Z;this.C=2230716170;this.O=139264;}h=MK.prototype;h.da=function(a,b){return this.S(null,b,null)};
    h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "grammar":return this.va;case "text":return this.text;case "segment":return this.kb;case "fail-index":return this.bb;case "node-builder":return this.jb;case "stack":return this.stack;case "next-stack":return this.ib;case "generation":return this.eb;case "negative-listeners":return this.hb;case "msg-cache":return this.gb;case "nodes":return this.xa;case "success":return this.lb;case "failure":return this.cb;case "trace?":return this.mb;default:return u.j(this.m,
    b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#instaparse.gll.Tramp{",", ","}",c,cg.h(new S(null,14,5,T,[new S(null,2,5,T,[ur,this.va],null),new S(null,2,5,T,[eE,this.text],null),new S(null,2,5,T,[Jn,this.kb],null),new S(null,2,5,T,[Tm,this.bb],null),new S(null,2,5,T,[ly,this.jb],null),new S(null,2,5,T,[gx,this.stack],null),new S(null,2,5,T,[Gw,this.ib],null),new S(null,2,5,T,[is,this.eb],null),new S(null,2,5,T,[uC,this.hb],null),new S(null,2,5,T,[Qq,this.gb],null),new S(null,
    2,5,T,[Yu,this.xa],null),new S(null,2,5,T,[vC,this.lb],null),new S(null,2,5,T,[tx,this.cb],null),new S(null,2,5,T,[Zu,this.mb],null)],null),this.m))};h.Aa=function(){return new ni(this,14,new S(null,14,5,T,[ur,eE,Jn,Tm,ly,gx,Gw,is,uC,Qq,Yu,vC,tx,Zu],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 14+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=166878148^ae(this)};
    h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.va,b.va)&&x.h(this.text,b.text)&&x.h(this.kb,b.kb)&&x.h(this.bb,b.bb)&&x.h(this.jb,b.jb)&&x.h(this.stack,b.stack)&&x.h(this.ib,b.ib)&&x.h(this.eb,b.eb)&&x.h(this.hb,b.hb)&&x.h(this.gb,b.gb)&&x.h(this.xa,b.xa)&&x.h(this.lb,b.lb)&&x.h(this.cb,b.cb)&&x.h(this.mb,b.mb)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,14,[Qq,null,uC,null,is,null,tx,null,Tm,null,ur,null,vC,null,Yu,null,ly,null,Jn,null,gx,null,Zu,null,Gw,null,eE,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,tg(Je.h(this.m,b)),null)};
    h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "grammar":case "text":case "segment":case "fail-index":case "node-builder":case "stack":case "next-stack":case "generation":case "negative-listeners":case "msg-cache":case "nodes":case "success":case "failure":case "trace?":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(ur,b):Nf.call(null,ur,b))?new MK(c,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(eE,b):Nf.call(null,eE,b))?new MK(this.va,c,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(Jn,b):Nf.call(null,Jn,b))?new MK(this.va,this.text,c,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,
    this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(Tm,b):Nf.call(null,Tm,b))?new MK(this.va,this.text,this.kb,c,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(ly,b):Nf.call(null,ly,b))?new MK(this.va,this.text,this.kb,this.bb,c,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(gx,b):Nf.call(null,gx,b))?new MK(this.va,this.text,this.kb,this.bb,this.jb,c,this.ib,
    this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(Gw,b):Nf.call(null,Gw,b))?new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,c,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(is,b):Nf.call(null,is,b))?new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,c,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(uC,b):Nf.call(null,uC,b))?new MK(this.va,this.text,this.kb,this.bb,
    this.jb,this.stack,this.ib,this.eb,c,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(Qq,b):Nf.call(null,Qq,b))?new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,c,this.xa,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(Yu,b):Nf.call(null,Yu,b))?new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,c,this.lb,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(vC,b):Nf.call(null,vC,b))?new MK(this.va,
    this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,c,this.cb,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(tx,b):Nf.call(null,tx,b))?new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,c,this.mb,this.F,this.m,null):n(Nf.h?Nf.h(Zu,b):Nf.call(null,Zu,b))?new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,c,this.F,this.m,null):new MK(this.va,this.text,this.kb,
    this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,14,5,T,[new Nh(ur,this.va),new Nh(eE,this.text),new Nh(Jn,this.kb),new Nh(Tm,this.bb),new Nh(ly,this.jb),new Nh(gx,this.stack),new Nh(Gw,this.ib),new Nh(is,this.eb),new Nh(uC,this.hb),new Nh(Qq,this.gb),new Nh(Yu,this.xa),new Nh(vC,this.lb),new Nh(tx,this.cb),new Nh(Zu,this.mb)],null),this.m))};
    h.U=function(a,b){return new MK(this.va,this.text,this.kb,this.bb,this.jb,this.stack,this.ib,this.eb,this.hb,this.gb,this.xa,this.lb,this.cb,this.mb,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};function NK(a,b,c,d,e){return new MK(a,b,c,d,e,Vg(G),Vg(G),Vg(0),Vg(zj(vf)),Vg(R),Vg(R),Vg(null),Vg(new KK(0,G,null,null,null)),!1,null,null,null)}function OK(a,b){return new k(null,2,[JA,a,Qm,b],null)}function PK(a,b){return x.h(D(eE.g(a)),Qm.g(b))}
    function QK(a,b,c,d,e,f,g){this.jc=a;this.ac=b;this.results=c;this.bc=d;this.F=e;this.m=f;this.G=g;this.C=2230716170;this.O=139264;}h=QK.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "listeners":return this.jc;case "full-listeners":return this.ac;case "results":return this.results;case "full-results":return this.bc;default:return u.j(this.m,b,c)}};
    h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#instaparse.gll.Node{",", ","}",c,cg.h(new S(null,4,5,T,[new S(null,2,5,T,[DC,this.jc],null),new S(null,2,5,T,[hz,this.ac],null),new S(null,2,5,T,[to,this.results],null),new S(null,2,5,T,[rF,this.bc],null)],null),this.m))};
    h.Aa=function(){return new ni(this,4,new S(null,4,5,T,[DC,hz,to,rF],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 4+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-1610074144^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.jc,b.jc)&&x.h(this.ac,b.ac)&&x.h(this.results,b.results)&&x.h(this.bc,b.bc)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,4,[rF,null,hz,null,DC,null,to,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new QK(this.jc,this.ac,this.results,this.bc,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "listeners":case "full-listeners":case "results":case "full-results":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(DC,b):Nf.call(null,DC,b))?new QK(c,this.ac,this.results,this.bc,this.F,this.m,null):n(Nf.h?Nf.h(hz,b):Nf.call(null,hz,b))?new QK(this.jc,c,this.results,this.bc,this.F,this.m,null):n(Nf.h?Nf.h(to,b):Nf.call(null,to,b))?new QK(this.jc,this.ac,c,this.bc,this.F,this.m,null):n(Nf.h?Nf.h(rF,b):Nf.call(null,rF,b))?new QK(this.jc,this.ac,this.results,c,this.F,this.m,null):new QK(this.jc,this.ac,this.results,this.bc,this.F,He.j(this.m,b,c),null)};
    h.ea=function(){return z(cg.h(new S(null,4,5,T,[new Nh(DC,this.jc),new Nh(hz,this.ac),new Nh(to,this.results),new Nh(rF,this.bc)],null),this.m))};h.U=function(a,b){return new QK(this.jc,this.ac,this.results,this.bc,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};function RK(a,b){return Yg.j(gx.g(a),De,b)}
    function SK(a,b,c){function d(){return b.g?b.g(c):b.call(null,c)}var e=Qq.g(a),f=Qm.g(c);f=new S(null,2,5,T,[b,f],null);var g=u.j(r(e),f,0);g>r(is.g(a))?Yg.j(Gw.g(a),De,d):Yg.j(gx.g(a),De,d);Yg.D(e,He,f,g+1);}function TK(a,b){a=Yu.g(a);a=r(a);b=a.g?a.g(b):a.call(null,b);return n(b)?0<D(r(DC.g(b))):null}function UK(a,b){a=Yu.g(a);a=r(a);b=a.g?a.g(b):a.call(null,b);return n(b)?0<D(r(hz.g(b)))||0<D(r(DC.g(b))):null}
    function VK(a,b){a=Yu.g(a);a=r(a);b=a.g?a.g(b):a.call(null,b);return n(b)?0<D(r(rF.g(b)))||0<D(r(to.g(b))):null}function WK(a,b){a=Yu.g(a);var c=r(a);c=c.g?c.g(b):c.call(null,b);n(c)||(c=new QK(Vg(G),Vg(G),Vg(Jj),Vg(Jj),null,null,null),Yg.D(a,He,b,c));return c}function XK(a,b){return (null!=a?a.C&262144||tb===a.Te||(a.C?0:Qb(Lc,a)):Qb(Lc,a))?Me(a,b):a}
    function YK(a,b,c){var d=WK(a,b),e=b.g?b.g(1):b.call(null,1),f=n(wt.g(e))?He.j(c,JA,null):c,g=function(){var E=ao.g(e);return n(E)?OK(XK(GJ(E,JA.g(f)),new k(null,2,[Qy,b.g?b.g(0):b.call(null,0),Jt,Qm.g(f)],null)),Qm.g(f)):f}(),l=(c=PK(a,g))?rF.g(d):to.g(d);if(Lb(function(){var E=r(l);return E.g?E.g(g):E.call(null,g)}())){Yg.j(l,De,g);for(var m=z(r(DC.g(d))),q=null,t=0,v=0;;)if(v<t){var y=q.V(null,v);SK(a,y,g);v+=1;}else if(m=z(m))q=m,Ze(q)?(m=pd(q),v=qd(q),q=m,t=D(m),m=v):(m=A(q),SK(a,m,g),m=C(q),
    q=null,t=0),v=0;else break;if(c)for(d=z(r(hz.g(d))),c=null,t=q=0;;)if(t<q)m=c.V(null,t),SK(a,m,g),t+=1;else if(d=z(d))c=d,Ze(c)?(d=pd(c),q=qd(c),c=d,m=D(d),d=q,q=m):(m=A(c),SK(a,m,g),d=C(c),c=null,q=0),t=0;else return null;else return null}else return null}
    function ZK(a,b,c){var d=TK(a,b),e=WK(a,b),f=DC.g(e);Yg.j(f,De,c);f=z(r(to.g(e)));for(var g=null,l=0,m=0;;)if(m<l){var q=g.V(null,m);SK(a,c,q);m+=1;}else if(f=z(f))g=f,Ze(g)?(f=pd(g),m=qd(g),g=f,l=D(f),f=m):(f=A(g),SK(a,c,f),f=C(g),g=null,l=0),m=0;else break;e=z(r(rF.g(e)));f=null;for(l=g=0;;)if(l<g)m=f.V(null,l),SK(a,c,m),l+=1;else if(e=z(e))f=e,Ze(f)?(e=pd(f),l=qd(f),f=e,g=D(e),e=l):(e=A(f),SK(a,c,e),e=C(f),f=null,g=0),l=0;else break;return Lb(d)?RK(a,function(){return fK(b.g?b.g(1):b.call(null,
    1),b.g?b.g(0):b.call(null,0),a)}):null}function $K(a,b,c){var d=UK(a,b),e=WK(a,b),f=hz.g(e);Yg.j(f,De,c);e=z(r(rF.g(e)));f=null;for(var g=0,l=0;;)if(l<g){var m=f.V(null,l);SK(a,c,m);l+=1;}else if(e=z(e))f=e,Ze(f)?(e=pd(f),l=qd(f),f=e,g=D(e),e=l):(e=A(f),SK(a,c,e),e=C(f),f=null,g=0),l=0;else break;return Lb(d)?RK(a,function(){return vK(b.g?b.g(1):b.call(null,1),b.g?b.g(0):b.call(null,0),a)}):null}var aL=Qg(Dj,qh);
    function bL(a,b,c){return Yg.j(uC.g(a),aL,Ie([b.g?b.g(0):b.call(null,0),new S(null,1,5,T,[c],null)]))}
    function cL(a,b,c,d){Yg.h(tx.g(a),function(e){var f=Qm.g(e);f=hf(c,f);switch(f){case 1:return new KK(c,new S(null,1,5,T,[d],null),null,null,null);case 0:return new KK(c,De.h(Tn.g(e),d),null,null,null);case -1:return e;default:throw Error(["No matching clause: ",p.g(f)].join(""));}});return x.h(c,Tm.g(a))?YK(a,b,OK(function(){var e=ly.g(a);var f=eE.g(a);f=Ff?f.substring(c):Ef.call(null,f,c);var g=D(eE.g(a));return dL.R?dL.R(e,VG,f,c,g):dL.call(null,e,VG,f,c,g)}(),D(eE.g(a)))):null}
    function eL(a){var b=Oe(r(a));Yg.h(a,Pe);b.v?b.v():b.call(null);}
    function fL(a,b){for(;;){var c=gx.g(a);if(n(r(vC.g(a))))return we(JA.g(r(vC.g(a))),new Sf(null,function(f){return function(){Wg(vC.g(f),null);return fL(f,!0)}}(a),null,null));if(0<D(r(c)))eL(c);else if(0<D(r(uC.g(a)))){var d=A(r(uC.g(a)));c=H(d,0,null);d=H(d,1,null);var e=Oe(d);e.v?e.v():e.call(null);x.h(D(d),1)?Yg.j(uC.g(a),Je,c):Yg.D(uC.g(a),vh,new S(null,1,5,T,[c],null),Pe);}else if(n(b))b=Gw.g(a),Wg(c,r(b)),Wg(b,G),Yg.h(is.g(a),ce),b=null;else return null}}
    function gL(a,b){return function(c){return YK(b,a,c)}}function hL(a,b){return function(){return YK(b,a,OK(null,a.g?a.g(0):a.call(null,0)))}}
    var iL=function iL(a,b,c,d){return function(f){var g=qg(f);f=u.h(g,JA);g=u.h(g,Qm);f=UI(a,f);if(z(b)){g=new S(null,2,5,T,[g,A(b)],null);var l=C(b);f=iL.D?iL.D(f,l,c,d):iL.call(null,f,l,c,d);f=ZK(d,g,f);}else f=YK(d,c,OK(f,g));return f}},jL=function jL(a,b,c,d){return function(f){var g=qg(f);f=u.h(g,JA);g=u.h(g,Qm);var l=UI(a,f);return BJ(b)?$K(d,new S(null,2,5,T,[g,A(b)],null),function(){var m=C(b);return jL.D?jL.D(l,m,c,d):jL.call(null,l,m,c,d)}()):z(b)?ZK(d,new S(null,2,5,T,[g,A(b)],null),function(){var m=
    C(b);return jL.D?jL.D(l,m,c,d):jL.call(null,l,m,c,d)}()):YK(d,c,OK(l,g))}},kL=function kL(a,b,c,d,e){return function(g){var l=qg(g);g=u.h(l,JA);l=u.h(l,Qm);if(x.h(l,c))return 0===D(a)?YK(e,d,OK(null,l)):null;g=UI(a,g);ZK(e,new S(null,2,5,T,[l,b],null),kL.R?kL.R(g,b,l,d,e):kL.call(null,g,b,l,d,e));return YK(e,d,OK(g,l))}},lL=function lL(a,b,c,d,e){return function(g){var l=qg(g);g=u.h(l,JA);l=u.h(l,Qm);if(x.h(l,c))return 0===D(a)?YK(e,d,OK(null,l)):null;g=UI(a,g);return x.h(l,D(eE.g(e)))?YK(e,d,OK(g,
    l)):ZK(e,new S(null,2,5,T,[l,b],null),lL.R?lL.R(g,b,l,d,e):lL.call(null,g,b,l,d,e))}},mL=function mL(a,b,c,d,e,f,g,l){return function(q){q=qg(q);var t=u.h(q,JA);q=u.h(q,Qm);t=UI(a,t);var v=b+1;d<=v&&v<=e&&YK(l,g,OK(t,q));return v<e?ZK(l,new S(null,2,5,T,[q,c],null),mL.za?mL.za(t,v,c,d,e,q,g,l):mL.call(null,t,v,c,d,e,q,g,l)):null}},nL=function nL(a,b,c,d,e,f,g,l){return function(q){q=qg(q);var t=u.h(q,JA);q=u.h(q,Qm);t=UI(a,t);var v=b+1;return x.h(q,D(eE.g(l)))?d<=v&&v<=e?YK(l,g,OK(t,q)):null:v<e?
    ZK(l,new S(null,2,5,T,[q,c],null),nL.za?nL.za(t,v,c,d,e,q,g,l):nL.call(null,t,v,c,d,e,q,g,l)):null}};function oL(a){return function(b){return Wg(vC.g(a),b)}}function jK(a,b,c){var d=OB.g(a),e=eE.g(c);var f=D(e);var g=b+D(d);f=f<g?f:g;e=Gf?e.substring(b,f):Ef.call(null,e,b,f);return x.h(d,e)?YK(c,new S(null,2,5,T,[b,a],null),OK(d,f)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,OB,QF,d],null))}
    function zK(a,b,c){var d=OB.g(a),e=eE.g(c);var f=D(e);var g=b+D(d);f=f<g?f:g;g=Gf?e.substring(b,f):Ef.call(null,e,b,f);return x.h(f,D(e))&&x.h(d,g)?YK(c,new S(null,2,5,T,[b,a],null),OK(d,f)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,3,[Iz,OB,QF,d,Dz,!0],null))}
    function kK(a,b,c){var d=OB.g(a),e=eE.g(c);var f=D(e);var g=b+D(d);f=f<g?f:g;e=Gf?e.substring(b,f):Ef.call(null,e,b,f);return x.h(d.toUpperCase(),e.toUpperCase())?YK(c,new S(null,2,5,T,[b,a],null),OK(d,f)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,OB,QF,d],null))}
    function AK(a,b,c){var d=OB.g(a),e=eE.g(c);var f=D(e);var g=b+D(d);f=f<g?f:g;g=Gf?e.substring(b,f):Ef.call(null,e,b,f);return x.h(f,D(e))&&x.h(d.toUpperCase(),g.toUpperCase())?YK(c,new S(null,2,5,T,[b,a],null),OK(d,f)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,3,[Iz,OB,QF,d,Dz,!0],null))}
    function lK(a,b,c){var d=st.g(a),e=zr.g(a),f=eE.g(c);if(b>=D(f))return cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,nB,QF,new k(null,3,[Xt,!0,st,d,zr,e],null)],null));if(65535>=e)return f=f.charCodeAt(b),d<=f&&f<=e?YK(c,new S(null,2,5,T,[b,a],null),OK(p.g(wf(f)),b+1)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,nB,QF,new k(null,3,[Xt,!0,st,d,zr,e],null)],null));f=eK(f,b|0);var g=dK(f);return d<=f&&f<=e?YK(c,new S(null,2,5,T,[b,a],null),OK(g,b+D(g))):cL(c,new S(null,2,5,T,[b,a],null),
    b,new k(null,2,[Iz,nB,QF,new k(null,3,[Xt,!0,st,d,zr,e],null)],null))}
    function BK(a,b,c){var d=st.g(a),e=zr.g(a),f=eE.g(c),g=D(f);if(b>=D(f))return cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,nB,QF,new k(null,3,[Xt,!0,st,d,zr,e],null)],null));if(65535>=e)return f=f.charCodeAt(b),x.h(b+1,g)&&d<=f&&f<=e?YK(c,new S(null,2,5,T,[b,a],null),OK(p.g(wf(f)),g)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,nB,QF,new k(null,3,[Xt,!0,st,d,zr,e],null)],null));f=eK(f,b|0);var l=dK(f);return x.h(b+D(l),g)&&d<=f&&f<=e?YK(c,new S(null,2,5,T,[b,a],null),OK(l,g)):cL(c,
    new S(null,2,5,T,[b,a],null),b,new k(null,3,[Iz,nB,QF,new k(null,3,[Xt,!0,st,d,zr,e],null),Dz,!0],null))}function pL(a,b){a=(new RegExp(a.source,["g",AJ(a)].join(""))).exec(b);return n(n(a)?0===a.index:a)?A(a):null}function rK(a,b,c){var d=cB.g(a),e=Jn.g(c);e=Ff?e.substring(b):Ef.call(null,e,b);e=pL(d,e);return n(e)?YK(c,new S(null,2,5,T,[b,a],null),OK(e,b+D(e))):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,cB,QF,d],null))}
    function HK(a,b,c){var d=cB.g(a),e=Jn.g(c),f=Ff?e.substring(b):Ef.call(null,e,b);f=pL(d,f);var g=D(e)-b;return n(n(f)?x.h(D(f),g):f)?YK(c,new S(null,2,5,T,[b,a],null),OK(f,D(e))):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,3,[Iz,cB,QF,d,Dz,!0],null))}function iK(a,b,c){var d=Ys.g(a);return ZK(c,new S(null,2,5,T,[b,A(d)],null),iL($I,C(d),new S(null,2,5,T,[b,a],null),c))}function yK(a,b,c){var d=Ys.g(a);return ZK(c,new S(null,2,5,T,[b,A(d)],null),jL($I,C(d),new S(null,2,5,T,[b,a],null),c))}
    function oK(a,b,c){var d=Rq.g(a);return ZK(c,new S(null,2,5,T,[b,d],null),kL($I,d,b,new S(null,2,5,T,[b,a],null),c))}function EK(a,b,c){var d=Rq.g(a);return ZK(c,new S(null,2,5,T,[b,d],null),lL($I,d,b,new S(null,2,5,T,[b,a],null),c))}
    function pK(a,b,c){var d=Rq.g(a),e=Wq.g(a),f=QC.g(a);return 0===e?(YK(c,new S(null,2,5,T,[b,a],null),OK(null,b)),1<=f?ZK(c,new S(null,2,5,T,[b,d],null),mL($I,0,d,1,f,b,new S(null,2,5,T,[b,a],null),c)):null):ZK(c,new S(null,2,5,T,[b,d],null),mL($I,0,d,e,f,b,new S(null,2,5,T,[b,a],null),c))}
    function FK(a,b,c){var d=Rq.g(a),e=Wq.g(a),f=QC.g(a);return 0===e?(YK(c,new S(null,2,5,T,[b,a],null),OK(null,b)),1<=f?ZK(c,new S(null,2,5,T,[b,d],null),nL($I,0,d,1,f,b,new S(null,2,5,T,[b,a],null),c)):null):ZK(c,new S(null,2,5,T,[b,d],null),nL($I,0,d,e,f,b,new S(null,2,5,T,[b,a],null),c))}function qK(a,b,c){var d=Rq.g(a);ZK(c,new S(null,2,5,T,[b,d],null),kL($I,d,b,new S(null,2,5,T,[b,a],null),c));return YK(c,new S(null,2,5,T,[b,a],null),OK(null,b))}
    function GK(a,b,c){var d=Rq.g(a);return x.h(b,D(eE.g(c)))?YK(c,new S(null,2,5,T,[b,a],null),OK(null,b)):ZK(c,new S(null,2,5,T,[b,d],null),lL($I,d,b,new S(null,2,5,T,[b,a],null),c))}
    function hK(a,b,c){var d=Ys.g(a);d=z(d);for(var e=null,f=0,g=0;;)if(g<f){var l=e.V(null,g);ZK(c,new S(null,2,5,T,[b,l],null),gL(new S(null,2,5,T,[b,a],null),c));g+=1;}else if(d=z(d))e=d,Ze(e)?(d=pd(e),f=qd(e),e=d,l=D(d),d=f,f=l):(l=A(e),ZK(c,new S(null,2,5,T,[b,l],null),gL(new S(null,2,5,T,[b,a],null),c)),d=C(e),e=null,f=0),g=0;else return null}
    function xK(a,b,c){var d=Ys.g(a);d=z(d);for(var e=null,f=0,g=0;;)if(g<f){var l=e.V(null,g);$K(c,new S(null,2,5,T,[b,l],null),gL(new S(null,2,5,T,[b,a],null),c));g+=1;}else if(d=z(d))e=d,Ze(e)?(d=pd(e),f=qd(e),e=d,l=D(d),d=f,f=l):(l=A(e),$K(c,new S(null,2,5,T,[b,l],null),gL(new S(null,2,5,T,[b,a],null),c)),d=C(e),e=null,f=0),g=0;else return null}
    function uK(a,b,c){var d=cs.g(a),e=ds.g(a);d=new S(null,2,5,T,[b,d],null);var f=new S(null,2,5,T,[b,e],null),g=gL(new S(null,2,5,T,[b,a],null),c);ZK(c,d,g);return bL(c,d,function(){return ZK(c,f,g)})}function JK(a,b,c){var d=cs.g(a),e=ds.g(a);d=new S(null,2,5,T,[b,d],null);var f=new S(null,2,5,T,[b,e],null),g=gL(new S(null,2,5,T,[b,a],null),c);$K(c,d,g);return bL(c,d,function(){return $K(c,f,g)})}
    function nK(a,b,c){var d=Rq.g(a);ZK(c,new S(null,2,5,T,[b,d],null),gL(new S(null,2,5,T,[b,a],null),c));return YK(c,new S(null,2,5,T,[b,a],null),OK(null,b))}function DK(a,b,c){var d=Rq.g(a);$K(c,new S(null,2,5,T,[b,d],null),gL(new S(null,2,5,T,[b,a],null),c));return x.h(b,D(eE.g(c)))?YK(c,new S(null,2,5,T,[b,a],null),OK(null,b)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,cn,QF,LD],null))}
    function gK(a,b,c){var d=ur.g(c);var e=ot.g(a);d=u.j(d,e,e);return ZK(c,new S(null,2,5,T,[b,d],null),gL(new S(null,2,5,T,[b,a],null),c))}function wK(a,b,c){var d=ur.g(c);var e=ot.g(a);d=u.j(d,e,e);return $K(c,new S(null,2,5,T,[b,d],null),gL(new S(null,2,5,T,[b,a],null),c))}function sK(a,b,c){var d=Rq.g(a);return ZK(c,new S(null,2,5,T,[b,d],null),hL(new S(null,2,5,T,[b,a],null),c))}
    function IK(a,b,c){return x.h(b,D(eE.g(c)))?sK(a,b,c):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,ax,QF,LD],null))}
    function tK(a,b,c){var d=Rq.g(a),e=new S(null,2,5,T,[b,d],null);if(n(VK(c,e)))return cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,1,[Iz,hn],null));ZK(c,e,function(){var f=new Dk(function(){return cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,hn,QF,new k(null,1,[MA,nJ(d,!1)],null)],null))});return function(){return Hk(f)}}());return bL(c,e,function(){return Lb(VK(c,e))?YK(c,new S(null,2,5,T,[b,a],null),OK(null,b)):null})}
    function mK(a,b,c){return YK(c,new S(null,2,5,T,[b,a],null),OK(null,b))}function CK(a,b,c){return x.h(b,D(eE.g(c)))?YK(c,new S(null,2,5,T,[b,a],null),OK(null,b)):cL(c,new S(null,2,5,T,[b,a],null),b,new k(null,2,[Iz,cG,QF,LD],null))}function qL(a,b,c){n(c)?ZK(a,new S(null,2,5,T,[0,b],null),oL(a)):$K(a,new S(null,2,5,T,[0,b],null),oL(a));}
    function rL(a,b,c,d){a=NK(a,c,c,-1,null);qL(a,UJ(b),d);b=fL(a,null);if(n(b))b=A(b);else {b=r(tx.g(a));a:{d=Qm.g(b);for(var e=a=1,f=0;;){if(x.h(d,f)){d=new k(null,2,[pw,a,Es,e],null);break a}x.h("\n",u.h(c,f))?(f+=1,a+=1,e=1):(f+=1,e+=1);}}a=Cj.l;a:for(e=pw.g(d),c=z(iJ(c,"\r\n","\n"));;){if(Re(c)){c="";break a}if(x.h(e,1)){c=lg(p,Sj(Ng(new Hj(null,new k(null,1,["\n",null],null),null)),c));break a}x.h("\n",A(c))?(c=C(c),--e):c=C(c);}b=a.call(Cj,F([b,d,new k(null,1,[eE,c],null)]));}return b}
    function dL(a,b,c,d,e){return Me(a.h?a.h(b,c):a.call(null,b,c),new k(null,2,[Qy,d,Jt,e],null))}function sL(a,b){return (null!=a?a.C&262144||tb===a.Te||(a.C?0:Qb(Lc,a)):Qb(Lc,a))?Me(a,Cj.l(F([b,Ne(a)]))):a}
    var tL=function tL(a,b){var d=Iz.g(b);d=a.g?a.g(d):a.call(null,d);return n(d)?sL(lg(d,ch.h(Qg(tL,a),pn.g(b))),Ne(b)):n(Iz.g(b))?He.j(b,pn,ch.h(Qg(tL,a),pn.g(b))):b},uL=function uL(a,b){if(Ve(b)&&z(b)){var d=A(b);d=a.g?a.g(d):a.call(null,d);return n(d)?sL(lg(d,ch.h(Qg(uL,a),C(b))),Ne(b)):Me(qh.h(new S(null,1,5,T,[A(b)],null),ch.h(Qg(uL,a),C(b))),Ne(b))}return b},vL=function vL(a,b){if("string"===typeof b)a=b;else {var d=(d=We(b))?Iz.g(b):d;a=n(d)?tL(a,b):Ye(b)&&A(b)instanceof w?uL(a,b):Ve(b)?Me(ch.h(Qg(vL,
    a),b),Ne(b)):b instanceof KK?b:zJ(F(["Invalid parse-tree, not recognized as either enlive or hiccup format."]));}return a};function wL(a,b,c){if(Hf(c)){var d=lg(P,ch.h(a,c));return b.g?b.g(d):b.call(null,d)}return Vh(c)?(d=new Nh(function(){var e=Ac(c);return a.g?a.g(e):a.call(null,e)}(),function(){var e=Bc(c);return a.g?a.g(e):a.call(null,e)}()),b.g?b.g(d):b.call(null,d)):df(c)?(d=bk(ch.h(a,c)),b.g?b.g(d):b.call(null,d)):Xe(c)?(d=$b.j(function(e,f){return De.h(e,a.g?a.g(f):a.call(null,f))},c,c),b.g?b.g(d):b.call(null,d)):Se(c)?(d=qh.h(Fe(c),ch.h(a,c)),b.g?b.g(d):b.call(null,d)):b.g?b.g(c):b.call(null,c)}
    var xL=function xL(a,b){return wL(Qg(xL,a),a,b)};function yL(a){function b(c){var d=H(c,0,null);c=H(c,1,null);return "string"===typeof d?new S(null,2,5,T,[Qf.g(d),c],null):new S(null,2,5,T,[d,c],null)}return xL(function(c){return We(c)?qh.h(R,ch.h(b,c)):c},a)}function zL(a){return null==a?null:wf(a)}function AL(a,b,c,d,e){this.wc=a;this.form=b;this.F=c;this.m=d;this.G=e;this.C=2230716170;this.O=139264;}h=AL.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "splicing?":return this.wc;case "form":return this.form;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.tools.reader.impl.utils.ReaderConditional{",", ","}",c,cg.h(new S(null,2,5,T,[new S(null,2,5,T,[DD,this.wc],null),new S(null,2,5,T,[Qs,this.form],null)],null),this.m))};h.Aa=function(){return new ni(this,2,new S(null,2,5,T,[DD,Qs],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 2+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-209062840^ae(this)};
    h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.wc,b.wc)&&x.h(this.form,b.form)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,2,[DD,null,Qs,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new AL(this.wc,this.form,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "splicing?":case "form":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(DD,b):Nf.call(null,DD,b))?new AL(c,this.form,this.F,this.m,null):n(Nf.h?Nf.h(Qs,b):Nf.call(null,Qs,b))?new AL(this.wc,c,this.F,this.m,null):new AL(this.wc,this.form,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,2,5,T,[new Nh(DD,this.wc),new Nh(Qs,this.form)],null),this.m))};h.U=function(a,b){return new AL(this.wc,this.form,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    function BL(a,b){return new AL(b,a,null,null,null)}h.qa=tb;h.W=function(a,b,c){ad(b,["#?",n(this.wc)?"@":null].join(""));return ok(this.form,b,c)};var CL=/[\s]/;function DL(a){return null==a?null:","===a?!0:CL.test(a)}function EL(a){return null==a?null:!/[^0-9]/.test(a)}function FL(a){return a instanceof w?Ie([a,!0]):a instanceof Md?new k(null,1,[Iz,a],null):"string"===typeof a?new k(null,1,[Iz,a],null):a}var GL=Vg(0);
    function HL(a,b){return function e(d){return new Sf(null,function(){for(;;){var f=z(d);if(f){if(Ze(f)){var g=pd(f),l=D(g),m=Wf(l);return function(){for(var t=0;;)if(t<l){var v=jc(g,t),y=m;if(v instanceof Md||v instanceof w){var E=ak(Of,Rf)(v),J=H(E,0,null);E=H(E,1,null);var W=v instanceof Md?Nd:Qf;v=null==J?W.h?W.h(a,E):W.call(null,a,E):x.h("_",J)?W.g?W.g(E):W.call(null,E):v;}y.add(v);t+=1;}else return !0}()?Yf($f(m),e(qd(f))):Yf($f(m),null)}var q=A(f);return we(q instanceof Md||q instanceof w?function(){var t=
    ak(Of,Rf)(q),v=H(t,0,null);t=H(t,1,null);var y=q instanceof Md?Nd:Qf;return null==v?y.h?y.h(a,t):y.call(null,a,t):x.h("_",v)?y.g?y.g(t):y.call(null,t):q}():q,e(Td(f)))}return null}},null,null)}(b)}function IL(a){var b=H(a,0,null);a=H(a,1,null);return n(b)?null:a}function JL(a,b){a=parseInt(a,b);return n(isNaN(a))?-1:a}function KL(a){if(null!=a&&null!=a.Fa)a=a.Fa(a);else {var b=KL[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=KL._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("Reader.read-char",a);}return a}function LL(a){if(null!=a&&null!=a.Fc)a=a.Fc(a);else {var b=LL[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=LL._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("Reader.peek-char",a);}return a}
    function ML(a,b){if(null!=a&&null!=a.Ld)a.Ld(a,b);else {var c=ML[ba(null==a?null:a)];if(null!=c)c.h?c.h(a,b):c.call(null,a,b);else if(c=ML._,null!=c)c.h?c.h(a,b):c.call(null,a,b);else throw Sb("IPushbackReader.unread",a);}}function NL(a){if(null!=a&&null!=a.Nd)a=a.Nd(a);else {var b=NL[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=NL._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IndexingReader.get-line-number",a);}return a}
    function OL(a){if(null!=a&&null!=a.Md)a=a.Md(a);else {var b=OL[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=OL._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IndexingReader.get-column-number",a);}return a}function PL(a){if(null!=a&&null!=a.Ye)a=a.Ye(a);else {var b=PL[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=PL._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IndexingReader.get-file-name",a);}return a}
    function QL(a,b){this.ma=a;this.mg=b;this.xd=0;}QL.prototype.Fa=function(){if(this.mg>this.xd){var a=this.ma.charAt(this.xd);this.xd+=1;return a}return null};QL.prototype.Fc=function(){return this.mg>this.xd?this.ma.charAt(this.xd):null};function RL(a,b){this.jg=a;this.ia=b;this.Tb=this.Le=1;}RL.prototype.Fa=function(){var a=this.Tb<this.Le?this.ia[this.Tb]:this.jg.Fa(null);this.Tb<this.Le&&(this.Tb+=1);return zL(a)};
    RL.prototype.Fc=function(){var a=this.Tb<this.Le?this.ia[this.Tb]:this.jg.Fc(null);return zL(a)};RL.prototype.Ld=function(a,b){if(n(b)){if(0===this.Tb)throw Error("Pushback buffer is full");--this.Tb;return this.ia[this.Tb]=b}return null};function SL(a){return null!=a?tb===a.zi?!0:!1:!1}function TL(a){a=new QL(a,D(a));a:{var b=Array(1);if(df(null))for(var c=0,d=z(null);;)if(d&&1>c)b[c]=A(d),c+=1,d=C(d);else break a;else for(c=0;;)if(1>c)b[c]=null,c+=1;else break}return new RL(a,b)}function UL(a,b,c,d){var e=D(b);a=n(a)?0:10<e?10:e;b=ch.h(Qg(VL,!0),dh.h(a,b));b=lg(p,eh(1,ih.h(Db(" "),b)));e=a<e?"...":null;return [p.g(c),p.g(b),e,p.g(d)].join("")}var VL,jH=Vg(R),lH=Vg(R),wH=Vg(R),xH=Vg(R),BH=u.j(R,su,Wk.v?Wk.v():Wk.call(null));
    VL=new jl(Nd.h("cljs.tools.reader.impl.inspect","inspect*"),function(a,b){return null==b?Ol:"string"===typeof b?OB:b instanceof w?lx:"number"===typeof b?lx:b instanceof Md?lx:Ye(b)?tA:Hf(b)?jy:We(b)?NC:Te(b)?Ct:x.h(b,!0)?lx:x.h(b,!1)?lx:Rb(b)},BH,jH,lH,wH,xH);VL.B(null,OB,function(a,b){a=n(a)?5:20;var c=b.length>a?'..."':'"',d=b.length;return ['"',p.g(b.substring(0,a<d?a:d)),c].join("")});VL.B(null,lx,function(a,b){return p.g(b)});VL.B(null,Rd,function(){return "\x3cindexed seq\x3e"});
    VL.B(null,ri,function(){return "\x3cmap seq\x3e"});VL.B(null,Wi,function(){return "\x3cmap seq\x3e"});VL.B(null,Kf,function(){return "\x3ccons\x3e"});VL.B(null,Sf,function(){return "\x3clazy seq\x3e"});VL.B(null,Ol,function(){return "nil"});VL.B(null,jy,function(a,b){return UL(a,b,"(",")")});VL.B(null,NC,function(a,b){var c=D(b),d=n(a)?0:c;b=lg(cg,dh.h(d,b));return UL(a,b,"{",c>d?"...}":"}")});VL.B(null,Ct,function(a,b){return UL(a,b,"#{","}")});VL.B(null,tA,function(a,b){return UL(a,b,"[","]")});
    VL.B(null,Tk,function(a,b){return uk.l(F([Rb(b)]))});function aM(a,b,c){b=new k(null,2,[Yv,gm,Vm,b],null);a=SL(a)?He.l(b,OD,PL(a),F([pw,NL(a),ox,OL(a)])):b;var d=OD.g(a);b=pw.g(a);var e=ox.g(a);d=n(d)?[p.g(d)," "].join(""):null;b=n(b)?["[line ",p.g(b),", col ",p.g(e),"]"].join(""):null;c=og(p,d,b,n(n(d)?d:b)?" ":null,c);throw ol(c,a);}function bM(a,b){return aM(a,Fq,F([lg(p,b)]))}function cM(a,b){return aM(a,qp,F([lg(p,b)]))}function dM(a,b){return aM(a,An,F([lg(p,b)]))}
    function eM(a,b,c,d,e){return dM(a,F(["Unexpected EOF while reading ",n(e)?["item ",p.g(e)," of "].join(""):null,Rf(b),n(c)?[", starting at line ",p.g(c)," and column ",p.g(d)].join(""):null,"."]))}function fM(a,b,c,d){bM(a,F(["The map literal starting with ",VL.h(!1,A(d)),n(b)?[" on line ",p.g(b)," column ",p.g(c)].join(""):null," contains ",D(d)," form(s). Map literals must contain an even number of forms."]));}function gM(a){throw cM(null,F(["Invalid unicode literal: \\",a,"."]));}
    function hM(a,b){return bM(a,F(["Invalid unicode escape: \\u",b,"."]))}function iM(a,b,c){return bM(a,F(["Invalid ",Rf(b),": ",c,"."]))}function jM(a,b){return dM(a,F(["Unexpected EOF while reading start of ",Rf(b),"."]))}function kM(a,b,c){return bM(a,F(["Invalid character: ",c," found while reading ",Rf(b),"."]))}function lM(a){return dM(a,F(["Unexpected EOF while reading dispatch character."]))}
    function mM(a,b,c){a:{var d=b instanceof w?b.X:null;switch(d){case "regex":d='#"';break a;case "string":d='"';break a;default:throw Error(["No matching clause: ",p.g(d)].join(""));}}return dM(a,F(["Unexpected EOF reading ",Rf(b)," starting ",mg(p,d,c),"."]))}function nM(a,b){return cM(null,F(["Invalid digit ",a," in unicode character \\",b,"."]))}function oM(a,b){return cM(a,F(["Invalid digit ",b," in unicode character."]))}
    function pM(a,b,c){return cM(a,F(["Invalid unicode literal. Unicode literals should be ",c,"characters long. ","Value supplied is ",b," characters long."]))}function qM(a,b){return bM(a,F(["Invalid character literal \\u",b,"."]))}function rM(a,b){return bM(a,F(["Invalid octal escape sequence in a character literal: ",b,". Octal escape sequences must be 3 or fewer digits."]))}function sM(a){return bM(a,F(["Octal escape sequence must be in range [0, 377]."]))}
    function tM(a){return dM(a,F(["Unexpected EOF while reading character."]))}function uM(a,b){return bM(a,F(["Unsupported escape character: \\",b,"."]))}function vM(a){return bM(a,F(["A single colon is not a valid keyword."]))}function wM(a,b){bM(a,F(["Metadata cannot be ",VL.h(!1,b),". Metadata must be a Symbol, Keyword, String or Map."]));}function xM(a,b){return bM(a,F(["Metadata can not be applied to ",VL.h(!1,b),". ","Metadata can only be applied to IMetas."]))}
    function yM(a,b){return bM(a,F(["Namespaced map with namespace ",b," does not specify a map."]))}function zM(a,b){return bM(a,F(["Invalid value used as namespace in namespaced map: ",b,"."]))}function AM(a,b){bM(a,F(["Invalid reader tag: ",VL.h(!1,b),". Reader tags must be symbols."]));}function BM(a,b){return bM(a,F(["No reader function for tag ",VL.h(!1,b),"."]))}
    function CM(a,b){b=function(c){return function f(e){return new Sf(null,function(){for(var g=e;;)if(g=z(g)){if(Ze(g)){var l=pd(g),m=D(l),q=Wf(m);a:for(var t=0;;)if(t<m){var v=jc(l,t),y=H(v,0,null);1<H(v,1,null)&&q.add(y);t+=1;}else {l=!0;break a}return l?Yf($f(q),f(qd(g))):Yf($f(q),null)}q=A(g);l=H(q,0,null);if(1<H(q,1,null))return we(l,f(Td(g)));g=Td(g);}else return null},null,null)}(Zj(c))}(b);return og(p,a,1<D(b)?"s":null,": ",eh(1,ih.h(Db(", "),b)))}
    function DM(a,b,c){b=Rf(b);return bM(a,F([CM([String(b.charAt(0)).toUpperCase()+String(b.substr(1)).toLowerCase()," literal contains duplicate key"].join(""),c)]))}function EM(a,b){return n(b)?dM(a,F(["EOF while reading, starting at line ",b,"."])):dM(a,F(["EOF while reading."]))}function FM(a){for(var b=a.Fa(null);;)if(DL.g?DL.g(b):DL.call(null,b))b=a.Fa(null);else return b}var GM=/^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$/,HM=/([-+]?[0-9]+)\/([0-9]+)/,IM=/([-+]?[0-9]+(\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?/;function JM(a,b){a=dk(a,b);return H(a,0,null)===b}
    function KM(a){if(JM(GM,a)){var b=Uh(dk(GM,a));if(null!=(b.g?b.g(2):b.call(null,2)))a=0;else {a="-"===(b.g?b.g(1):b.call(null,1));b=null!=(b.g?b.g(3):b.call(null,3))?new S(null,2,5,T,[b.g?b.g(3):b.call(null,3),10],null):null!=(b.g?b.g(4):b.call(null,4))?new S(null,2,5,T,[b.g?b.g(4):b.call(null,4),16],null):null!=(b.g?b.g(5):b.call(null,5))?new S(null,2,5,T,[b.g?b.g(5):b.call(null,5),8],null):null!=(b.g?b.g(7):b.call(null,7))?new S(null,2,5,T,[b.g?b.g(7):b.call(null,7),parseInt(b.g?b.g(6):b.call(null,
    6))],null):new S(null,2,5,T,[null,null],null);var c=b.g?b.g(0):b.call(null,0);null==c?a=null:(b=parseInt(c,b.g?b.g(1):b.call(null,1)),a=a?-1*b:b,a=n(isNaN(a))?null:a);}}else JM(IM,a)?(b=Uh(dk(IM,a)),a=null!=(b.g?b.g(4):b.call(null,4))?parseFloat(b.g?b.g(1):b.call(null,1)):parseFloat(a)):JM(HM,a)?(b=Uh(dk(HM,a)),a=b.g?b.g(1):b.call(null,1),b=b.g?b.g(2):b.call(null,2),a=n(dk(/^\+/,a))?a.substring(1):a,a=parseInt(a)/parseInt(b)):a=null;return a}
    function LM(a){if(""===a||!0===/:$/.test(a)||!0===/^::/.test(a))return null;var b=a.indexOf("/"),c=0<b?a.substring(0,b):null;if(null!=c){b+=1;if(b===D(a))return null;a=a.substring(b);return EL(qe(a,0))||""===a||!1!==/:$/.test(c)||"/"!==a&&-1!==a.indexOf("/")?null:new S(null,2,5,T,[c,a],null)}return "/"===a||-1===a.indexOf("/")?new S(null,2,5,T,[null,a],null):null}
    var MM=function MM(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return MM.l(arguments[0],1<c.length?new Rd(c.slice(1),0,null):null)};MM.l=function(a){for(;;){var b=a.Fa(null);if("\n"===b||"\n"===b||null==b)break}return a};MM.I=1;MM.M=function(a){var b=A(a);a=C(a);return this.l(b,a)};
    function NM(a){return function(){function b(d,e){var f=null;if(1<arguments.length){f=0;for(var g=Array(arguments.length-1);f<g.length;)g[f]=arguments[f+1],++f;f=new Rd(g,0,null);}return c.call(this,d,f)}function c(d){return bM(d,F([a]))}b.I=1;b.M=function(d){var e=A(d);d=Td(d);return c(e)};b.l=c;return b}()}function OM(a){switch(a){case '"':case ";":case "@":case "^":case "`":case "~":case "(":case ")":case "[":case "]":case "{":case "}":case "\\":return !0;default:return !1}}var PM=new pb;function QM(a,b,c){if(null==c)return jM(a,b);PM.clear();for(b=c;;){if(DL(b)||OM(b)||null==b)return null!=b&&a.Ld(null,b),PM.toString();PM.append(b);b=a.Fa(null);}}
    function RM(a,b,c,d){b=a.Fa(null);if(n(b)){var e=SM.g?SM.g(b):SM.call(null,b);if(n(e))return e.D?e.D(a,b,c,d):e.call(null,a,b,c,d);a.Ld(null,b);return TM.D?TM.D(a,b,c,d):TM.call(null,a,b,c,d)}return lM(a)}function UM(a,b){return bM(a,F(["Unmatched delimiter ",b,"."]))}function VM(a){for(var b=new pb,c=a.Fa(null);;){if('"'===c)return fk(p.g(b));if(null==c)return mM(a,Tz,F([b]));b.append(c);"\\"===c&&(c=a.Fa(null),null==c&&mM(a,Tz,F([b])),b.append(c));c=a.Fa(null);}}
    function WM(a,b,c){b=1+b;D(a)!==b&&gM(a);for(var d=1,e=0;;){if(d===b)return String.fromCharCode(e);var f=JL(qe(a,d),c);if(-1===f)return nM(qe(a,d),a);e=f+e*c;d+=1;}}function XM(a,b,c,d,e){for(var f=1,g=JL(b,c);;){if(-1===g)return oM(a,b);if(f!==d){var l=a.Fc(null);var m=DL(l);m||(m=YM.g?YM.g(l):YM.call(null,l),m=n(m)?m:null==l);if(n(m))return n(e)?pM(a,f,d):String.fromCharCode(g);m=JL(l,c);a.Fa(null);if(-1===m)return oM(a,l);g=m+g*c;f+=1;}else return String.fromCharCode(g)}}
    function ZM(a){var b=a.Fa(null);if(null!=b){b=OM(b)||DL(b)?p.g(b):QM(a,jG,b);var c=b.length;if(1===c)return b.charAt(0);if(x.h(b,"newline"))return "\n";if(x.h(b,"space"))return " ";if(x.h(b,"tab"))return "\t";if(x.h(b,"backspace"))return "\b";if(x.h(b,"formfeed"))return "\f";if(x.h(b,"return"))return "\r";if(n(0==b.lastIndexOf("u",0)))return b=WM(b,4,16),c=b.charCodeAt(0),55295<c&&57344>c?qM(a,c.toString(16)):b;if(n(0==b.lastIndexOf("o",0))){--c;if(3<c)return rM(a,b);c=WM(b,c,8);return 255>=parseInt(b.substring(1),
    8)?c:sM(a)}return bM(a,F(["Unsupported character: ",b,"."]))}return tM(a)}function $M(a){return SL(a)?new S(null,2,5,T,[a.Nd(null),a.Md(null)-1|0],null):null}function aN(a){return SL(a)?new S(null,2,5,T,[a.Nd(null),a.Md(null)],null):null}var bN={},cN={},dN=!1;
    function eN(a,b,c,d,e){var f=dN;dN=!0;try{a:for(var g=$M(c),l=H(g,0,null),m=H(g,1,null),q=zL(b),t=hd(G);;){var v=fN?fN(c,!1,bN,q,d,e):gN.call(null,c,!1,bN,q,d,e);if(v===cN){var y=jd(t);break a}if(v===bN){y=eM(c,a,l,m,D(t));break a}t=dg.h(t,v);}return y}finally{dN=f;}}
    function hN(a,b,c,d){var e=$M(a);b=H(e,0,null);e=H(e,1,null);var f=eN(jy,")",a,c,d);d=aN(a);c=H(d,0,null);d=H(d,1,null);f=Re(f)?Ud:lg(P,f);if(n(b)){var g=Cj.l;a=PL(a);a=g.call(Cj,F([n(a)?new k(null,1,[OD,a],null):null,new k(null,4,[pw,b,Es,e,WG,c,Do,d],null)]));}else a=null;return Me(f,a)}
    function iN(a,b,c,d){var e=$M(a);b=H(e,0,null);e=H(e,1,null);c=eN(tA,"]",a,c,d);var f=aN(a);d=H(f,0,null);f=H(f,1,null);if(n(b)){var g=Cj.l;a=PL(a);a=g.call(Cj,F([n(a)?new k(null,1,[OD,a],null):null,new k(null,4,[pw,b,Es,e,WG,d,Do,f],null)]));}else a=null;return Me(c,a)}
    function jN(a,b,c,d){var e=$M(a);b=H(e,0,null);e=H(e,1,null);var f=eN(NC,"}",a,c,d),g=D(f),l=Yj(2,f),m=Lj(l);d=aN(a);c=H(d,0,null);d=H(d,1,null);!Mg(g)&&fM(a,b,e,f);x.h(D(m),D(l))||DM(a,NC,l);f=g<=2*wi?yi(mf(f)):cj(mf(f));n(b)?(g=Cj.l,a=PL(a),a=g.call(Cj,F([n(a)?new k(null,1,[OD,a],null):null,new k(null,4,[pw,b,Es,e,WG,c,Do,d],null)]))):a=null;return Me(f,a)}
    function kN(a,b){for(var c=function(){var g=new pb;g.append(b);return g}(),d=a.Fa(null);;){if(n(function(){var g=DL(d);if(g)return g;g=YM.g?YM.g(d):YM.call(null,d);return n(g)?g:null==d}())){var e=p.g(c);a.Ld(null,d);var f=KM(e);return n(f)?f:bM(a,F(["Invalid number: ",e,"."]))}e=function(){var g=c;g.append(d);return g}();f=a.Fa(null);c=e;d=f;}}
    function lN(a){var b=a.Fa(null);switch(b){case "t":return "\t";case "r":return "\r";case "n":return "\n";case "\\":return "\\";case '"':return '"';case "b":return "\b";case "f":return "\f";case "u":return b=a.Fa(null),-1===parseInt(b|0,16)?hM(a,b):XM(a,b,16,4,!0);default:return EL(b)?(b=XM(a,b,8,3,!1),255<(b|0)?sM(a):b):uM(a,b)}}
    function mN(a){for(var b=new pb,c=a.Fa(null);;){if(null==c)return mM(a,OB,F(['"',b]));switch(c){case "\\":var d=function(){var f=b;f.append(lN(a));return f}(),e=a.Fa(null);b=d;c=e;continue;case '"':return p.g(b);default:d=function(){var f=b;f.append(c);return f}(),e=a.Fa(null),b=d,c=e;}}}
    function nN(a,b){var c=$M(a),d=H(c,0,null);c=H(c,1,null);b=QM(a,Mq,b);if(null==b)return null;switch(b){case "nil":return null;case "true":return !0;case "false":return !1;case "/":return Pt;default:var e=LM(b);if(null!=e){b=Nd.h(e.V(null,0),e.V(null,1));e=b.U;if(null==d)d=null;else {var f=PL(a);f=null==f?null:new k(null,1,[OD,f],null);var g=aN(a);a=H(g,0,null);g=H(g,1,null);d=Cj.l(F([f,new k(null,4,[pw,d,Es,c,WG,a,Do,g],null)]));}d=e.call(b,null,d);}else d=iM(a,Mq,b);return d}}
    function oN(a){var b=a.Fa(null);if(DL(b))return vM(a);b=QM(a,ot,b);var c=LM(b);if(null!=c){var d=c.V(null,0);c=c.V(null,1);if(":"===b.charAt(0)){if(null!=d)return d=u.h(null,Nd.g(d.substring(1))),n(d)?Qf.h(p.g(d),c):iM(a,ot,[":",p.g(b)].join(""));d=null;return n(d)?Qf.h(p.g(d),c.substring(1)):bM(a,F(["Invalid token: :",b]))}return Qf.h(d,c)}return iM(a,ot,[":",p.g(b)].join(""))}
    function pN(a){return function(b,c,d,e){return new Ee(null,a,new Ee(null,qN?qN(b,!0,null,d,e):gN.call(null,b,!0,null,d,e),null,1,null),2,null)}}function rN(a,b,c,d){var e=$M(a);b=H(e,0,null);e=H(e,1,null);var f=FL(qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d));We(f)||wM(a,f);c=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d);return null!=c&&(c.C&131072||tb===c.Dd)?(a=n(n(b)?df(c):b)?He.l(f,pw,b,F([Es,e])):f,null!=c&&(c.C&262144||tb===c.Te)?Me(c,Cj.l(F([Ne(c),a]))):c.N=a):xM(a,c)}
    function sN(a,b,c,d){var e=$M(a);b=H(e,0,null);e=H(e,1,null);e=n(e)?e-1|0:null;var f=eN(Ct,"}",a,c,d);c=Lj(f);var g=aN(a);d=H(g,0,null);g=H(g,1,null);x.h(D(f),D(c))||bM(a,F([DM(a,Ct,f)]));n(b)?(f=Cj.l,a=PL(a),a=f.call(Cj,F([n(a)?new k(null,1,[OD,a],null):null,new k(null,4,[pw,b,Es,e,WG,d,Do,g],null)]))):a=null;return Me(c,a)}function tN(a,b,c,d){qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d);return a}
    function uN(a,b,c,d){b=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d);return x.h(no,b)?Number.NaN:x.h(wD,b)?Number.NEGATIVE_INFINITY:x.h(Om,b)?Number.POSITIVE_INFINITY:bM(a,F([["Invalid token: ##",p.g(b)].join("")]))}var vN=new Hj(null,new k(null,2,[yt,null,Zv,null],null),null);function wN(a,b,c){a===bN&&(a=0>c,EM(b,a?c:a));}function xN(a,b,c,d){var e=yN;yN=!0;try{var f=fN?fN(b,!1,bN,")",c,d):gN.call(null,b,!1,bN,")",c,d);wN(f,b,a);return f===cN?cN:null}finally{yN=e;}}var zN={};
    function AN(a,b,c,d){var e=SL(a)?NL(a):-1;a:for(var f=zN,g=null;;)if(f===zN){f=e;g=a;var l=c,m=d,q=fN?fN(g,!1,bN,")",l,m):gN.call(null,g,!1,bN,")",l,m);wN(q,g,f);if(x.h(q,cN))f=cN;else {var t=g,v=q;n(u.h(vN,v))&&bM(t,F(["Feature name ",v," is reserved"]));t=g;v=l;(q instanceof w?x.h(Tk,q)||M(u.h(v,ez),q):bM(t,F(["Feature should be a keyword: ",q])))?(l=fN?fN(g,!1,bN,")",l,m):gN.call(null,g,!1,bN,")",l,m),wN(l,g,f),l===cN&&(0>f?bM(g,F(["read-cond requires an even number of forms"])):bM(g,F(["read-cond starting on line ",
    f," requires an even number of forms"]))),f=l):(f=xN(f,g,l,m),f=n(f)?f:zN);}if(f===cN){c=cN;break a}g=null;}else if(g!==cN)g=xN(e,a,c,d);else {c=f;break a}return c===cN?a:n(b)?null!=c&&(c.C&16777216||tb===c.Qe)?(b=mf(c),oa(Oa,d,0,0).apply(null,b),a):bM(a,F(["Spliced form list in read-cond-splicing must implement ISequential"])):c}
    function BN(a,b,c,d){if(Lb(function(){if(n(c)){var g=Bs.g(c),l=new Hj(null,new k(null,2,[VA,null,Hu,null],null),null);return l.g?l.g(g):l.call(null,g)}return c}()))throw ol("Conditional read not allowed",new k(null,1,[Yv,po],null));var e=a.Fa(null);if(n(e))if(e=(b=x.h(e,"@"))?a.Fa(null):e,b&&(n(dN)||bM(a,F(["cond-splice not in list"]))),e=DL(e)?FM(a):e,n(e)){if(sg.h(e,"("))throw ol("read-cond body must be a list",new k(null,1,[Yv,po],null));var f=yN;yN=function(){var g=yN;return n(g)?g:x.h(VA,Bs.g(c))}();
    try{return n(yN)?BL(hN(a,e,c,d),b):AN(a,b,c,d)}finally{yN=f;}}else return tM(a);else return tM(a)}var CN=null;function DN(a){return Nd.g([-1===a?"rest":["p",p.g(a)].join(""),"__",p.g(Yg.h(GL,ce)),"#"].join(""))}
    function EN(a,b,c,d){if(n(CN))throw ol("Nested #()s are not allowed",new k(null,1,[Yv,Aq],null));b=CN;CN=yj();try{ML(a,"(");var e=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d);var f=$c(CN);if(f){var g=Ac(A(f));a:{a=1;for(var l=hd(G);;){if(a>g){var m=jd(l);break a}c=a+1;d=dg;var q=d.h;f=l;var t=u.h(CN,a);var v=n(t)?t:DN(a);var y=q.call(d,f,v);a=c;l=y;}}var E=n(CN.call(null,-1))?De.l(m,Xk,F([CN.call(null,-1)])):m;}else E=G;return new Ee(null,Fl,new Ee(null,E,new Ee(null,e,null,1,null),2,null),3,null)}finally{CN=
    b;}}function FN(a){if(n(CN)){var b=CN.call(null,a);if(n(b))return b;b=DN(a);CN=He.j(CN,a,b);return b}throw ol("Arg literal not in #()",new k(null,1,[Yv,Aq],null));}function GN(a,b,c,d){if(null==CN)return nN(a,b);b=a.Fc(null);if(DL(b)||OM(b)||null==b)return FN(1);if(x.h(b,"\x26"))return a.Fa(null),FN(-1);a=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d);if(ff(a))return FN(a);throw ol("Arg literal must be %, %\x26 or %integer",new k(null,1,[Yv,Aq],null));}var HN=null;
    function IN(a,b,c,d){b=a.Fc(null);n(b)?x.h("@",b)?(b=pN(cF),a.Fa(null),a=b(a,"@",c,d)):a=pN(oD)(a,"~",c,d):a=null;return a}function JN(a){a=z(a);for(var b=hd(G);;)if(a){var c=A(a);a=C(a);b=dg.h(dg.h(b,Ac(c)),Bc(c));}else return z(jd(b))}function KN(a){if(Lb(HN))throw ol("Gensym literal not in syntax-quote",new k(null,1,[Yv,Aq],null));var b=u.h(HN,a);if(n(b))return b;b=Nd.g([Gf(Rf(a),0,Rf(a).length-1),"__",p.g(Yg.h(GL,ce)),"__auto__"].join(""));HN=He.j(HN,a,b);return b}
    function LN(a,b){return function(){var c=null!=a?a.C&262144||tb===a.Te?!0:!1:!1;return c?z(Je.l(Ne(a),pw,F([Es,WG,Do,OD,mt]))):c}()?new Ee(null,dy,new Ee(null,b,new Ee(null,function(){var c=Ne(a);return MN.g?MN.g(c):MN.call(null,c)}(),null,1,null),2,null),3,null):b}
    function NN(a,b){a:{b=z(b);for(var c=hd(G);;)if(b){var d=A(b);c=dg.h(c,df(d)&&x.h(A(d),oD)?new Ee(null,Xq,new Ee(null,Ae(d),null,1,null),2,null):df(d)&&x.h(A(d),cF)?Ae(d):new Ee(null,Xq,new Ee(null,MN.g?MN.g(d):MN.call(null,d),null,1,null),2,null));b=C(b);}else {b=z(jd(c));break a}}b=new Ee(null,Qp,new Ee(null,we(Jy,b),null,1,null),2,null);return n(a)?new Ee(null,cA,new Ee(null,a,new Ee(null,b,null,1,null),2,null),3,null):b}
    function ON(a){throw ol("resolve-symbol is not implemented",new k(null,1,[SA,a],null));}
    function MN(a){if(tl(a))var b=new Ee(null,Kl,new Ee(null,a,null,1,null),2,null);else if(a instanceof Md)b=new Ee(null,Kl,new Ee(null,n(function(){var c=Lb(Of(a));return c?Xa(Rf(a),"#"):c}())?KN(a):function(){var c=p.g(a);return n(Xa(c,"."))?(c=Nd.g(c.substring(0,c.length-1)),Nd.g([p.g(ON.call(null,c)),"."].join(""))):ON.call(null,a)}(),null,1,null),2,null);else if(df(a)&&x.h(A(a),oD))b=Ae(a);else {if(df(a)&&x.h(A(a),cF))throw ol("unquote-splice not in list",new k(null,1,[Yv,Aq],null));if(Se(a))if(null!=
    a&&(a.C&67108864||tb===a.Kg))b=a;else if(We(a))b=NN(16<=D(a)?VE:XD,JN(a));else if(Ye(a))b=new Ee(null,Eu,new Ee(null,NN(null,a),null,1,null),2,null);else if(Te(a))b=NN(zv,a);else if(df(a)||Hf(a))b=function(){var c=z(a);return c?NN(null,c):P(fy)}();else throw ol("Unknown Collection type",new k(null,1,[Yv,DF],null));else b=a instanceof w||"number"===typeof a||"string"===typeof a||null==a||a instanceof Boolean||!0===a||!1===a||a instanceof RegExp?a:new Ee(null,Kl,new Ee(null,a,null,1,null),2,null);}return LN(a,
    b)}function PN(a,b,c,d){b=HN;HN=R;try{return MN(qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d))}finally{HN=b;}}
    function QN(a,b,c,d){var e=$M(a);b=H(e,0,null);e=H(e,1,null);var f=QM(a,yG,KL(a)),g=x.h(f,":")?null.name:x.h(":",A(f))?function(){var m=null==f?null:f.substring(1);m=null==m?null:LM(m);m=null==m?null:IL(m);m=null==m?null:Nd.g(m);if(null==m)m=null;else {var q=u.h(null,m);if(n(q))m=q;else {null==Zl&&(Zl=Vg(R));q=u.h(r(Zl),m);if(null!=q)m=q;else {q=p.g(m);var t=p.g(q);for(var v=new pb,y=0;;)if(y<t.length){var E=t.charAt(y),J=Wa(Vb,E);null!=J?v.append(J):v.append(E);y+=1;}else break;t=v.toString();t=".."===
    t?"_DOT__DOT_":n(Vl(t))?[t,"$"].join(""):t;c:for(q=(q instanceof Md?Nd.g(t):t).split("."),t=aa;;){if(null==t){q=null;break c}if(null==q){q=t;break c}t=Wa(t,A(q));q=C(q);}null==q?m=null:(q=new Yl(m),Yg.D(Zl,He,m,q),m=q);}m=n(m)?Nd.g(m.name):null;}}return m}():function(){var m=null==f?null:LM(f);return null==m?null:IL(m)}();if(n(g)){if("{"===FM(a)){d=eN(yG,"}",a,c,d);var l=aN(a);c=H(l,0,null);l=H(l,1,null);!Mg(D(d))&&fM(a,null,null,d);g=HL(p.g(g),Yj(2,d));d=Yj(2,Td(d));x.h(D(Lj(g)),D(g))||DM(a,yG,g);return Me(Oj(g,
    d),n(b)?Cj.l(F([function(){var m=PL(a);return n(m)?new k(null,1,[OD,m],null):null}(),new k(null,4,[pw,b,Es,e,WG,c,Do,l],null)])):null)}return yM(a,f)}return zM(a,f)}
    function YM(a){switch(a){case '"':return mN;case ":":return oN;case ";":return MM;case "'":return pN(Kl);case "@":return pN(xB);case "^":return rN;case "`":return PN;case "~":return IN;case "(":return hN;case ")":return UM;case "[":return iN;case "]":return UM;case "{":return jN;case "}":return UM;case "\\":return ZM;case "%":return GN;case "#":return RM;default:return null}}
    function SM(a){switch(a){case "^":return rN;case "'":return pN(Jl);case "(":return EN;case "{":return sN;case "\x3c":return NM("Unreadable form");case "\x3d":return NM("read-eval not supported");case '"':return VM;case "!":return MM;case "_":return tN;case "?":return BN;case ":":return QN;case "#":return uN;default:return null}}
    function TM(a,b,c,d){b=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d);b instanceof Md||AM(a,b);if(n(yN))return a=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d),new Sl(b,a);var e=R.call(null,b);e=n(e)?e:R.g?R.g(b):R.call(null,b);return n(e)?(b=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d),e.g?e.g(b):e.call(null,b)):n(RN)?(e=RN,a=qN?qN(a,!0,null,c,d):gN.call(null,a,!0,null,c,d),e.h?e.h(b,a):e.call(null,b,a)):BM(a,b)}var RN=null,yN=!1;
    function gN(a){switch(arguments.length){case 5:return qN(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);case 6:return fN(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function qN(a,b,c,d,e){return fN(a,b,c,null,d,e)}
    function fN(a,b,c,d,e,f){try{a:for(;;)if(0==f.length){var g=a.Fa(null);if(!DL(g)){if(null==g){var l=b?EM(a,null):c;break a}if(g===d){l=cN;break a}if(EL(g)||("+"===g||"-"===g)&&EL(a.Fc(null))){l=kN(a,g);break a}var m=YM(g);if(null!=m){var q=m.D?m.D(a,g,e,f):m.call(null,a,g,e,f);if(q!==a){l=q;break a}}else {l=nN(a,g);break a}}}else {var t=f[0];Array.prototype.splice.call(f,0,1);l=t;break a}return l}catch(v){if(v instanceof Error){b=v;if(b instanceof nl){c=rl(b);if(x.h(gm,Yv.g(c)))throw b;throw pl(b.message,
    Cj.l(F([new k(null,1,[Yv,gm],null),c,SL(a)?new k(null,3,[pw,a.Nd(null),Es,a.Md(null),OD,a.Ye(null)],null):null])),b);}throw pl(b.message,Cj.l(F([new k(null,1,[Yv,gm],null),SL(a)?new k(null,3,[pw,a.Nd(null),Es,a.Md(null),OD,a.Ye(null)],null):null])),b);}throw v;}}var SN=Tk;function TN(a,b){var c=SN;if(x.h(!0,c))return RJ(a);if(x.h(!1,c))return QJ(a);if(x.h(Tk,c))return n(b)?RJ(a):QJ(a);throw Error(["No matching clause: ",p.g(c)].join(""));}
    var UN=fk(/'[^'\\]*(?:\\.[^'\\]*)*'/),VN=fk(/#'[^'\\]*(?:\\.[^'\\]*)*'/),WN=fk(/"[^"\\]*(?:\\.[^"\\]*)*"/),XN=fk(/#"[^"\\]*(?:\\.[^"\\]*)*"/),YN=/(?:(?!(?:\(\*|\*\)))[\s\S])*/,ZN=fk("[,\\s]*"),$N=XJ(UJ(tB)),aO=HJ(Kx,dj([Hm,mz,KA,Rx,Rm,rG,RF,at,Jx,gG,oF,OB,Yn,wt,Nn,Uu,cB,DG,QA,tu,vr,tB,yn,NA],[PJ.l(F([XJ(QJ("!")),$N,UJ(DG)])),KJ(PJ.l(F([$N,NJ.l(F([UJ(DG),UJ(rG),UJ(Hm)])),$N]))),PJ.l(F([UJ(mz),KJ(PJ.l(F([$N,XJ(QJ("/")),$N,UJ(mz)])))])),NJ.l(F([QJ(":"),QJ(":\x3d"),QJ("::\x3d"),QJ("\x3d")])),PJ.l(F([UJ(mz),
    LJ(PJ.l(F([$N,XJ(QJ("|")),$N,UJ(mz)])))])),PJ.l(F([XJ(QJ("\x26")),$N,UJ(DG)])),PJ.l(F([NJ.l(F([UJ(at),UJ(Jx)])),$N,XJ(UJ(Rx)),$N,UJ(Uu),XJ(NJ.l(F([UJ(tB),PJ.l(F([UJ(tB),NJ.l(F([QJ(";"),QJ(".")])),UJ(tB)]))])))])),PJ.l(F([WJ(UJ(vr)),TJ(fk("[^, \\r\\t\\n\x3c\x3e(){}\\[\\]+*?:\x3d|'\"#\x26!;./]+"))])),PJ.l(F([XJ(QJ("\x3c")),$N,UJ(at),$N,XJ(QJ("\x3e"))])),PJ.l(F([TJ(YN),LJ(PJ.l(F([UJ(QA),TJ(YN)])))])),NJ.l(F([PJ.l(F([XJ(QJ("{")),$N,UJ(Uu),$N,XJ(QJ("}"))])),PJ.l(F([UJ(DG),$N,XJ(QJ("*"))]))])),NJ.l(F([TJ(UN),
    TJ(WN)])),CJ(PJ.l(F([$N,KJ(UJ(RF))]))),PJ.l(F([XJ(QJ("\x3c")),$N,UJ(Uu),$N,XJ(QJ("\x3e"))])),PJ.l(F([XJ(QJ("(")),$N,UJ(Uu),$N,XJ(QJ(")"))])),CJ(NJ.l(F([UJ(Rm),UJ(KA)]))),NJ.l(F([TJ(VN),TJ(XN)])),CJ(NJ.l(F([UJ(at),UJ(OB),UJ(cB),UJ(NA),UJ(oF),UJ(tu),UJ(Nn),UJ(wt),UJ(vr)]))),PJ.l(F([QJ("(*"),UJ(gG),QJ("*)")])),PJ.l(F([UJ(DG),$N,XJ(QJ("+"))])),NJ.l(F([QJ("Epsilon"),QJ("epsilon"),QJ("EPSILON"),QJ("eps"),QJ("ε")])),PJ.l(F([TJ(ZN),LJ(PJ.l(F([UJ(QA),TJ(ZN)])))])),CJ(NJ.l(F([UJ(Yn),UJ(Uu)]))),NJ.l(F([PJ.l(F([XJ(QJ("[")),
    $N,UJ(Uu),$N,XJ(QJ("]"))])),PJ.l(F([UJ(DG),$N,XJ(QJ("?"))]))]))]));function bO(a){for(var b=z(a),c=G;;){var d=A(b);if(n(d))switch(d){case "\\":var e=Ae(b);if(n(e)){x.h(e,"'")?(b=eh(2,b),c=De.h(c,e)):(b=eh(2,b),c=De.l(c,d,F([e])));continue}else return yJ(F(["Encountered backslash character at end of string: ",a]));case '"':b=C(b);c=De.l(c,"\\",F(['"']));continue;default:b=C(b),c=De.h(c,d);}else return lg(p,c)}}
    var CH=r(new Od(function(){return mN},ys,dj([kF,dt,ip,OD,Do,Es,pw,WG,zo,WC,ID],[!0,JE,eG,"cljs/tools/reader.cljs",20,1,305,305,P(new S(null,4,5,T,[Me(bq,new k(null,1,[Iz,Rn],null)),cu,Ym,ks],null)),null,n(mN)?mN.od:null])));function dO(a){a=Gf(a,1,D(a)-1);a=bO(a);a=[p.g(a),'"'].join("");a=TL(a);return CH.D?CH.D(a,null,null,null):CH.call(null,a,null,null,null)}function eO(a){a=Gf(a,2,D(a)-1);a=bO(a);return fk(a)}
    var fO=function fO(a){for(;;){var c=A.g?A.g(a):A.call(null,a);c=c instanceof w?c.X:null;switch(c){case "rule":c=C.g?C.g(a):C.call(null,a);var d=H(c,0,null);c=H(c,1,null);return x.h(A.g?A.g(d):A.call(null,d),Jx)?new S(null,2,5,T,[Qf.g(function(){var e=Be.g?Be.g(d):Be.call(null,d);return Be.g?Be.g(e):Be.call(null,e)}()),CJ(fO.g?fO.g(c):fO.call(null,c))],null):new S(null,2,5,T,[Qf.g(Be.g?Be.g(d):Be.call(null,d)),fO.g?fO.g(c):fO.call(null,c)],null);case "nt":return UJ(Qf.g(Be.g?Be.g(a):Be.call(null,a)));
    case "alt":return lg(NJ,ch.h(fO,C.g?C.g(a):C.call(null,a)));case "ord":return lg(OJ,ch.h(fO,C.g?C.g(a):C.call(null,a)));case "paren":a=Be.g?Be.g(a):Be.call(null,a);continue;case "hide":return XJ(function(){var e=Be.g?Be.g(a):Be.call(null,a);return fO.g?fO.g(e):fO.call(null,e)}());case "cat":return lg(PJ,ch.h(fO,C.g?C.g(a):C.call(null,a)));case "string":return TN(dO(Be.g?Be.g(a):Be.call(null,a)),!1);case "regexp":return TJ(eO(Be.g?Be.g(a):Be.call(null,a)));case "opt":return JJ(function(){var e=Be.g?
    Be.g(a):Be.call(null,a);return fO.g?fO.g(e):fO.call(null,e)}());case "star":return LJ(function(){var e=Be.g?Be.g(a):Be.call(null,a);return fO.g?fO.g(e):fO.call(null,e)}());case "plus":return KJ(function(){var e=Be.g?Be.g(a):Be.call(null,a);return fO.g?fO.g(e):fO.call(null,e)}());case "look":return VJ(function(){var e=Be.g?Be.g(a):Be.call(null,a);return fO.g?fO.g(e):fO.call(null,e)}());case "neg":return WJ(function(){var e=Be.g?Be.g(a):Be.call(null,a);return fO.g?fO.g(e):fO.call(null,e)}());case "epsilon":return IJ;
    default:throw Error(["No matching clause: ",p.g(c)].join(""));}}},gO=function gO(a){for(;;){var c=Iz.g(a);c=c instanceof w?c.X:null;switch(c){case "nt":return new S(null,1,5,T,[ot.g(a)],null);case "string":case "string-ci":case "char":case "regexp":case "epsilon":return G;case "opt":case "plus":case "star":case "look":case "neg":case "rep":a=Rq.g(a);continue;case "alt":case "cat":return lh(gO,F([Ys.g(a)]));case "ord":return lh(gO,F([new S(null,2,5,T,[cs.g(a),ds.g(a)],null)]));default:throw Error(["No matching clause: ",
    p.g(c)].join(""));}}};function hO(a){for(var b=Lj(ti(a)),c=z(Mj(lh(gO,F([ui(a)])))),d=null,e=0,f=0;;)if(f<e){var g=d.V(null,f);n(b.g?b.g(g):b.call(null,g))||yJ(F([Ff(p.g(g),1)," occurs on the right-hand side of your grammar, but not on the left"]));f+=1;}else if(c=z(c))d=c,Ze(d)?(c=pd(d),f=qd(d),d=c,e=D(c),c=f):(c=A(d),n(b.g?b.g(c):b.call(null,c))||yJ(F([Ff(p.g(c),1)," occurs on the right-hand side of your grammar, but not on the left"])),c=C(d),d=null,e=0),f=0;else break;return a}
    function iO(a,b){var c=rL(aO,Yn,a,!1);if(c instanceof KK)return yJ(F(["Error parsing grammar specification:\n",function(){var e=new pb,f=wb,g=vb;wb=!0;vb=function(l){return e.append(l)};try{yk(F([c]));}finally{vb=g,wb=f;}return p.g(e)}()]));a=ch.h(fO,c);var d=A(A(a));return new k(null,3,[ur,hO(HJ(b,qh.h(R,a))),Mp,d,Dv,b],null)}
    function jO(a,b,c){return null==c?zJ(F(["When you build a parser from a map of parser combinators, you must provide a start production using the :start keyword argument."])):new k(null,3,[ur,hO(HJ(b,a)),Mp,c,Dv,b],null)}function kO(a,b){const c=Array.prototype.slice.call(arguments),d=c.shift();if("undefined"==typeof d)throw Error("[goog.string.format] Template required");return d.replace(/%([0\- \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g,function(e,f,g,l,m,q,t,v){if("%"==q)return "%";const y=c.shift();if("undefined"==typeof y)throw Error("[goog.string.format] Not enough arguments");arguments[0]=y;return kO.Hc[q].apply(null,arguments)})}kO.Hc={};
    kO.Hc.s=function(a,b,c){return isNaN(c)||""==c||a.length>=Number(c)?a:a=-1<b.indexOf("-",0)?a+fb(" ",Number(c)-a.length):fb(" ",Number(c)-a.length)+a};
    kO.Hc.f=function(a,b,c,d,e){d=a.toString();isNaN(e)||""==e||(d=parseFloat(a).toFixed(e));let f;f=0>Number(a)?"-":0<=b.indexOf("+")?"+":0<=b.indexOf(" ")?" ":"";0<=Number(a)&&(d=f+d);if(isNaN(c)||d.length>=Number(c))return d;d=isNaN(e)?Math.abs(Number(a)).toString():Math.abs(Number(a)).toFixed(e);a=Number(c)-d.length-f.length;0<=b.indexOf("-",0)?d=f+d+fb(" ",a):(b=0<=b.indexOf("0",0)?"0":" ",d=f+fb(b,a)+d);return d};kO.Hc.d=function(a,b,c,d,e,f,g,l){return kO.Hc.f(parseInt(a,10),b,c,d,0,f,g,l)};
    kO.Hc.i=kO.Hc.d;kO.Hc.u=kO.Hc.d;var lO=dj([lA,Vu,It,Fy,Tw,Xz,Gz,CC,YB,sq,Qx,ex,Ro,iq,Nq,cy],[QJ("\r\n"),QJ("\t"),NJ.l(F([NJ.l(F([QJ(" "),QJ("\t")])),LJ(PJ.l(F([QJ("\r\n"),NJ.l(F([QJ(" "),QJ("\t")]))])))])),QJ("\n"),TJ("[\\u0021-\\u007E]"),TJ("[0-9]"),QJ(" "),TJ("[0-9a-fA-F]"),TJ("[\\u0000-\\u001F|\\u007F]"),QJ('"'),NJ.l(F([QJ(" "),QJ("\t")])),QJ("\r"),TJ("[\\u0000-\\u00FF]"),TJ("[a-zA-Z]"),TJ("[\\u0001-\\u007F]"),TJ("[01]")]),mO=dj([Hm,Rs,Tu,ou,mv,$r,rG,bm,RF,ts,Xz,$z,Vq,Un,wt,nx,CC,HC,jF,Mz,DA,Cx,rA,Or,cB,RB,vE,Ws,tB,ns,vu,YC,
    yn],[new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"!"],null),new Ee(null,new k(null,2,[Iz,at,ot,tB],null),null,1,null),2,null),wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,mv],null),null,1,null),2,null),ao,new k(null,2,[jw,Kx,sB,Hm],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"("],null),new Ee(null,new k(null,2,[Iz,at,ot,tB],null),null,1,null),2,null),wt,!0],null),new Ee(null,new k(null,
    2,[Iz,at,ot,Or],null),new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,tB],null),new Ee(null,new k(null,2,[Iz,OB,OB,")"],null),null,1,null),2,null),wt,!0],null),null,1,null),2,null),3,null),ao,new k(null,1,[jw,No],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"\x3c"],null),new Ee(null,new k(null,2,[Iz,at,ot,tB],null),null,1,null),2,null),wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,vE],null),new Ee(null,new k(null,
    3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,tB],null),new Ee(null,new k(null,2,[Iz,OB,OB,"\x3e"],null),null,1,null),2,null),wt,!0],null),null,1,null),2,null),3,null),ao,new k(null,1,[jw,No],null)],null),Cj.l(F([TJ("\\s+(?:;.*?\\u000D?\\u000A\\s*)*"),new k(null,1,[ao,new k(null,2,[jw,Kx,sB,ou],null)],null)])),new k(null,3,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,at,ot,ts],null),new Ee(null,new k(null,2,[Iz,at,ot,Rs],null),new Ee(null,new k(null,2,[Iz,at,ot,wt],null),new Ee(null,new k(null,2,[Iz,at,
    ot,HC],null),new Ee(null,new k(null,2,[Iz,at,ot,Vq],null),new Ee(null,new k(null,2,[Iz,at,ot,Un],null),new Ee(null,new k(null,2,[Iz,at,ot,rG],null),new Ee(null,new k(null,2,[Iz,at,ot,Hm],null),new Ee(null,new k(null,2,[Iz,at,ot,cB],null),null,1,null),2,null),3,null),4,null),5,null),6,null),7,null),8,null),9,null),ao,new k(null,1,[jw,No],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,Tu],null),new Ee(null,new k(null,3,[Iz,at,ot,nx,wt,!0],null),new Ee(null,new k(null,2,[Iz,at,
    ot,Or],null),new Ee(null,new k(null,3,[Iz,at,ot,tB,wt,!0],null),null,1,null),2,null),3,null),4,null),ao,new k(null,2,[jw,Kx,sB,$r],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"\x26"],null),new Ee(null,new k(null,2,[Iz,at,ot,tB],null),null,1,null),2,null),wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,mv],null),null,1,null),2,null),ao,new k(null,2,[jw,Kx,sB,rG],null)],null),new k(null,3,[Iz,tu,Rq,new k(null,2,[Iz,Rm,Ys,new Ee(null,new k(null,
    2,[Iz,OB,OB,"0"],null),new Ee(null,new k(null,2,[Iz,OB,OB,"1"],null),null,1,null),2,null)],null),ao,new k(null,2,[jw,Kx,sB,bm],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,vE],null),new Ee(null,new k(null,3,[Iz,at,ot,nx,wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,Or],null),new Ee(null,new k(null,3,[Iz,at,ot,tB,wt,!0],null),null,1,null),2,null),3,null),4,null),ao,new k(null,2,[jw,Kx,sB,RF],null)],null),new k(null,3,[Iz,at,ot,Mz,ao,new k(null,2,[jw,Kx,sB,ts],null)],null),
    Cj.l(F([TJ("[0-9]"),new k(null,1,[ao,new k(null,1,[jw,No],null)],null)])),new k(null,3,[Iz,tu,Rq,new k(null,2,[Iz,at,ot,Xz],null),ao,new k(null,2,[jw,Kx,sB,$z],null)],null),new k(null,3,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,'"',wt,!0],null),new Ee(null,new k(null,2,[Iz,oF,Rq,Cj.l(F([TJ("[\\u0020-\\u0021\\u0023-\\u007E]"),R]))],null),new Ee(null,new k(null,3,[Iz,OB,OB,'"',wt,!0],null),null,1,null),2,null),3,null)],null),new Ee(null,new k(null,2,[Iz,mz,Ys,new Ee(null,
    new k(null,3,[Iz,OB,OB,"'",wt,!0],null),new Ee(null,new k(null,2,[Iz,oF,Rq,Cj.l(F([TJ("[\\u0020-\\u0026(-~]"),R]))],null),new Ee(null,new k(null,3,[Iz,OB,OB,"'",wt,!0],null),null,1,null),2,null),3,null)],null),null,1,null),2,null),ao,new k(null,2,[jw,Kx,sB,Vq],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,"%",wt,!0],null),new Ee(null,new k(null,2,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,at,ot,DA],null),new Ee(null,new k(null,2,[Iz,at,ot,Cx],null),new Ee(null,new k(null,2,[Iz,
    at,ot,vu],null),null,1,null),2,null),3,null)],null),null,1,null),2,null),ao,new k(null,1,[jw,No],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"\x3c"],null),new Ee(null,new k(null,2,[Iz,at,ot,tB],null),null,1,null),2,null),wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,Or],null),new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,tB],null),new Ee(null,new k(null,2,[Iz,OB,OB,"\x3e"],null),null,1,null),2,null),wt,!0],null),
    null,1,null),2,null),3,null),ao,new k(null,2,[jw,Kx,sB,wt],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,at,ot,tB,wt,!0],null),new Ee(null,new k(null,2,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"\x3d"],null),new Ee(null,new k(null,2,[Iz,OB,OB,"\x3d/"],null),null,1,null),2,null)],null),new Ee(null,new k(null,3,[Iz,at,ot,tB,wt,!0],null),null,1,null),2,null),3,null),ao,new k(null,2,[jw,Kx,sB,nx],null)],null),Cj.l(F([TJ("[0-9a-fA-F]"),new k(null,1,[ao,new k(null,1,[jw,No],null)],
    null)])),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"["],null),new Ee(null,new k(null,2,[Iz,at,ot,tB],null),null,1,null),2,null),wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,Or],null),new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,tB],null),new Ee(null,new k(null,2,[Iz,OB,OB,"]"],null),null,1,null),2,null),wt,!0],null),null,1,null),2,null),3,null),ao,new k(null,2,[jw,Kx,sB,HC],null)],null),new k(null,3,[Iz,tu,Rq,new k(null,
    2,[Iz,at,ot,CC],null),ao,new k(null,2,[jw,Kx,sB,jF],null)],null),Cj.l(F([TJ("[a-zA-Z][-a-zA-Z0-9]*"),new k(null,1,[ao,new k(null,1,[jw,No],null)],null)])),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,"b",wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,bm],null),new Ee(null,new k(null,2,[Iz,NA,Rq,new k(null,2,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,tu,Rq,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,".",wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,bm],null),null,1,null),
    2,null)],null)],null),new Ee(null,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"-"],null),new Ee(null,new k(null,2,[Iz,at,ot,bm],null),null,1,null),2,null)],null),null,1,null),2,null)],null)],null),null,1,null),2,null),3,null),ao,new k(null,2,[jw,Kx,sB,DA],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,"d",wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,YC],null),new Ee(null,new k(null,2,[Iz,NA,Rq,new k(null,2,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,tu,Rq,new k(null,
    2,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,".",wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,YC],null),null,1,null),2,null)],null)],null),new Ee(null,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,OB,OB,"-"],null),new Ee(null,new k(null,2,[Iz,at,ot,YC],null),null,1,null),2,null)],null),null,1,null),2,null)],null)],null),null,1,null),2,null),3,null),ao,new k(null,2,[jw,Kx,sB,Cx],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,RB],null),new Ee(null,new k(null,2,[Iz,
    oF,Rq,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,at,ot,ou,wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,RB],null),null,1,null),2,null)],null)],null),null,1,null),2,null),ao,new k(null,2,[jw,Kx,sB,rA],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,rA],null),new Ee(null,new k(null,2,[Iz,oF,Rq,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,at,ot,tB],null),new Ee(null,new k(null,2,[Iz,OB,OB,"/"],null),new Ee(null,new k(null,2,
    [Iz,at,ot,tB],null),null,1,null),2,null),3,null),wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,rA],null),null,1,null),2,null)],null)],null),null,1,null),2,null),ao,new k(null,2,[jw,Kx,sB,Or],null)],null),new k(null,3,[Iz,Rm,Ys,new Ee(null,Cj.l(F([TJ("#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'"),R])),new Ee(null,Cj.l(F([TJ('#\\"[^\\"\\\\]*(?:\\\\.[^\\"\\\\]*)*\\"'),R])),null,1,null),2,null),ao,new k(null,2,[jw,Kx,sB,cB],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,NA,Rq,new k(null,2,[Iz,
    at,ot,ns],null)],null),new Ee(null,new k(null,3,[Iz,at,ot,tB,wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,mv],null),null,1,null),2,null),3,null),ao,new k(null,2,[jw,Kx,sB,RB],null)],null),new k(null,3,[Iz,at,ot,Mz,ao,new k(null,2,[jw,Kx,sB,vE],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,at,ot,tB,wt,!0],null),new Ee(null,new k(null,2,[Iz,tu,Rq,new k(null,2,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,at,ot,RF],null),new Ee(null,new k(null,2,[Iz,at,ot,$r],null),null,1,null),2,null)],
    null)],null),null,1,null),2,null),ao,new k(null,1,[jw,No],null)],null),Cj.l(F([TJ("\\s*(?:;.*?(?:\\u000D?\\u000A\\s*|$))*"),new k(null,1,[ao,new k(null,2,[jw,Kx,sB,tB],null)],null)])),new k(null,3,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,at,ot,$z],null),new Ee(null,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,2,[Iz,NA,Rq,new k(null,2,[Iz,at,ot,$z],null)],null),new Ee(null,new k(null,2,[Iz,OB,OB,"*"],null),new Ee(null,new k(null,2,[Iz,NA,Rq,new k(null,2,[Iz,at,ot,$z],null)],null),null,1,null),2,null),
    3,null)],null),null,1,null),2,null),ao,new k(null,2,[jw,Kx,sB,ns],null)],null),new k(null,3,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,"x",wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,jF],null),new Ee(null,new k(null,2,[Iz,NA,Rq,new k(null,2,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,tu,Rq,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,3,[Iz,OB,OB,".",wt,!0],null),new Ee(null,new k(null,2,[Iz,at,ot,jF],null),null,1,null),2,null)],null)],null),new Ee(null,new k(null,2,[Iz,mz,Ys,new Ee(null,new k(null,
    2,[Iz,OB,OB,"-"],null),new Ee(null,new k(null,2,[Iz,at,ot,jF],null),null,1,null),2,null)],null),null,1,null),2,null)],null)],null),null,1,null),2,null),3,null),ao,new k(null,2,[jw,Kx,sB,vu],null)],null),new k(null,3,[Iz,tu,Rq,new k(null,2,[Iz,at,ot,Xz],null),ao,new k(null,2,[jw,Kx,sB,YC],null)],null),new k(null,3,[Iz,Rm,Ys,new Ee(null,new k(null,2,[Iz,at,ot,Ws],null),new Ee(null,new k(null,2,[Iz,at,ot,Or],null),null,1,null),2,null),ao,new k(null,1,[jw,No],null)],null)]),nO=function nO(a){for(var c=
    [],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return nO.l(0<c.length?new Rd(c.slice(0),0,null):null)};
    nO.l=function(a){if(x.h("-",Ae(a))){var b=H(a,0,null);H(a,1,null);var c=H(a,2,null);return SJ(b,c)}return lg(PJ,function(){return function f(e){return new Sf(null,function(){for(;;){var g=z(e);if(g){if(Ze(g)){var l=pd(g),m=D(l),q=Wf(m);a:for(var t=0;;)if(t<m){var v=jc(l,t);q.add(SJ(v,v));t+=1;}else {l=!0;break a}return l?Yf($f(q),f(qd(g))):Yf($f(q),null)}q=A(g);return we(SJ(q,q),f(Td(g)))}return null}},null,null)}(a)}())};nO.I=0;nO.M=function(a){return this.l(z(a))};
    function oO(a,b){return qh.h(R,function(){return function e(d){return new Sf(null,function(){for(var f=d;;)if(f=z(f)){if(Ze(f)){var g=pd(f),l=D(g),m=Wf(l);a:for(var q=0;;)if(q<l){var t=jc(g,q);M(a,t)&&(t=new S(null,2,5,T,[t,a.g?a.g(t):a.call(null,t)],null),m.add(t));q+=1;}else {g=!0;break a}return g?Yf($f(m),e(qd(f))):Yf($f(m),null)}m=A(f);if(M(a,m))return we(new S(null,2,5,T,[m,a.g?a.g(m):a.call(null,m)],null),e(Td(f)));f=Td(f);}else return null},null,null)}(b)}())}
    function pO(a){return Cj.l(F([oO(lO,Mj(lh(gO,F([ui(a)])))),a]))}function qO(a,b){var c=x.h(ao.g(a),DJ),d=x.h(ao.g(b),DJ);return c&&d?CJ(NJ.l(F([Je.h(a,ao),Je.h(b,ao)]))):c?CJ(NJ.l(F([Je.h(a,ao),b]))):d?CJ(NJ.l(F([a,Je.h(b,ao)]))):NJ.l(F([a,b]))}
    var rO=parseInt,sO=dj([Hm,$r,rG,bm,RF,ts,$z,Vq,wt,HC,jF,DA,Cx,rA,Or,cB,RB,vE,ns,vu,YC],[WJ,function(a,b){return Ie([a,CJ(b)])},VJ,function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){c=lg(p,c);return rO.h?rO.h(c,2):rO.call(null,c,2)}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}(),rg,function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=
    Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){return n(!1)?UJ(Qf.g(lg(p,c).toUpperCase())):UJ(Qf.g(lg(p,c)))}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}(),function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){c=lg(p,c);return rO.g?rO.g(c):rO.call(null,c)}a.I=0;a.M=function(c){c=z(c);
    return b(c)};a.l=b;return a}(),function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){return TN(lg(p,c),!0)}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}(),XJ,JJ,function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){c=
    lg(p,c);return rO.h?rO.h(c,16):rO.call(null,c,16)}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}(),nO,nO,PJ,NJ,Pg.h(TJ,eO),function(){function a(c,d){return Re(c)?LJ(d):x.h(D(c),2)?MJ(sF.g(c),mu.g(c),d):x.h(sF.g(c),1)?KJ(d):x.h(mu.g(c),1)?JJ(d):MJ(function(){var e=sF.g(c);return n(e)?e:0}(),function(){var e=mu.g(c);return n(e)?e:Infinity}(),d)}var b=null;b=function(c,d){switch(arguments.length){case 1:return c;case 2:return a.call(this,c,d)}throw Error("Invalid arity: "+arguments.length);
    };b.g=function(c){return c};b.h=a;return b}(),function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){return n(!1)?Qf.g(lg(p,c).toUpperCase()):Qf.g(lg(p,c))}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}(),function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new Rd(e,0,null);}return b.call(this,
    d)}function b(c){var d=D(c);switch(d){case 1:return x.h(A(c),"*")?R:new k(null,2,[sF,A(c),mu,A(c)],null);case 2:return x.h(A(c),"*")?new k(null,1,[mu,Ae(c)],null):new k(null,1,[sF,A(c)],null);case 3:return new k(null,2,[sF,A(c),mu,qe(c,2)],null);default:throw Error(["No matching clause: ",p.g(d)].join(""));}}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}(),nO,function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+
    0],++d;d=new Rd(e,0,null);}return b.call(this,d)}function b(c){c=lg(p,c);return rO.g?rO.g(c):rO.call(null,c)}a.I=0;a.M=function(c){c=z(c);return b(c)};a.l=b;return a}()]);
    function tO(a,b){var c=rL(mO,Ws,a,!1);if(c instanceof KK)return yJ(F(["Error parsing grammar specification:\n",function(){var e=new pb,f=wb,g=vb;wb=!0;vb=function(l){return e.append(l)};try{yk(F([c]));}finally{vb=g,wb=f;}return p.g(e)}()]));var d=vL(sO,c);a=pO(mg(Dj,qO,d));d=A(A(A(d)));return new k(null,3,[ur,hO(HJ(b,a)),Mp,d,Dv,b],null)}function uO(a){var b=Ne(a);a=Qy.g(b);b=Jt.g(b);return n(n(a)?b:a)?new S(null,2,5,T,[a,b],null):null}function vO(a){return Ye(a)&&x.h(D(a),1)||We(a)&&M(a,Iz)&&Re(u.h(a,pn))||Re(a)}var wO=new KK(null,null,null,null,null),xO=function xO(a){switch(arguments.length){case 1:return xO.g(arguments[0]);case 2:return xO.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};xO.g=function(a){var b=uO(a);H(b,0,null);b=H(b,1,null);return n(b)?xf(b):D(a)};xO.h=function(a,b){var c=uO(a);H(c,0,null);c=H(c,1,null);return n(c)?xf(c):b+D(a)};xO.I=2;
    function yO(a,b,c,d,e){a=NK(a,c,d,-1,null);ZK(a,new S(null,2,5,T,[e,b],null),oL(a));return fL(a,null)}function zO(a,b,c,d,e,f){var g=D(c);for(f=z(f);;)if(f){var l=A(f),m=uO(l);H(m,0,null);m=H(m,1,null);m=n(m)?m:e+D(l);if(x.h(m,g))return new S(null,3,5,T,[l,m,null],null);var q=z(yO(a,b,c,d,m));if(q)return new S(null,3,5,T,[l,m,q],null);f=C(f);}else return null}
    function AO(a,b,c,d,e){var f=D(c),g=yO(a,b,c,d,e);e=xf(e);var l=zO(a,b,c,d,e,g);H(l,0,null);H(l,1,null);H(l,2,null);g=e;for(e=$I;;){var m=l,q=H(m,0,null);l=H(m,1,null);var t=H(m,2,null);if(null==m||x.h(g,l))return wO;if(null==t)return XK(UI(e,q),new k(null,3,[Rw,cC,Qy,0,Jt,f],null));g=xf(l);e=UI(e,q);l=zO(a,b,c,d,l,t);}}
    function BO(a,b,c,d,e){if(x.h(c,Kx))a:{c=D(e);var f=yO(a,b,e,e,0),g=xf(0),l=bJ(new S(null,1,5,T,[d],null));f=zO(a,b,e,e,g,f);H(f,0,null);H(f,1,null);H(f,2,null);d=g;g=l;for(l=f;;){var m=l,q=H(m,0,null);l=H(m,1,null);f=H(m,2,null);if(null==m||x.h(d,l)){a=wO;break a}if(null==f){a=XK(fJ(UI(g,q)),new k(null,3,[Rw,cC,Qy,0,Jt,c],null));break a}d=xf(l);g=UI(g,q);l=zO(a,b,e,e,l,f);}}else if(x.h(c,Gu))a:for(c=D(e),l=yO(a,b,e,e,0),g=xf(0),f=zO(a,b,e,e,g,l),H(f,0,null),H(f,1,null),H(f,2,null),l=$I;;){var t=f;
    m=H(t,0,null);f=H(t,1,null);q=H(t,2,null);if(null==t||x.h(g,f)){a=wO;break a}if(null==q){a=XK(new k(null,2,[Iz,d,pn,z(UI(l,m))],null),new k(null,3,[Rw,cC,Qy,0,Jt,c],null));break a}g=xf(f);l=UI(l,m);f=zO(a,b,e,e,f,q);}else a=null;return a}
    function CO(a,b,c,d,e,f){var g=D(f),l=yO(a,b,f,f,0),m=Re(l);b=m?m:wt.g(b);if(n(b))return wO;l=mg(Pj,xO,l);b=xO.g(l);a=AO(a,Rq.g(c),f,f,b);g=new k(null,3,[Rw,cC,Qy,0,Jt,g],null);if(a instanceof KK||x.h(Iz.g(c),oF)&&vO(a))return wO;switch(d instanceof w?d.X:null){case "enlive":return XK(new k(null,2,[Iz,e,pn,UI($I.Uc(null,l),a)],null),g);case "hiccup":return XK(fJ(UI(bJ(new S(null,1,5,T,[e],null)).Uc(null,l),a)),g);default:return XK(UI($I.Uc(null,l),a),g)}}
    function DO(a,b,c,d,e){var f=Ys.g(d),g=Ce(f),l;if(l=x.h(Iz.g(d),mz)){l=Iz.g(g);var m=new Hj(null,new k(null,2,[oF,null,tu,null],null),null);l=m.g?m.g(l):m.call(null,l);l=n(l)?Lb(wt.g(g))&&Lb(wt.g(Rq.g(g))):l;}if(Lb(l))return wO;f=lg(PJ,Nj(f));return x.h(ao.g(d),DJ)?CO(a,f,g,null,c,b):CO(a,f,g,e,c,b)}
    function EO(a,b,c){var d=ur.g(a);a=Dv.g(a);var e=u.h(d,c);return x.h(wt.g(e),!0)?wO:x.h(ao.g(e),DJ)?x.h(Iz.g(e),oF)?(c=Rq.g(e),AO(d,c,b,b,0)):x.h(Iz.g(e),tu)?(c=Rq.g(e),b=AO(d,c,b,b,0),vO(b)?wO:b):DO(d,b,c,e,a):x.h(Iz.g(e),oF)?BO(d,Rq.g(e),a,c,b):x.h(Iz.g(e),tu)?(b=BO(d,Rq.g(e),a,c,b),vO(b)?wO:b):DO(d,b,c,e,a)}function FO(a,b){if(x.h(null,b))return a;if(x.h(pn,b))return He.j(a,ur,ZJ(ur.g(a)));if(x.h(aD,b))return He.j(a,ur,$J(Dv.g(a),ur.g(a)));if(x.h(Pm,b))return He.j(a,ur,aK(Dv.g(a),ur.g(a)));throw Error(["No matching clause: ",p.g(b)].join(""));}var GO=function GO(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return GO.l(arguments[0],arguments[1],2<c.length?new Rd(c.slice(2),0,null):null)};
    GO.l=function(a,b,c){var d=qg(c);c=u.j(d,Wu,Mp.g(a));var e=u.j(d,Vt,!1),f=u.j(d,Rw,!1),g=u.h(d,Pv);u.j(d,Py,!1);a=FO(a,g);return n(SG.g(d))?(f=ur.g(a),a=Dv.g(a),d=FJ.g?FJ.g(a):FJ.call(null,a),a=rL(f,c,b,e),a instanceof KK?(g=Qm.g(a),f=NK(f,b,b,g,d),qL(f,UJ(c),e),e=fL(f,null),n(e)?b=A(e):(e=dL(d,VG,b,0,D(b)),b=dL(d,c,e,0,D(b))),b=Me(b,Cj.l(F([a,Ne(b)])))):b=a,b):n(n(f)?Lb(e):f)?(d=EO(a,b,c),n(HO.g?HO.g(d):HO.call(null,d))?rL(ur.g(a),c,b,e):d):rL(ur.g(a),c,b,e)};GO.I=2;
    GO.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};function IO(a,b,c,d,e,f){this.va=a;this.nc=b;this.tc=c;this.F=d;this.m=e;this.G=f;this.C=2230716171;this.O=139264;}h=IO.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "grammar":return this.va;case "start-production":return this.nc;case "output-format":return this.tc;default:return u.j(this.m,b,c)}};
    h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#instaparse.core.Parser{",", ","}",c,cg.h(new S(null,3,5,T,[new S(null,2,5,T,[ur,this.va],null),new S(null,2,5,T,[Mp,this.nc],null),new S(null,2,5,T,[Dv,this.tc],null)],null),this.m))};h.Aa=function(){return new ni(this,3,new S(null,3,5,T,[ur,Mp,Dv],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};
    h.ca=function(){return 3+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-360509877^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.va,b.va)&&x.h(this.nc,b.nc)&&x.h(this.tc,b.tc)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,3,[Mp,null,ur,null,Dv,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new IO(this.va,this.nc,this.tc,this.F,tg(Je.h(this.m,b)),null)};
    h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "grammar":case "start-production":case "output-format":return !0;default:return M(this.m,b)}};h.la=function(a,b,c){return n(Nf.h?Nf.h(ur,b):Nf.call(null,ur,b))?new IO(c,this.nc,this.tc,this.F,this.m,null):n(Nf.h?Nf.h(Mp,b):Nf.call(null,Mp,b))?new IO(this.va,c,this.tc,this.F,this.m,null):n(Nf.h?Nf.h(Dv,b):Nf.call(null,Dv,b))?new IO(this.va,this.nc,c,this.F,this.m,null):new IO(this.va,this.nc,this.tc,this.F,He.j(this.m,b,c),null)};
    h.ea=function(){return z(cg.h(new S(null,3,5,T,[new Nh(ur,this.va),new Nh(Mp,this.nc),new Nh(Dv,this.tc)],null),this.m))};h.U=function(a,b){return new IO(this.va,this.nc,this.tc,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    h.call=function(a){switch(arguments.length-1){case 1:return this.g(arguments[1]);case 3:return this.j(arguments[1],arguments[2],arguments[3]);case 5:return this.R(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 7:return this.Sa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]);case 9:return this.Ea(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]);case 11:return this.Ia(arguments[1],
    arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]);case 13:return this.Ka(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13]);case 15:return this.Ma(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],
    arguments[13],arguments[14],arguments[15]);case 17:return this.Oa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]);case 19:return this.Qa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],
    arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]);case 21:return this.rc(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20],arguments[21]);default:throw Error(["Invalid arity: ",p.g(arguments.length-1)].join(""));}};
    h.apply=function(a,b){return this.call.apply(this,[this].concat(Yb(b)))};h.g=function(a){return GO(this,a)};h.j=function(a,b,c){return GO.l(this,a,F([b,c]))};h.R=function(a,b,c,d,e){return GO.l(this,a,F([b,c,d,e]))};h.Sa=function(a,b,c,d,e,f,g){return GO.l(this,a,F([b,c,d,e,f,g]))};h.Ea=function(a,b,c,d,e,f,g,l,m){return GO.l(this,a,F([b,c,d,e,f,g,l,m]))};h.Ia=function(a,b,c,d,e,f,g,l,m,q,t){return GO.l(this,a,F([b,c,d,e,f,g,l,m,q,t]))};
    h.Ka=function(a,b,c,d,e,f,g,l,m,q,t,v,y){return GO.l(this,a,F([b,c,d,e,f,g,l,m,q,t,v,y]))};h.Ma=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J){return GO.l(this,a,F([b,c,d,e,f,g,l,m,q,t,v,y,E,J]))};h.Oa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z){return GO.l(this,a,F([b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z]))};h.Qa=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z){return GO.l(this,a,F([b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z]))};
    h.rc=function(a,b,c,d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba){return pg(GO,this,a,b,c,F([d,e,f,g,l,m,q,t,v,y,E,J,W,Z,ma,ja,Ca,Ba]))};function JO(a){var b=Je.l(a,ur,F([Mp,Dv]));b=Xe(a)?qh.h(R,b):b;return new IO(ur.g(a),Mp.g(a),Dv.g(a),null,tg(b),null)}h.qa=tb;h.W=function(a,b){return ad(b,vJ(this))};function KO(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return LO(arguments[0],1<b.length?new Rd(b.slice(1),0,null):null)}
    function LO(a,b){var c=qg(b),d=u.j(c,Wp,$G),e=u.j(c,Dv,Kx),f=u.j(c,Wu,null);b="string"===typeof a?function(){a:{var m=SN;SN=Ur.h(c,Tk);try{var q=d instanceof w?d.X:null;switch(q){case "abnf":var t=tO(a,e);break a;case "ebnf":t=iO(a,e);break a;default:throw Error(["No matching clause: ",p.g(q)].join(""));}}finally{SN=m;}t=void 0;}return n(f)?JO(He.j(t,Mp,f)):JO(t)}():We(a)?function(){var m=jO(a,e,f);return JO(m)}():Ye(a)?function(){var m=n(f)?f:a.g?a.g(0):a.call(null,0);m=jO(lg(rg,a),e,m);return JO(m)}():
    zJ(F(["Expected string, map, or vector as grammar specification, got ",uk.l(F([a]))]));var g=u.h(c,TA);g=g instanceof w?u.h(MO,g):g;if(n(g)){var l=qg(g);g=u.h(l,ur);l=u.h(l,Mp);return He.j(b,ur,cK(b.va,b.nc,g,l))}return b}function HO(a){return a instanceof LK||Ne(a)instanceof LK}var MO=new k(null,2,[XF,KO("whitespace \x3d #'\\s+'"),wu,KO("whitespace \x3d #'[,\\s]+'")],null);function NO(a){var b="#"!==a;return b?(b="'"!==a)?(b=":"!==a)?OO.g?OO.g(a):OO.call(null,a):b:b:b}function PO(a){return "@"===a||"`"===a||"~"===a}function QO(a,b,c,d){if(Lb(c))return jM(a,b);if(n(n(d)?PO(c):d))return kM(a,b,c);d=new pb;for(ML(a,c);;){if(DL(c)||NO(c)||null==c)return p.g(d);if(PO(c))return kM(a,b,c);d.append(KL(a));c=LL(a);}}
    function RO(a,b,c){b=KL(a);if(n(b)){var d=SO.g?SO.g(b):SO.call(null,b);if(n(d))return d.j?d.j(a,b,c):d.call(null,a,b,c);ML(a,b);return TO.j?TO.j(a,b,c):TO.call(null,a,b,c)}return lM(a)}function UO(a,b){return bM(a,F(["Unmatched delimiter ",b,"."]))}function VO(a,b,c){b=1+b;D(a)!==b&&gM(a);for(var d=1,e=0;;){if(d===b)return String.fromCharCode(e);var f=JL(qe(a,d),c);if(-1===f)return nM(qe(a,d),a);e=f+e*c;d+=1;}}
    function WO(a,b,c,d,e){for(var f=1,g=JL(b,c);;){if(-1===g)return oM(a,b);if(f!==d){var l=LL(a);var m=DL(l);m||(m=OO.g?OO.g(l):OO.call(null,l),m=n(m)?m:null==l);if(n(m))return n(e)?pM(a,f,d):String.fromCharCode(g);m=JL(l,c);KL(a);if(-1===m)return oM(a,l);g=m+g*c;f+=1;}else return String.fromCharCode(g)}}
    function XO(a){var b=KL(a);if(null!=b){b=NO(b)||PO(b)||DL(b)?p.g(b):QO(a,jG,b,!1);var c=b.length;if(1===c)return qe(b,0);if("newline"===b)return "\n";if("space"===b)return " ";if("tab"===b)return "\t";if("backspace"===b)return "\b";if("formfeed"===b)return "\f";if("return"===b)return "\r";if(n(0==b.lastIndexOf("u",0)))return b=VO(b,4,16),c=b.charCodeAt(),55295<c&&57344>c?qM(a,c.toString(16)):b;if(n(0==b.lastIndexOf("o",0))){--c;if(3<c)return rM(a,b);b=VO(b,c,8);return 255<(b|0)?sM(a):b}return bM(a,F(["Unsupported character: ",
    b,"."]))}return tM(a)}function YO(a){return SL(a)?new S(null,2,5,T,[NL(a),(OL(a)|0)-1|0],null):null}function ZO(a,b,c,d){var e=YO(c),f=H(e,0,null);e=H(e,1,null);b=zL(b);for(var g=hd(G);;){var l=FM(c);n(l)||eM(c,a,f,e,D(g));if(x.h(b,zL(l)))return jd(g);var m=OO.g?OO.g(l):OO.call(null,l);n(m)?(l=m.j?m.j(c,l,d):m.call(null,c,l,d),g=l!==c?dg.h(g,l):g):(ML(c,l),l=$O?$O(c,!0,null,d):aP.call(null,c,!0,null,d),g=l!==c?dg.h(g,l):g);}}function bP(a,b,c){a=ZO(jy,")",a,c);return Re(a)?Ud:lg(P,a)}
    function cP(a,b,c){return ZO(tA,"]",a,c)}function dP(a,b,c){var d=YO(a);b=H(d,0,null);d=H(d,1,null);c=ZO(NC,"}",a,c);var e=D(c),f=Yj(2,c),g=Lj(f);!Mg(e)&&fM(a,b,d,c);x.h(D(g),D(f))||DM(a,NC,f);return e<=2*wi?yi(mf(c)):cj(mf(c))}
    function eP(a,b){for(var c=function(){var g=new pb;g.append(b);return g}(),d=KL(a);;){if(n(function(){var g=DL(d);if(g)return g;g=OO.g?OO.g(d):OO.call(null,d);return n(g)?g:null==d}())){var e=p.g(c);ML(a,d);var f=KM(e);return n(f)?f:bM(a,F(["Invalid number: ",e,"."]))}e=function(){var g=c;g.append(d);return g}();f=KL(a);c=e;d=f;}}
    function fP(a){var b=KL(a);switch(b){case "t":return "\t";case "r":return "\r";case "n":return "\n";case "\\":return "\\";case '"':return '"';case "b":return "\b";case "f":return "\f";case "u":return b=KL(a),-1===parseInt(b|0,16)?hM(a,b):WO(a,b,16,4,!0);default:return EL(b)?(b=WO(a,b,8,3,!1),255<(b|0)?sM(a):b):uM(a,b)}}
    function gP(a){for(var b=new pb,c=KL(a);;){var d=c;if(x.h(null,d))return mM(a,OB,F(['"',b]));if(x.h("\\",d)){d=function(){var f=b;f.append(fP(a));return f}();var e=KL(a);b=d;c=e;}else {if(x.h('"',d))return p.g(b);d=function(){var f=b;f.append(c);return f}();e=KL(a);b=d;c=e;}}}
    function hP(a,b){b=QO(a,Mq,b,!0);if(n(b))switch(b){case "nil":return null;case "true":return !0;case "false":return !1;case "/":return Pt;default:var c=LM(b);c=n(c)?Nd.h(c.g?c.g(0):c.call(null,0),c.g?c.g(1):c.call(null,1)):null;return n(c)?c:iM(a,Mq,b)}else return null}
    function iP(a){var b=KL(a);if(DL(b))return vM(a);b=QO(a,ot,b,!0);var c=LM(b);if(n(n(c)?-1===b.indexOf("::"):c)){var d=c.g?c.g(0):c.call(null,0);c=c.g?c.g(1):c.call(null,1);return ":"===qe(b,0)?iM(a,ot,[":",p.g(b)].join("")):Qf.h(d,c)}return iM(a,ot,[":",p.g(b)].join(""))}function jP(a,b,c){b=FL($O?$O(a,!0,null,c):aP.call(null,a,!0,null,c));We(b)||wM(a,b);c=$O?$O(a,!0,null,c):aP.call(null,a,!0,null,c);return null!=c&&(c.C&131072||tb===c.Dd)?Me(c,Cj.l(F([Ne(c),b]))):xM(a,c)}
    function kP(a,b,c){b=ZO(Ct,"}",a,c);c=Lj(b);x.h(D(b),D(c))||DM(a,Ct,b);return c}function lP(a){$O?$O(a,!0,null,!0):aP.call(null,a,!0,null,!0);return a}function mP(a,b,c){b=KL(a);b=QO(a,yG,b,!0);var d=null==b?null:LM(b);d=null==d?null:IL(d);return n(d)?"{"===FM(a)?(c=ZO(yG,"}",a,c),!Mg(D(c))&&fM(a,null,null,c),b=HL(p.g(d),Yj(2,c)),c=Yj(2,Td(c)),x.h(D(Lj(b)),D(b))||DM(a,yG,b),Oj(b,c)):yM(a,b):zM(a,b)}
    function nP(a,b,c){b=$O?$O(a,!0,null,c):aP.call(null,a,!0,null,c);return x.h(no,b)?Number.NaN:x.h(wD,b)?Number.NEGATIVE_INFINITY:x.h(Om,b)?Number.POSITIVE_INFINITY:bM(a,F([["Invalid token: ##",p.g(b)].join("")]))}function OO(a){switch(a){case '"':return gP;case ":":return iP;case ";":return MM;case "^":return jP;case "(":return bP;case ")":return UO;case "[":return cP;case "]":return UO;case "{":return dP;case "}":return UO;case "\\":return XO;case "#":return RO;default:return null}}
    function SO(a){switch(a){case "^":return jP;case "{":return kP;case "\x3c":return NM("Unreadable form");case "!":return MM;case "_":return lP;case ":":return mP;case "#":return nP;default:return null}}
    function TO(a,b,c){b=$O?$O(a,!0,null,c):aP.call(null,a,!0,null,c);var d=$O?$O(a,!0,null,c):aP.call(null,a,!0,null,c);b instanceof Md||AM(a,"Reader tag must be a symbol");var e=u.h(XC.g(c),b);e=n(e)?e:R.g?R.g(b):R.call(null,b);if(n(e))return e.g?e.g(d):e.call(null,d);c=Tk.g(c);return n(c)?c.h?c.h(b,d):c.call(null,b,d):BM(a,b)}
    function aP(a){switch(arguments.length){case 1:return oP(R,arguments[0]);case 2:return oP(arguments[0],arguments[1]);case 4:return $O(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function oP(a,b){a=qg(a);var c=u.h(a,An),d=!M(a,An);return $O(b,d,c,a)}
    function $O(a,b,c,d){try{for(;;){var e=KL(a);if(!DL(e)){if(null==e)return n(b)?EM(a,null):c;if(EL(e)||("+"===e||"-"===e)&&EL(a.Fc(null)))return eP(a,e);var f=OO(e);if(n(f)){var g=f.j?f.j(a,e,d):f.call(null,a,e,d);if(g!==a)return g}else return hP(a,e)}}}catch(l){if(l instanceof Error){b=l;if(b instanceof nl){c=rl(b);if(x.h(gm,Yv.g(c)))throw b;throw pl(b.message,Cj.l(F([new k(null,1,[Yv,gm],null),c,SL(a)?new k(null,3,[pw,NL(a),Es,OL(a),OD,PL(a)],null):null])),b);}throw pl(b.message,Cj.l(F([new k(null,
    1,[Yv,gm],null),SL(a)?new k(null,3,[pw,NL(a),Es,OL(a),OD,PL(a)],null):null])),b);}throw l;}}function pP(a,b){return n(n(b)?sg.h(b,""):b)?oP(a,TL(b)):null}var qP=function(){var a=new S(null,13,5,T,[null,31,28,31,30,31,30,31,31,30,31,30,31],null),b=new S(null,13,5,T,[null,31,29,31,30,31,30,31,31,30,31,30,31],null);return function(c,d){return u.h(n(d)?b:a,c)}}(),rP=/(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;function sP(a){a=parseInt(a,10);return Lb(isNaN(a))?a:null}
    function tP(a,b,c,d){if(!(a<=b&&b<=c))throw Error([p.g(d)," Failed:  ",p.g(a),"\x3c\x3d",p.g(b),"\x3c\x3d",p.g(c)].join(""));return b}
    function uP(a){var b=ck(rP,a);H(b,0,null);var c=H(b,1,null),d=H(b,2,null),e=H(b,3,null),f=H(b,4,null),g=H(b,5,null),l=H(b,6,null),m=H(b,7,null),q=H(b,8,null),t=H(b,9,null),v=H(b,10,null);if(Lb(b))throw Error(["Unrecognized date/time syntax: ",p.g(a)].join(""));a=sP(c);b=function(){var Z=sP(d);return n(Z)?Z:1}();c=function(){var Z=sP(e);return n(Z)?Z:1}();var y=function(){var Z=sP(f);return n(Z)?Z:0}(),E=function(){var Z=sP(g);return n(Z)?Z:0}(),J=function(){var Z=sP(l);return n(Z)?Z:0}(),W=function(){a:if(x.h(3,
    D(m)))var Z=m;else if(3<D(m))Z=m.substring(0,3);else for(Z=new pb(m);;)if(3>Z.getLength())Z=Z.append("0");else {Z=Z.toString();break a}Z=sP(Z);return n(Z)?Z:0}();q=(x.h(q,"-")?-1:1)*(60*function(){var Z=sP(t);return n(Z)?Z:0}()+function(){var Z=sP(v);return n(Z)?Z:0}());return new S(null,8,5,T,[a,tP(1,b,12,"timestamp month field must be in range 1..12"),tP(1,c,qP(b,0===(a%4+4)%4&&(0!==(a%100+100)%100||0===(a%400+400)%400)),"timestamp day field must be in range 1..last day in month"),tP(0,y,23,"timestamp hour field must be in range 0..23"),
    tP(0,E,59,"timestamp minute field must be in range 0..59"),tP(0,J,x.h(E,59)?60:59,"timestamp second field must be in range 0..60"),tP(0,W,999,"timestamp millisecond field must be in range 0..999"),q],null)}
    var vP=Vg(null),wP=Vg(Cj.l(F([new k(null,4,[Dp,function(a){if("string"===typeof a){var b=uP(a);if(n(b)){a=H(b,0,null);var c=H(b,1,null),d=H(b,2,null),e=H(b,3,null),f=H(b,4,null),g=H(b,5,null),l=H(b,6,null);b=H(b,7,null);b=new Date(Date.UTC(a,c-1,d,e,f,g,l)-6E4*b);}else throw Error(["Unrecognized date/time syntax: ",p.g(a)].join(""));return b}throw Error("Instance literal expects a string for its timestamp.");},WB,function(a){if("string"===typeof a)return new ll(a.toLowerCase());throw Error("UUID literal expects a string as its representation.");
    },dE,function(a){if(Ye(a))return qh.h(ji,a);throw Error("Queue literal expects a vector for its elements.");},tw,function(a){if(Ye(a)){var b=[];a=z(a);for(var c=null,d=0,e=0;;)if(e<d){var f=c.V(null,e);b.push(f);e+=1;}else if(a=z(a))c=a,Ze(c)?(a=pd(c),e=qd(c),c=a,d=D(a),a=e):(a=A(c),b.push(a),a=C(c),c=null,d=0),e=0;else break;return b}if(We(a)){b={};a=z(a);c=null;for(e=d=0;;)if(e<d){var g=c.V(null,e);f=H(g,0,null);g=H(g,1,null);f=Rf(f);b[f]=g;e+=1;}else if(a=z(a))Ze(a)?(d=pd(a),a=qd(a),c=d,d=D(d)):
    (d=A(a),c=H(d,0,null),d=H(d,1,null),c=Rf(c),b[c]=d,a=C(a),c=null,d=0),e=0;else break;return b}throw Error("JS literal expects a vector or map containing only string or unqualified keyword keys");}],null),R]))),xP=function xP(a){switch(arguments.length){case 1:return xP.g(arguments[0]);case 2:return xP.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};xP.g=function(a){return pP(new k(null,3,[XC,r(wP),Tk,r(vP),An,null],null),a)};
    xP.h=function(a,b){return pP(wh(Cj.l(F([new k(null,1,[Tk,r(vP)],null),a])),XC,function(c){return Cj.l(F([r(wP),c]))}),b)};xP.I=2;var yP=KO("\n    expr\x3dand-or\n    \x3cand-or\x3e\x3d\x3cws*\x3e (eq-neq | and | or)\n    \x3ceq-neq\x3e\x3d\x3cws*\x3e (term | eq | neq | match)\n    and\x3dand-or \x3cws*\x3e \x3c'\x26\x26'\x3e eq-neq\n    or\x3dand-or \x3cws*\x3e \x3c'||'\x3e eq-neq\n    eq\x3deq-neq \x3cws*\x3e \x3c'\x3d\x3d'\x3e term\n    neq\x3deq-neq \x3cws*\x3e \x3c'!\x3d'\x3e term\n    match\x3deq-neq \x3cws*\x3e \x3c'?'\x3e term\n    \x3cterm\x3e\x3d\x3cws*\x3e (ident | own-ident | number | str | lparen and-or rparen)\n    \x3clparen\x3e \x3d \x3cws*'('ws*\x3e\n    \x3crparen\x3e \x3d \x3cws*')'ws*\x3e\n    ident\x3d\x3c'$'\x3e word\n    own-ident\x3d\x3c'#'\x3e word\n    str\x3d\x3c'\\''\x3e #'[^\\']+' \x3c'\\''\x3e\n    word\x3d#'[a-zA-Z]+'\n    number\x3d#'[-+]?[0-9]*\\.?[0-9]+'\n    ws\x3d#'[\\s\\t]+'\n    ");
    function zP(a){if(z(a)){a=GO(yP,a);if(null==a)var b=null;else b=a instanceof LK?a:Ne(a)instanceof LK?Ne(a):null,b=n(b)?p.g(b):null;if(n(b))throw ol(["Error parsing restrictions ",b].join(""),new k(null,1,[Nr,b],null));return a}return null}
    function AP(a,b,c){return z(a)?vL(dj([Pr,tm,Hs,yB,Ko,Lm,Vy,rm,xF,Ao],[x,xP,function(d,e){return n(d)?d:e},qf,qf,sg,function(d){H(d,0,null);d=H(d,1,null);var e=u.h(c,d);return n(e)?e:u.h(c,Qf.g(d))},function(d,e){return n(d)?e:d},function(d){H(d,0,null);d=H(d,1,null);var e=u.h(b,d);return n(e)?e:u.h(b,Qf.g(d))},function(d,e){return n(n(e)?d:e)?ck(fk(e),d):null}]),a):!0}var BP={};var CP={},GH,RH,bI,WL,XL,YL,ZL,$L,cO,DP;function NP(a,b){if(null!=a&&null!=a.Xb)a=a.Xb(a,b);else {var c=NP[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=NP._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Spec.conform*",a);}return a}function OP(a,b){if(null!=a&&null!=a.Yb)a=a.Yb(a,b);else {var c=OP[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=OP._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Spec.with-gen*",a);}return a}
    var PP=Vg(R);function QP(a){if(Pf(a)){var b=r(PP);a=u.h(b,a);if(Pf(a))a:for(;;)if(Pf(a))a=u.h(b,a);else {b=a;break a}else b=a;return b}return a}function RP(a){if(Pf(a)){var b=QP(a);if(n(b))return b;throw Error(["Unable to resolve spec: ",p.g(a)].join(""));}return a}function SP(a){return null!=a&&tb===a.qc?a:null}function TP(a){var b=pF.g(a);return n(b)?a:b}function UP(a,b){return Pf(a)?a:n(TP(a))?He.j(a,Kn,b):null!=a&&(a.C&131072||tb===a.Dd)?Me(a,He.j(Ne(a),Kn,b)):null}
    function VP(a){return Pf(a)?a:n(TP(a))?Kn.g(a):null!=a&&(a.C&131072||tb===a.Dd)?Kn.g(Ne(a)):null}function WP(a){var b=function(){var c=(c=Pf(a))?QP(a):c;if(n(c))return c;c=SP(a);if(n(c))return c;c=TP(a);return n(c)?c:null}();return n(TP(b))?UP(XP(b,null),VP(b)):b}function YP(a){var b=WP(a);if(n(b))return b;if(Pf(a))throw Error(["Unable to resolve spec: ",p.g(a)].join(""));return null}
    function ZP(a){if(Ya(null==a?"":String(a)))return null;a=ch.h(Xl,lJ(a,"$",0));if(2<=D(a)&&Kg(function(c){return !Ya(null==c?"":String(c))},a)){var b=ak(Nj,Ce)(a);a=H(b,0,null);b=H(b,1,null);return Nd.g([jJ(".",a),"/",p.g(b)].join(""))}return null}
    var EP=function(){function a(d,e){var f=$P[ba(null==d?null:d)];if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);f=$P._;if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);throw Sb("Specize.specize*",d);}function b(d){var e=$P[ba(null==d?null:d)];if(null!=e)return e.g?e.g(d):e.call(null,d);e=$P._;if(null!=e)return e.g?e.g(d):e.call(null,d);throw Sb("Specize.specize*",d);}var c=null;c=function(d,e){switch(arguments.length){case 1:return b.call(this,d);case 2:return a.call(this,d,e)}throw Error("Invalid arity: "+
    arguments.length);};c.g=b;c.h=a;return c}(),$P=function $P(a){switch(arguments.length){case 1:return $P.g(arguments[0]);case 2:return $P.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};$P.g=function(a){return null!=a&&null!=a.Gb?a.Gb(a):EP(a)};$P.h=function(a,b){return null!=a&&null!=a.Hb?a.Hb(a,b):EP(a,b)};$P.I=2;w.prototype.Gb=function(){return $P(RP(this))};w.prototype.Hb=function(){return $P(RP(this))};Md.prototype.Gb=function(){return $P(RP(this))};
    Md.prototype.Hb=function(){return $P(RP(this))};Hj.prototype.Gb=function(){return bQ(this,this,null,null,null)};Hj.prototype.Hb=function(a,b){return bQ(b,this,null,null,null)};
    $P._=function(){function a(c){var d=(d=Ke(c))?ZP(c.name):d;return n(d)?bQ(d,c,null,null,null):bQ(vG,c,null,null,null)}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return bQ(d,c,null,null,null)}throw Error("Invalid arity: "+arguments.length);};b.g=a;b.h=function(c,d){return bQ(d,c,null,null,null)};return b}();
    var cQ=function cQ(a){switch(arguments.length){case 1:return cQ.g(arguments[0]);case 2:return cQ.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};cQ.g=function(a){var b=SP(a);return n(b)?b:$P(a)};cQ.h=function(a,b){var c=SP(a);return n(c)?c:$P(a,b)};cQ.I=2;function dQ(a){return Nf(BB,a)}function eQ(a,b){return NP(cQ.g(a),b)}function fQ(a,b){a=QP(a);return n(TP(a))?He.j(a,$v,b):OP(cQ.g(a),b)}
    function gQ(a,b,c){if(null==c)Yg.j(PP,Je,a);else {var d=SP(c);n(d)||(d=TP(c),d=n(d)?d:u.h(r(PP),c));b=n(d)?c:bQ(b,c,null,null,null);Yg.D(PP,He,a,UP(b,a));}}function hQ(a,b,c){if(n(a)){var d=YP(a);if(n(d))return eQ(d,b);if(Ke(a)||(null!=a?a.C&1||tb===a.ni||(a.C?0:Qb(bc,a)):Qb(bc,a)))return n(null)?a.g?a.g(b):a.call(null,b):n(a.g?a.g(b):a.call(null,b))?b:BB;throw Error([uk.l(F([c]))," is not a fn, expected predicate fn"].join(""));}return b}function iQ(a,b){a=cQ.g(a);return !dQ(NP(a,b))}
    var jQ=function jQ(a){var c=qg(a),d=u.h(c,NA),e=u.h(c,Ln),f=u.h(c,pD),g=u.h(c,Oz),l=u.h(c,MB),m=u.h(c,VD),q=u.h(c,Zp),t=u.h(c,wm),v=u.h(c,ko),y=u.h(c,DE),E=u.h(c,ME),J=u.h(c,lq),W=Oj(cg.h(y,q),cg.h(t,E)),Z=ml();if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof GH)GH=function(ma,ja,Ca,Ba,ta,B,I,K,O,N,U,Q,Y,da,ia,qa,ua,xa,Fa){this.te=ma;this.Qh=ja;this.di=Ca;this.Th=Ba;this.sb=ta;this.Wh=B;this.ue=I;this.yf=K;this.Rh=O;this.ci=N;this.qh=U;this.ai=Q;this.id=
    Y;this.bi=da;this.Vh=ia;this.Sh=qa;this.ih=ua;this.Xh=xa;this.th=Fa;this.C=393216;this.O=0;},GH.prototype.U=function(ma,ja){return new GH(this.te,this.Qh,this.di,this.Th,this.sb,this.Wh,this.ue,this.yf,this.Rh,this.ci,this.qh,this.ai,this.id,this.bi,this.Vh,this.Sh,this.ih,this.Xh,ja)},GH.prototype.T=function(){return this.th},GH.prototype.Gb=function(){return this},GH.prototype.Hb=function(){return this},GH.prototype.qc=tb,GH.prototype.Xb=function(ma,ja){if(n(this.ue.g?this.ue.g(ja):this.ue.call(null,
    ja))){ma=r(PP);var Ca=z(ja),Ba=A(Ca);C(Ca);H(Ba,0,null);H(Ba,1,null);for(Ba=Ca=ja;;){ja=Ca;var ta=z(Ba);Ca=A(ta);var B=C(ta);ta=Ca;Ca=H(ta,0,null);ta=H(ta,1,null);if(n(Ba))if(Ba=this.te.g?this.te.g(Ca):this.te.call(null,Ca),Ba=u.h(ma,Ba),n(Ba)){Ba=eQ(Ba,ta);if(dQ(Ba))return BB;ja=Ba===ta?ja:He.j(ja,Ca,Ba);Ba=B;Ca=ja;}else Ba=B,Ca=ja;else return ja}}else return BB},GH.prototype.Yb=function(ma,ja){ma=He.j(this.yf,Oz,ja);return jQ.g?jQ.g(ma):jQ.call(null,ma)},GH.Za=!0,GH.Xa="cljs.spec.alpha/t_cljs$spec$alpha15040",
    GH.ab=function(ma){return ad(ma,"cljs.spec.alpha/t_cljs$spec$alpha15040")};return new GH(function(ma){var ja=W.g?W.g(ma):W.call(null,ma);return n(ja)?ja:ma},d,e,f,g,l,m,c,q,t,c,v,Z,y,a,E,W,J,R)};
    function bQ(a,b,c,d,e){if(n(SP(b)))return n(c)?fQ(b,c):b;if(n(TP(b)))return XP(b,c);if(Pf(b))return a=YP(b),n(c)?fQ(a,c):a;if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof RH)RH=function(f,g,l,m,q,t){this.form=f;this.Rb=g;this.sb=l;this.$e=m;this.vg=q;this.uh=t;this.C=393216;this.O=0;},RH.prototype.U=function(f,g){return new RH(this.form,this.Rb,this.sb,this.$e,this.vg,g)},RH.prototype.T=function(){return this.uh},RH.prototype.Gb=function(){return this},
    RH.prototype.Hb=function(){return this},RH.prototype.qc=tb,RH.prototype.Xb=function(f,g){f=this.Rb.g?this.Rb.g(g):this.Rb.call(null,g);return n(this.$e)?f:n(f)?g:BB},RH.prototype.Yb=function(f,g){return bQ(this.form,this.Rb,g,this.$e,this.vg)},RH.Za=!0,RH.Xa="cljs.spec.alpha/t_cljs$spec$alpha15091",RH.ab=function(f){return ad(f,"cljs.spec.alpha/t_cljs$spec$alpha15091")};return new RH(a,b,c,d,e,R)}function kQ(a,b){return lQ(a,b,Yv,null)}
    function lQ(a,b,c,d){var e=ml(),f=c instanceof w?function(g,l){return He.j(g,c,l)}:c;if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof bI)bI=function(g,l,m,q,t,v,y,E,J){this.form=g;this.$f=l;this.kg=m;this.sb=q;this.id=t;this.Ae=v;this.Yg=y;this.tag=E;this.vh=J;this.C=393216;this.O=0;},bI.prototype.U=function(g,l){return new bI(this.form,this.$f,this.kg,this.sb,this.id,this.Ae,this.Yg,this.tag,l)},bI.prototype.T=function(){return this.vh},bI.prototype.Gb=
    function(){return this},bI.prototype.Hb=function(){return this},bI.prototype.qc=tb,bI.prototype.Xb=function(g,l){g=this.Ae.g?this.Ae.g(l):this.Ae.call(null,l);return n(g)?hQ(g,l,this.form):BB},bI.prototype.Yb=function(g,l){return lQ(this.form,this.$f,this.kg,l)},bI.Za=!0,bI.Xa="cljs.spec.alpha/t_cljs$spec$alpha15103",bI.ab=function(g){return ad(g,"cljs.spec.alpha/t_cljs$spec$alpha15103")};return new bI(a,b,c,d,e,function(g){var l=r(b);var m=hl(l);m=m.g?m.g(g):m.call(null,g);m=gl(l,m);return n(m)?
    l.g?l.g(g):l.call(null,g):m},function(g){var l=hl(r(b));return l.g?l.g(g):l.call(null,g)},f,R)}function mQ(a,b){return nQ(a,b,null)}
    function nQ(a,b,c){var d=new Dk(function(){return rh.j(cQ,b,a)}),e=D(b);if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof WL)WL=function(f,g,l,m,q,t){this.forms=f;this.Fb=g;this.sb=l;this.yd=m;this.H=q;this.wh=t;this.C=393216;this.O=0;},WL.prototype.U=function(f,g){return new WL(this.forms,this.Fb,this.sb,this.yd,this.H,g)},WL.prototype.T=function(){return this.wh},WL.prototype.Gb=function(){return this},WL.prototype.Hb=function(){return this},WL.prototype.qc=
    tb,WL.prototype.Xb=function(f,g){f=r(this.yd);if(Ye(g)&&x.h(D(g),this.H))for(var l=g,m=0;;){if(x.h(m,this.H))return l;var q=g.g?g.g(m):g.call(null,m),t=NP(f.g?f.g(m):f.call(null,m),q);if(dQ(t))return BB;l=t===q?l:He.j(l,m,t);m+=1;}else return BB},WL.prototype.Yb=function(f,g){return nQ(this.forms,this.Fb,g)},WL.Za=!0,WL.Xa="cljs.spec.alpha/t_cljs$spec$alpha15116",WL.ab=function(f){return ad(f,"cljs.spec.alpha/t_cljs$spec$alpha15116")};return new WL(a,b,c,d,e,R)}
    function oQ(a,b){return new Nh(a,b)}
    var pQ=function pQ(a,b,c,d){var f=ml(),g=Oj(a,c),l=new Dk(function(){return rh.j(cQ,c,b)}),m=function(){switch(D(c)){case 2:return function(q){var t=r(l),v=NP(t.g?t.g(0):t.call(null,0),q);return dQ(v)?(q=NP(t.g?t.g(1):t.call(null,1),q),dQ(q)?BB:oQ(a.g?a.g(1):a.call(null,1),q)):oQ(a.g?a.g(0):a.call(null,0),v)};case 3:return function(q){var t=r(l),v=NP(t.g?t.g(0):t.call(null,0),q);return dQ(v)?(v=NP(t.g?t.g(1):t.call(null,1),q),dQ(v)?(q=NP(t.g?t.g(2):t.call(null,2),q),dQ(q)?BB:oQ(a.g?a.g(2):a.call(null,
    2),q)):oQ(a.g?a.g(1):a.call(null,1),v)):oQ(a.g?a.g(0):a.call(null,0),v)};default:return function(q){for(var t=r(l),v=0;;)if(v<D(t)){var y=t.g?t.g(v):t.call(null,v);y=NP(y,q);if(dQ(y))v+=1;else return oQ(a.g?a.g(v):a.call(null,v),y)}else return BB}}}();if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof XL)XL=function(q,t,v,y,E,J,W,Z,ma){this.keys=q;this.forms=t;this.Fb=v;this.sb=y;this.id=E;this.lh=J;this.yd=W;this.zc=Z;this.xh=ma;this.C=393216;this.O=
    0;},XL.prototype.U=function(q,t){return new XL(this.keys,this.forms,this.Fb,this.sb,this.id,this.lh,this.yd,this.zc,t)},XL.prototype.T=function(){return this.xh},XL.prototype.Gb=function(){return this},XL.prototype.Hb=function(){return this},XL.prototype.qc=tb,XL.prototype.Xb=function(q,t){return this.zc.g?this.zc.g(t):this.zc.call(null,t)},XL.prototype.Yb=function(q,t){return pQ.D?pQ.D(this.keys,this.forms,this.Fb,t):pQ.call(null,this.keys,this.forms,this.Fb,t)},XL.Za=!0,XL.Xa="cljs.spec.alpha/t_cljs$spec$alpha15120",
    XL.ab=function(q){return ad(q,"cljs.spec.alpha/t_cljs$spec$alpha15120")};return new XL(a,b,c,d,f,g,l,m,R)};function qQ(a,b,c){var d=z(b);A(d);C(d);d=z(c);A(d);C(d);for(d=c;;){c=a;b=z(b);a=A(b);b=C(b);var e=z(d);d=A(e);e=C(e);var f=d;d=e;if(n(a)){c=hQ(a,c,f);if(dQ(c))return BB;a=c;}else return c}}
    var rQ=function rQ(a,b,c){var e=new Dk(function(){return rh.j(cQ,b,a)}),f=function(){switch(D(b)){case 2:return function(g){var l=r(e);g=NP(l.g?l.g(0):l.call(null,0),g);return dQ(g)?BB:NP(l.g?l.g(1):l.call(null,1),g)};case 3:return function(g){var l=r(e);g=NP(l.g?l.g(0):l.call(null,0),g);if(dQ(g))return BB;g=NP(l.g?l.g(1):l.call(null,1),g);return dQ(g)?BB:NP(l.g?l.g(2):l.call(null,2),g)};default:return function(g){for(var l=r(e),m=0;;)if(m<D(l)){g=NP(l.g?l.g(m):l.call(null,m),g);if(dQ(g))return BB;
    m+=1;}else return g}}}();if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof YL)YL=function(g,l,m,q,t,v){this.forms=g;this.Fb=l;this.sb=m;this.yd=q;this.zc=t;this.yh=v;this.C=393216;this.O=0;},YL.prototype.U=function(g,l){return new YL(this.forms,this.Fb,this.sb,this.yd,this.zc,l)},YL.prototype.T=function(){return this.yh},YL.prototype.Gb=function(){return this},YL.prototype.Hb=function(){return this},YL.prototype.qc=tb,YL.prototype.Xb=function(g,l){return this.zc.g?
    this.zc.g(l):this.zc.call(null,l)},YL.prototype.Yb=function(g,l){return rQ.j?rQ.j(this.forms,this.Fb,l):rQ.call(null,this.forms,this.Fb,l)},YL.Za=!0,YL.Xa="cljs.spec.alpha/t_cljs$spec$alpha15170",YL.ab=function(g){return ad(g,"cljs.spec.alpha/t_cljs$spec$alpha15170")};return new YL(a,b,c,e,f,R)},sQ=function sQ(a,b,c){if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof ZL)ZL=function(e,f,g,l){this.forms=e;this.Fb=f;this.sb=g;this.zh=l;this.C=393216;this.O=
    0;},ZL.prototype.U=function(e,f){return new ZL(this.forms,this.Fb,this.sb,f)},ZL.prototype.T=function(){return this.zh},ZL.prototype.Gb=function(){return this},ZL.prototype.Hb=function(){return this},ZL.prototype.qc=tb,ZL.prototype.Xb=function(e,f){e=ch.j(function(g,l){return hQ(g,f,l)},this.Fb,this.forms);return n(Lg(dQ,e))?BB:lg(Cj,e)},ZL.prototype.Yb=function(e,f){return sQ.j?sQ.j(this.forms,this.Fb,f):sQ.call(null,this.forms,this.Fb,f)},ZL.Za=!0,ZL.Xa="cljs.spec.alpha/t_cljs$spec$alpha15181",ZL.ab=
    function(e){return ad(e,"cljs.spec.alpha/t_cljs$spec$alpha15181")};return new ZL(a,b,c,R)},tQ=new k(null,4,[uB,G,Wy,Jj,az,Ud,hv,R],null);
    function uQ(a,b,c,d){function e(B,I,K,O){return De.h(B,O)}var f=qg(c),g=u.h(f,eD),l=u.h(f,Qo),m=u.j(f,Ds,20),q=u.h(f,Vz),t=u.h(f,xx),v=u.h(f,FD),y=u.h(f,gp),E=u.h(f,dn),J=u.h(f,zw),W=u.h(f,Ru),Z=u.h(f,Wr),ma=u.h(f,dw),ja=u.h(f,mF),Ca=n(ja)?Fe(ja):u.h(tQ,l),Ba=new Dk(function(){return cQ.g(b)}),ta=function(){return n(E)?E:function(B){return B}}();if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof $L)$L=function(B,I,K,O,N,U,Q,Y,da,ia,qa,ua,xa,Fa,Ka,Ta,
    jb,Bb,Ob,wc,rd,af,fj,ql,eY){this.form=B;this.ph=I;this.Ag=K;this.sb=O;this.hh=N;this.Rb=U;this.me=Q;this.Ug=Y;this.kh=da;this.yg=ia;this.he=qa;this.Wg=ua;this.hi=xa;this.Xg=Fa;this.ae=Ka;this.jh=Ta;this.gh=jb;this.count=Bb;this.Mh=Ob;this.ag=wc;this.kind=rd;this.rh=af;this.Nf=fj;this.Tg=ql;this.Ah=eY;this.C=393216;this.O=0;},$L.prototype.U=function(B,I){return new $L(this.form,this.ph,this.Ag,this.sb,this.hh,this.Rb,this.me,this.Ug,this.kh,this.yg,this.he,this.Wg,this.hi,this.Xg,this.ae,this.jh,this.gh,
    this.count,this.Mh,this.ag,this.kind,this.rh,this.Nf,this.Tg,I)},$L.prototype.T=function(){return this.Ah},$L.prototype.Gb=function(){return this},$L.prototype.Hb=function(){return this},$L.prototype.qc=tb,$L.prototype.Xb=function(B,I){B=r(this.ae);if(Lb(this.me.g?this.me.g(I):this.me.call(null,I)))return BB;if(n(this.Nf)){var K=this.he.g?this.he.g(I):this.he.call(null,I),O=H(K,0,null),N=H(K,1,null);K=H(K,2,null);var U=O.g?O.g(I):O.call(null,I);O=0;var Q=z(I);I=z(Q);A(I);C(I);for(I=U;;){var Y=Q;U=
    z(Y);Q=A(U);U=C(U);if(Y){Y=NP(B,Q);if(dQ(Y))return BB;I=N.D?N.D(I,O,Q,Y):N.call(null,I,O,Q,Y);O+=1;Q=U;}else return K.g?K.g(I):K.call(null,I)}}else if(oe(I))for(N=xf(D(I)/101),N=1>N?1:N,O=0;;){if(O>=D(I))return I;if(iQ(B,qe(I,O)))O+=N;else return BB}else for(O=0,N=z(I),K=z(N),A(K),C(K);;){Q=z(N);K=A(Q);U=C(Q);Q=K;Y=N;if(null==Y||x.h(O,101))return I;if(iQ(B,Q))N=U,O+=1;else return BB}},$L.prototype.Yb=function(B,I){return uQ(this.form,this.Rb,this.ag,I)},$L.Za=!0,$L.Xa="cljs.spec.alpha/t_cljs$spec$alpha15192",
    $L.ab=function(B){return ad(B,"cljs.spec.alpha/t_cljs$spec$alpha15192")};return new $L(a,g,function(B){return iQ(r(Ba),B)},d,m,b,q,t,l,e,function(B){return Ye(B)&&(Lb(ja)||Ye(ja))?new S(null,3,5,T,[qf,function(I,K,O,N){return O===N?I:He.j(I,K,N)},qf],null):n(function(){var I=We(B);return I?(I=n(Z)?Lb(ja):Z,n(I)?I:We(ja)):I}())?new S(null,3,5,T,[n(t)?Fe:qf,function(I,K,O,N){return O===N&&Lb(t)?I:He.j(I,qe(n(t)?N:O,0),qe(N,1))},qf],null):Hf(ja)||df(ja)||Lb(ja)&&(Hf(B)||df(B))?new S(null,3,5,T,[Fe,e,
    Jf],null):new S(null,3,5,T,[function(I){return Fe(n(ja)?ja:I)},e,qf],null)},v,c,y,Ba,ta,Ca,J,W,f,Z,f,ma,ja,R)}function vQ(a){return new k(null,2,[pF,EA,jo,a],null)}function wQ(a){a=qg(a);a=u.h(a,pF);return x.h(EA,a)}
    var xQ=function xQ(a){var c=qg(a),d=u.h(c,Ms);a=z(d);var e=A(a);a=C(a);var f=u.h(c,lt),g=z(f),l=A(g);g=C(g);var m=u.h(c,LF),q=z(m);A(q);q=C(q);var t=u.h(c,jo);c=u.h(c,fr);return Kg(qf,d)?wQ(e)?(d=jo.g(e),d=De.h(t,n(f)?Ie([l,d]):d),a?(a=new k(null,4,[Ms,a,lt,g,LF,q,jo,d],null),xQ.g?xQ.g(a):xQ.call(null,a)):vQ(d)):new k(null,6,[pF,op,Ms,d,jo,t,lt,f,LF,m,fr,c],null):null};
    function yQ(a,b,c,d,e){return n(a)?(d=new k(null,5,[pF,nF,ct,b,$q,d,LF,e,xt,ml()],null),wQ(a)?He.l(d,Zs,b,F([jo,De.h(c,jo.g(a))])):He.l(d,Zs,a,F([jo,c]))):null}
    function zQ(a,b,c,d){return n(n(b)?b:c)?(a=mh.h(function(e){e=A(e);return d.g?d.g(e):d.call(null,e)},ch.D(Yh,a,function(){var e=z(b);return e?e:Db(null)}(),function(){var e=z(c);return e?e:Db(null)}())),new S(null,3,5,T,[z(ch.h(A,a)),n(b)?z(ch.h(Ae,a)):null,n(c)?z(ch.h(function(e){return qe(e,2)},a)):null],null)):new S(null,3,5,T,[z(mh.h(d,a)),b,c],null)}
    function AQ(a,b,c){var d=zQ(a,b,c,qf);b=H(d,0,null);c=z(b);a=A(c);c=C(c);var e=H(d,1,null),f=H(e,0,null);d=H(d,2,null);return n(b)?(b=new k(null,4,[pF,RD,Ms,b,lt,e,LF,d],null),null==c?n(f)?wQ(a)?vQ(oQ(f,jo.g(a))):b:a:b):null}function BQ(a,b){return n(n(a)?b:a)?AQ(F([a,b]),null,null):n(a)?a:b}
    var CQ=function CQ(a){a=RP(a);var c=qg(a),d=u.h(c,pF),e=u.h(c,Ms);a=u.h(c,Zs);var f=u.h(c,ct);c=u.h(c,LF);if(x.h(EA,d))return !0;if(x.h(null,d))return null;if(x.h(ND,d))return d=CQ.g?CQ.g(a):CQ.call(null,a),n(d)?(a=qQ(DQ(a),e,C(c)),!dQ(a)):d;if(x.h(nF,d))return (e=a===f)?e:CQ.g?CQ.g(a):CQ.call(null,a);if(x.h(op,d))return Kg(CQ,e);if(x.h(RD,d))return Lg(CQ,e);throw Error(["No matching clause: ",p.g(d)].join(""));},DQ=function DQ(a){a=RP(a);var c=qg(a);a=u.h(c,Ms);var d=z(a),e=A(d);C(d);var f=u.h(c,lt),
    g=H(f,0,null),l=u.h(c,pF);d=u.h(c,Zs);var m=u.h(c,jo);c=u.h(c,LF);if(x.h(EA,l))return m;if(x.h(null,l))return null;if(x.h(ND,l))return e=DQ.g?DQ.g(d):DQ.call(null,d),(f=x.h(e,eC))?d=f:(d=pF.g(RP(d)),f=new Hj(null,new k(null,2,[nF,null,op,null],null),null),d=f.g?f.g(d):f.call(null,d),d=n(d)?Re(e):d,d=n(d)?d:null),n(d)?eC:qQ(e,a,c);if(x.h(nF,l))return EQ(d,m,g);if(x.h(op,l))return EQ(e,m,g);if(x.h(RD,l))return c=zQ(a,f,c,CQ),a=H(c,0,null),a=H(a,0,null),c=H(c,1,null),c=H(c,0,null),a=null==a?eC:DQ.g?
    DQ.g(a):DQ.call(null,a),n(c)?oQ(c,a):a;throw Error(["No matching clause: ",p.g(l)].join(""));};function EQ(a,b,c){a=RP(a);var d=qg(a),e=u.h(d,pF);u.h(d,Ms);a=u.h(d,$q);if(x.h(null,e))return b;if(x.h(RD,e)||x.h(EA,e)||x.h(ND,e))return a=DQ(d),x.h(a,eC)?b:De.h(b,n(c)?Ie([c,a]):a);if(x.h(nF,e)||x.h(op,e))return d=DQ(d),Re(d)||(c=n(c)?Ie([c,d]):d,a=n(a)?qh:De,b=a.h?a.h(b,c):a.call(null,b,c)),b;throw Error(["No matching clause: ",p.g(e)].join(""));}
    var FQ=function FQ(a,b){a=RP(a);var d=qg(a),e=u.h(d,LF),f=u.h(d,ct);a=u.h(d,Ms);var g=z(a),l=A(g),m=C(g),q=u.h(d,jo);g=u.h(d,pF);var t=u.h(d,$q),v=u.h(d,lt),y=z(v),E=A(y),J=C(y);y=u.h(d,Em);var W=u.h(d,Zs);if(n(d)){if(x.h(EA,g))return null;if(x.h(null,g))return a=hQ(d,b,d),dQ(a)?null:vQ(a);if(x.h(ND,g))return d=FQ.h?FQ.h(W,b):FQ.call(null,W,b),n(d)?x.h(EA,pF.g(d))?(a=qQ(DQ(d),a,C(e)),dQ(a)?null:vQ(a)):new k(null,5,[pF,ND,Zs,d,Em,y,Ms,a,LF,e],null):null;if(x.h(op,g))return BQ(xQ(new k(null,4,[Ms,we(FQ.h?
    FQ.h(l,b):FQ.call(null,l,b),m),lt,v,LF,e,jo,q],null)),n(CQ(l))?function(){var Z=xQ(new k(null,4,[Ms,m,lt,J,LF,C(e),jo,EQ(l,q,E)],null));return FQ.h?FQ.h(Z,b):FQ.call(null,Z,b)}():null);if(x.h(RD,g))return AQ(ch.h(function(Z){return FQ.h?FQ.h(Z,b):FQ.call(null,Z,b)},a),v,e);if(x.h(nF,g))return BQ(yQ(FQ.h?FQ.h(W,b):FQ.call(null,W,b),f,q,t,e),n(CQ(W))?function(){var Z=yQ(f,f,EQ(W,q,null),t,e);return FQ.h?FQ.h(Z,b):FQ.call(null,Z,b)}():null);throw Error(["No matching clause: ",p.g(g)].join(""));}return null};
    function GQ(a,b){for(;;){var c=z(b),d=A(c);c=C(c);if(Re(b))return n(CQ(a))?(a=DQ(a),x.h(a,eC)?null:a):BB;a=FQ(a,d);if(n(a))b=c;else return BB}}
    var XP=function XP(a,b){if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof cO)cO=function(d,e,f){this.Ce=d;this.sb=e;this.Bh=f;this.C=393216;this.O=0;},cO.prototype.U=function(d,e){return new cO(this.Ce,this.sb,e)},cO.prototype.T=function(){return this.Bh},cO.prototype.Gb=function(){return this},cO.prototype.Hb=function(){return this},cO.prototype.qc=tb,cO.prototype.Xb=function(d,e){return null==e||Ve(e)?GQ(this.Ce,z(e)):BB},cO.prototype.Yb=function(d,
    e){return XP.h?XP.h(this.Ce,e):XP.call(null,this.Ce,e)},cO.Za=!0,cO.Xa="cljs.spec.alpha/t_cljs$spec$alpha15388",cO.ab=function(d){return ad(d,"cljs.spec.alpha/t_cljs$spec$alpha15388")};return new cO(a,b,R)};
    gQ(Yt,P(qz,P(Fl,new S(null,1,5,T,[Np],null),P(QG,P(ym,gC,Np),P(ym,pC,Np))),P(Fl,new S(null,1,5,T,[mm],null),P(ym,P(V,new S(null,1,5,T,[new S(null,2,5,T,[fu,iu],null)],null),new k(null,2,[gC,fu,pC,iu],null)),mm))),bQ(P(qz,P(V,new S(null,1,5,T,[X],null),P(QG,P(ym,gC,X),P(ym,pC,X))),P(V,new S(null,1,5,T,[X],null),P(ym,P(V,new S(null,1,5,T,[new S(null,2,5,T,[fu,iu],null)],null),new k(null,2,[gC,fu,pC,iu],null)),X))),function(a){return Oj(ch.h(gC,a),ch.h(pC,a))},null,!0,function(a){return ch.h(function(b){var c=
    H(b,0,null);b=H(b,1,null);return new k(null,2,[gC,c,pC,b],null)},a)}));
    var HQ=function HQ(a,b,c){var e=new Dk(function(){return cQ.h(b,a)});if("undefined"===typeof qb||"undefined"===typeof BP||"undefined"===typeof CP||"undefined"===typeof DP)DP=function(f,g,l,m,q){this.form=f;this.Rb=g;this.sb=l;this.ae=m;this.Ch=q;this.C=393216;this.O=0;},DP.prototype.U=function(f,g){return new DP(this.form,this.Rb,this.sb,this.ae,g)},DP.prototype.T=function(){return this.Ch},DP.prototype.Gb=function(){return this},DP.prototype.Hb=function(){return this},DP.prototype.qc=tb,DP.prototype.Xb=
    function(f,g){return null==g?null:NP(r(this.ae),g)},DP.prototype.Yb=function(f,g){return HQ.j?HQ.j(this.form,this.Rb,g):HQ.call(null,this.form,this.Rb,g)},DP.Za=!0,DP.Xa="cljs.spec.alpha/t_cljs$spec$alpha15409",DP.ab=function(f){return ad(f,"cljs.spec.alpha/t_cljs$spec$alpha15409")};return new DP(a,b,c,e,R)};gQ(Mw,dD,Nb);gQ(tz,dD,Nb);gQ(pp,En,Df);gQ(fo,IB,Mb);
    gQ(zm,P(qD,Ln,new S(null,3,5,T,[Mw,tz,pp],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[Mw,tz,pp],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,SC)},function(a){return M(a,Cr)},function(a){return M(a,nD)}],null),function(a){return We(a)&&M(a,SC)&&M(a,Cr)&&M(a,nD)},G,new S(null,3,5,T,[Mw,tz,pp],null),null,new S(null,3,5,T,[SC,Cr,nD],null),G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,SC)),
    P(V,new S(null,1,5,T,[X],null),P(pq,X,Cr)),P(V,new S(null,1,5,T,[X],null),P(pq,X,nD))],null),null])));gQ(gD,dD,Nb);
    gQ($y,P(lr,gD,P(qD,Ln,new S(null,2,5,T,[fo,zm],null))),uQ(P(Mx,gD,P(rs,Ln,new S(null,2,5,T,[fo,zm],null))),mQ(new S(null,2,5,T,[gD,P(qD,Ln,new S(null,2,5,T,[fo,zm],null))],null),new S(null,2,5,T,[gD,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[fo,zm],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Iu)},function(a){return M(a,BD)}],null),function(a){return We(a)&&M(a,Iu)&&M(a,BD)},G,new S(null,2,5,T,[fo,zm],null),null,new S(null,2,5,T,[Iu,BD],null),
    G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Iu)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BD))],null),null]))],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,gD,P(qD,Ln,new S(null,2,5,T,[fo,zm],null))),Vz,function(a){return We(a)}],null),null));gQ(vB,dD,Nb);gQ(EC,P(vz,dD),HQ(dD,Nb,null));gQ(jv,kw,gf);gQ(gA,dD,Nb);var IQ,FP=Vg(R),GP=Vg(R),HP=Vg(R),IP=Vg(R),JP=u.j(R,su,Wk.v?Wk.v():Wk.call(null));IQ=new jl(Nd.h("gateway.state.spec.common","address-type"),Yv,JP,FP,GP,HP,IP);gQ(YE,Us,Pb);
    IQ.B(null,sz,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[et,YE],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,Az)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,Az)},G,new S(null,2,5,T,[et,YE],null),null,new S(null,2,5,T,[Yv,Az],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Az))],null),null]))});
    gQ(To,dD,Nb);
    IQ.B(null,Dy,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[et,UB,To],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,om)},function(a){return M(a,Mt)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,om)&&M(a,Mt)},G,new S(null,3,5,T,[et,UB,To],null),null,new S(null,3,5,T,[Yv,om,Mt],null),G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,
    1,5,T,[X],null),P(pq,X,om)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Mt))],null),null]))});IQ.B(null,vD,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[et],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,Yv)}],null),function(a){return We(a)&&M(a,Yv)},G,new S(null,1,5,T,[et],null),null,new S(null,1,5,T,[Yv],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv))],null),null]))});
    IQ.B(null,Mt,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[et,To],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,Mt)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,Mt)},G,new S(null,2,5,T,[et,To],null),null,new S(null,2,5,T,[Yv,Mt],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Mt))],null),null]))});
    IQ.B(null,Tk,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[et],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,Yv)}],null),function(a){return We(a)&&M(a,Yv)},G,new S(null,1,5,T,[et],null),null,new S(null,1,5,T,[Yv],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv))],null),null]))});
    gQ(KE,P(Tx,nn,Yv),kQ(nn,new Od(function(){return IQ},nn,dj([dt,ip,OD,Do,Es,pw,WG,zo,WC,ID],[vw,jt,"gateway/state/spec/common.cljc",23,1,10,10,Ud,null,n(IQ)?IQ.od:null]))));gQ(PA,P(Tx,nn,Yv),kQ(nn,new Od(function(){return IQ},nn,dj([dt,ip,OD,Do,Es,pw,WG,zo,WC,ID],[vw,jt,"gateway/state/spec/common.cljc",23,1,10,10,Ud,null,n(IQ)?IQ.od:null]))));
    gQ(Fw,P(lr,P(Tp,Gq,dD,Ql,FA),Us),uQ(P(Mx,P(hE,Gq,AC,Ql,Ns),NB),mQ(new S(null,2,5,T,[P(Tp,Gq,dD,Ql,FA),Us],null),new S(null,2,5,T,[pQ(new S(null,2,5,T,[Gq,Ql],null),new S(null,2,5,T,[dD,FA],null),new S(null,2,5,T,[Nb,Mf],null),null),Pb],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,P(Tp,Gq,dD,Ql,FA),Us),Vz,function(a){return We(a)}],null),null));gQ(Go,P(Tp,rx,un,Am,dD,vp,uB),pQ(new S(null,3,5,T,[rx,Am,vp],null),new S(null,3,5,T,[un,dD,uB],null),new S(null,3,5,T,[Ib,Nb,Ye],null),null));gQ(LC,P(tq,dD,ky),rQ(new S(null,2,5,T,[dD,ky],null),new S(null,2,5,T,[Nb,z],null),null));gQ(yw,dD,Nb);gQ(nq,P(vz,hv),HQ(hv,We,null));gQ(GD,Go,Go);gQ(lF,Go,Go);
    gQ(Wz,P(tq,FA,P(Fl,new S(null,1,5,T,[tG],null),P(pq,new Hj(null,new k(null,4,[yC,"null",oz,"null",aq,"null",dC,"null"],null),null),tG))),rQ(new S(null,2,5,T,[FA,P(V,new S(null,1,5,T,[X],null),P(pq,new Hj(null,new k(null,4,[yC,"null",oz,"null",aq,"null",dC,"null"],null),null),X))],null),new S(null,2,5,T,[Mf,function(a){return M(new Hj(null,new k(null,4,[yC,null,oz,null,aq,null,dC,null],null),null),a)}],null),null));
    gQ(tD,P(Ky,vB,Wr,Wy),uQ(vB,vB,new k(null,5,[dw,!0,Wr,Te,Qo,Wy,FD,P(Ky,vB,Wr,Wy),Vz,function(a){return Te(a)}],null),null));gQ(Et,vB,vB);gQ(Fn,vB,vB);gQ(qA,ru,Kb);gQ(vq,ru,Kb);
    gQ(oC,P(qD,Ln,new S(null,2,5,T,[qA,vq],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[qA,vq],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,$B)},function(a){return M(a,GA)}],null),function(a){return We(a)&&M(a,$B)&&M(a,GA)},G,new S(null,2,5,T,[qA,vq],null),null,new S(null,2,5,T,[$B,GA],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,$B)),P(V,new S(null,1,5,T,[X],null),P(pq,X,GA))],null),
    null])));
    gQ(vF,P(qD,Ln,new S(null,4,5,T,[LC,Wz,tD,Fn],null),pD,new S(null,6,5,T,[yw,GD,lF,nq,Et,oC],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,4,5,T,[LC,Wz,tD,Fn],null),new S(null,6,5,T,[yw,GD,lF,nq,Et,oC],null),null,new S(null,5,5,T,[function(a){return We(a)},function(a){return M(a,xt)},function(a){return M(a,VF)},function(a){return M(a,aE)},function(a){return M(a,lw)}],null),function(a){return We(a)&&M(a,xt)&&M(a,VF)&&M(a,aE)&&M(a,lw)},new S(null,6,5,T,[ip,aB,ED,Sw,cv,nD],null),new S(null,
    4,5,T,[LC,Wz,tD,Fn],null),null,new S(null,4,5,T,[xt,VF,aE,lw],null),new S(null,6,5,T,[yw,GD,lF,nq,Et,oC],null),new S(null,5,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,xt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,VF)),P(V,new S(null,1,5,T,[X],null),P(pq,X,aE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,lw))],null),null])));
    gQ($t,P(lr,LC,vF),uQ(P(Mx,LC,vF),mQ(new S(null,2,5,T,[LC,vF],null),new S(null,2,5,T,[LC,vF],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,LC,vF),Vz,function(a){return We(a)}],null),null));gQ(TC,kw,gf);gQ(CA,dD,Nb);gQ(WE,P(lr,IB,Us),uQ(P(Mx,tF,NB),mQ(new S(null,2,5,T,[IB,Us],null),new S(null,2,5,T,[Mb,Pb],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,IB,Us),Vz,function(a){return We(a)}],null),null));gQ(Ox,P(lr,IB,Us),uQ(P(Mx,tF,NB),mQ(new S(null,2,5,T,[IB,Us],null),new S(null,2,5,T,[Mb,Pb],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,IB,Us),Vz,function(a){return We(a)}],null),null));
    gQ(PE,P(qD,Ln,new S(null,2,5,T,[TC,CA],null),pD,new S(null,2,5,T,[WE,Ox],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[TC,CA],null),new S(null,2,5,T,[WE,Ox],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,xt)},function(a){return M(a,BA)}],null),function(a){return We(a)&&M(a,xt)&&M(a,BA)},new S(null,2,5,T,[PB,AD],null),new S(null,2,5,T,[TC,CA],null),null,new S(null,2,5,T,[xt,BA],null),new S(null,2,5,T,[WE,Ox],null),new S(null,3,5,T,[P(V,new S(null,
    1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,xt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BA))],null),null])));gQ(Rt,P(lr,CA,PE),uQ(P(Mx,CA,PE),mQ(new S(null,2,5,T,[CA,PE],null),new S(null,2,5,T,[CA,PE],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,CA,PE),Vz,function(a){return We(a)}],null),null));gQ(Xv,dD,Nb);gQ(Nz,Xv,Xv);gQ(vx,P(lr,IB,IB),uQ(P(Mx,tF,tF),mQ(new S(null,2,5,T,[IB,IB],null),new S(null,2,5,T,[Mb,Mb],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,IB,IB),Vz,function(a){return We(a)}],null),null));
    gQ(sy,P(qD,Ln,new S(null,1,5,T,[Xv],null),pD,new S(null,2,5,T,[Nz,vx],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[Xv],null),new S(null,2,5,T,[Nz,vx],null),null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,Yv)}],null),function(a){return We(a)&&M(a,Yv)},new S(null,2,5,T,[ip,PB],null),new S(null,1,5,T,[Xv],null),null,new S(null,1,5,T,[Yv],null),new S(null,2,5,T,[Nz,vx],null),new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,
    [X],null),P(pq,X,Yv))],null),null])));gQ(Yo,sy,sy);gQ(eu,P(Ky,sy,Wr,uB),uQ(sy,sy,new k(null,5,[dw,!0,Wr,Ye,Qo,uB,FD,P(Ky,sy,Wr,uB),Vz,function(a){return Ye(a)}],null),null));gQ(yy,P(lr,IB,IB),uQ(P(Mx,tF,tF),mQ(new S(null,2,5,T,[IB,IB],null),new S(null,2,5,T,[Mb,Mb],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,IB,IB),Vz,function(a){return We(a)}],null),null));gQ(cD,Go,Go);
    gQ(EG,P(qD,Ln,new S(null,2,5,T,[Nz,Yo],null),pD,new S(null,3,5,T,[eu,yy,cD],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[Nz,Yo],null),new S(null,3,5,T,[eu,yy,cD],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,ip)},function(a){return M(a,ry)}],null),function(a){return We(a)&&M(a,ip)&&M(a,ry)},new S(null,3,5,T,[yE,Qv,Dr],null),new S(null,2,5,T,[Nz,Yo],null),null,new S(null,2,5,T,[ip,ry],null),new S(null,3,5,T,[eu,yy,cD],null),new S(null,3,5,T,
    [P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ip)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ry))],null),null])));gQ(Lw,dD,Nb);
    gQ(uo,P(lr,Lw,P(lr,Xv,EG)),uQ(P(Mx,Lw,P(lp,Xv,EG)),mQ(new S(null,2,5,T,[Lw,P(lr,Xv,EG)],null),new S(null,2,5,T,[Lw,uQ(P(Mx,Xv,EG),mQ(new S(null,2,5,T,[Xv,EG],null),new S(null,2,5,T,[Xv,EG],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,Xv,EG),Vz,function(a){return We(a)}],null),null)],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,Lw,P(lr,Xv,EG)),Vz,function(a){return We(a)}],null),null));gQ(BG,dD,Nb);gQ(rn,LC,LC);
    gQ(dB,vB,vB);gQ(LG,vB,vB);gQ(tt,P(Ky,vB,Wr,Wy),uQ(vB,vB,new k(null,5,[dw,!0,Wr,Te,Qo,Wy,FD,P(Ky,vB,Wr,Wy),Vz,function(a){return Te(a)}],null),null));gQ(nA,P(Ky,vB,Wr,Wy),uQ(vB,vB,new k(null,5,[dw,!0,Wr,Te,Qo,Wy,FD,P(Ky,vB,Wr,Wy),Vz,function(a){return Te(a)}],null),null));gQ(um,vF,vF);
    gQ(jC,P(qD,Ln,new S(null,3,5,T,[Xv,um,LG],null),pD,new S(null,3,5,T,[nA,Yy,cm],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[Xv,um,LG],null),new S(null,3,5,T,[nA,Yy,cm],null),null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,Rp)},function(a){return M(a,cv)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,Rp)&&M(a,cv)},new S(null,3,5,T,[Hp,Wn,zC],null),new S(null,3,5,T,[Xv,um,LG],null),null,new S(null,3,5,T,[Yv,Rp,cv],null),new S(null,
    3,5,T,[nA,Yy,cm],null),new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Rp)),P(V,new S(null,1,5,T,[X],null),P(pq,X,cv))],null),null])));gQ(cm,P(lr,BG,jC),uQ(P(Mx,BG,jC),mQ(new S(null,2,5,T,[BG,jC],null),new S(null,2,5,T,[BG,jC],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,BG,jC),Vz,function(a){return We(a)}],null),null));gQ(iE,BG,BG);gQ(Vv,Zw,cf);
    gQ(SD,P(qD,Ln,new S(null,4,5,T,[BG,Xv,Os,dB],null),pD,new S(null,5,5,T,[Vv,LG,nA,tt,cm],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,4,5,T,[BG,Xv,Os,dB],null),new S(null,5,5,T,[Vv,LG,nA,tt,cm],null),null,new S(null,5,5,T,[function(a){return We(a)},function(a){return M(a,xt)},function(a){return M(a,Yv)},function(a){return M(a,fz)},function(a){return M(a,mp)}],null),function(a){return We(a)&&M(a,xt)&&M(a,Yv)&&M(a,fz)&&M(a,mp)},new S(null,5,5,T,[My,cv,Hp,Bn,zC],null),new S(null,4,5,
    T,[BG,Xv,Os,dB],null),null,new S(null,4,5,T,[xt,Yv,fz,mp],null),new S(null,5,5,T,[Vv,LG,nA,tt,cm],null),new S(null,5,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,xt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fz)),P(V,new S(null,1,5,T,[X],null),P(pq,X,mp))],null),null])));
    gQ(Ey,P(lr,BG,SD),uQ(P(Mx,BG,SD),mQ(new S(null,2,5,T,[BG,SD],null),new S(null,2,5,T,[BG,SD],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,BG,SD),Vz,function(a){return We(a)}],null),null));
    gQ(Dn,P(qD,pD,new S(null,1,5,T,[Rt],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,new S(null,1,5,T,[Rt],null),null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},new S(null,1,5,T,[ux],null),G,null,G,new S(null,1,5,T,[Rt],null),new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null])));
    gQ(Oy,P(lr,P(Tp,Yv,Xv,Pm,P(Kp,qG,Pm)),P(Ky,vB,Wr,Wy)),uQ(P(Mx,P(hE,Yv,Xv,Pm,P(Ou,lu,Pm)),P(Fm,vB,Wr,yx)),mQ(new S(null,2,5,T,[P(Tp,Yv,Xv,Pm,P(Kp,qG,Pm)),P(Ky,vB,Wr,Wy)],null),new S(null,2,5,T,[pQ(new S(null,2,5,T,[Yv,Pm],null),new S(null,2,5,T,[Xv,P(Kp,qG,Pm)],null),new S(null,2,5,T,[Xv,Qg(x,Pm)],null),null),uQ(vB,vB,new k(null,5,[dw,!0,Wr,Te,Qo,Wy,FD,P(Ky,vB,Wr,Wy),Vz,function(a){return Te(a)}],null),null)],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,P(Tp,
    Yv,Xv,Pm,P(Kp,qG,Pm)),P(Ky,vB,Wr,Wy)),Vz,function(a){return We(a)}],null),null));gQ(as,kw,gf);gQ(yF,dD,Nb);gQ(ro,kw,gf);gQ(ix,dD,Nb);gQ(gE,dD,Nb);gQ(CB,dD,Nb);gQ(wp,dD,Nb);
    gQ(Dx,P(qD,Ln,new S(null,6,5,T,[as,yF,ro,Xs,ix,gE],null),pD,new S(null,3,5,T,[CB,wp,Go],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,6,5,T,[as,yF,ro,Xs,ix,gE],null),new S(null,3,5,T,[CB,wp,Go],null),null,new S(null,7,5,T,[function(a){return We(a)},function(a){return M(a,xt)},function(a){return M(a,ip)},function(a){return M(a,nD)},function(a){return M(a,AD)},function(a){return M(a,Tt)},function(a){return M(a,Hq)}],null),function(a){return We(a)&&M(a,xt)&&M(a,ip)&&M(a,nD)&&M(a,AD)&&
    M(a,Tt)&&M(a,Hq)},new S(null,3,5,T,[$x,Cr,Sp],null),new S(null,6,5,T,[as,yF,ro,Xs,ix,gE],null),null,new S(null,6,5,T,[xt,ip,nD,AD,Tt,Hq],null),new S(null,3,5,T,[CB,wp,Go],null),new S(null,7,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,xt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ip)),P(V,new S(null,1,5,T,[X],null),P(pq,X,nD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,AD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Hq))],null),null])));
    gQ(hq,P(Tp,Zr,Zn,hF,P(lr,as,Dx)),pQ(new S(null,2,5,T,[Zr,hF],null),new S(null,2,5,T,[Zn,P(lr,as,Dx)],null),new S(null,2,5,T,[Re,uQ(P(Mx,as,Dx),mQ(new S(null,2,5,T,[as,Dx],null),new S(null,2,5,T,[as,Dx],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,as,Dx),Vz,function(a){return We(a)}],null),null)],null),null));
    gQ(LA,P(lr,vB,hq),uQ(P(Mx,vB,hq),mQ(new S(null,2,5,T,[vB,hq],null),new S(null,2,5,T,[vB,hq],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,vB,hq),Vz,function(a){return We(a)}],null),null));gQ(sv,as,as);gQ($m,EC,EC);gQ(yz,EC,EC);gQ(mD,EC,EC);gQ(by,vB,vB);
    gQ(rr,P(qD,Ln,new S(null,3,5,T,[by,sv,$m],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[by,sv,$m],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,fn)},function(a){return M(a,fp)},function(a){return M(a,vv)}],null),function(a){return We(a)&&M(a,fn)&&M(a,fp)&&M(a,vv)},G,new S(null,3,5,T,[by,sv,$m],null),null,new S(null,3,5,T,[fn,fp,vv],null),G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fn)),
    P(V,new S(null,1,5,T,[X],null),P(pq,X,fp)),P(V,new S(null,1,5,T,[X],null),P(pq,X,vv))],null),null])));gQ(Bt,P(lr,mD,rr),uQ(P(Mx,mD,rr),mQ(new S(null,2,5,T,[mD,rr],null),new S(null,2,5,T,[mD,rr],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,mD,rr),Vz,function(a){return We(a)}],null),null));gQ(Yx,vB,vB);
    gQ(pG,P(qD,Ln,new S(null,3,5,T,[Yx,sv,mD],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[Yx,sv,mD],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,mn)},function(a){return M(a,fp)},function(a){return M(a,fD)}],null),function(a){return We(a)&&M(a,mn)&&M(a,fp)&&M(a,fD)},G,new S(null,3,5,T,[Yx,sv,mD],null),null,new S(null,3,5,T,[mn,fp,fD],null),G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,mn)),
    P(V,new S(null,1,5,T,[X],null),P(pq,X,fp)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fD))],null),null])));gQ(iG,P(lr,$m,pG),uQ(P(Mx,$m,pG),mQ(new S(null,2,5,T,[$m,pG],null),new S(null,2,5,T,[$m,pG],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,$m,pG),Vz,function(a){return We(a)}],null),null));gQ(km,dD,Nb);gQ(mE,km,km);gQ(kA,vB,vB);
    gQ(Ww,P(qD,Ln,new S(null,3,5,T,[kA,sv,mD],null),pD,new S(null,1,5,T,[mE],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[kA,sv,mD],null),new S(null,1,5,T,[mE],null),null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,bC)},function(a){return M(a,fp)},function(a){return M(a,fD)}],null),function(a){return We(a)&&M(a,bC)&&M(a,fp)&&M(a,fD)},new S(null,1,5,T,[wC],null),new S(null,3,5,T,[kA,sv,mD],null),null,new S(null,3,5,T,[bC,fp,fD],null),new S(null,1,5,T,[mE],
    null),new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,bC)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fp)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fD))],null),null])));gQ(Sz,P(lr,yz,Ww),uQ(P(Mx,yz,Ww),mQ(new S(null,2,5,T,[yz,Ww],null),new S(null,2,5,T,[yz,Ww],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,yz,Ww),Vz,function(a){return We(a)}],null),null));gQ(bD,vB,vB);
    gQ(Ar,P(qD,qr,new S(null,2,5,T,[bD,as],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,null,null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},G,G,null,G,G,new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null])));gQ(Xx,P(lr,yz,Ar),uQ(P(Mx,yz,Ar),mQ(new S(null,2,5,T,[yz,Ar],null),new S(null,2,5,T,[yz,Ar],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,yz,Ar),Vz,function(a){return We(a)}],null),null));
    gQ(Yp,P(lr,vB,P(Ky,yz,Wr,Wy)),uQ(P(Mx,vB,P(Fm,yz,Wr,yx)),mQ(new S(null,2,5,T,[vB,P(Ky,yz,Wr,Wy)],null),new S(null,2,5,T,[vB,uQ(yz,yz,new k(null,5,[dw,!0,Wr,Te,Qo,Wy,FD,P(Ky,yz,Wr,Wy),Vz,function(a){return Te(a)}],null),null)],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,vB,P(Ky,yz,Wr,Wy)),Vz,function(a){return We(a)}],null),null));
    gQ(xD,P(lr,km,Yp),uQ(P(Mx,km,Yp),mQ(new S(null,2,5,T,[km,Yp],null),new S(null,2,5,T,[km,Yp],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,km,Yp),Vz,function(a){return We(a)}],null),null));
    gQ(aG,P(qD,pD,new S(null,7,5,T,[Go,LA,Bt,iG,Sz,Xx,xD],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,new S(null,7,5,T,[Go,LA,Bt,iG,Sz,Xx,xD],null),null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},new S(null,7,5,T,[Sp,rw,gy,Xp,Ry,Ho,Uz],null),G,null,G,new S(null,7,5,T,[Go,LA,Bt,iG,Sz,Xx,xD],null),new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null])));gQ(Nw,EC,EC);gQ(Bp,dD,Nb);gQ(mG,Us,Pb);
    gQ(Ow,P(qD,Ln,new S(null,1,5,T,[Bp],null),pD,new S(null,2,5,T,[mG,tC],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[Bp],null),new S(null,2,5,T,[mG,tC],null),null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,YD)}],null),function(a){return We(a)&&M(a,YD)},new S(null,2,5,T,[Ip,zn],null),new S(null,1,5,T,[Bp],null),null,new S(null,1,5,T,[YD],null),new S(null,2,5,T,[mG,tC],null),new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,
    [X],null),P(pq,X,YD))],null),null])));gQ(Qz,P(lr,Nw,Ow),uQ(P(Mx,Nw,Ow),mQ(new S(null,2,5,T,[Nw,Ow],null),new S(null,2,5,T,[Nw,Ow],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,Nw,Ow),Vz,function(a){return We(a)}],null),null));
    gQ(GF,P(qD,pD,new S(null,1,5,T,[Qz],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,new S(null,1,5,T,[Qz],null),null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},new S(null,1,5,T,[Ry],null),G,null,G,new S(null,1,5,T,[Qz],null),new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null])));gQ(xq,dD,Nb);gQ(uu,kw,gf);gQ(Hn,vB,vB);gQ(jr,EC,EC);
    gQ(mr,P(qD,Ln,new S(null,2,5,T,[Hn,jr],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[Hn,jr],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,uD)},function(a){return M(a,$w)}],null),function(a){return We(a)&&M(a,uD)&&M(a,$w)},G,new S(null,2,5,T,[Hn,jr],null),null,new S(null,2,5,T,[uD,$w],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,uD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,$w))],null),
    null])));gQ(dr,EC,EC);gQ(qE,dD,Nb);gQ(WA,Zw,cf);gQ(sA,P(qD,qr,new S(null,2,5,T,[qE,WA],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,null,null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},G,G,null,G,G,new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null])));gQ(dF,xq,xq);gQ(jB,new Hj(null,new k(null,2,[tn,"null",oz,"null"],null),null),new Hj(null,new k(null,2,[tn,null,oz,null],null),null));
    gQ(pu,P(qD,Ln,new S(null,2,5,T,[qE,jB],null),pD,new S(null,3,5,T,[oq,sA,CA],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[qE,jB],null),new S(null,3,5,T,[oq,sA,CA],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,xt)},function(a){return M(a,Yv)}],null),function(a){return We(a)&&M(a,xt)&&M(a,Yv)},new S(null,3,5,T,[bx,oz,BA],null),new S(null,2,5,T,[qE,jB],null),null,new S(null,2,5,T,[xt,Yv],null),new S(null,3,5,T,[oq,sA,CA],null),new S(null,3,5,T,
    [P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,xt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv))],null),null])));gQ(bs,P(lr,dr,pu),uQ(P(Mx,dr,pu),mQ(new S(null,2,5,T,[dr,pu],null),new S(null,2,5,T,[dr,pu],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,dr,pu),Vz,function(a){return We(a)}],null),null));gQ(yr,kw,gf);gQ(uw,pu,pu);
    gQ(Xu,P(qD,Ln,new S(null,2,5,T,[PA,Fw],null),pD,new S(null,6,5,T,[xm,aG,Dn,GF,uw,CA],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[PA,Fw],null),new S(null,6,5,T,[xm,aG,Dn,GF,uw,CA],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,mt)},function(a){return M(a,fA)}],null),function(a){return We(a)&&M(a,mt)&&M(a,fA)},new S(null,6,5,T,[hu,OF,Mr,FF,ew,BA],null),new S(null,2,5,T,[PA,Fw],null),null,new S(null,2,5,T,[mt,fA],null),new S(null,6,5,T,[xm,aG,
    Dn,GF,uw,CA],null),new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,mt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fA))],null),null])));gQ(Cw,P(lr,vB,Xu),uQ(P(Mx,vB,Xu),mQ(new S(null,2,5,T,[vB,Xu],null),new S(null,2,5,T,[vB,Xu],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,vB,Xu),Vz,function(a){return We(a)}],null),null));
    gQ(nz,P(lr,P(Tp,Ty,dD,Rr,new Hj(null,new k(null,1,[Cv,"null"],null),null)),P(Ky,vB)),uQ(P(Mx,P(hE,Ty,AC,Rr,new Hj(null,new k(null,1,[Cv,"null"],null),null)),P(Fm,vB)),mQ(new S(null,2,5,T,[P(Tp,Ty,dD,Rr,new Hj(null,new k(null,1,[Cv,"null"],null),null)),P(Ky,vB)],null),new S(null,2,5,T,[pQ(new S(null,2,5,T,[Ty,Rr],null),new S(null,2,5,T,[dD,new Hj(null,new k(null,1,[Cv,"null"],null),null)],null),new S(null,2,5,T,[Nb,new Hj(null,new k(null,1,[Cv,null],null),null)],null),null),uQ(vB,vB,new k(null,4,[dw,
    !0,Qo,null,FD,P(Ky,vB),Vz,function(a){return Se(a)}],null),null)],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,P(Tp,Ty,dD,Rr,new Hj(null,new k(null,1,[Cv,"null"],null),null)),P(Ky,vB)),Vz,function(a){return We(a)}],null),null));gQ(bG,P(Ky,vB),uQ(vB,vB,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,vB),Vz,function(a){return Se(a)}],null),null));gQ(jA,$t,$t);gQ(sm,uo,uo);gQ(kz,Oy,Oy);
    gQ(zB,P(lr,Fw,vB),uQ(P(Mx,Fw,vB),mQ(new S(null,2,5,T,[Fw,vB],null),new S(null,2,5,T,[Fw,vB],null)),new k(null,7,[dn,function(a,b){return qe(b,0)},mF,R,dw,!0,Wr,We,Qo,hv,FD,P(lr,Fw,vB),Vz,function(a){return We(a)}],null),null));gQ(As,Us,Pb);gQ(hw,dD,Nb);gQ(iB,En,Df);
    gQ(Gy,P(qD,Ln,new S(null,2,5,T,[hw,iB],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[hw,iB],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,ww)},function(a){return M(a,kv)}],null),function(a){return We(a)&&M(a,ww)&&M(a,kv)},G,new S(null,2,5,T,[hw,iB],null),null,new S(null,2,5,T,[ww,kv],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ww)),P(V,new S(null,1,5,T,[X],null),P(pq,X,kv))],null),
    null])));gQ(TD,dD,Nb);
    gQ(wo,P(qD,Ln,new S(null,2,5,T,[Gy,TD],null),pD,new S(null,11,5,T,[As,$y,Cw,nz,bG,zB,jA,bs,Ey,sm,kz],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[Gy,TD],null),new S(null,11,5,T,[As,$y,Cw,nz,bG,zB,jA,bs,Ey,sm,kz],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Cq)},function(a){return M(a,so)}],null),function(a){return We(a)&&M(a,Cq)&&M(a,so)},new S(null,11,5,T,[Ov,aF,GG,JB,Up,Pu,jD,xn,Wo,Pz,Lu],null),new S(null,2,5,T,[Gy,TD],null),null,new S(null,
    2,5,T,[Cq,so],null),new S(null,11,5,T,[As,$y,Cw,nz,bG,zB,jA,bs,Ey,sm,kz],null),new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Cq)),P(V,new S(null,1,5,T,[X],null),P(pq,X,so))],null),null])));gQ(Vn,dD,Nb);gQ(iF,FA,Mf);var OQ,KP=Vg(R),LP=Vg(R),MP=Vg(R),aQ=Vg(R),JQ=u.j(R,su,Wk.v?Wk.v():Wk.call(null));OQ=new jl(Nd.h("gateway.common.spec.messages","message-body"),Yv,JQ,KP,LP,MP,aQ);gQ(dp,dD,Nb);gQ(hx,dD,Nb);gQ(Br,P(vz,vB),HQ(vB,vB,null));
    gQ(UG,P(qD,Ln,new S(null,2,5,T,[Vn,iF],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[Vn,iF],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Iu)},function(a){return M(a,Yv)}],null),function(a){return We(a)&&M(a,Iu)&&M(a,Yv)},G,new S(null,2,5,T,[Vn,iF],null),null,new S(null,2,5,T,[Iu,Yv],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Iu)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv))],null),
    null])));
    gQ(Vx,P(qD,Ln,new S(null,2,5,T,[EC,vB],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[EC,vB],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,fD)},function(a){return M(a,zG)}],null),function(a){return We(a)&&M(a,fD)&&M(a,zG)},G,new S(null,2,5,T,[EC,vB],null),null,new S(null,2,5,T,[fD,zG],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zG))],null),
    null])));gQ(eB,P(qD,Ln,new S(null,1,5,T,[vB],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[vB],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,zG)}],null),function(a){return We(a)&&M(a,zG)},G,new S(null,1,5,T,[vB],null),null,new S(null,1,5,T,[zG],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zG))],null),null])));
    gQ(Vo,P(jz,UG,eB),sQ(new S(null,2,5,T,[UG,eB],null),new S(null,2,5,T,[UG,eB],null),null));
    gQ(Rl,P(jz,UG,eB,P(qD,Ln,new S(null,1,5,T,[EC],null))),sQ(new S(null,3,5,T,[UG,eB,P(qD,Ln,new S(null,1,5,T,[EC],null))],null),new S(null,3,5,T,[UG,eB,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[EC],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,fD)}],null),function(a){return We(a)&&M(a,fD)},G,new S(null,1,5,T,[EC],null),null,new S(null,1,5,T,[fD],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),
    P(pq,X,fD))],null),null]))],null),null));
    OQ.B(null,Px,function(){return sQ(new S(null,2,5,T,[UG,P(qD,Ln,new S(null,2,5,T,[dp,hx],null),pD,new S(null,1,5,T,[Br],null))],null),new S(null,2,5,T,[UG,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[dp,hx],null),new S(null,1,5,T,[Br],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,BE)&&M(a,Tn)},new S(null,1,5,T,[zG],null),new S(null,2,5,T,[dp,hx],null),null,new S(null,2,5,T,[BE,Tn],
    null),new S(null,1,5,T,[Br],null),new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null]))],null),null)});
    OQ.B(null,vC,function(){return sQ(new S(null,2,5,T,[UG,P(qD,pD,new S(null,1,5,T,[Br],null))],null),new S(null,2,5,T,[UG,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,new S(null,1,5,T,[Br],null),null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},new S(null,1,5,T,[zG],null),G,null,G,new S(null,1,5,T,[Br],null),new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null]))],null),null)});
    gQ(tr,P(Tx,KF,Yv),kQ(KF,new Od(function(){return OQ},KF,dj([dt,ip,OD,Do,Es,pw,WG,zo,WC,ID],[Qn,tv,"gateway/common/spec/messages.cljc",23,1,8,8,Ud,null,n(OQ)?OQ.od:null]))));gQ(Ep,KE,KE);
    gQ(QE,P(qD,Ln,new S(null,2,5,T,[PA,tr],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[PA,tr],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,mt)},function(a){return M(a,bp)}],null),function(a){return We(a)&&M(a,mt)&&M(a,bp)},G,new S(null,2,5,T,[PA,tr],null),null,new S(null,2,5,T,[mt,bp],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,mt)),P(V,new S(null,1,5,T,[X],null),P(pq,X,bp))],null),
    null])));
    gQ(pE,P(qD,Ln,new S(null,2,5,T,[Ep,tr],null),pD,new S(null,1,5,T,[PA],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[Ep,tr],null),new S(null,1,5,T,[PA],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,FB)},function(a){return M(a,bp)}],null),function(a){return We(a)&&M(a,FB)&&M(a,bp)},new S(null,1,5,T,[mt],null),new S(null,2,5,T,[Ep,tr],null),null,new S(null,2,5,T,[FB,bp],null),new S(null,1,5,T,[PA],null),new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],
    null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,FB)),P(V,new S(null,1,5,T,[X],null),P(pq,X,bp))],null),null])));gQ(Io,P(vz,P(Ky,pE)),HQ(P(Ky,pE),uQ(pE,pE,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,pE),Vz,function(a){return Se(a)}],null),null),null));gQ(ZE,Zw,cf);
    gQ(Gv,P(qD,Ln,new S(null,1,5,T,[ZE],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[ZE],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,sz)}],null),function(a){return We(a)&&M(a,sz)},G,new S(null,1,5,T,[ZE],null),null,new S(null,1,5,T,[sz],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,sz))],null),null])));
    OQ.B(null,xG,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[pz,Fw,Gv],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[pz,Fw,Gv],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,Sr)},function(a){return M(a,fA)},function(a){return M(a,kb)}],null),function(a){return We(a)&&M(a,Sr)&&M(a,fA)&&M(a,kb)},G,new S(null,3,5,T,[pz,Fw,Gv],null),null,new S(null,3,5,T,[Sr,fA,kb],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sr)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fA)),P(V,new S(null,1,5,T,[X],null),P(pq,X,kb))],null),null]))],null),null)});gQ(hC,vB,vB);
    OQ.B(null,mx,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[hC,dp,hx],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[hC,dp,hx],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,Ew)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,Ew)&&M(a,BE)&&M(a,Tn)},G,new S(null,3,5,T,[hC,dp,hx],null),null,new S(null,3,5,T,[Ew,BE,Tn],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Ew)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null]))],null),null)});gQ(Ju,P(vz,P(Mx,P(vz,wo),P(vz,P(Ky,pE)))),HQ(P(Mx,P(vz,wo),P(vz,P(Ky,pE))),mQ(new S(null,2,5,T,[P(vz,wo),P(vz,P(Ky,pE))],null),new S(null,2,5,T,[HQ(wo,wo,null),HQ(P(Ky,pE),uQ(pE,pE,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,pE),Vz,function(a){return Se(a)}],null),null),null)],null)),null));function UQ(a){if(null!=a&&null!=a.cd)a=a.cd(a);else {var b=UQ[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=UQ._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("Domain.info",a);}return a}
    function VQ(a,b){if(null!=a&&null!=a.dd)a=a.dd(a,b);else {var c=VQ[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=VQ._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Domain.init",a);}return a}function WQ(a,b){if(null!=a&&null!=a.ad)a=a.ad(a,b);else {var c=WQ[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=WQ._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Domain.destroy",a);}return a}
    function XQ(a,b,c){if(null!=a&&null!=a.bd)a=a.bd(a,b,c);else {var d=XQ[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=XQ._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("Domain.handle-message",a);}return a}function YQ(a,b,c,d,e,f,g){this.id=a;this.dc=b;this.source=c;this.options=d;this.F=e;this.m=f;this.G=g;this.C=2230716170;this.O=139264;}h=YQ.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "id":return this.id;case "identity":return this.dc;case "source":return this.source;case "options":return this.options;default:return u.j(this.m,b,c)}};
    h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#gateway.state.peers.Peer{",", ","}",c,cg.h(new S(null,4,5,T,[new S(null,2,5,T,[xt,this.id],null),new S(null,2,5,T,[fA,this.dc],null),new S(null,2,5,T,[mt,this.source],null),new S(null,2,5,T,[hu,this.options],null)],null),this.m))};
    h.Aa=function(){return new ni(this,4,new S(null,4,5,T,[xt,fA,mt,hu],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 4+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=802532213^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.id,b.id)&&x.h(this.dc,b.dc)&&x.h(this.source,b.source)&&x.h(this.options,b.options)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,4,[fA,null,mt,null,xt,null,hu,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new YQ(this.id,this.dc,this.source,this.options,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "id":case "identity":case "source":case "options":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(xt,b):Nf.call(null,xt,b))?new YQ(c,this.dc,this.source,this.options,this.F,this.m,null):n(Nf.h?Nf.h(fA,b):Nf.call(null,fA,b))?new YQ(this.id,c,this.source,this.options,this.F,this.m,null):n(Nf.h?Nf.h(mt,b):Nf.call(null,mt,b))?new YQ(this.id,this.dc,c,this.options,this.F,this.m,null):n(Nf.h?Nf.h(hu,b):Nf.call(null,hu,b))?new YQ(this.id,this.dc,this.source,c,this.F,this.m,null):new YQ(this.id,this.dc,this.source,this.options,this.F,He.j(this.m,b,c),null)};
    h.ea=function(){return z(cg.h(new S(null,4,5,T,[new Nh(xt,this.id),new Nh(fA,this.dc),new Nh(mt,this.source),new Nh(hu,this.options)],null),this.m))};h.U=function(a,b){return new YQ(this.id,this.dc,this.source,this.options,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    var ZQ=function ZQ(a){switch(arguments.length){case 2:return ZQ.h(arguments[0],arguments[1]);case 3:return ZQ.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};ZQ.h=function(a,b){return n(b)?th.h(a,new S(null,2,5,T,[GG,b],null)):null};ZQ.j=function(a,b,c){a=ZQ.h(a,b);return n(u.h(a,c))?a:null};ZQ.I=3;
    function $Q(a,b){if(null==b)throw ol("Peer id is missing",R);a=ZQ.h(a,b);if(n(a))return a;throw ol(["Unable to find peer with id ",p.g(b)].join(""),R);}function aR(a,b,c){if(null==b)throw ol("Peer id is missing",R);a=ZQ.j(a,b,c);if(n(a))return a;throw ol(["Unable to find peer with id ",p.g(b)," in domain ",p.g(c)].join(""),R);}function bR(a){return x.h(sz,th.h(a,new S(null,2,5,T,[mt,Yv],null)))}function cR(a,b){return Jk(F([ch.g(Qg(ZQ,a)),th.h(a,new S(null,2,5,T,[VB,b],null))]))}
    function dR(a,b){var c=Yv.g(b);switch(c instanceof w?c.X:null){case "node":return x.h(Mt.g(b),Mt.g(a));case "peer":return x.h(Mt.g(b),Mt.g(a))&&x.h(om.g(b),om.g(a));case "local":return x.h(Az.g(b),Az.g(a));default:return !1}}function eR(a,b){return Jk(F([Pg.h(ch.g(Xh),mh.g(function(c){return dR(mt.g(c),b)})),GG.g(a)]))}function fR(a,b,c){return Jk(F([mh.g(function(d){return dR(mt.g(d),b)}),cR(a,c)]))}
    function gR(a,b,c,d,e,f){var g=ZQ.h(a,c);if(n(g)){var l=g;return new S(null,2,5,T,[a,l],null)}l=function(){var q=new YQ(c,d,b,f,null,null,null);return n(e)?He.j(q,ew,e):q}();var m=Kr.h(d,Cv);g=function(){var q=uh(vh.D(uh(a,new S(null,2,5,T,[Pu,d],null),c),new S(null,2,5,T,[JB,m],null),Tg(De,Jj),c),new S(null,2,5,T,[GG,c],null),l);return n(np.g(f))?xh(q,Up,Tg(De,Jj),c):q}();return new S(null,2,5,T,[g,l],null)}
    function hR(a,b){var c=fA.g(b),d=xt.g(b),e=Kr.h(c,Cv);return xh(xh(wh(xh(a,Pu,Je,c),JB,function(f){var g=Qe.h(u.h(f,e),d);return z(g)?He.j(f,e,g):Je.h(f,e)}),GG,Je,d),Up,Tg(Qe,Jj),d)}function iR(a,b,c){return uh(a,new S(null,2,5,T,[GG,b],null),c)}function jR(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return og(vh,arguments[0],new S(null,2,5,T,[GG,arguments[1]],null),arguments[2],3<b.length?new Rd(b.slice(3),0,null):null)}
    var kR=function kR(a){switch(arguments.length){case 6:return kR.ga(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 3:return kR.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};kR.ga=function(a,b,c,d,e,f){if(null==b&&null==e)return d=Kr.g(d),a=Kr.g(a),n(f)?f:n(c)?c:x.h(d,a);c=AP(b,a,d);return n(c)?AP(e,d,a):c};
    kR.j=function(a,b,c){var d=fA.g(b),e=th.h(b,new S(null,2,5,T,[a,Sp],null)),f=th.h(b,new S(null,2,5,T,[hu,np],null)),g=fA.g(c);a=th.h(c,new S(null,2,5,T,[a,Sp],null));var l=th.h(c,new S(null,2,5,T,[hu,np],null));return (b=sg.h(xt.g(c),xt.g(b)))?kR.ga(d,e,f,g,a,l):b};kR.I=6;function lR(a,b,c,d){return Jk(F([mh.g(function(e){var f=kR.j(b,c,e);return n(f)?f:n(d)?x.h(xt.g(e),xt.g(c)):d}),cg.h(cR(a,b),ch.h(Qg(ZQ,a),Up.g(a)))]))}
    function mR(a,b,c,d){if(n(th.h(c,new S(null,2,5,T,[hu,np],null))))return lR(a,b,c,d);var e=th.h(c,new S(null,2,5,T,[fA,Kr],null));return n(e)?Jk(F([Pg.h(ch.g(Qg(ZQ,a)),mh.g(function(f){var g=u.h(f,b);g=n(g)?kR.j(b,c,f):g;return n(g)?g:n(d)?x.h(xt.g(f),xt.g(c)):d})),cg.h(th.h(a,new S(null,2,5,T,[JB,e],null)),Up.g(a))])):lR(a,b,c,d)}
    function nR(a,b,c,d,e){return $b.j(function(f,g){var l=fA.g(g),m=xt.g(g),q=xt.g(e),t=bR(e);f=t?De.h(f,SI.ga(a,d,q,m,l,new k(null,1,[sz,t],null))):f;return bR(g)?De.h(f,SI.ga(a,mt.g(g),m,q,fA.g(e),new k(null,1,[sz,t],null))):f},G,mR(c,b,e,!1))}function oR(a,b,c,d,e,f){var g=xt.g(d);return new S(null,2,5,T,[HI(c,g,b),$b.j(function(l,m){l=De.h(l,TI.R(a,mt.g(m),xt.g(m),g,e));return Lb(f)?De.h(l,TI.R(a,mt.g(d),g,xt.g(m),e)):l},G,mR(c,b,d,!1))],null)}var KQ={Df:["BC","AD"],sf:["Before Christ","Anno Domini"],Of:"JFMAMJJASOND".split(""),og:"JFMAMJJASOND".split(""),Mf:"January February March April May June July August September October November December".split(" "),ng:"January February March April May June July August September October November December".split(" "),Qf:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),rg:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),ug:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
    tg:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Zf:"Sun Mon Tue Wed Thu Fri Sat".split(" "),sg:"Sun Mon Tue Wed Thu Fri Sat".split(" "),ji:"SMTWTFS".split(""),qg:"SMTWTFS".split(""),Xf:["Q1","Q2","Q3","Q4"],Pf:["1st quarter","2nd quarter","3rd quarter","4th quarter"],cf:["AM","PM"],be:["EEEE, MMMM d, y","MMMM d, y","MMM d, y","M/d/yy"],He:["h:mm:ss a zzzz","h:mm:ss a z","h:mm:ss a","h:mm a"],ef:["{1} 'at' {0}","{1} 'at' {0}","{1}, {0}","{1}, {0}"],ce:6,Ci:[5,6],pe:5},LQ=KQ;
    LQ=KQ;function MQ(a,b,c,d,e){a=new Date(a,b,c);e=e||0;return a.valueOf()+864E5*(((void 0!==d?d:3)-e+7)%7-((a.getDay()+6)%7-e+7)%7)}function NQ(){}
    function PQ(a){if("number"==typeof a){var b=new NQ;b.wd=a;var c=a;if(0==c)c="Etc/GMT";else {var d=["Etc/GMT",0>c?"-":"+"];c=Math.abs(c);d.push(Math.floor(c/60)%100);c%=60;0!=c&&d.push(":",db(c,2));c=d.join("");}b.Qd=c;c=a;0==c?c="UTC":(d=["UTC",0>c?"+":"-"],c=Math.abs(c),d.push(Math.floor(c/60)%100),c%=60,0!=c&&d.push(":",c),c=d.join(""));a=QQ(a);b.Yd=[c,c];b.sc={Bi:a,qe:a};b.Od=[];return b}b=new NQ;b.Qd=a.id;b.wd=-a.std_offset;b.Yd=a.names;b.sc=a.names_ext;b.Od=a.transitions;return b}
    function QQ(a){var b=["GMT"];b.push(0>=a?"+":"-");a=Math.abs(a);b.push(db(Math.floor(a/60)%100,2),":",db(a%60,2));return b.join("")}function RQ(a,b){b=Date.UTC(b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate(),b.getUTCHours(),b.getUTCMinutes())/36E5;for(var c=0;c<a.Od.length&&b>=a.Od[c];)c+=2;return 0==c?0:a.Od[c-1]}function SQ(a){this.Zc=[];this.rb=LQ;"number"==typeof a?TQ(this,a):tR(this,a);}var uR=[/^'(?:[^']|'')*('|$)/,/^(?:G+|y+|Y+|M+|k+|S+|E+|a+|h+|K+|H+|c+|L+|Q+|d+|m+|s+|v+|V+|w+|z+|Z+)/,/^[^'GyYMkSEahKHcLQdmsvVwzZ]+/];function vR(a){return a.getHours?a.getHours():0}
    function tR(a,b){for(wR;b;){const c=b;for(let d=0;d<uR.length;++d){const e=b.match(uR[d]);if(e){let f=e[0];b=b.substring(f.length);0==d&&("''"==f?f="'":(f=f.substring(1,"'"==e[1]?f.length-1:f.length),f=f.replace(/''/g,"'")));a.Zc.push({text:f,type:d});break}}if(c===b)throw Error("Malformed pattern part: "+b);}}
    SQ.prototype.format=function(a,b){if(!a)throw Error("The date to format must be non-null.");var c=b?6E4*(a.getTimezoneOffset()-(b.wd-RQ(b,a))):0;let d=c?new Date(a.getTime()+c):a,e=d;b&&d.getTimezoneOffset()!=a.getTimezoneOffset()&&(d=new Date(d.getTime()+6E4*(d.getTimezoneOffset()-a.getTimezoneOffset())),e=new Date(a.getTime()+(c+(0<c?-864E5:864E5))));c=[];for(let f=0;f<this.Zc.length;++f){const g=this.Zc[f].text;1==this.Zc[f].type?c.push(xR(this,g,a,d,e,b)):c.push(g);}return c.join("")};
    function TQ(a,b){let c;if(4>b)c=a.rb.be[b];else if(8>b)c=a.rb.He[b-4];else if(12>b)c=a.rb.ef[b-8],c=c.replace("{1}",a.rb.be[b-8]),c=c.replace("{0}",a.rb.He[b-8]);else {TQ(a,10);return}tR(a,c);}function yR(a,b){{b=String(b);const c=a.rb||LQ;if(void 0!==c.Rg){a=[];for(let d=0;d<b.length;d++){const e=b.charCodeAt(d);a.push(48<=e&&57>=e?String.fromCharCode(c.Rg+e-48):b.charAt(d));}b=a.join("");}}return b}var wR=!1;
    function zS(a){if(!(a.getHours&&a.getSeconds&&a.getMinutes))throw Error("The date to format has no time (probably a goog.date.Date). Use Date or goog.date.DateTime, or use a pattern without time fields.");}
    function xR(a,b,c,d,e,f){var g=b.length;switch(b.charAt(0)){case "G":return c=0<d.getFullYear()?1:0,4<=g?a.rb.sf[c]:a.rb.Df[c];case "y":return c=d.getFullYear(),0>c&&(c=-c),2==g&&(c%=100),yR(a,db(c,g));case "Y":return c=(new Date(MQ(d.getFullYear(),d.getMonth(),d.getDate(),a.rb.pe,a.rb.ce))).getFullYear(),0>c&&(c=-c),2==g&&(c%=100),yR(a,db(c,g));case "M":a:switch(c=d.getMonth(),g){case 5:g=a.rb.Of[c];break a;case 4:g=a.rb.Mf[c];break a;case 3:g=a.rb.Qf[c];break a;default:g=yR(a,db(c+1,g));}return g;
    case "k":return zS(e),yR(a,db(vR(e)||24,g));case "S":return yR(a,(e.getMilliseconds()/1E3).toFixed(Math.min(3,g)).substr(2)+(3<g?db(0,g-3):""));case "E":return c=d.getDay(),4<=g?a.rb.ug[c]:a.rb.Zf[c];case "a":return zS(e),g=vR(e),a.rb.cf[12<=g&&24>g?1:0];case "h":return zS(e),yR(a,db(vR(e)%12||12,g));case "K":return zS(e),yR(a,db(vR(e)%12,g));case "H":return zS(e),yR(a,db(vR(e),g));case "c":a:switch(c=d.getDay(),g){case 5:g=a.rb.qg[c];break a;case 4:g=a.rb.tg[c];break a;case 3:g=a.rb.sg[c];break a;
    default:g=yR(a,db(c,1));}return g;case "L":a:switch(c=d.getMonth(),g){case 5:g=a.rb.og[c];break a;case 4:g=a.rb.ng[c];break a;case 3:g=a.rb.rg[c];break a;default:g=yR(a,db(c+1,g));}return g;case "Q":return c=Math.floor(d.getMonth()/3),4>g?a.rb.Xf[c]:a.rb.Pf[c];case "d":return yR(a,db(d.getDate(),g));case "m":return zS(e),yR(a,db(e.getMinutes(),g));case "s":return zS(e),yR(a,db(e.getSeconds(),g));case "v":return g=f||PQ(c.getTimezoneOffset()),g.Qd;case "V":return a=f||PQ(c.getTimezoneOffset()),2>=g?
    a.Qd:0<RQ(a,c)?void 0!==a.sc.ff?a.sc.ff:a.sc.DST_GENERIC_LOCATION:void 0!==a.sc.qe?a.sc.qe:a.sc.STD_GENERIC_LOCATION;case "w":return c=MQ(e.getFullYear(),e.getMonth(),e.getDate(),a.rb.pe,a.rb.ce),yR(a,db(Math.floor(Math.round((c-(new Date((new Date(c)).getFullYear(),0,1)).valueOf())/864E5)/7)+1,g));case "z":return a=f||PQ(c.getTimezoneOffset()),4>g?a.Yd[0<RQ(a,c)?2:0]:a.Yd[0<RQ(a,c)?3:1];case "Z":return b=f||PQ(c.getTimezoneOffset()),4>g?(g=-(b.wd-RQ(b,c)),a=[0>g?"-":"+"],g=Math.abs(g),a.push(db(Math.floor(g/
    60)%100,2),db(g%60,2)),g=a.join("")):g=yR(a,QQ(b.wd-RQ(b,c))),g;default:return ""}}function pR(a,b){var c=mg(Pj,a,b);return we(c,nh.h(function(d){return c===d},b))}function qR(a,b){return D(a)<D(b)?$b.j(De,b,a):$b.j(De,a,b)}function rR(a,b,c){a=pR(D,De.l(c,b,F([a])));return $b.j(qh,A(a),Td(a))}function eV(a){try{return aa.JSON.parse(a)}catch(b){}a=String(a);if(/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/(?:"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)[\s\u2028\u2029]*(?=:|,|]|}|$)/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a);}function fV(a){const b=[];gV(new hV,a,b);return b.join("")}
    function hV(){this.De=void 0;}
    function gV(a,b,c){if(null==b)c.push("null");else {if("object"==typeof b){if(Array.isArray(b)){var d=b;b=d.length;c.push("[");var e="";for(var f=0;f<b;f++)c.push(e),e=d[f],gV(a,a.De?a.De.call(d,String(f),e):e,c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else {c.push("{");f="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(e=b[d],"function"!=typeof e&&(c.push(f),iV(d,c),c.push(":"),gV(a,a.De?a.De.call(b,d,e):e,c),f=","));c.push("}");
    return}}switch(typeof b){case "string":iV(b,c);break;case "number":c.push(isFinite(b)&&!isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var jV={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},kV=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
    function iV(a,b){b.push('"',a.replace(kV,function(c){let d=jV[c];d||(d="\\u"+(c.charCodeAt(0)|65536).toString(16).substr(1),jV[c]=d);return d}),'"');}var lV=new S(null,3,5,T,[3,12,0],null);function mV(a){return "string"===typeof a?x.h(a,"")?null:a:null}function nV(a){return "number"===typeof a?xf(a):"string"===typeof a?(a=parseInt(a,10),n(isNaN(a))?null:a):null}function oV(a,b,c){return tf(Rj(),rf(function(d,e){var f=H(e,0,null);e=H(e,1,null);return a.j?a.j(d,f,e):a.call(null,d,f,e)},qf),b,c)}function pV(a,b){return $b.j(function(c,d){c=a.g?a.g(d):a.call(null,d);return n(c)?ee(c):null},null,b)}x.h("default","nodejs");
    var mU="undefined"!==typeof window?window:null;function qV(a){a=lJ(p.g(a),/-/,2);var b=H(a,0,null);a=H(a,1,null);var c=/\d+/;if("string"===typeof b)b=ek(c,b);else throw new TypeError("re-seq must match against a string.");b=n(b)?rh.h(nV,b):null;return new k(null,2,[nD,b,sC,n(a)?a.toLowerCase():null],null)}
    function rV(a){var b=H(lV,0,null),c=H(lV,1,null),d=H(lV,2,null),e=Ye(a)?a:nD.g(qV(a));a=H(e,0,null);var f=H(e,1,null);e=H(e,2,null);e=rh.h(function(g){return n(g)?g:0},new S(null,3,5,T,[a,f,e],null));a=H(e,0,null);f=H(e,1,null);e=H(e,2,null);if(!(b>a||x.h(b,a)&&(c>f||x.h(c,f)&&d>=e)))throw ol("Insufficient `com.taoensso/encore` version, you may have a dependency conflict: see http://goo.gl/qBbLvC for solutions.",new k(null,2,[iv,jJ(".",new S(null,3,5,T,[a,f,e],null)),wB,jJ(".",new S(null,3,5,T,[b,
    c,d],null))],null));}var sV=function sV(a){switch(arguments.length){case 3:return sV.j(arguments[0],arguments[1],arguments[2]);case 2:return sV.h(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return sV.l(arguments[0],arguments[1],arguments[2],new Rd(c.slice(3),0,null))}};sV.j=function(a,b,c){return M(a,b)?a:He.j(a,b,c)};sV.l=function(a,b,c,d){return oV(sV,sV.j(a,b,c),d)};
    sV.M=function(a){var b=A(a),c=C(a);a=A(c);var d=C(c);c=A(d);d=C(d);return this.l(b,a,c,d)};sV.h=function(a,b){return pf(function(c,d,e){return M(c,d)?c:He.j(c,d,e)},null==a?R:a,b)};sV.I=3;var tV=function tV(a){switch(arguments.length){case 2:return tV.h(arguments[0],arguments[1]);case 3:return tV.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};tV.h=function(a,b){b=0>b?0:b;var c=D(a);return b>=c?G:ci(a,b,c)};
    tV.j=function(a,b,c){b=0>b?0:b;var d=xf(D(a));c=c>d?d:c;return b>=c?G:ci(a,b,c)};tV.I=3;var uV=function uV(a){switch(arguments.length){case 2:return uV.h(arguments[0],arguments[1]);case 3:return uV.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};uV.h=function(a,b){var c=D(a);return 0>b?(b+=c,ci(a,0>b?0:b,c)):b>=c?G:ci(a,b,c)};
    uV.j=function(a,b,c){if(0>=c)return G;var d=xf(D(a));if(0>b)return b+=d,b=0>b?0:b,c=b+c,ci(a,b,c>d?d:c);c=b+c;d=c>d?d:c;return b>=d?G:ci(a,b,d)};uV.I=3;function nU(a){return 1<D(a)?ci(a,1,D(a)):G}
    (function(){var a=Wa(mU,Rf("performance"),null);if(n(a)){var b=function(){var c=Wa(a,Rf("now"),null);if(n(c))return c;c=Wa(a,Rf("mozNow"),null);if(n(c))return c;c=Wa(a,Rf("msNow"),null);if(n(c))return c;c=Wa(a,Rf("oNow"),null);return n(c)?c:Wa(a,Rf("webkitNow"),null)}();return n(b)?function(){return 1E6*xf(b.call(a))}:function(){return 1E6*(new Date).getTime()}}return function(){return 1E6*(new Date).getTime()}})();function wV(a,b){this.n=a;this.mf=b;}function xV(a,b){this.n=a;this.rf=b;}
    function yV(a,b,c){this.kf=a;this.xg=b;this.vf=c;}function zV(a){if(We(a))return pf(function(c,d,e){var f=H(e,0,null);e=H(e,1,null);return He.j(c,d,new wV(f,e))},R,a);if(Ye(a)){var b=new ah(-1);return $b.j(function(c,d){var e=H(d,0,null),f=H(d,1,null);d=H(d,2,null);return He.j(c,n(d)?d:b.Ec(null,b.Db(null)+1),new wV(e,f))},R,a)}throw ol("`encore/cond!`: no matching clause",R);}
    function AV(a){function b(f,g){var l=(new Date).getTime();Lb(g)&&6.25E-5>=Math.random()&&(Wg(c,null),Yg.h(d,function(v){return jd(pf(function(y,E,J){J=pf(function(W,Z,ma){var ja=u.h(e,Z);return n(ja)?l>=ma.rf+ja.mf?Je.h(W,Z):W:Je.h(W,Z)},J,J);return Re(J)?ld(y,E):kd(y,E,J)},hd(n(v)?v:R),v))}));for(;;){var m=r(d),q=u.h(m,f),t=null==q?null:pf(function(v,y,E,J,W,Z){return function(ma,ja,Ca){var Ba=u.h(Z,ja);if(n(Ba)){if(Ca.n<Ba.n)return ma;Ca=Ca.rf+Ba.mf-E;return 0>=Ca?ma:null==ma?new yV(Ie([ja,Ca]),
    ja,Ca):Ca>ma.vf?new yV(He.j(ma.kf,ja,Ca),ja,Ca):new yV(He.j(ma.kf,ja,Ca),ma.xg,ma.vf)}return ma}}(m,q,l,c,d,e),null,q);if(n(n(g)?g:t))return g=t,n(g)?(f=g,new S(null,3,5,T,[f.xg,f.vf,f.kf],null)):null;g=r(c);n(g)||(q=pf(function(v,y,E,J,W){return function(Z,ma,ja){var Ca=He.j;var Ba=u.h(E,ma);if(n(Ba)){var ta=Ba.rf;ja=W>=ta+ja.mf?new xV(1,W):new xV(Ba.n+1,ta);}else ja=new xV(1,W);return Ca.call(He,Z,ma,ja)}}(g,m,q,t,l),q,e),Wg(d,He.j(m,f,q)));return null}}if(Re(a))return new S(null,2,5,T,[null,
    Og(null)],null);var c=Vg(null),d=Vg(null),e=zV(a);return new S(null,2,5,T,[d,function(){function f(q,t){if(n(Nf.h?Nf.h(q,Jr):Nf.call(null,q,Jr)))return n(Nf.h?Nf.h(t,gB):Nf.call(null,t,gB))?Wg(d,null):Yg.j(d,Je,t),null;if(n(Nf.h?Nf.h(q,PD):Nf.call(null,q,PD)))return b(t,!0);throw ol("Unrecognized rate limiter command",new k(null,2,[$o,q,Uq,t],null));}function g(q){return b(q,!1)}function l(){return b(null,!1)}var m=null;m=function(q,t){switch(arguments.length){case 0:return l.call(this);case 1:return g.call(this,
    q);case 2:return f.call(this,q,t)}throw Error("Invalid arity: "+arguments.length);};m.v=l;m.g=g;m.h=f;return m}()],null)}
    var BV=function(){function a(d){return new pb(d)}function b(){return new pb}var c=null;c=function(d){switch(arguments.length){case 0:return b.call(this);case 1:return a.call(this,d)}throw Error("Invalid arity: "+arguments.length);};c.v=b;c.g=a;return c}(),CV=function(){function a(e,f){e=e instanceof pb?e:BV.g(p.g(e));f=p.g(f);return e.append(f)}function b(e){return e instanceof pb?e:BV.g(p.g(e))}function c(){return BV.v()}var d=null;d=function(e,f){switch(arguments.length){case 0:return c.call(this);
    case 1:return b.call(this,e);case 2:return a.call(this,e,f)}throw Error("Invalid arity: "+arguments.length);};d.v=c;d.g=b;d.h=a;return d}();function DV(a,b){if(n(n(" ")?sg.h(" ",""):" ")){var c=jh(),d=rf(CV,p);return n(a)?sf(Pg.h(a,c),d,b):sf(c,d,b)}return n(a)?sf(a,rf(CV,p),b):p.g($b.h(CV,b))}
    var EV=function EV(a){switch(arguments.length){case 2:return EV.h(arguments[0],arguments[1]);case 3:return EV.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};EV.h=function(a,b){return a.substring(b)};EV.j=function(a,b,c){return b>=c?"":a.substring(b,c)};EV.I=3;
    var FV=function FV(a){switch(arguments.length){case 2:return FV.h(arguments[0],arguments[1]);case 3:return FV.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};FV.h=function(a,b){return mV(a.substr(b))};FV.j=function(a,b,c){return mV(a.substr(b,c))};FV.I=3;function GV(a){return void 0===a||null==a?"nil":a}rh.h(p,"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
    var HV=function HV(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return HV.l(0<c.length?new Rd(c.slice(0),0,null):null)};HV.l=function(a){var b=qg(a);a=u.h(b,Ss);var c=u.h(b,wA),d=u.h(b,OA),e=u.h(b,IC),f=u.h(b,Mu),g=u.h(b,GC),l=u.h(b,px),m=u.h(b,Lp);b=u.h(b,Rz);return Math.round((n(b)?31536E6*b:0)+(n(e)?2551392E3*e:0)+(n(c)?6048E5*c:0)+(n(l)?864E5*l:0)+(n(m)?36E5*m:0)+(n(g)?6E4*g:0)+(n(f)?1E3*f:0)+(n(d)?d:0)+(n(a)?a:0))};HV.I=0;HV.M=function(a){return this.l(z(a))};
    Pg.h(function(a){return yf(xf(a),1E3)},HV);function oU(){return !0}function pU(){return !1}function qU(a){return sg.h(-1,a.indexOf("*"))?fk(iJ(iJ(["^",p.g(a),"$"].join(""),".","\\."),"*","(.*)")):null}
    function EU(a,b){for(;;){if(n(function(){var q=new Hj(null,new k(null,2,["*",null,vm,null],null),null);return q.g?q.g(a):q.call(null,a)}()))return oU;if(n(function(){var q=Kj([G,Jj,Zv]);return q.g?q.g(a):q.call(null,a)}()))return pU;if(a instanceof RegExp)return function(q){return function(t){return dk(q,t)}}(a);if("string"===typeof a){var c=qU(a);if(n(c)){var d=b;a=c;b=d;}else return function(q){return function(t){return x.h(t,q)}}(a)}else if(Ye(a)||Te(a)){if(n(function(){var q=
    Lj(a);return q.g?q.g("*"):q.call(null,"*")}()))return oU;if(x.h(D(a),1))c=A(a),d=b,a=c,b=d;else {var e=$b.j(function(q,t,v,y,E){return function(J,W){var Z=H(J,0,null);J=H(J,1,null);var ma=W instanceof RegExp?W:E(W);return n(ma)?new S(null,2,5,T,[Z,De.h(J,ma)],null):new S(null,2,5,T,[De.h(Z,W),J],null)}}(a,b,oU,pU,qU),new S(null,2,5,T,[Jj,G],null),a),f=H(e,0,null),g=H(e,1,null),l=tg(f),m=function(){var q=tg(g);return n(q)?(q=function(t,v,y,E,J,W,Z,ma,ja,Ca,Ba){return function(ta){return pV(function(){return function(B){return dk(B,
    ta)}}(),y)}}(a,b,q),n(b)?Ek(q):q):null}();if(n(function(){var q=l;return n(q)?m:q}()))return function(q,t,v,y,E,J,W){return function(Z){var ma=J.g?J.g(Z):J.call(null,Z);return n(ma)?ma:W.g?W.g(Z):W.call(null,Z)}}(a,b,e,f,g,l,m);if(n(l))return l;if(n(m))return m;throw ol("`encore/cond!`: no matching clause",R);}}else throw ol("Unexpected compile spec type",new k(null,2,[$o,a,Yv,Rb(a)],null));}}
    function FU(a){for(;;){if(We(a)){var b=u.h(a,ey),c=function(){var g=u.h(a,Hu);return n(g)?g:u.h(a,ps)}(),d=function(){var g=u.h(a,Nt);return n(g)?g:u.h(a,ZF)}(),e=function(){var g=c;return n(g)?EU(g,b):null}(),f=function(){var g=d;return n(g)?EU(g,b):null}();if(x.h(f,oU)||x.h(e,pU))return pU;if(n(function(){var g=e;return n(g)?f:g}()))return function(g,l,m,q,t,v){return function(y){y=p.g(y);return n(t.g?t.g(y):t.call(null,y))?n(v.g?v.g(y):v.call(null,y))?!1:!0:!1}}(a,b,c,d,e,f);if(n(e))return x.h(e,
    oU)?oU:function(g,l,m,q,t){return function(v){v=p.g(v);v=t.g?t.g(v):t.call(null,v);return n(v)?!0:!1}}(a,b,c,d,e);if(n(f))return x.h(f,pU)?oU:function(g,l,m,q,t,v){return function(y){y=p.g(y);y=v.g?v.g(y):v.call(null,y);return n(y)?!0:!1}}(a,b,c,d,e,f);throw ol("compile-str-filter: `allow-spec` and `deny-spec` cannot both be nil",new k(null,2,[Av,c,xp,d],null));}a=new k(null,2,[Hu,a,Nt,null],null);}}Pg.h(tg,tV);Pg.h(tg,uV);Pg.h(mV,EV);Pg.h(mV,FV);function GU(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return HU(0<b.length?new Rd(b.slice(0),0,null):null)}function HU(a){H(a,0,null);return new k(null,6,[ZB,!0,nw,!1,Ay,null,vy,null,Bo,UE,Vr,function(b){b=qg(b);b=u.h(b,yo);return yk(F([Hk(b)]))}],null)}function JV(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return KV(0<b.length?new Rd(b.slice(0),0,null):null)}
    function KV(a){H(a,0,null);return new k(null,6,[ZB,!0,nw,!1,Ay,null,vy,null,Bo,UE,Vr,"undefined"===typeof console?function(){return null}:function(){function b(c){var d=function(){var e=c instanceof w?c.X:null;switch(e){case "trace":return console.trace;case "debug":return console.debug;case "info":return console.info;case "warn":return console.warn;case "error":return console.error;case "fatal":return console.error;case "report":return console.info;default:throw Error(["No matching clause: ",p.g(e)].join(""));
    }}();return n(d)?d:console.log}return function(c){var d=b(nE.g(c));if(n(d)){if(n(function(){var g=u.h(c,$p);return n(g)?g:th.h(c,new S(null,2,5,T,[Vw,$p],null))}())){var e=function(){var g=He.l(c,sn,"",F([Ts,null])),l=Bo.g(c);return l.g?l.g(g):l.call(null,g)}(),f=function(){var g=ms.g(c),l=Ts.g(c);return n(l)?we(e,we(l,g)):we(e,g)}();return d.apply(console,Zb(f))}return d.call(console,Hk(yo.g(c)))}return null}}()],null)}Ye(lV)?rV(new S(null,3,5,T,[2,126,2],null)):rV(2.126);var IU=new k(null,1,[dm,PC],null),LV=function LV(a){switch(arguments.length){case 1:return LV.g(arguments[0]);case 2:return LV.h(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};LV.g=function(a){return LV.h(null,a)};
    LV.h=function(a,b){var c=qg(a),d=u.h(c,hG);u.h(c,Rv);var e=qg(b);b=u.h(e,nE);c=u.h(e,Ts);var f=u.h(e,sn),g=u.h(e,wy),l=u.h(e,PG);u.h(e,Wt);var m=u.h(e,Um);e=u.h(e,ap);m=Hk(m);return [n(m)?[p.g(m)," "].join(""):null,Rf(b).toUpperCase()," [",p.g(n(g)?g:n(l)?l:"?"),":",p.g(n(e)?e:"?"),"] - ",p.g(Hk(f)),n(d)?null:n(c)?["\n",p.g(MV?MV(c):NV.call(null,c,a))].join(""):null].join("")};LV.I=2;
    var OV=new k(null,6,[Ay,vt,Qt,new Hj(null,new k(null,1,["*",null],null),null),ov,G,Yq,IU,Bo,LV,pA,"undefined"!==typeof window?new k(null,1,[ep,JV.g?JV.g(R):JV.call(null,R)],null):new k(null,1,[wn,GU.g?GU.g(R):GU.call(null,R)],null)],null);function QV(a){function b(){return a}return PV.g?PV.g(b):PV.call(null,b)}function PV(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return OV=mg(arguments[0],OV,1<b.length?new Rd(b.slice(1),0,null):null)}
    function JU(a){switch(a instanceof w?a.X:null){case "trace":return 0;case "debug":return 1;case "info":return 2;case "warn":return 3;case "error":return 4;case "fatal":return 5;case "report":return 6;default:return null}}function TV(a){if(n(JU(a)))return a;throw ol("Invalid Timbre logging level: should be e/o #{:trace :debug :info :warn :error :fatal :report}",new k(null,2,[$o,a,Yv,Rb(a)],null));}
    function KU(a){var b=JU(a);if(n(b))return b;throw ol("Invalid Timbre logging level: should be e/o #{:trace :debug :info :warn :error :fatal :report}",new k(null,2,[$o,a,Yv,Rb(a)],null));}function UV(a,b){return (KU.g?KU.g(a):KU.call(null,a))>=(KU.g?KU.g(b):KU.call(null,b))}var LU=Ek(function(a){return FU(a)}),MU=Ek(function(a,b){a=LU(a);return a.g?a.g(b):a.call(null,b)});function NU(a,b){a=n(Ke.g?Ke.g(a):Ke.call(null,a))?a.g?a.g(b):a.call(null,b):MU(a,b);return n(a)?!0:!1}
    var OU=Ek(function(a,b){return pV(function(c){var d=H(c,0,null);c=H(c,1,null);return n(MU(d,b))?TV(c):null},a)});function PU(a,b,c){b=Ye(b)?OU(b,c):b;a=n(b)?b:a;return TV.g?TV.g(a):TV.call(null,a)}function QU(a){if(n(a)){var b=Kj([G,Jj]);b=b.g?b.g(a):b.call(null,a);a=n(b)?null:a;}else a=null;return a}function RU(a,b){a=QU(a);b=QU(b);return n(n(a)?a:b)?new k(null,2,[Hu,a,Nt,b],null):null}
    function SU(a,b,c,d){var e=n(d)?d:OV;d=function(){var f=u.h(e,Ay);f=n(f)?f:u.h(e,nE);return PU.j?PU.j(a,f,c):PU.call(null,a,f,c)}();return n(UV.h?UV.h(b,d):UV.call(null,b,d))?(b=function(){var f=u.h(e,Qt);if(n(f))return f;f=u.h(e,bF);var g=u.h(e,Hy);return RU.h?RU.h(f,g):RU.call(null,f,g)}(),n(b)?n(NU.h?NU.h(b,c):NU.call(null,b,c))?!0:!1:!0):!1}function YV(a){return DV(ch.g(function(b){b=GV(b);return Xe(b)?uk.l(F([b])):b}),a)}var ZV=Ek(function(a,b){a=AV(b);H(a,0,null);return H(a,1,null)});
    function aW(a){var b=Nf.h?Nf.h(nu,nu):Nf.call(null,nu,nu),c=Nf.h?Nf.h(xE,GE):Nf.call(null,xE,GE),d=H(a,0,null);if(n(n(b)?d instanceof Error:b)){var e=d,f=null,g=nU(a);a=n(c)?H(g,0,null):null;c=n(c)?nU(g):g;return new S(null,4,5,T,[e,f,a,c],null)}f=n(function(){var m=We(d);return m?kb.g(Ne(d)):m}())?d:null;e=function(){var m=Zm.g(f);return n(m)?m:n(b)?null:nu}();var l=Je.h(f,Zm);g=n(l)?nU(a):a;a=n(c)?H(g,0,null):null;c=n(c)?nU(g):g;return new S(null,4,5,T,[e,l,a,c],null)}
    function TU(a,b,c,d,e){var f=OV;if(SU(rC,a,b,f)){var g=new Date;d=r(d);d=aW(d);var l=H(d,0,null),m=H(d,1,null),q=H(d,2,null);d=H(d,3,null);g=De.h(n(null)?null:R,dj([Qu,em,ft,ms,PG,cr,wy,nE,Ts,Rp,ap,kE,Vw,bE],[g,null,f,d,null,function(){var W=new Hj(null,new k(null,2,[qs,null,Px,null],null),null);return W.g?W.g(a):W.call(null,a)}(),b,a,l,null,c,new Dk(function(){return l}),m,q]));g=$b.j(function(W,Z){W=Z.g?Z.g(W):Z.call(null,W);return null==W?ee(null):W},g,ov.g(f));if(n(g)){d=qg(g);var t=u.h(d,ms);
    g=He.j(g,rt,new Dk(function(){return t}));var v=sV.l(g,sn,new Dk(function(){if(x.h(null,xE))return "";if(x.h(xE,xE))return YV(t);if(x.h(GE,xE)){if("string"!==typeof q)throw ol("Timbre format-style logging call without a format pattern (string)",new k(null,2,[nE,a,mq,[p.g(n(b)?b:n(null)?null:"?"),":",p.g(n(c)?c:"?")].join("")],null));var W=n(q)?q:"",Z=rh.h(GV,t);return mg(kO,W,Z)}throw Error(["No matching clause: ",p.g(xE)].join(""));}),F([Gx,new Dk(function(){return Jd(new S(null,3,5,T,[e,q,u.j(m,
    Ix,t)],null))})])),y=Ek(u.j(f,Bo,LV)),E=De.h(IU,u.h(f,Yq)),J=Ek(function(W){return new Dk(function(){var Z=u.h(v,Qu),ma=qg(W);ma=u.h(ma,dm);return n(Nf.h?Nf.h(ma,PC):Nf.call(null,ma,PC))?(new Date(Z)).toISOString():(new SQ(ma)).format(Z)})});pf(function(W,Z,ma){if(n(function(){var I=ZB.g(ma);return n(I)?SU(Py,a,b,ma):I}())){var ja=vy.g(ma);if(function(){var I=Re(ja);if(I)return I;I=ZV(Z,ja);var K=Hk(Gx.g(v));I=I.g?I.g(K):I.call(null,K);return Lb(I)}()){var Ca=qg(ma);W=u.h(Ca,Vr);u.h(Ca,nw);var Ba=
    function(){var I=Bo.g(ma);var K=(K=null==I)?K:Nf.h?Nf.h(I,UE):Nf.call(null,I,UE);return n(K)?y:I}(),ta=function(){var I=Yq.g(ma);var K=(K=null==I)?K:Nf.h?Nf.h(I,UE):Nf.call(null,I,UE);return n(K)?J(E):J(De.h(E,I))}(),B=De.h(v,new k(null,5,[lo,Z,Yw,ma,Bo,Ba,yo,new Dk(function(){var I=He.j(v,Um,ta);return Ba.g?Ba.g(I):Ba.call(null,I)}),Um,ta],null));Ca=function(){var I=Du.g(ma);return n(I)?I.g?I.g(B):I.call(null,B):B}();return n(Ca)?W.g?W.g(Ca):W.call(null,Ca):null}}return null},null,pA.g(f));}}return null}
    function NV(a){switch(arguments.length){case 1:return MV(arguments[0]);case 2:return MV(arguments[0]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}}function MV(a){var b=a.stack;return n(b)?b:p.g(a)}function cW(a,b,c){var d=cW[ba(null)];if(null!=d)d.D?d.D(null,a,b,c):d.call(null,null,a,b,c);else if(d=cW._,null!=d)d.D?d.D(null,a,b,c):d.call(null,null,a,b,c);else throw Sb("Measurements.record!",null);}function dW(a){if(null!=a&&null!=a.Uf)a.Uf(a);else {var b=dW[ba(null==a?null:a)];if(null!=b)b.g?b.g(a):b.call(null,a);else if(b=dW._,null!=b)b.g?b.g(a):b.call(null,a);else throw Sb("Node.close",a);}}function eW(a,b){if(null!=a&&null!=a.Vf)a.Vf(a,b);else {var c=eW[ba(null==a?null:a)];if(null!=c)c.h?c.h(a,b):c.call(null,a,b);else if(c=eW._,null!=c)c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Node.message",a);}}
    function fW(a,b){if(null==a||null==a.eh){var c=fW[ba(null==a?null:a)];if(null!=c)c.h?c.h(a,b):c.call(null,a,b);else if(c=fW._,null!=c)c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Node.add-source",a);}}function gW(a,b){if(null!=a&&null!=a.Wf)a.Wf(a,b);else {var c=gW[ba(null==a?null:a)];if(null!=c)c.h?c.h(a,b):c.call(null,a,b);else if(c=gW._,null!=c)c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Node.remove-source",a);}}
    function hW(a,b,c){c=zG.g(c);a=ZQ.h(a,c);if(n(n(a)?sg.h(b,mt.g(a)):a))throw ol(["The original source of peer ",p.g(c)," doesnt match the current source"].join(""),R);}
    function iW(a,b,c){return $b.j(function(d,e){var f=H(d,0,null);d=H(d,1,null);TU(vt,"gateway.node",33,new Dk(function(){return new S(null,2,5,T,["about to remove source from domain",UQ(e)],null)}),-1513172059);var g=XQ(e,f,a);return n(g)?(f=H(g,0,null),g=H(g,1,null),TU(vt,"gateway.node",36,new Dk(function(){return new S(null,2,5,T,["removed source from domain",UQ(e)],null)}),1467131342),new S(null,2,5,T,[f,qh.h(d,g)],null)):new S(null,2,5,T,[f,d],null)},new S(null,2,5,T,[b,G],null),mh.h(Mb,De.h(rh.h(function(d){H(d,
    0,null);d=H(d,1,null);return Iu.g(d)},Je.h(c,"global")),th.h(c,new S(null,2,5,T,["global",Iu],null)))))}
    function jW(a,b,c,d,e){try{if(x.h(LB,Yv.g(e)))return iW(c,b,a);var f=th.h(a,new S(null,2,5,T,[Iu.h(e,"global"),Iu],null));return n(f)?(TU(vt,"gateway.node",59,new Dk(function(){return new S(null,4,5,T,["Handling message with domain",f,"message: \n",p.g(c)],null)}),1103521272),hW(b,d,e),XQ(f,b,c)):new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R(Iu.g(e),d,fD.g(e),zG.g(e),EI("global.errors.failure",["Unable to find domain for message ",p.g(c)].join("")))],null)],null)}finally{a=Yv.g(e),n(a)&&n(null)&&cW(Yr,
    ["inv/",Rf(a)].join(""),0);}}var kW={};function lW(a){a=tI(a);var b=Yv.g(a);return n(b)?He.j(a,Yv,Qf.g(b)):a}function mW(a,b,c,d){a=lW(a);var e=th.h(r(b),new S(null,2,5,T,[d,mt],null));if(n(e)){x.h(zy,Yv.g(a))||eW(c,new k(null,3,[Ht,sz,mt,e,bp,a],null));var f=(new Date).getTime();return Yg.h(b,function(g){return uh(g,new S(null,2,5,T,[d,AA],null),f)})}return TU(Fz,"gateway.cljs.common",31,new Dk(function(){return new S(null,2,5,T,["Cannot process message for not-registered key",d],null)}),1515782144)}
    function nW(a,b){pI(Az.g(a));try{gW(b,a);}catch(d){if(d instanceof Error){var c=d;TU(Px,"gateway.cljs.common",39,new Dk(function(){return new S(null,3,5,T,[c,"Unable to remove client for",Wh],null)}),-1803257173);}else throw d;}}function oW(a,b,c){TU(BD,"gateway.cljs.common",43,new Dk(function(){return new S(null,2,5,T,["removing client for",c],null)}),-126825074);a=$g(a,c);var d=H(a,0,null);H(a,1,null);a=th.h(d,new S(null,2,5,T,[c,mt],null));n(a)&&nW(a,b);}
    function pW(a,b,c,d){Yg.D(a,He,c,new k(null,2,[mt,d,AA,(new Date).getTime()],null));fW(b,d);}function qW(a,b,c){return qh.h(R,function(){function d(e){H(e,0,null);e=H(e,1,null);return AA.g(e)<b}return a.h?a.h(d,c):a.call(null,d,c)}())}
    function rW(a,b,c){TU(vt,"gateway.cljs.common",61,new Dk(function(){return new S(null,2,5,T,["running client scavenger. collecting everything older than",c],null)}),-1437428449);a=Zg(a,Rg(qW,nh,c));for(var d=H(a,0,null),e=H(a,1,null),f=qW(mh,c,d),g=z(f),l=null,m=0,q=0;;)if(q<m){var t=l.V(null,q),v=H(t,0,null),y=H(t,1,null),E=mt.g(y);TU(BD,"gateway.cljs.common",66,new Dk(function(Z,ma,ja,Ca,Ba,ta,B){return function(){return new S(null,2,5,T,["scavenging client for",B],null)}}(g,l,m,q,E,t,v)),1886664728);nW(E,b);q+=1;}else if(E=z(g)){t=E;if(Ze(t))g=pd(t),q=qd(t),l=g,m=D(g),g=q;else {var J=A(t);v=H(J,0,null);y=H(J,1,null);var W=mt.g(y);TU(BD,"gateway.cljs.common",66,new Dk(function(Z,ma,ja,Ca,Ba,ta,B){return function(){return new S(null,2,5,T,["scavenging client for",B],null)}}(g,l,m,q,W,J,v)),230528085);nW(W,b);g=C(t);l=null;m=0;}q=0;}else break}function dY(a,b,c){this.ia=a;this.n=b;this.Ee=0;this.ze=c;this.C=2;this.O=0;}dY.prototype.Jd=function(){return !1};dY.prototype.ke=function(a,b){this.ia.length!==this.n?this.ia.unshift(b):(this.Ee+=1,n(this.ze)&&(this.ze.h?this.ze.h(b,this.Ee):this.ze.call(null,b,this.Ee)));return this};dY.prototype.ca=function(){return this.ia.length};function fY(a,b){return new dY(yH(a),a,b)}var sW={},UU;
    function uW(a,b,c,d){var e=gI(1);PH(function(){var f=function(){function l(m){var q=m[1];if(7===q)return m[2]=m[2],m[1]=3,rv;if(1===q)return m[2]=null,m[1]=2,rv;if(4===q)return q=m[7],q=m[2],m[7]=q,m[1]=n(q)?5:6,rv;if(13===q)return m[2]=null,m[1]=14,rv;if(6===q)return m[2]=null,m[1]=7,rv;if(3===q)return fI(m,m[2]);if(12===q)return q=m[7],q=Nk(q),q=a.h?a.h(d,q):a.call(null,d,q),m[2]=q,m[1]=14,rv;if(2===q)return eI(m,c);if(11===q){m[4]=Td(m[4]);q=m[2];m[5]=q;if(q instanceof Error)m[1]=10,m[5]=null;
    else throw q;return rv}if(9===q)return m[8]=m[2],m[2]=null,m[1]=2,rv;if(5===q)return m[2]=null,m[1]=8,rv;if(14===q)return q=m[2],m[4]=Td(m[4]),m[2]=q,m[1]=9,rv;if(10===q){q=m[7];var t=m[2];q=TU(Px,"gateway.cljs.local-client",15,new Dk(function(){return function(){return new S(null,2,5,T,[t,"error while invoking the client callback"],null)}}()),-1462405823);m[2]=q;m[1]=9;return rv}return 8===q?(m[4]=we(11,m[4]),m[1]=n(a)?12:13,rv):null}return function(){function m(v){for(;;){a:try{for(;;){var y=l(v);
    if(!Nf(y,rv)){var E=y;break a}}}catch(J){E=J;v[2]=E;if(z(v[4]))v[1]=A(v[4]);else throw E;E=rv;}if(!Nf(E,rv))return E}}function q(){var v=[null,null,null,null,null,null,null,null,null];v[0]=t;v[1]=1;return v}var t=null;t=function(v){switch(arguments.length){case 0:return q.call(this);case 1:return m.call(this,v)}throw Error("Invalid arity: "+arguments.length);};t.v=q;t.g=m;return t}()}(),g=function(){var l=f();l[6]=e;return l}();return dI(g)});return new k(null,3,[Yv,sz,Az,c,Kv,tE.h(b,"127.0.0.1")],
    null)}function vW(a,b){n(n(a)?b:a)&&(a=r(a),oW(xw.g(a),Mt.g(a),b),TU(BD,"gateway.cljs.local-client",27,new Dk(function(){return new S(null,1,5,T,["local client disconnected"],null)}),2122727404));return Promise.resolve(!0)}function wW(a,b,c){if(n(n(a)?b:a)){TU(vt,"gateway.cljs.local-client",33,new Dk(function(){return new S(null,3,5,T,["Processing incoming message",c,"from local client"],null)}),-985810394);var d=Rk(c);a=r(a);return mW(d,xw.g(a),Mt.g(a),b)}return null}
    function xW(a,b){var c=r(a),d=th.j(c,new S(null,3,5,T,[ft,xw,cE],null),100),e=gI(fY(d,function(l,m){return TU(Fz,"gateway.cljs.local-client",45,new Dk(function(){return new S(null,5,5,T,["Dropped message",l," for a local client. Total dropped:",m,". Consider increasing local clients buffer_size."],null)}),1509166532)})),f=function(){if("undefined"===typeof jI||"undefined"===typeof kW||"undefined"===typeof sW||"undefined"===typeof UU)UU=function(l,m,q,t,v,y){this.gf=l;this.ge=m;this.sd=q;this.nh=t;
    this.ch=v;this.Dh=y;this.C=393216;this.O=0;},UU.prototype.U=function(l,m){return new UU(this.gf,this.ge,this.sd,this.nh,this.ch,m)},UU.prototype.T=function(){return this.Dh},UU.prototype.disconnect=function(){return vW(this.gf,this.ch)},UU.prototype.send=function(l){return wW(this.gf,this.ch,l)},UU.Za=!0,UU.Xa="gateway.cljs.local-client/t_gateway$cljs$local_client20173",UU.ab=function(l){return ad(l,"gateway.cljs.local-client/t_gateway$cljs$local_client20173")};return new UU(a,b,c,d,e,R)}();TU(BD,
    "gateway.cljs.local-client",49,new Dk(function(){return new S(null,2,5,T,["local client connected, buffer-size: ",d],null)}),2120620859);var g=uW(b,c,e,f);pW(xw.g(c),Mt.g(c),e,g);return Promise.resolve(f)}var VU=function(){function a(d,e,f){var g=yW[ba(null==d?null:d)];if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);g=yW._;if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);throw Sb("IPromise.-then",d);}function b(d,e){var f=yW[ba(null==d?null:d)];if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);f=yW._;if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);throw Sb("IPromise.-then",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,d,e,f)}throw Error("Invalid arity: "+
    arguments.length);};c.h=b;c.j=a;return c}(),yW=function yW(a){switch(arguments.length){case 2:return yW.h(arguments[0],arguments[1]);case 3:return yW.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};yW.h=function(a,b){return null!=a&&null!=a.eg?a.eg(a,b):VU(a,b)};yW.j=function(a,b,c){return null!=a&&null!=a.fg?a.fg(a,b,c):VU(a,b,c)};yW.I=3;
    var WU=function(){function a(d,e,f){var g=AW[ba(null==d?null:d)];if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);g=AW._;if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);throw Sb("IPromise.-thenErr",d);}function b(d,e){var f=AW[ba(null==d?null:d)];if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);f=AW._;if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);throw Sb("IPromise.-thenErr",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,
    d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.h=b;c.j=a;return c}(),AW=function AW(a){switch(arguments.length){case 2:return AW.h(arguments[0],arguments[1]);case 3:return AW.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};AW.h=function(a,b){return null!=a&&null!=a.gg?a.gg(a,b):WU(a,b)};AW.j=function(a,b,c){return null!=a&&null!=a.hg?a.hg(a,b,c):WU(a,b,c)};AW.I=3;
    var YU=function(){function a(d,e,f){var g=XU[ba(null==d?null:d)];if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);g=XU._;if(null!=g)return g.j?g.j(d,e,f):g.call(null,d,e,f);throw Sb("IPromise.-finally",d);}function b(d,e){var f=XU[ba(null==d?null:d)];if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);f=XU._;if(null!=f)return f.h?f.h(d,e):f.call(null,d,e);throw Sb("IPromise.-finally",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,
    d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.h=b;c.j=a;return c}(),XU=function XU(a){switch(arguments.length){case 2:return XU.h(arguments[0],arguments[1]);case 3:return XU.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};XU.h=function(a,b){return null!=a&&null!=a.af?a.af(a,b):YU(a,b)};XU.j=function(a,b,c){return null!=a&&null!=a.bf?a.bf(a,b,c):YU(a,b,c)};XU.I=3;
    function CW(a){if(null!=a&&null!=a.nf)a=a.nf(a);else {var b=CW[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=CW._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("IPromiseFactory.-promise",a);}return a}function DW(a){if(null!=a&&null!=a.bg)a=a.bg(a);else {var b=DW[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=DW._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("ICancellable.-cancel!",a);}return a}
    function EW(a,b){if(null!=a&&null!=a.dg)a=a.dg(a,b);else {var c=EW[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=EW._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("ICompletable.-resolve!",a);}return a}function FW(a,b){if(null!=a&&null!=a.cg)a=a.cg(a,b);else {var c=FW[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=FW._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("ICompletable.-reject!",a);}return a}
    function GW(a,b,c){if(null!=a&&null!=a.ig)a=a.ig(a,b,c);else {var d=GW[ba(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=GW._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw Sb("IScheduler.-schedule!",a);}return a}var IW=new Dk(function(){return HW.v?HW.v():HW.call(null)});function JW(a){return GW(IW instanceof Dk?r(IW):IW,1E3,a)}function KW(a,b){var c=IW instanceof Dk?r(IW):IW;return GW(c,a,b)}function LW(a){this.state=a;this.O=1;this.C=0;}LW.prototype.Hd=function(){return r(Wa(this.state,"done"))};LW.prototype.bg=function(){if(n(Wa(this.state,"cancelled")))return null;var a=Wa(this.state,"cancel-fn");this.state.cancelled=!0;return a.v?a.v():a.call(null)};function MW(){}
    MW.prototype.ig=function(a,b,c){var d=new ah(!1),e=setTimeout(function(){try{return c.v?c.v():c.call(null)}finally{xd(d,!0);}},b);return new LW({done:d,cancelled:!1,"cancel-fn":function(){return clearTimeout(e)}})};function HW(){return new MW}var NW=Promise;function OW(){var a={},b=new NW(function(c,d){a.resolve=c;return a.reject=d});b.Ai=tb;b.dg=function(c,d){return a.resolve(d)};b.cg=function(c,d){return a.reject(d)};return b}
    (function(a){a.prototype.nf=function(){return this};a.prototype.eg=function(b,c){return this.then(function(d){return c.g?c.g(d):c.call(null,d)})};a.prototype.fg=function(b,c){return this.then(function(d){return c.g?c.g(d):c.call(null,d)})};a.prototype.gg=function(b,c){return this.catch(function(d){return c.g?c.g(d):c.call(null,d)})};a.prototype.hg=function(b,c){return this.catch(function(d){return c.g?c.g(d):c.call(null,d)})};a.prototype.af=function(b,c){this.then(function(d){return c.h?c.h(d,null):
    c.call(null,d,null)},function(d){return c.h?c.h(null,d):c.call(null,null,d)});return this};return a.prototype.bf=function(b,c){this.then(function(d){return c.h?c.h(d,null):c.call(null,d,null)},function(d){return c.h?c.h(null,d):c.call(null,null,d)});return this}})(Promise);
    yW._=function(){function a(d,e,f){return yW(CW(d),e,f)}function b(d,e){return yW(CW(d),e)}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.h=b;c.j=a;return c}();
    AW._=function(){function a(d,e,f){return AW(CW(d),e,f)}function b(d,e){return AW(CW(d),e)}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.h=b;c.j=a;return c}();
    XU._=function(){function a(d,e,f){return XU(CW(d),e,f)}function b(d,e){return XU(CW(d),e)}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.h=b;c.j=a;return c}();Error.prototype.nf=function(){return NW.reject(this)};CW._=function(a){return NW.resolve(a)};Promise.prototype.qa=tb;Promise.prototype.W=function(a,b){return ad(b,"#\x3cPromise[~]\x3e")};function PW(a){var b=OW();try{var c=function(e){return EW(b,e)},d=function(e){return FW(b,e)};a.h?a.h(c,d):a.call(null,c,d);}catch(e){FW(b,e);}return b}function QW(a,b){return yW(a,b)}function ZU(a,b){return XU(a,b)}function RW(a,b){return AW(a,b)}function SW(){return this}ra(SW,Error);function TW(a,b){return UW(a,b)}
    function UW(a,b){var c=new k(null,2,[Yv,tx,Nr,"Authentication timed out"],null),d=OW(),e=KW(b,function(){return x.h(c,oG)?FW(d,new SW()):EW(d,c)});return NW.race(Zb(ch.h(CW,new S(null,2,5,T,[ZU(a,function(){return DW(e)}),d],null))))}function VW(a,b){if(null!=a&&null!=a.Sf)a=a.Sf(a,b);else {var c=VW[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=VW._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Authenticator.authenticate",a);}return a}function WW(a){if(null!=a&&null!=a.Tf)a.Tf(a);else {var b=WW[ba(null==a?null:a)];if(null!=b)b.g?b.g(a):b.call(null,a);else if(b=WW._,null!=b)b.g?b.g(a):b.call(null,a);else throw Sb("Authenticator.stop",a);}}
    function XW(a){a=qu.g(a);var b=qg(a);a=u.h(b,uz);b=u.h(b,ZA);return n(n(a)?b:a)?NW.resolve(new k(null,3,[Yv,vC,Kr,a,uz,a],null)):NW.reject(ol("Missing login/secret",new k(null,2,[Yv,tx,Nr,"Missing login/secret"],null)))}function YW(a){return x.h(sw.g(a),"gateway-token")?Pl.g(a):null}gQ(bz,Us,Pb);gQ(Uy,Fw,Fw);
    gQ(Lo,P(qD,Ln,new S(null,1,5,T,[bz],null),pD,new S(null,2,5,T,[EC,Uy],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[bz],null),new S(null,2,5,T,[EC,Uy],null),null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,qu)}],null),function(a){return We(a)&&M(a,qu)},new S(null,2,5,T,[fD,NG],null),new S(null,1,5,T,[bz],null),null,new S(null,1,5,T,[qu],null),new S(null,2,5,T,[EC,Uy],null),new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,
    [X],null),P(pq,X,qu))],null),null])));gQ(Ly,FA,Mf);var ZW,$U=Vg(R),aV=Vg(R),bV=Vg(R),cV=Vg(R),dV=u.j(R,su,Wk.v?Wk.v():Wk.call(null));ZW=new jl(Nd.h("gateway.auth.spec","response-type"),Yv,dV,$U,aV,bV,cV);gQ(Cs,dD,Nb);
    ZW.B(null,tx,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[Ly,Cs],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,Nr)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,Nr)},G,new S(null,2,5,T,[Ly,Cs],null),null,new S(null,2,5,T,[Yv,Nr],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Nr))],null),null]))});
    gQ(Mv,dD,Nb);gQ(lD,dD,Nb);gQ(Im,dD,Nb);
    ZW.B(null,vC,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[Ly,Mv,lD],null),new S(null,1,5,T,[Im],null),null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,uz)},function(a){return M(a,Kr)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,uz)&&M(a,Kr)},new S(null,1,5,T,[Vp],null),new S(null,3,5,T,[Ly,Mv,lD],null),null,new S(null,3,5,T,[Yv,uz,Kr],null),new S(null,1,5,T,[Im],null),new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],
    null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,uz)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Kr))],null),null]))});
    ZW.B(null,vn,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[Ly,bz],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,qu)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,qu)},G,new S(null,2,5,T,[Ly,bz],null),null,new S(null,2,5,T,[Yv,qu],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,qu))],null),null]))});
    gQ(eF,P(Tx,AF,Yv),kQ(AF,new Od(function(){return ZW},AF,dj([dt,ip,OD,Do,Es,pw,WG,zo,WC,ID],[sD,lz,"gateway/auth/spec.cljc",24,1,14,14,Ud,null,n(ZW)?ZW.od:null]))));var eX=new k(null,6,["application",new k(null,1,[Qr,!0],null),"instance",new k(null,1,[Qr,!1],null),"region",new k(null,1,[Qr,!1],null),"environment",new k(null,1,[Qr,!1],null),"machine",new k(null,1,[Qr,!1],null),"user",new k(null,1,[Qr,!1],null)],null);function fX(a){return pf(function(b,c,d){return He.j(b,M(eX,c)?Qf.g(c):c,d)},R,a)}
    function gX(a){var b=Lg(function(d){var e=H(d,0,null);H(d,1,null);d=Qr.g(e);return n(d)?null==u.h(a,Qf.g(e)):d},eX);if(n(b)){var c=H(b,0,null);H(b,1,null);return c}return null}function hX(a){var b=gX(a);if(n(b))throw ol(["Identity ",p.g(a)," is missing a required key: ",p.g(b)].join(""),R);}function iX(a,b){var c=n(a)?-1!=a.indexOf("127.0.0.1"):a;if(n(c))return c=b,n(c)?c:a;c=a;return n(c)?c:b}function jX(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e;}return b}bb();bH()||ab("iPod");ab("iPad");!ab("Android")||cb()||bb()||ab("Opera")||ab("Silk");cb();var kX=ab("Safari")&&!(cb()||ab("Coast")||ab("Opera")||ab("Edge")||ab("Edg/")||ab("OPR")||bb()||ab("Silk")||ab("Android"))&&!(bH()||ab("iPad")||ab("iPod"));var lX={},mX=null,nX=EH||FH,oX=nX||"function"==typeof aa.btoa,pX=nX||!kX&&!DH&&"function"==typeof aa.atob;function qX(a){var b;void 0===b&&(b=0);rX();b=lX[b];const c=Array(Math.floor(a.length/3)),d=b[64]||"";let e=0,f=0;for(;e<a.length-2;e+=3){var g=a[e],l=a[e+1],m=a[e+2],q=b[g>>2];g=b[(g&3)<<4|l>>4];l=b[(l&15)<<2|m>>6];m=b[m&63];c[f++]=""+q+g+l+m;}q=0;m=d;switch(a.length-e){case 2:q=a[e+1],m=b[(q&15)<<2]||d;case 1:a=a[e],c[f]=""+b[a>>2]+b[(a&3)<<4|q>>4]+m+d;}return c.join("")}
    function sX(a){return oX?aa.btoa(a):qX(jX(a))}function tX(a){if(pX)return aa.atob(a);var b="";uX(a,function(c){b+=String.fromCharCode(c);});return b}function uX(a,b){function c(m){for(;d<a.length;){var q=a.charAt(d++),t=mX[q];if(null!=t)return t;if(!Ya(q))throw Error("Unknown base64 encoding at char: "+q);}return m}rX();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),l=c(64);if(64===l&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=l&&b(g<<6&192|l));}}
    function rX(){if(!mX){mX={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/\x3d","+/","-_\x3d","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));lX[c]=d;for(var e=0;e<d.length;e++){var f=d[e];void 0===mX[f]&&(mX[f]=e);}}}}function vX(){this.blockSize=-1;}function wX(a,b){this.blockSize=-1;this.blockSize=xX;this.Ac=aa.Uint8Array?new Uint8Array(this.blockSize):Array(this.blockSize);this.Mc=this.td=0;this.fa=[];this.ye=a;this.se=b;this.tf=aa.Int32Array?new Int32Array(64):Array(64);void 0===yX&&(yX=aa.Int32Array?new Int32Array(zX):zX);this.reset();}var yX;ra(wX,vX);var xX=64,AX=Ma(128,Ua(xX-1));wX.prototype.reset=function(){this.Mc=this.td=0;this.fa=aa.Int32Array?new Int32Array(this.se):Na(this.se);};
    wX.prototype.Xc=function(){for(var a=this.Ac,b=this.tf,c=0,d=0;d<a.length;)b[c++]=a[d]<<24|a[d+1]<<16|a[d+2]<<8|a[d+3],d=4*c;for(a=16;64>a;a++){d=b[a-15]|0;c=b[a-2]|0;var e=(b[a-16]|0)+((d>>>7|d<<25)^(d>>>18|d<<14)^d>>>3)|0,f=(b[a-7]|0)+((c>>>17|c<<15)^(c>>>19|c<<13)^c>>>10)|0;b[a]=e+f|0;}c=this.fa[0]|0;d=this.fa[1]|0;var g=this.fa[2]|0,l=this.fa[3]|0,m=this.fa[4]|0,q=this.fa[5]|0,t=this.fa[6]|0;e=this.fa[7]|0;for(a=0;64>a;a++){var v=((c>>>2|c<<30)^(c>>>13|c<<19)^(c>>>22|c<<10))+(c&d^c&g^d&g)|0;f=
    m&q^~m&t;e=e+((m>>>6|m<<26)^(m>>>11|m<<21)^(m>>>25|m<<7))|0;f=f+(yX[a]|0)|0;f=e+(f+(b[a]|0)|0)|0;e=t;t=q;q=m;m=l+f|0;l=g;g=d;d=c;c=f+v|0;}this.fa[0]=this.fa[0]+c|0;this.fa[1]=this.fa[1]+d|0;this.fa[2]=this.fa[2]+g|0;this.fa[3]=this.fa[3]+l|0;this.fa[4]=this.fa[4]+m|0;this.fa[5]=this.fa[5]+q|0;this.fa[6]=this.fa[6]+t|0;this.fa[7]=this.fa[7]+e|0;};
    wX.prototype.update=function(a,b){void 0===b&&(b=a.length);var c=0,d=this.td;if("string"===typeof a)for(;c<b;)this.Ac[d++]=a.charCodeAt(c++),d==this.blockSize&&(this.Xc(),d=0);else if(ca(a))for(;c<b;){var e=a[c++];if(!("number"==typeof e&&0<=e&&255>=e&&e==(e|0)))throw Error("message must be a byte array");this.Ac[d++]=e;d==this.blockSize&&(this.Xc(),d=0);}else throw Error("message must be string or array");this.td=d;this.Mc+=b;};
    wX.prototype.digest=function(){var a=[],b=8*this.Mc;56>this.td?this.update(AX,56-this.td):this.update(AX,this.blockSize-(this.td-56));for(var c=63;56<=c;c--)this.Ac[c]=b&255,b/=256;this.Xc();for(c=b=0;c<this.ye;c++)for(var d=24;0<=d;d-=8)a[b++]=this.fa[c]>>d&255;return a};
    var zX=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
    4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function BX(){wX.call(this,8,CX);}ra(BX,wX);var CX=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function DX(a,b){this.blockSize=-1;this.blockSize=128;this.Ac=aa.Uint8Array?new Uint8Array(this.blockSize):Array(this.blockSize);this.Mc=this.jd=0;this.fa=[];this.ye=a;this.tf=[];this.se=EX(b);this.xe=!1;this.reset();}ra(DX,vX);var FX=Ma([128],Ua(127));h=DX.prototype;h.reset=function(){this.Mc=this.jd=0;this.fa=Na(this.se);this.xe=!1;};
    h.update=function(a,b){b=void 0!==b?b:a.length;if(this.xe)throw Error("this hasher needs to be reset");var c=this.jd;if("string"===typeof a)for(var d=0;d<b;d++){var e=a.charCodeAt(d);if(255<e)throw Error("Characters must be in range [0,255]");this.Ac[c++]=e;c==this.blockSize&&(this.Xc(),c=0);}else if(ca(a))for(d=0;d<b;d++){e=a[d];if("number"!==typeof e||0>e||255<e||e!=(e|0))throw Error("message must be a byte array");this.Ac[c++]=e;c==this.blockSize&&(this.Xc(),c=0);}else throw Error("message must be string or array");
    this.jd=c;this.Mc+=b;};h.digest=function(){if(this.xe)throw Error("this hasher needs to be reset");var a=8*this.Mc;112>this.jd?this.update(FX,112-this.jd):this.update(FX,this.blockSize-this.jd+112);for(var b=127;112<=b;b--)this.Ac[b]=a&255,a/=256;this.Xc();a=0;var c=Array(8*this.ye);for(b=0;b<this.ye;b++){var d=this.fa[b],e=d.ja;d=d.oa;for(var f=24;0<=f;f-=8)c[a++]=e>>f&255;for(f=24;0<=f;f-=8)c[a++]=d>>f&255;}this.xe=!0;return c};
    h.Xc=function(){for(var a=this.Ac,b=this.tf,c=0;16>c;c++){var d=8*c;b[c]=new va(a[d+4]<<24|a[d+5]<<16|a[d+6]<<8|a[d+7],a[d]<<24|a[d+1]<<16|a[d+2]<<8|a[d+3]);}for(c=16;80>c;c++){d=b[c-15];a=d.oa;d=d.ja;var e=b[c-2],f=e.oa;e=e.ja;b[c]=this.pg(b[c-16],b[c-7],new va(a>>>1^d<<31^a>>>8^d<<24^a>>>7^d<<25,d>>>1^a<<31^d>>>8^a<<24^d>>>7),new va(f>>>19^e<<13^e>>>29^f<<3^f>>>6^e<<26,e>>>19^f<<13^f>>>29^e<<3^e>>>6));}a=this.fa[0];d=this.fa[1];f=this.fa[2];e=this.fa[3];var g=this.fa[4],l=this.fa[5],m=this.fa[6],
    q=this.fa[7];for(c=0;80>c;c++){var t=a.oa,v=a.ja;t=(new va(t>>>28^v<<4^v>>>2^t<<30^v>>>7^t<<25,v>>>28^t<<4^t>>>2^v<<30^t>>>7^v<<25)).add(new va(a.oa&d.oa|d.oa&f.oa|a.oa&f.oa,a.ja&d.ja|d.ja&f.ja|a.ja&f.ja));v=g.oa;var y=g.ja,E=g.oa,J=g.ja;v=this.pg(q,new va(v>>>14^y<<18^v>>>18^y<<14^y>>>9^v<<23,y>>>14^v<<18^y>>>18^v<<14^v>>>9^y<<23),new va(E&l.oa|~E&m.oa,J&l.ja|~J&m.ja),GX[c],b[c]);q=m;m=l;l=g;g=e.add(v);e=f;f=d;d=a;a=v.add(t);}this.fa[0]=this.fa[0].add(a);this.fa[1]=this.fa[1].add(d);this.fa[2]=this.fa[2].add(f);
    this.fa[3]=this.fa[3].add(e);this.fa[4]=this.fa[4].add(g);this.fa[5]=this.fa[5].add(l);this.fa[6]=this.fa[6].add(m);this.fa[7]=this.fa[7].add(q);};h.pg=function(a,b,c){for(var d=(a.oa^2147483648)+(b.oa^2147483648),e=a.ja+b.ja,f=arguments.length-1;2<=f;--f)d+=arguments[f].oa^2147483648,e+=arguments[f].ja;arguments.length&1&&(d+=2147483648);e+=arguments.length>>1;e+=Math.floor(d/4294967296);return new va(d,e)};function EX(a){for(var b=[],c=0;c<a.length;c+=2)b.push(new va(a[c+1],a[c]));return b}
    var GX=EX([1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,
    1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,
    1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,
    289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591]);function HX(){DX.call(this,6,IX);}ra(HX,DX);var IX=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428];function JX(){DX.call(this,8,KX);}ra(JX,DX);var KX=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209];function LX(a,b,c){this.blockSize=-1;this.Qb=a;this.blockSize=c||a.blockSize||16;this.Yf=Array(this.blockSize);this.jf=Array(this.blockSize);a=b;a.length>this.blockSize&&(this.Qb.update(a),a=this.Qb.digest(),this.Qb.reset());for(c=0;c<this.blockSize;c++)b=c<a.length?a[c]:0,this.Yf[c]=b^92,this.jf[c]=b^54;this.Qb.update(this.jf);}ra(LX,vX);LX.prototype.reset=function(){this.Qb.reset();this.Qb.update(this.jf);};LX.prototype.update=function(a,b){this.Qb.update(a,b);};
    LX.prototype.digest=function(){var a=this.Qb.digest();this.Qb.reset();this.Qb.update(this.Yf);this.Qb.update(a);return this.Qb.digest()};LX.prototype.getHmac=function(a){this.reset();this.update(a);return this.digest()};var MX=new k(null,4,"HS256 sha256 HS384 sha384 HS512 sha512 RS256 RSA-SHA256".split(" "),null),NX=new k(null,4,"HS256 hmac HS384 hmac HS512 hmac RS256 sign".split(" "),null);function OX(a){return iJ(iJ(iJ(a,"+","-"),"/","_"),"\x3d","")}function PX(a,b){var c=function(){switch(a){case "sha256":return new BX;case "sha384":return new HX;case "sha512":return new JX;default:throw Error([p.g(a)," hashing not supported"].join(""));}}();return new LX(c,b)}
    function QX(a,b,c,d){switch(d){case "hmac":return OX(qX(PX(c,jX(b)).getHmac(a)));default:throw Error("algorithm not supported");}}function RX(a,b,c,d,e){switch(e){case "hmac":return x.h(b,QX(a,c,d,e));default:throw Error("algorithm not supported");}}
    function SX(a,b){b=qg(b);var c=u.h(b,KB),d=u.h(b,qo),e=u.h(b,wv),f=u.j(b,nv,yf((new Date).getTime(),1E3)),g=u.j(b,CE,0);if(n(function(){if(n(d)){var l=qo.g(a);Se(d)?(l=Kj([l]),l=Lb(Lg(l,d))):l=sg.h(l,d);return l}return d}()))throw ol(["Issuer does not match ",p.g(d)].join(""),new k(null,2,[Yv,cx,cw,qo],null));if(n(function(){if(n(e)){var l=wv.g(a);if(Se(l)){var m=Kj([e]);l=Lb(Lg(m,l));}else l=sg.h(e,l);return l}return e}()))throw ol(["Audience does not match ",p.g(e)].join(""),new k(null,2,[Yv,cx,
    cw,wv],null));if(n(function(){var l=$l.g(a);return n(l)?$l.g(a)<=f-g:l}()))throw ol(["Token is expired ",p.g($l.g(a))].join(""),new k(null,2,[Yv,cx,cw,$l],null));if(n(function(){var l=en.g(a);return n(l)?en.g(a)>f+g:l}()))throw ol(["Token is not yet valid ",p.g(en.g(a))].join(""),new k(null,2,[Yv,cx,cw,en],null));if(n(function(){var l=Zq.g(a);return n(l)?"number"===typeof c&&f-Zq.g(a)>c:l}()))throw ol(["Token is older than max-age ",p.g(c)].join(""),new k(null,2,[Yv,cx,cw,KB],null));return a}
    var TX=function TX(a){switch(arguments.length){case 2:return TX.h(arguments[0],arguments[1]);case 3:return TX.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};pa("gateway.common.jwt.unsign",TX);TX.h=function(a,b){return TX.j(a,b,R)};
    TX.j=function(a,b,c){c=qg(c);var d=u.j(c,qv,!1),e=lJ(a,".",0);a=u.h(e,0);var f=u.h(e,1);e=u.h(e,2);if(n(Lg(Ib,new S(null,3,5,T,[a,f,e],null))))throw Error("invalid token");var g=eV(tX(iJ(iJ(a,"_","/"),"-","+"))).alg,l=pf(function(q,t,v){return He.j(q,Qf.g(t),v)},R,Rk(eV(tX(iJ(iJ(f,"_","/"),"-","+"))))),m=u.h(MX,g);g=u.h(NX,g);if(n(d))return l;if(Lb(n(m)?g:m))throw Error("algorithm not supported");if(Lb(RX([p.g(a),".",p.g(f)].join(""),e,b,m,g)))throw Error("signature verification failed");return SX(l,
    c)};TX.I=3;var UX=function UX(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return UX.l(arguments[0],arguments[1],2<c.length?new Rd(c.slice(2),0,null):null)};pa("gateway.common.jwt.sign",UX);
    UX.l=function(a,b,c){var d=H(c,0,null);c=H(c,1,null);var e=n(d)?d:"HS256",f=n(c)?c:R;d=u.h(MX,e);c=u.h(NX,e);if(!We(a))throw Error("payload should be in JSON format");if(!We(f))throw Error("extra-headers should be a map");if(!n(n(d)?c:d))throw Error("algorithm not supported");e=OX(sX(fV(Nk(mg(De,f,new k(null,2,[Km,e,KG,"JWT"],null))))));a=OX(sX(fV(Nk(a))));b=QX([e,".",a].join(""),b,d,c);return [e,".",a,".",p.g(b)].join("")};UX.I=2;
    UX.M=function(a){var b=A(a),c=C(a);a=A(c);c=C(c);return this.l(b,a,c)};var VX=6E5;function WX(a,b,c){var d=kI()+VX;b=new k(null,3,[Yv,rz,uD,b,rz,c],null);d=n(d)?He.j(b,$l,yf(d,1E3)):b;return UX(d,so.g(a))}function XX(a,b){var c=kI();a=wh(wh(TX.j(b,a,n(c)?new k(null,1,[nv,yf(c,1E3)],null):null),Yv,Qf),uD,fX);return x.h(Yv.g(a),rz)?wh(a,rz,function(d){return wh(yL(d),Yv,Qf)}):a}var vV=new k(null,2,[yq,5E3,OG,2E4],null);function YX(a,b){if(null!=a&&null!=a.hf)a=a.hf(a,b);else {var c=YX[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=YX._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("AuthImpl.auth",a);}return a}
    function ZX(a,b){a=XX(a,b);b=Yv.g(a);switch(b instanceof w?b.X:null){case "gw-request":return b=rz.g(a),n(b)?NW.resolve(new k(null,3,[Yv,vC,rz,b,uD,uD.g(a)],null)):NW.reject(new k(null,2,[Yv,tx,Nr,"Token is missing the gateway request information"],null));case "authentication":return b=Kr.g(a),n(b)?NW.resolve(new k(null,2,[Yv,vC,Kr,b],null)):NW.reject(new k(null,2,[Yv,tx,Nr,"Token is missing the impersonation information"],null));default:return NW.reject(new k(null,2,[Yv,tx,Nr,["Invalid gateway token type: ",
    p.g(Yv.g(a))].join("")],null))}}function $X(a,b,c){var d=YW(qu.g(c));return n(d)?ZX(so.g(c),d):n(a)?TW(PW(function(e,f){return hI(a,new S(null,3,5,T,[e,f,c],null))}),b):NW.reject(ol("No authenticator configured",new k(null,2,[Yv,tx,Nr,"No authenticator configured"],null)))}function aY(a,b){this.Ke=a;this.timeout=b;}aY.prototype.Tf=function(){return n(this.Ke)?pI(this.Ke):null};aY.prototype.Sf=function(a,b){return $X(this.Ke,this.timeout,b)};
    function bY(a,b){a=Cj.l(F([vV,a]));var c=qg(a);a=u.h(c,yq);c=u.h(c,OG);var d=gI(new AH(yH(c),c));TU(BD,"gateway.auth.impl",87,new Dk(function(){return new S(null,2,5,T,["starting authenticator with impl ",b],null)}),-903307372);var e=gI(1);PH(function(){var f=function(){function l(m){var q=m[1];if(1===q)return m[2]=null,m[1]=2,rv;if(2===q)return eI(m,d);if(3===q)return fI(m,m[2]);if(4===q)return q=m[7],q=m[2],m[7]=q,m[1]=n(q)?5:6,rv;if(5===q){q=m[7];var t=H(q,0,null),v=H(q,1,null);q=H(q,2,null);var y=
    wh(q,qu,yL),E=qu.g(y);q=TU(vt,"gateway.auth.impl",94,new Dk(function(){return function(){var J=T;var W=n(ZA.g(E))?He.j(E,ZA,"XXX"):He.j(E,Pl,"XXX");return new S(null,2,5,J,["processing authentication",W],null)}}()),-144282562);y=YX(b,y);y=QW(y,function(){return function(J){return t.g?t.g(J):t.call(null,J)}}());y=RW(y,function(){return function(J){return v.g?v.g(J):v.call(null,J)}}());m[8]=q;m[9]=y;m[2]=null;m[1]=2;return rv}return 6===q?(m[2]=null,m[1]=7,rv):7===q?(m[2]=m[2],m[1]=3,rv):null}return function(){function m(v){for(;;){a:try{for(;;){var y=
    l(v);if(!Nf(y,rv)){var E=y;break a}}}catch(J){E=J;v[2]=E;if(z(v[4]))v[1]=A(v[4]);else throw E;E=rv;}if(!Nf(E,rv))return E}}function q(){var v=[null,null,null,null,null,null,null,null,null,null];v[0]=t;v[1]=1;return v}var t=null;t=function(v){switch(arguments.length){case 0:return q.call(this);case 1:return m.call(this,v)}throw Error("Invalid arity: "+arguments.length);};t.v=q;t.g=m;return t}()}(),g=function(){var l=f();l[6]=e;return l}();return dI(g)});return new aY(d,a)}function cY(a){this.Je=a;}cY.prototype.hf=function(a,b){var c=this;return RW(QW(function(){var d=Nk(b);return c.Je.g?c.Je.g(d):c.Je.call(null,d)}(),function(d){var e=wh(yL(Rk(d)),Yv,Qf);TU(vt,"gateway.cljs.authenticators",15,new Dk(function(){return new S(null,2,5,T,["auth response",e],null)}),-1923192001);return e}),function(d){TU(vt,"gateway.cljs.authenticators",18,new Dk(function(){return new S(null,2,5,T,["auth failure",d],null)}),108670914);throw ol(d,new k(null,2,[Yv,tx,Nr,d],null));})};var sR={},IV,RV,SV,VV,WV,XV,zR=function zR(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return zR.l(0<c.length?new Rd(c.slice(0),0,null):null)};zR.l=function(a){return ad(ub,lg(wk,a))};zR.I=0;zR.M=function(a){return this.l(z(a))};var AR=function AR(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return AR.l(0<c.length?new Rd(c.slice(0),0,null):null)};AR.l=function(a){return ad(ub,lg(uk,a))};AR.I=0;AR.M=function(a){return this.l(z(a))};
    function BR(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;lg(AR,0<b.length?new Rd(b.slice(0),0,null):null);ad(ub,"\n");}function CR(a){if("number"===typeof a)return a;if("string"===typeof a&&1===a.length)return a.charCodeAt(0);throw Error("Argument to char must be a character or number");}
    function DR(a,b,c){var d=c;for(c=G;;){if(Re(d))return new S(null,2,5,T,[c,b],null);var e=A(d);d=C(d);e=lg(a,new S(null,2,5,T,[e,b],null));b=H(e,0,null);e=H(e,1,null);c=De.h(c,b);b=e;}}function ER(a,b){var c=b;for(b=G;;){var d=lg(a,new S(null,1,5,T,[c],null));c=H(d,0,null);d=H(d,1,null);if(Lb(c))return new S(null,2,5,T,[b,d],null);b=De.h(b,c);c=d;}}
    function FR(a){return new S(null,2,5,T,[qh.h(R,function(){return function d(c){return new Sf(null,function(){for(;;){var e=z(c);if(e){if(Ze(e)){var f=pd(e),g=D(f),l=Wf(g);a:for(var m=0;;)if(m<g){var q=jc(f,m),t=H(q,0,null);q=H(q,1,null);var v=H(q,0,null);H(q,1,null);l.add(new S(null,2,5,T,[t,v],null));m+=1;}else {f=!0;break a}return f?Yf($f(l),d(qd(e))):Yf($f(l),null)}f=A(e);l=H(f,0,null);f=H(f,1,null);g=H(f,0,null);H(f,1,null);return we(new S(null,2,5,T,[l,g],null),d(Td(e)))}return null}},null,null)}(a)}()),
    qh.h(R,function(){return function d(c){return new Sf(null,function(){for(;;){var e=z(c);if(e){if(Ze(e)){var f=pd(e),g=D(f),l=Wf(g);a:for(var m=0;;)if(m<g){var q=jc(f,m),t=H(q,0,null);q=H(q,1,null);H(q,0,null);q=H(q,1,null);l.add(new S(null,2,5,T,[t,q],null));m+=1;}else {f=!0;break a}return f?Yf($f(l),d(qd(e))):Yf($f(l),null)}f=A(e);l=H(f,0,null);f=H(f,1,null);H(f,0,null);f=H(f,1,null);return we(new S(null,2,5,T,[l,f],null),d(Td(e)))}return null}},null,null)}(a)}())],null)}
    function GR(a,b){return qh.h(R,function(){return function e(d){return new Sf(null,function(){for(;;){var f=z(d);if(f){if(Ze(f)){var g=pd(f),l=D(g),m=Wf(l);a:for(var q=0;;)if(q<l){var t=jc(g,q),v=H(t,0,null);t=H(t,1,null);m.add(new S(null,2,5,T,[v,new S(null,2,5,T,[t,b],null)],null));q+=1;}else {g=!0;break a}return g?Yf($f(m),e(qd(f))):Yf($f(m),null)}g=A(f);m=H(g,0,null);g=H(g,1,null);return we(new S(null,2,5,T,[m,new S(null,2,5,T,[g,b],null)],null),e(Td(f)))}return null}},null,null)}(a)}())}
    function HR(){var a=ub;if(null!=a&&null!=a.Xe)a.Xe(a);else {var b=HR[ba(null==a?null:a)];if(null!=b)b.g?b.g(a):b.call(null,a);else if(b=HR._,null!=b)b.g?b.g(a):b.call(null,a);else throw Sb("IPrettyFlush.-ppflush",a);}}function IR(a,b){a=r(r(a));return b.g?b.g(a):b.call(null,a)}function JR(a,b,c){Yg.D(r(a),He,b,c);}function KR(a,b){x.h(b,"\n")?(JR(a,ZG,0),JR(a,pw,IR(a,pw)+1)):JR(a,ZG,IR(a,ZG)+1);return ad(IR(a,dG),b)}
    function LR(a,b){var c=Vg(new k(null,4,[QC,b,ZG,0,pw,0,dG,a],null));if("undefined"===typeof qb||"undefined"===typeof sR||"undefined"===typeof IV)IV=function(d,e,f,g){this.Ga=d;this.lf=e;this.$c=f;this.Eh=g;this.C=1074167808;this.O=0;},IV.prototype.U=function(d,e){return new IV(this.Ga,this.lf,this.$c,e)},IV.prototype.T=function(){return this.Eh},IV.prototype.Db=function(){return this.$c},IV.prototype.pc=function(){return bd(this.Ga)},IV.prototype.Sc=function(d,e){d=Rb(e);if(n(x.h?x.h(String,d):x.call(null,
    String,d)))return d=e.lastIndexOf("\n"),0>d?JR(this,ZG,IR(this,ZG)+D(e)):(JR(this,ZG,D(e)-d-1),JR(this,pw,IR(this,pw)+D(mh.h(function(f){return x.h(f,"\n")},e)))),ad(IR(this,dG),e);if(n(x.h?x.h(Number,d):x.call(null,Number,d)))return KR(this,e);throw Error(["No matching clause: ",p.g(d)].join(""));},IV.Za=!0,IV.Xa="cljs.pprint/t_cljs$pprint21507",IV.ab=function(d){return ad(d,"cljs.pprint/t_cljs$pprint21507")};return new IV(a,b,c,R)}
    function MR(a,b,c,d,e,f,g,l,m,q,t,v,y){this.parent=a;this.Bb=b;this.ub=c;this.tb=d;this.vb=e;this.wb=f;this.prefix=g;this.Ab=l;this.Cb=m;this.yb=q;this.F=t;this.m=v;this.G=y;this.C=2230716170;this.O=139264;}h=MR.prototype;h.da=function(a,b){return this.S(null,b,null)};
    h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "parent":return this.parent;case "section":return this.Bb;case "start-col":return this.ub;case "indent":return this.tb;case "done-nl":return this.vb;case "intra-block-nl":return this.wb;case "prefix":return this.prefix;case "per-line-prefix":return this.Ab;case "suffix":return this.Cb;case "logical-block-callback":return this.yb;default:return u.j(this.m,b,c)}};
    h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.logical-block{",", ","}",c,cg.h(new S(null,10,5,T,[new S(null,2,5,T,[TF,this.parent],null),new S(null,2,5,T,[gF,this.Bb],null),new S(null,2,5,T,[oE,this.ub],null),new S(null,2,5,T,[cq,this.tb],null),new S(null,2,5,T,[gt,this.vb],null),new S(null,2,5,T,[nm,this.wb],null),new S(null,2,5,T,[wr,this.prefix],null),new S(null,2,5,T,[on,this.Ab],null),new S(null,2,5,T,[os,this.Cb],null),new S(null,2,5,T,[Cp,this.yb],
    null)],null),this.m))};h.Aa=function(){return new ni(this,10,new S(null,10,5,T,[TF,gF,oE,cq,gt,nm,wr,on,os,Cp],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 10+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=1977012399^ae(this)};
    h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.parent,b.parent)&&x.h(this.Bb,b.Bb)&&x.h(this.ub,b.ub)&&x.h(this.tb,b.tb)&&x.h(this.vb,b.vb)&&x.h(this.wb,b.wb)&&x.h(this.prefix,b.prefix)&&x.h(this.Ab,b.Ab)&&x.h(this.Cb,b.Cb)&&x.h(this.yb,b.yb)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,10,[os,null,cq,null,TF,null,gF,null,gt,null,oE,null,wr,null,on,null,Cp,null,nm,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new MR(this.parent,this.Bb,this.ub,this.tb,this.vb,this.wb,this.prefix,this.Ab,this.Cb,this.yb,this.F,tg(Je.h(this.m,b)),null)};
    h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "parent":case "section":case "start-col":case "indent":case "done-nl":case "intra-block-nl":case "prefix":case "per-line-prefix":case "suffix":case "logical-block-callback":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(TF,b):Nf.call(null,TF,b))?new MR(c,this.Bb,this.ub,this.tb,this.vb,this.wb,this.prefix,this.Ab,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(gF,b):Nf.call(null,gF,b))?new MR(this.parent,c,this.ub,this.tb,this.vb,this.wb,this.prefix,this.Ab,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(oE,b):Nf.call(null,oE,b))?new MR(this.parent,this.Bb,c,this.tb,this.vb,this.wb,this.prefix,this.Ab,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(cq,b):Nf.call(null,cq,b))?
    new MR(this.parent,this.Bb,this.ub,c,this.vb,this.wb,this.prefix,this.Ab,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(gt,b):Nf.call(null,gt,b))?new MR(this.parent,this.Bb,this.ub,this.tb,c,this.wb,this.prefix,this.Ab,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(nm,b):Nf.call(null,nm,b))?new MR(this.parent,this.Bb,this.ub,this.tb,this.vb,c,this.prefix,this.Ab,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(wr,b):Nf.call(null,wr,b))?new MR(this.parent,this.Bb,this.ub,this.tb,this.vb,this.wb,c,
    this.Ab,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(on,b):Nf.call(null,on,b))?new MR(this.parent,this.Bb,this.ub,this.tb,this.vb,this.wb,this.prefix,c,this.Cb,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(os,b):Nf.call(null,os,b))?new MR(this.parent,this.Bb,this.ub,this.tb,this.vb,this.wb,this.prefix,this.Ab,c,this.yb,this.F,this.m,null):n(Nf.h?Nf.h(Cp,b):Nf.call(null,Cp,b))?new MR(this.parent,this.Bb,this.ub,this.tb,this.vb,this.wb,this.prefix,this.Ab,this.Cb,c,this.F,this.m,null):new MR(this.parent,
    this.Bb,this.ub,this.tb,this.vb,this.wb,this.prefix,this.Ab,this.Cb,this.yb,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,10,5,T,[new Nh(TF,this.parent),new Nh(gF,this.Bb),new Nh(oE,this.ub),new Nh(cq,this.tb),new Nh(gt,this.vb),new Nh(nm,this.wb),new Nh(wr,this.prefix),new Nh(on,this.Ab),new Nh(os,this.Cb),new Nh(Cp,this.yb)],null),this.m))};h.U=function(a,b){return new MR(this.parent,this.Bb,this.ub,this.tb,this.vb,this.wb,this.prefix,this.Ab,this.Cb,this.yb,b,this.m,this.G)};
    h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};function NR(a,b){for(b=TF.g(b);;){if(null==b)return !1;if(a===b)return !0;b=TF.g(b);}}function OR(a,b,c,d,e,f,g,l){this.$=a;this.data=b;this.Sb=c;this.Z=d;this.Y=e;this.F=f;this.m=g;this.G=l;this.C=2230716170;this.O=139264;}h=OR.prototype;h.da=function(a,b){return this.S(null,b,null)};
    h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "type-tag":return this.$;case "data":return this.data;case "trailing-white-space":return this.Sb;case "start-pos":return this.Z;case "end-pos":return this.Y;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.buffer-blob{",", ","}",c,cg.h(new S(null,5,5,T,[new S(null,2,5,T,[wG,this.$],null),new S(null,2,5,T,[Sw,this.data],null),new S(null,2,5,T,[hm,this.Sb],null),new S(null,2,5,T,[zD,this.Z],null),new S(null,2,5,T,[kn,this.Y],null)],null),this.m))};h.Aa=function(){return new ni(this,5,new S(null,5,5,T,[wG,Sw,hm,zD,kn],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 5+D(this.m)};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=1809113693^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.$,b.$)&&x.h(this.data,b.data)&&x.h(this.Sb,b.Sb)&&x.h(this.Z,b.Z)&&x.h(this.Y,b.Y)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,5,[kn,null,hm,null,wG,null,zD,null,Sw,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new OR(this.$,this.data,this.Sb,this.Z,this.Y,this.F,tg(Je.h(this.m,b)),null)};
    h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "type-tag":case "data":case "trailing-white-space":case "start-pos":case "end-pos":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(wG,b):Nf.call(null,wG,b))?new OR(c,this.data,this.Sb,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(Sw,b):Nf.call(null,Sw,b))?new OR(this.$,c,this.Sb,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(hm,b):Nf.call(null,hm,b))?new OR(this.$,this.data,c,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(zD,b):Nf.call(null,zD,b))?new OR(this.$,this.data,this.Sb,c,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(kn,b):Nf.call(null,kn,b))?new OR(this.$,this.data,this.Sb,this.Z,c,this.F,
    this.m,null):new OR(this.$,this.data,this.Sb,this.Z,this.Y,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,5,5,T,[new Nh(wG,this.$),new Nh(Sw,this.data),new Nh(hm,this.Sb),new Nh(zD,this.Z),new Nh(kn,this.Y)],null),this.m))};h.U=function(a,b){return new OR(this.$,this.data,this.Sb,this.Z,this.Y,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    function PR(a,b,c,d,e,f,g,l){this.$=a;this.type=b;this.ha=c;this.Z=d;this.Y=e;this.F=f;this.m=g;this.G=l;this.C=2230716170;this.O=139264;}h=PR.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "type-tag":return this.$;case "type":return this.type;case "logical-block":return this.ha;case "start-pos":return this.Z;case "end-pos":return this.Y;default:return u.j(this.m,b,c)}};
    h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.nl-t{",", ","}",c,cg.h(new S(null,5,5,T,[new S(null,2,5,T,[wG,this.$],null),new S(null,2,5,T,[Yv,this.type],null),new S(null,2,5,T,[DB,this.ha],null),new S(null,2,5,T,[zD,this.Z],null),new S(null,2,5,T,[kn,this.Y],null)],null),this.m))};
    h.Aa=function(){return new ni(this,5,new S(null,5,5,T,[wG,Yv,DB,zD,kn],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 5+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-1640656800^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.$,b.$)&&x.h(this.type,b.type)&&x.h(this.ha,b.ha)&&x.h(this.Z,b.Z)&&x.h(this.Y,b.Y)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,5,[kn,null,Yv,null,DB,null,wG,null,zD,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new PR(this.$,this.type,this.ha,this.Z,this.Y,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "type-tag":case "type":case "logical-block":case "start-pos":case "end-pos":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(wG,b):Nf.call(null,wG,b))?new PR(c,this.type,this.ha,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(Yv,b):Nf.call(null,Yv,b))?new PR(this.$,c,this.ha,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(DB,b):Nf.call(null,DB,b))?new PR(this.$,this.type,c,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(zD,b):Nf.call(null,zD,b))?new PR(this.$,this.type,this.ha,c,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(kn,b):Nf.call(null,kn,b))?new PR(this.$,this.type,this.ha,this.Z,c,this.F,
    this.m,null):new PR(this.$,this.type,this.ha,this.Z,this.Y,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,5,5,T,[new Nh(wG,this.$),new Nh(Yv,this.type),new Nh(DB,this.ha),new Nh(zD,this.Z),new Nh(kn,this.Y)],null),this.m))};h.U=function(a,b){return new PR(this.$,this.type,this.ha,this.Z,this.Y,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    function QR(a,b,c,d,e,f,g){this.$=a;this.ha=b;this.Z=c;this.Y=d;this.F=e;this.m=f;this.G=g;this.C=2230716170;this.O=139264;}h=QR.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "type-tag":return this.$;case "logical-block":return this.ha;case "start-pos":return this.Z;case "end-pos":return this.Y;default:return u.j(this.m,b,c)}};
    h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.start-block-t{",", ","}",c,cg.h(new S(null,4,5,T,[new S(null,2,5,T,[wG,this.$],null),new S(null,2,5,T,[DB,this.ha],null),new S(null,2,5,T,[zD,this.Z],null),new S(null,2,5,T,[kn,this.Y],null)],null),this.m))};
    h.Aa=function(){return new ni(this,4,new S(null,4,5,T,[wG,DB,zD,kn],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 4+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-414877272^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.$,b.$)&&x.h(this.ha,b.ha)&&x.h(this.Z,b.Z)&&x.h(this.Y,b.Y)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,4,[kn,null,DB,null,wG,null,zD,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new QR(this.$,this.ha,this.Z,this.Y,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "type-tag":case "logical-block":case "start-pos":case "end-pos":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(wG,b):Nf.call(null,wG,b))?new QR(c,this.ha,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(DB,b):Nf.call(null,DB,b))?new QR(this.$,c,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(zD,b):Nf.call(null,zD,b))?new QR(this.$,this.ha,c,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(kn,b):Nf.call(null,kn,b))?new QR(this.$,this.ha,this.Z,c,this.F,this.m,null):new QR(this.$,this.ha,this.Z,this.Y,this.F,He.j(this.m,b,c),null)};
    h.ea=function(){return z(cg.h(new S(null,4,5,T,[new Nh(wG,this.$),new Nh(DB,this.ha),new Nh(zD,this.Z),new Nh(kn,this.Y)],null),this.m))};h.U=function(a,b){return new QR(this.$,this.ha,this.Z,this.Y,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};function RR(a,b,c,d,e,f,g){this.$=a;this.ha=b;this.Z=c;this.Y=d;this.F=e;this.m=f;this.G=g;this.C=2230716170;this.O=139264;}h=RR.prototype;h.da=function(a,b){return this.S(null,b,null)};
    h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "type-tag":return this.$;case "logical-block":return this.ha;case "start-pos":return this.Z;case "end-pos":return this.Y;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.end-block-t{",", ","}",c,cg.h(new S(null,4,5,T,[new S(null,2,5,T,[wG,this.$],null),new S(null,2,5,T,[DB,this.ha],null),new S(null,2,5,T,[zD,this.Z],null),new S(null,2,5,T,[kn,this.Y],null)],null),this.m))};h.Aa=function(){return new ni(this,4,new S(null,4,5,T,[wG,DB,zD,kn],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 4+D(this.m)};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=1365867980^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.$,b.$)&&x.h(this.ha,b.ha)&&x.h(this.Z,b.Z)&&x.h(this.Y,b.Y)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,4,[kn,null,DB,null,wG,null,zD,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new RR(this.$,this.ha,this.Z,this.Y,this.F,tg(Je.h(this.m,b)),null)};
    h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "type-tag":case "logical-block":case "start-pos":case "end-pos":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(wG,b):Nf.call(null,wG,b))?new RR(c,this.ha,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(DB,b):Nf.call(null,DB,b))?new RR(this.$,c,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(zD,b):Nf.call(null,zD,b))?new RR(this.$,this.ha,c,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(kn,b):Nf.call(null,kn,b))?new RR(this.$,this.ha,this.Z,c,this.F,this.m,null):new RR(this.$,this.ha,this.Z,this.Y,this.F,He.j(this.m,b,c),null)};
    h.ea=function(){return z(cg.h(new S(null,4,5,T,[new Nh(wG,this.$),new Nh(DB,this.ha),new Nh(zD,this.Z),new Nh(kn,this.Y)],null),this.m))};h.U=function(a,b){return new RR(this.$,this.ha,this.Z,this.Y,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};function SR(a,b,c,d,e,f,g,l,m){this.$=a;this.ha=b;this.Mb=c;this.offset=d;this.Z=e;this.Y=f;this.F=g;this.m=l;this.G=m;this.C=2230716170;this.O=139264;}h=SR.prototype;
    h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "type-tag":return this.$;case "logical-block":return this.ha;case "relative-to":return this.Mb;case "offset":return this.offset;case "start-pos":return this.Z;case "end-pos":return this.Y;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.indent-t{",", ","}",c,cg.h(new S(null,6,5,T,[new S(null,2,5,T,[wG,this.$],null),new S(null,2,5,T,[DB,this.ha],null),new S(null,2,5,T,[jm,this.Mb],null),new S(null,2,5,T,[wx,this.offset],null),new S(null,2,5,T,[zD,this.Z],null),new S(null,2,5,T,[kn,this.Y],null)],null),this.m))};h.Aa=function(){return new ni(this,6,new S(null,6,5,T,[wG,DB,jm,wx,zD,kn],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};
    h.ca=function(){return 6+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-1602780238^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.$,b.$)&&x.h(this.ha,b.ha)&&x.h(this.Mb,b.Mb)&&x.h(this.offset,b.offset)&&x.h(this.Z,b.Z)&&x.h(this.Y,b.Y)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,6,[wx,null,kn,null,jm,null,DB,null,wG,null,zD,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new SR(this.$,this.ha,this.Mb,this.offset,this.Z,this.Y,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "type-tag":case "logical-block":case "relative-to":case "offset":case "start-pos":case "end-pos":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(wG,b):Nf.call(null,wG,b))?new SR(c,this.ha,this.Mb,this.offset,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(DB,b):Nf.call(null,DB,b))?new SR(this.$,c,this.Mb,this.offset,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(jm,b):Nf.call(null,jm,b))?new SR(this.$,this.ha,c,this.offset,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(wx,b):Nf.call(null,wx,b))?new SR(this.$,this.ha,this.Mb,c,this.Z,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(zD,b):Nf.call(null,zD,b))?new SR(this.$,
    this.ha,this.Mb,this.offset,c,this.Y,this.F,this.m,null):n(Nf.h?Nf.h(kn,b):Nf.call(null,kn,b))?new SR(this.$,this.ha,this.Mb,this.offset,this.Z,c,this.F,this.m,null):new SR(this.$,this.ha,this.Mb,this.offset,this.Z,this.Y,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,6,5,T,[new Nh(wG,this.$),new Nh(DB,this.ha),new Nh(jm,this.Mb),new Nh(wx,this.offset),new Nh(zD,this.Z),new Nh(kn,this.Y)],null),this.m))};
    h.U=function(a,b){return new SR(this.$,this.ha,this.Mb,this.offset,this.Z,this.Y,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};var TR=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("cljs.pprint","write-token"),function(f,g){return wG.g(g)},e,a,b,c,d)}();
    TR.B(null,Oo,function(a,b){var c=Cp.g(r(r(a)));n(c)&&(c.g?c.g(Wu):c.call(null,Wu));b=DB.g(b);c=wr.g(b);n(c)&&ad(dG.g(r(r(a))),c);a=IR(dG.g(r(r(a))),ZG);Wg(oE.g(b),a);return Wg(cq.g(b),a)});TR.B(null,mC,function(a,b){var c=Cp.g(r(r(a)));n(c)&&(c.g?c.g(Mn):c.call(null,Mn));b=os.g(DB.g(b));return n(b)?ad(dG.g(r(r(a))),b):null});
    TR.B(null,Jz,function(a,b){var c=DB.g(b),d=cq.g(c),e=wx.g(b);b=jm.g(b);if(n(x.h?x.h(Hv,b):x.call(null,Hv,b)))a=r(oE.g(c));else if(n(x.h?x.h(Jm,b):x.call(null,Jm,b)))a=IR(dG.g(r(r(a))),ZG);else throw Error(["No matching clause: ",p.g(b)].join(""));return Wg(d,e+a)});TR.B(null,cz,function(a,b){return ad(dG.g(r(r(a))),Sw.g(b))});
    TR.B(null,ws,function(a,b){var c=x.h(Yv.g(b),Vs);c||(c=(c=!x.h(Yv.g(b),KD))?r(gt.g(DB.g(b))):c);n(c)?UR.h?UR.h(a,b):UR.call(null,a,b):(b=hm.g(r(r(a))),n(b)&&ad(dG.g(r(r(a))),b));return Yg.D(r(a),He,hm,null)});
    function VR(a,b,c){b=z(b);for(var d=null,e=0,f=0;;)if(f<e){var g=d.V(null,f);if(!x.h(wG.g(g),ws)){var l=hm.g(r(r(a)));n(l)&&ad(dG.g(r(r(a))),l);}TR.h(a,g);Yg.D(r(a),He,hm,hm.g(g));g=hm.g(r(r(a)));n(n(c)?g:c)&&(ad(dG.g(r(r(a))),g),Yg.D(r(a),He,hm,null));f+=1;}else if(b=z(b))Ze(b)?(d=pd(b),b=qd(b),g=d,e=D(d),d=g):(g=A(b),x.h(wG.g(g),ws)||(d=hm.g(r(r(a))),n(d)&&ad(dG.g(r(r(a))),d)),TR.h(a,g),Yg.D(r(a),He,hm,hm.g(g)),g=hm.g(r(r(a))),n(n(c)?g:c)&&(ad(dG.g(r(r(a))),g),Yg.D(r(a),He,hm,null)),b=C(b),d=null,
    e=0),f=0;else break}function WR(a,b){var c=IR(dG.g(r(r(a))),QC),d;(d=null==c)||(a=IR(dG.g(r(r(a))),ZG),b=(b=z(b))?kn.g(Ce(b))-zD.g(A(b)):0,d=a+b<c);return d}function YR(a,b,c){b=r(gt.g(b));return n(b)?b:!WR(a,c)}function ZR(a,b,c){var d=Hx.g(r(r(a))),e=IR(dG.g(r(r(a))),QC);return n(d)?n(e)?(d=r(oE.g(b))>=e-d)?YR(a,b,c):d:e:d}var $R=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("cljs.pprint","emit-nl?"),function(f){return Yv.g(f)},e,a,b,c,d)}();
    $R.B(null,Dw,function(a,b,c){a=DB.g(a);return YR(b,a,c)});$R.B(null,Dm,function(a,b,c){a=DB.g(a);return ZR(b,a,c)});$R.B(null,KD,function(a,b,c,d){a=DB.g(a);var e=r(nm.g(a));return n(e)?e:(d=!WR(b,d))?d:ZR(b,a,c)});$R.B(null,Vs,function(){return !0});function aS(a){var b=A(a),c=DB.g(b);b=z(Sj(function(d){return !(x.h(wG.g(d),ws)&&NR(DB.g(d),c))},C(a)));return new S(null,2,5,T,[b,z(eh(D(b)+1,a))],null)}
    function bS(a){var b=A(a),c=DB.g(b);return z(Sj(function(d){var e=DB.g(d);return !(x.h(wG.g(d),ws)&&(x.h(e,c)||NR(e,c)))},C(a)))}function UR(a,b){ad(dG.g(r(r(a))),"\n");Yg.D(r(a),He,hm,null);b=DB.g(b);var c=on.g(b);n(c)&&ad(dG.g(r(r(a))),c);c=lg(p,hh(r(cq.g(b))-D(c)," "));ad(dG.g(r(r(a))),c);a:for(Wg(nm.g(b),!0),Wg(gt.g(b),!0),a=TF.g(b);;)if(n(a))Wg(gt.g(a),!0),Wg(nm.g(a),!0),a=TF.g(a);else break a;return null}
    function cS(a){var b=z(Sj(function(c){return !x.h(wG.g(c),ws)},a));return new S(null,2,5,T,[b,z(eh(D(b),a))],null)}var dS=function dS(a,b){var d=cS(b);b=H(d,0,null);var e=H(d,1,null);n(b)&&VR(a,b,!1);if(n(e)){d=aS(e);b=H(d,0,null);d=H(d,1,null);var f=A(e),g=$R.D(f,a,b,bS(e));n(g)&&(UR(a,f),e=C(e));WR(a,e)?a=e:(e=dS.h?dS.h(a,b):dS.call(null,a,b),x.h(e,b)?(VR(a,b,!1),a=d):a=qh.h(G,cg.h(e,d)));return a}return null};
    function eS(a){for(var b=Op.g(r(r(a)));;){Yg.D(r(a),He,Op,qh.h(G,b));if(WR(a,b))return null;var c=dS(a,b);if(b!==c)b=c;else return null}}function fS(a,b){Yg.D(r(a),He,Op,De.h(Op.g(r(r(a))),b));return WR(a,Op.g(r(r(a))))?null:eS(a)}function gS(a){var b=hm.g(r(r(a)));return n(b)?(ad(dG.g(r(r(a))),b),Yg.D(r(a),He,hm,null)):null}
    function hS(a,b){var c=lJ(b,"\n",-1);if(x.h(D(c),1))return b;b=on.g(A(ho.g(r(r(a)))));var d=A(c);if(x.h(my,cp.g(r(r(a))))){var e=MG.g(r(r(a))),f=e+D(d);Yg.D(r(a),He,MG,f);fS(a,new OR(cz,d,null,e,f,null,null,null));eS(a);d=Op.g(r(r(a)));n(d)&&(VR(a,d,!0),Yg.D(r(a),He,Op,G));}else gS(a),ad(dG.g(r(r(a))),d);ad(dG.g(r(r(a))),"\n");d=z(C(Nj(c)));e=null;for(var g=f=0;;)if(g<f){var l=e.V(null,g);ad(dG.g(r(r(a))),l);ad(dG.g(r(r(a))),"\n");n(b)&&ad(dG.g(r(r(a))),b);g+=1;}else if(d=z(d))e=d,Ze(e)?(d=pd(e),g=
    qd(e),e=d,f=D(d),d=g):(d=A(e),ad(dG.g(r(r(a))),d),ad(dG.g(r(r(a))),"\n"),n(b)&&ad(dG.g(r(r(a))),b),d=C(e),e=null,f=0),g=0;else break;Yg.D(r(a),He,my,up);return Ce(c)}
    function iS(a){var b=jS,c=kS,d=new MR(null,null,Vg(0),Vg(0),Vg(!1),Vg(!1),null,null,null,null,null,null,null),e=Vg(dj([ho,Hx,QD,$s,Ku,cp,MG,hm,dG,Ls,Op],[d,c,d,!0,null,up,0,null,LR(a,b),1,G]));if("undefined"===typeof qb||"undefined"===typeof sR||"undefined"===typeof RV)RV=function(f,g,l,m,q,t){this.Ga=f;this.lf=g;this.Nh=l;this.mh=m;this.$c=q;this.Fh=t;this.C=1074167808;this.O=0;},RV.prototype.U=function(f,g){return new RV(this.Ga,this.lf,this.Nh,this.mh,this.$c,g)},RV.prototype.T=function(){return this.Fh},
    RV.prototype.Db=function(){return this.$c},RV.prototype.Sc=function(f,g){f=Rb(g);if(n(x.h?x.h(String,f):x.call(null,String,f))){var l=hS(this,g);g=l.replace(/\s+$/,"");f=l.substring(g.length);var m=cp.g(r(r(this)));if(x.h(m,up))return gS(this),ad(dG.g(r(r(this))),g),Yg.D(r(this),He,hm,f);m=MG.g(r(r(this)));l=m+D(l);Yg.D(r(this),He,MG,l);return fS(this,new OR(cz,g,f,m,l,null,null,null))}if(n(x.h?x.h(Number,f):x.call(null,Number,f)))return x.h(cp.g(r(r(this))),up)?(gS(this),g=ad(dG.g(r(r(this))),g)):
    x.h(g,"\n")?g=hS(this,"\n"):(f=MG.g(r(r(this))),l=f+1,Yg.D(r(this),He,MG,l),g=wf(g),g=fS(this,new OR(cz,g,null,f,l,null,null,null))),g;throw Error(["No matching clause: ",p.g(f)].join(""));},RV.prototype.pc=function(){this.Xe(null);return bd(dG.g(r(r(this))))},RV.prototype.Xe=function(){return x.h(cp.g(r(r(this))),my)?(VR(this,Op.g(r(r(this))),!0),Yg.D(r(this),He,Op,G)):gS(this)},RV.Za=!0,RV.Xa="cljs.pprint/t_cljs$pprint21656",RV.ab=function(f){return ad(f,"cljs.pprint/t_cljs$pprint21656")};return new RV(a,
    b,c,d,e,R)}function lS(a,b){var c=ub;b=new MR(ho.g(r(r(c))),null,Vg(0),Vg(0),Vg(!1),Vg(!1),a,null,b,null,null,null,null);Yg.D(r(c),He,ho,b);if(x.h(cp.g(r(r(c))),up)){gS(c);var d=Cp.g(r(r(c)));n(d)&&(d.g?d.g(Wu):d.call(null,Wu));n(a)&&ad(dG.g(r(r(c))),a);c=IR(dG.g(r(r(c))),ZG);Wg(b.ub,c);Wg(b.tb,c);}else d=MG.g(r(r(c))),a=d+(n(a)?D(a):0),Yg.D(r(c),He,MG,a),fS(c,new QR(Oo,b,d,a,null,null,null));}
    function mS(){var a=ub,b=ho.g(r(r(a))),c=os.g(b);if(x.h(cp.g(r(r(a))),up)){gS(a);n(c)&&ad(dG.g(r(r(a))),c);var d=Cp.g(r(r(a)));n(d)&&(d.g?d.g(Mn):d.call(null,Mn));}else d=MG.g(r(r(a))),c=d+(n(c)?D(c):0),Yg.D(r(a),He,MG,c),fS(a,new RR(mC,b,d,c,null,null,null));Yg.D(r(a),He,ho,TF.g(b));}var nS=!0,oS=null,jS=72,kS=40,pS=null,qS=null,rS=null,sS=null,tS=10,uS=0,vS=null;function wS(a){var b=null!=a?a.C&32768||tb===a.Gf?!0:a.C?!1:Qb(Ic,a):Qb(Ic,a);return b?$s.g(r(r(a))):b}
    function xS(a){var b=vS;n(b)&&(b=yb,b=n(b)?vS>=yb:b);Lb(nS)?AR.call(null,a):n(b)?ad(ub,"..."):(n(vS)&&(vS+=1),oS.call(null,a));return b}var yS=function yS(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return yS.l(arguments[0],1<c.length?new Rd(c.slice(1),0,null):null)};
    yS.l=function(a,b){var c=Cj.l(F([new k(null,1,[wC,!0],null),lg(rg,b)]));b=tS;var d=qS,e=yb,f=zb,g=pS,l=kS,m=oS,q=nS,t=sS,v=xb,y=jS,E=rS,J=dG.h(c,tS),W=rD.h(c,qS),Z=br.h(c,yb),ma=nE.h(c,zb),ja=Ez.h(c,pS),Ca=Hx.h(c,kS),Ba=Gr.h(c,oS),ta=uF.h(c,nS),B=xu.h(c,sS),I=ib.h(c,xb),K=Sy.h(c,jS),O=TG.h(c,rS);tS=J;qS=W;yb=Z;zb=ma;pS=ja;kS=Ca;oS=Ba;nS=ta;sS=B;xb=I;jS=K;rS=O;try{var N=new pb,U=M(c,wC)?wC.g(c):!0,Q=!0===U||null==U?new Ad(N):U;if(n(nS)){var Y=Lb(wS(Q));c=ub;ub=Y?iS(Q):Q;try{xS(a),HR();}finally{ub=c;}}else {Y=
    ub;ub=Q;try{AR.call(null,a);}finally{ub=Y;}}!0===U&&jk(p.g(N));return null==U?p.g(N):null}finally{rS=E,jS=y,xb=v,sS=t,nS=q,oS=m,kS=l,pS=g,zb=f,yb=e,qS=d,tS=b;}};yS.I=1;yS.M=function(a){var b=A(a);a=C(a);return this.l(b,a)};function $V(a){var b=new pb,c=ub;ub=new Ad(b);try{var d=ub,e=Lb(wS(d)),f=ub;ub=e?iS(d):d;try{d=nS;nS=!0;try{xS(a);}finally{nS=d;}x.h(0,IR(ub,ZG))||ad(ub,"\n");HR();}finally{ub=f;}jk(p.g(b));}finally{ub=c;}}
    function AS(a,b){if(Lb(b.g?b.g(a):b.call(null,a)))throw Error(["Bad argument: ",p.g(a),". It must be one of ",p.g(b)].join(""));}function BS(){var a=zb;return n(a)?uS>=zb:a}function CS(a){AS(a,new Hj(null,new k(null,4,[Vs,null,Dm,null,KD,null,Dw,null],null),null));var b=ub;Yg.D(r(b),He,cp,my);var c=MG.g(r(r(b))),d=ho.g(r(r(b)));fS(b,new PR(ws,a,d,c,c,null,null,null));}
    function DS(a,b){AS(a,new Hj(null,new k(null,2,[Hv,null,Jm,null],null),null));var c=ub,d=ho.g(r(r(c)));if(x.h(cp.g(r(r(c))),up)){gS(c);var e=cq.g(d);if(n(x.h?x.h(Hv,a):x.call(null,Hv,a)))a=r(oE.g(d));else if(n(x.h?x.h(Jm,a):x.call(null,Jm,a)))a=IR(dG.g(r(r(c))),ZG);else throw Error(["No matching clause: ",p.g(a)].join(""));Wg(e,b+a);}else e=MG.g(r(r(c))),fS(c,new SR(Jz,d,a,b,e,e,null,null,null));}
    function ES(a,b,c){b="string"===typeof b?FS(b):b;c=GS(c);a:{var d=new pb,e=Lb(a)||!0===a?new Ad(d):a,f=HS(b)&&Lb(wS(e))?n(wS(e))?e:iS(e):e,g=ub;ub=f;try{try{IS(b,c);}finally{e!==f&&bd(f);}var l=Lb(a)?p.g(d):!0===a?jk(p.g(d)):null;break a}finally{ub=g;}l=void 0;}return l}var JS=null;function KS(a,b){a=[p.g(a),"\n",p.g(JS),"\n",p.g(lg(p,hh(b," "))),"^\n"].join("");throw Error(a);}function LS(a,b,c,d,e,f){this.vc=a;this.qb=b;this.uc=c;this.F=d;this.m=e;this.G=f;this.C=2230716170;this.O=139264;}h=LS.prototype;
    h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "seq":return this.vc;case "rest":return this.qb;case "pos":return this.uc;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.arg-navigator{",", ","}",c,cg.h(new S(null,3,5,T,[new S(null,2,5,T,[zt,this.vc],null),new S(null,2,5,T,[Hr,this.qb],null),new S(null,2,5,T,[MG,this.uc],null)],null),this.m))};h.Aa=function(){return new ni(this,3,new S(null,3,5,T,[zt,Hr,MG],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 3+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-402038447^ae(this)};
    h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.vc,b.vc)&&x.h(this.qb,b.qb)&&x.h(this.uc,b.uc)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,3,[MG,null,zt,null,Hr,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new LS(this.vc,this.qb,this.uc,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "seq":case "rest":case "pos":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(zt,b):Nf.call(null,zt,b))?new LS(c,this.qb,this.uc,this.F,this.m,null):n(Nf.h?Nf.h(Hr,b):Nf.call(null,Hr,b))?new LS(this.vc,c,this.uc,this.F,this.m,null):n(Nf.h?Nf.h(MG,b):Nf.call(null,MG,b))?new LS(this.vc,this.qb,c,this.F,this.m,null):new LS(this.vc,this.qb,this.uc,this.F,He.j(this.m,b,c),null)};h.ea=function(){return z(cg.h(new S(null,3,5,T,[new Nh(zt,this.vc),new Nh(Hr,this.qb),new Nh(MG,this.uc)],null),this.m))};
    h.U=function(a,b){return new LS(this.vc,this.qb,this.uc,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};function GS(a){a=z(a);return new LS(a,a,0,null,null,null)}function MS(a){var b=Hr.g(a);if(n(b))return new S(null,2,5,T,[A(b),new LS(zt.g(a),C(b),MG.g(a)+1,null,null,null)],null);throw Error("Not enough arguments for format definition");}
    function NS(a){var b=MS(a);a=H(b,0,null);b=H(b,1,null);a="string"===typeof a?FS(a):a;return new S(null,2,5,T,[a,b],null)}function OS(a,b){return b>=MG.g(a)?(b=MG.g(a)-b,PS.h?PS.h(a,b):PS.call(null,a,b)):new LS(zt.g(a),eh(b,zt.g(a)),b,null,null,null)}function PS(a,b){var c=MG.g(a)+b;return 0>b?OS(a,c):new LS(zt.g(a),eh(b,Hr.g(a)),c,null,null,null)}function QS(a,b,c,d,e,f,g){this.cc=a;this.$b=b;this.mc=c;this.offset=d;this.F=e;this.m=f;this.G=g;this.C=2230716170;this.O=139264;}h=QS.prototype;
    h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "func":return this.cc;case "def":return this.$b;case "params":return this.mc;case "offset":return this.offset;default:return u.j(this.m,b,c)}};h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
    h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#cljs.pprint.compiled-directive{",", ","}",c,cg.h(new S(null,4,5,T,[new S(null,2,5,T,[HA,this.cc],null),new S(null,2,5,T,[AE,this.$b],null),new S(null,2,5,T,[OC,this.mc],null),new S(null,2,5,T,[wx,this.offset],null)],null),this.m))};h.Aa=function(){return new ni(this,4,new S(null,4,5,T,[HA,AE,OC,wx],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 4+D(this.m)};
    h.ba=function(){var a=this.G;return null!=a?a:this.G=a=-829256337^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.cc,b.cc)&&x.h(this.$b,b.$b)&&x.h(this.mc,b.mc)&&x.h(this.offset,b.offset)&&x.h(this.m,b.m)};h.nb=function(a,b){return M(new Hj(null,new k(null,4,[wx,null,HA,null,OC,null,AE,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new QS(this.cc,this.$b,this.mc,this.offset,this.F,tg(Je.h(this.m,b)),null)};
    h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "func":case "def":case "params":case "offset":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(HA,b):Nf.call(null,HA,b))?new QS(c,this.$b,this.mc,this.offset,this.F,this.m,null):n(Nf.h?Nf.h(AE,b):Nf.call(null,AE,b))?new QS(this.cc,c,this.mc,this.offset,this.F,this.m,null):n(Nf.h?Nf.h(OC,b):Nf.call(null,OC,b))?new QS(this.cc,this.$b,c,this.offset,this.F,this.m,null):n(Nf.h?Nf.h(wx,b):Nf.call(null,wx,b))?new QS(this.cc,this.$b,this.mc,c,this.F,this.m,null):new QS(this.cc,this.$b,this.mc,this.offset,this.F,He.j(this.m,b,c),null)};
    h.ea=function(){return z(cg.h(new S(null,4,5,T,[new Nh(HA,this.cc),new Nh(AE,this.$b),new Nh(OC,this.mc),new Nh(wx,this.offset)],null),this.m))};h.U=function(a,b){return new QS(this.cc,this.$b,this.mc,this.offset,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    function RS(a,b){var c=H(a,0,null);a=H(a,1,null);var d=H(a,0,null);a=H(a,1,null);d=M(new Hj(null,new k(null,2,[hA,null,us,null],null),null),c)?new S(null,2,5,T,[d,b],null):x.h(d,yp)?MS(b):x.h(d,go)?new S(null,2,5,T,[D(Hr.g(b)),b],null):new S(null,2,5,T,[d,b],null);b=H(d,0,null);d=H(d,1,null);return new S(null,2,5,T,[new S(null,2,5,T,[c,new S(null,2,5,T,[b,a],null)],null),d],null)}function SS(a,b){b=DR(RS,b,a);a=H(b,0,null);b=H(b,1,null);return new S(null,2,5,T,[qh.h(R,a),b],null)}
    var TS=new k(null,3,[2,"#b",8,"#o",16,"#x"],null);
    function US(a,b,c){c=MS(c);var d=H(c,0,null);c=H(c,1,null);if(ff(d))if(x.h(tS,10))var e=[p.g(d),n(sS)?".":null].join("");else {e=p;var f=e.g;if(n(sS)){var g=u.h(TS,tS);g=n(g)?g:["#",p.g(tS),"r"].join("");}else g=null;e=[f.call(e,g),p.g(VS(tS,d))].join("");}else e=null;a=n(e)?e:a.g?a.g(d):a.call(null,d);d=a.length;e=d+AB.g(b);e=e>=Ax.g(b)?e:e+(yf(Ax.g(b)-e-1,Kt.g(b))+1)*Kt.g(b);d=lg(p,hh(e-d,kx.g(b)));n(us.g(b))?zR.l(F([[p.g(d),p.g(a)].join("")])):zR.l(F([[p.g(a),p.g(d)].join("")]));return c}
    function WS(a,b){return Jf(A(ER(function(c){return 0<c?new S(null,2,5,T,[zf(c,a),yf(c,a)],null):new S(null,2,5,T,[null,null],null)},b)))}function VS(a,b){return 0===b?"0":lg(p,ch.h(function(c){return 10>c?wf(CR("0")+c):wf(CR("a")+(c-10))},WS(a,b)))}function XS(a,b){return Jf(A(ER(function(c){return new S(null,2,5,T,[z(Jf(dh.h(a,c))),z(eh(a,c))],null)},Jf(b))))}
    function YS(a,b,c){c=MS(c);var d=H(c,0,null);c=H(c,1,null);if(ff(d)||"number"===typeof d&&!isNaN(d)&&Infinity!==d&&parseFloat(d)!==parseInt(d,10)&&x.h(d,Math.floor(d))){var e=0>d,f=VS(a,e?-d:d);a=n(hA.g(b))?function(){var g=ch.h(function(m){return lg(p,m)},XS(xy.g(b),f)),l=hh(D(g),TE.g(b));return lg(p,C(ih.h(l,g)))}():f;a=e?["-",p.g(a)].join(""):n(us.g(b))?["+",p.g(a)].join(""):a;a=a.length<Ax.g(b)?[p.g(lg(p,hh(Ax.g(b)-a.length,kx.g(b)))),p.g(a)].join(""):a;zR.l(F([a]));}else US(wk,new k(null,5,[Ax,
    Ax.g(b),Kt,1,AB,0,kx,kx.g(b),us,!0],null),GS(new S(null,1,5,T,[d],null)));return c}
    var ZS=new S(null,20,5,T,"zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen".split(" "),null),$S=new S(null,20,5,T,"zeroth first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth thirteenth fourteenth fifteenth sixteenth seventeenth eighteenth nineteenth".split(" "),null),aT=new S(null,10,5,T,"  twenty thirty forty fifty sixty seventy eighty ninety".split(" "),null),bT=new S(null,10,5,T,"  twentieth thirtieth fortieth fiftieth sixtieth seventieth eightieth ninetieth".split(" "),
    null),cT=new S(null,22,5,T," thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion undecillion duodecillion tredecillion quattuordecillion quindecillion sexdecillion septendecillion octodecillion novemdecillion vigintillion".split(" "),null);
    function dT(a){var b=yf(a,100);a=zf(a,100);var c=0<b?[p.g(qe(ZS,b))," hundred"].join(""):null,d=p,e=d.g;if(0<a)if(20>a)var f=qe(ZS,a);else {f=yf(a,10);var g=zf(a,10);f=[p.g(0<f?qe(aT,f):null),0<f&&0<g?"-":null,p.g(0<g?qe(ZS,g):null)].join("");}else f=null;return [c,0<b&&0<a?" ":null,e.call(d,f)].join("")}
    function eT(a,b){var c=D(a),d=G;--c;var e=A(a);for(a=C(a);;){if(null==a)return [p.g(lg(p,eh(1,ih.h(Db(", "),d)))),Re(e)||Re(d)?null:", ",p.g(e),!Re(e)&&0<c+b?[" ",p.g(qe(cT,c+b))].join(""):null].join("");d=Re(e)?d:De.h(d,[p.g(e)," ",p.g(qe(cT,c+b))].join(""));--c;e=A(a);a=C(a);}}
    var fT=new S(null,4,5,T,[new S(null,9,5,T,"I II III IIII V VI VII VIII VIIII".split(" "),null),new S(null,9,5,T,"X XX XXX XXXX L LX LXX LXXX LXXXX".split(" "),null),new S(null,9,5,T,"C CC CCC CCCC D DC DCC DCCC DCCCC".split(" "),null),new S(null,3,5,T,["M","MM","MMM"],null)],null),gT=new S(null,4,5,T,[new S(null,9,5,T,"I II III IV V VI VII VIII IX".split(" "),null),new S(null,9,5,T,"X XX XXX XL L LX LXX LXXX XC".split(" "),null),new S(null,9,5,T,"C CC CCC CD D DC DCC DCCC CM".split(" "),null),new S(null,
    3,5,T,["M","MM","MMM"],null)],null);function hT(a,b){b=MS(b);var c=H(b,0,null);b=H(b,1,null);if("number"===typeof c&&0<c&&4E3>c){var d=WS(10,c);c=G;for(var e=D(d)-1;;)if(Re(d)){zR.l(F([lg(p,c)]));break}else {var f=A(d);c=x.h(0,f)?c:De.h(c,qe(qe(a,e),f-1));--e;d=C(d);}}else YS(10,new k(null,5,[Ax,0,kx," ",TE,",",xy,3,hA,!0],null),GS(new S(null,1,5,T,[c],null)));return b}var iT=new k(null,5,[8,"Backspace",9,"Tab",10,"Newline",13,"Return",32,"Space"],null);
    function jT(a,b){a=MS(b);b=H(a,0,null);a=H(a,1,null);var c=CR(b);b=c&127;c&=128;var d=u.h(iT,b);0<c&&zR.l(F(["Meta-"]));zR.l(F([n(d)?d:32>b?["Control-",p.g(wf(b+64))].join(""):x.h(b,127)?"Control-?":wf(b)]));return a}
    function kT(a,b){var c=MS(b);b=H(c,0,null);c=H(c,1,null);a=er.g(a);if(n(x.h?x.h("o",a):x.call(null,"o",a)))ES(!0,"\\o~3,'0o",F([CR(b)]));else if(n(x.h?x.h("u",a):x.call(null,"u",a)))ES(!0,"\\u~4,'0x",F([CR(b)]));else if(n(x.h?x.h(null,a):x.call(null,null,a)))ad(ub,n(x.h?x.h("\b",b):x.call(null,"\b",b))?"\\backspace":n(x.h?x.h(" ",b):x.call(null," ",b))?"\\space":n(x.h?x.h("\t",b):x.call(null,"\t",b))?"\\tab":n(x.h?x.h("\n",b):x.call(null,"\n",b))?"\\newline":n(x.h?x.h("\f",b):x.call(null,"\f",b))?
    "\\formfeed":n(x.h?x.h("\r",b):x.call(null,"\r",b))?"\\return":n(x.h?x.h('"',b):x.call(null,'"',b))?'\\"':n(x.h?x.h("\\",b):x.call(null,"\\",b))?"\\\\":["\\",p.g(b)].join(""));else throw Error(["No matching clause: ",p.g(a)].join(""));return c}function lT(a,b){b=MS(b);a=H(b,0,null);b=H(b,1,null);zR.l(F([a]));return b}function mT(a){a=A(a);return x.h(Ot,a)||x.h(Lr,a)}
    function nT(a,b,c){return Ae(DR(function(d,e){if(mT(e))return new S(null,2,5,T,[null,e],null);e=SS(OC.g(d),e);var f=H(e,0,null);e=H(e,1,null);var g=FR(f);f=H(g,0,null);g=H(g,1,null);f=He.j(f,oy,c);return new S(null,2,5,T,[null,lg(HA.g(d),new S(null,3,5,T,[f,e,g],null))],null)},b,a))}
    function oT(a){a=p.g(a).toLowerCase();var b=a.indexOf("e"),c=a.indexOf(".");a=0>b?0>c?new S(null,2,5,T,[a,p.g(a.length-1)],null):new S(null,2,5,T,[[a.substring(0,c),a.substring(c+1)].join(""),p.g(c-1)],null):0>c?new S(null,2,5,T,[a.substring(0,b),a.substring(b+1)],null):new S(null,2,5,T,[[a.substring(0,1),a.substring(2,b)].join(""),a.substring(b+1)],null);b=H(a,0,null);a=H(a,1,null);a:if(c=D(b),0<c&&x.h(qe(b,D(b)-1),"0"))for(--c;;){if(0>c){b="";break a}if(x.h(qe(b,c),"0"))--c;else {b=b.substring(0,
    c+1);break a}}a:{c=b;var d=D(c);if(0<d&&x.h(qe(c,0),"0"))for(var e=0;;){if(x.h(e,d)||!x.h(qe(c,e),"0")){c=c.substring(e);break a}e+=1;}}b=D(b)-D(c);a=0<D(a)&&x.h(qe(a,0),"+")?a.substring(1):a;return Re(c)?new S(null,2,5,T,["0",0],null):new S(null,2,5,T,[c,parseInt(a,10)-b],null)}
    function pT(a,b,c,d){if(n(n(c)?c:d)){var e=D(a);d=n(d)?2>d?2:d:0;n(c)?c=b+c+1:0<=b?(c=b+1,--d,c=c>d?c:d):c=d+b;var f=x.h(c,0)?new S(null,4,5,T,[["0",p.g(a)].join(""),b+1,1,e+1],null):new S(null,4,5,T,[a,b,c,e],null);c=H(f,0,null);e=H(f,1,null);d=H(f,2,null);f=H(f,3,null);if(n(d)){if(0>d)return new S(null,3,5,T,["0",0,!1],null);if(f>d){b=qe(c,d);a=c.substring(0,d);if(CR(b)>=CR("5")){a:for(b=D(a)-1,c=b|0;;){if(0>c){b=mg(p,"1",hh(b+1,"0"));break a}if(x.h("9",a.charAt(c)))--c;else {b=ng(p,a.substring(0,
    c),wf(CR(a.charAt(c))+1),hh(b-c,"0"));break a}}a=D(b)>a.length;return new S(null,3,5,T,[a?Gf(b,0,D(b)-1):b,e,a],null)}return new S(null,3,5,T,[a,e,!1],null)}}}return new S(null,3,5,T,[a,b,!1],null)}
    function qT(a,b,c){var d=0>b?new S(null,2,5,T,[[p.g(lg(p,hh(-b-1,"0"))),p.g(a)].join(""),-1],null):new S(null,2,5,T,[a,b],null);a=H(d,0,null);var e=H(d,1,null);d=D(a);c=n(c)?e+c+1:e+1;c=d<c?[p.g(a),p.g(lg(p,hh(c-d,"0")))].join(""):a;0>b?b=[".",p.g(c)].join(""):(b+=1,b=[c.substring(0,b),".",c.substring(b)].join(""));return b}function rT(a,b){return 0>b?[".",p.g(a)].join(""):[a.substring(0,b),".",a.substring(b)].join("")}
    function sT(a,b){var c=uE.g(a),d=IE.g(a);b=MS(b);var e=H(b,0,null);b=H(b,1,null);var f=0>e?new S(null,2,5,T,["-",-e],null):new S(null,2,5,T,["+",e],null),g=H(f,0,null);f=H(f,1,null);f=oT(f);var l=H(f,0,null),m=H(f,1,null)+FE.g(a);f=function(){var y=us.g(a);return n(y)?y:0>e}();var q=Lb(d)&&D(l)-1<=m,t=pT(l,m,d,n(c)?c-(n(f)?1:0):null);l=H(t,0,null);m=H(t,1,null);t=H(t,2,null);l=qT(l,n(t)?m+1:m,d);d=n(n(c)?n(d)?1<=d&&x.h(l.charAt(0),"0")&&x.h(l.charAt(1),".")&&l.length>c-(n(f)?1:0):d:c)?l.substring(1):
    l;m=x.h(A(d),".");if(n(c)){l=d.length;l=n(f)?l+1:l;m=m&&!(l>=c);q=q&&!(l>=c);var v=m||q?l+1:l;n(function(){var y=v>c;return y?LE.g(a):y}())?zR.l(F([lg(p,hh(c,LE.g(a)))])):zR.l(F([[p.g(lg(p,hh(c-v,kx.g(a)))),p.g(n(f)?g:null),m?"0":null,d,q?"0":null].join("")]));}else zR.l(F([[p.g(n(f)?g:null),m?"0":null,d,q?"0":null].join("")]));return b}
    function tT(a,b){b=MS(b);var c=H(b,0,null);b=H(b,1,null);var d=oT(0>c?-c:c);H(d,0,null);for(H(d,1,null);;){var e=H(d,0,null),f=H(d,1,null),g=uE.g(a),l=IE.g(a),m=HE.g(a),q=FE.g(a),t=function(){var Z=pm.g(a);return n(Z)?Z:"E"}();d=function(){var Z=us.g(a);return n(Z)?Z:0>c}();var v=0>=q,y=f-(q-1),E=p.g(Math.abs(y));t=[p.g(t),0>y?"-":"+",p.g(n(m)?lg(p,hh(m-E.length,"0")):null),E].join("");var J=t.length;y=D(e);e=[p.g(lg(p,hh(-q,"0"))),p.g(e),p.g(n(l)?lg(p,hh(l-(y-1)-(0>q?-q:0),"0")):null)].join("");
    y=n(g)?g-J:null;e=pT(e,0,x.h(q,0)?l-1:0<q?l:0>q?l-1:null,n(y)?y-(n(d)?1:0):null);y=H(e,0,null);H(e,1,null);E=H(e,2,null);e=rT(y,q);l=x.h(q,D(y))&&null==l;if(Lb(E)){if(n(g)){f=e.length+J;f=n(d)?f+1:f;var W=(v=v&&!x.h(f,g))?f+1:f;f=l&&W<g;n(function(){var Z=W>g;Z||(Z=m,Z=n(Z)?J-2>m:Z);return n(Z)?LE.g(a):Z}())?zR.l(F([lg(p,hh(g,LE.g(a)))])):zR.l(F([[p.g(lg(p,hh(g-W-(f?1:0),kx.g(a)))),n(d)?0>c?"-":"+":null,v?"0":null,e,f?"0":null,t].join("")]));}else zR.l(F([[n(d)?0>c?"-":"+":null,v?"0":null,e,l?"0":
    null,t].join("")]));break}else d=new S(null,2,5,T,[y,f+1],null);}return b}function uT(a,b,c){var d=MS(b),e=H(d,0,null);H(d,1,null);d=oT(0>e?-e:e);var f=H(d,0,null);d=H(d,1,null);var g=uE.g(a),l=IE.g(a),m=HE.g(a);d=x.h(e,0)?0:d+1;e=n(m)?m+2:4;g=n(g)?g-e:null;n(l)?f=l:(f=D(f),l=7>d?d:7,f=f>l?f:l);d=f-d;return 0<=d&&d<=f?(a=sT(new k(null,6,[uE,g,IE,d,FE,0,LE,LE.g(a),kx,kx.g(a),us,us.g(a)],null),b),zR.l(F([lg(p,hh(e," "))])),a):tT(a,b)}
    function vT(a,b){b=MS(b);var c=H(b,0,null);b=H(b,1,null);var d=oT(Math.abs(c)),e=H(d,0,null),f=H(d,1,null),g=IE.g(a),l=wE.g(a);d=uE.g(a);var m=function(){var t=us.g(a);return n(t)?t:0>c}(),q=pT(e,f,g,null);e=H(q,0,null);f=H(q,1,null);q=H(q,2,null);g=qT(e,n(q)?f+1:f,g);l=[p.g(lg(p,hh(l-g.indexOf("."),"0"))),g].join("");g=l.length+(n(m)?1:0);zR.l(F([[n(function(){var t=hA.g(a);return n(t)?m:t}())?0>c?"-":"+":null,p.g(lg(p,hh(d-g,kx.g(a)))),n(function(){var t=Lb(hA.g(a));return t?m:t}())?0>c?"-":"+":
    null,l].join("")]));return b}function wT(a,b){var c=Fp.g(a);c=n(c)?new S(null,2,5,T,[c,b],null):MS(b);b=H(c,0,null);c=H(c,1,null);var d=YF.g(a);b=0>b||b>=D(d)?A(yt.g(a)):qe(d,b);return n(b)?nT(b,c,oy.g(a)):c}function xT(a,b){var c=MS(b);b=H(c,0,null);c=H(c,1,null);var d=YF.g(a);b=n(b)?Ae(d):A(d);return n(b)?nT(b,c,oy.g(a)):c}function yT(a,b){var c=MS(b),d=H(c,0,null);c=H(c,1,null);var e=YF.g(a);e=n(d)?A(e):null;return n(d)?n(e)?nT(e,b,oy.g(a)):b:c}
    function zT(a,b){var c=mB.g(a),d=A(YF.g(a));d=Re(d)?NS(b):new S(null,2,5,T,[d,b],null);b=H(d,0,null);d=H(d,1,null);d=MS(d);var e=H(d,0,null);d=H(d,1,null);var f=0;e=GS(e);for(var g=-1;;){if(Lb(c)&&x.h(MG.g(e),g)&&1<f)throw Error("%{ construct not consuming any arguments: Infinite loop!");g=Re(Hr.g(e))&&(Lb(hA.g(dA.g(a)))||0<f);if(n(g?g:n(c)?f>=c:c))return d;g=nT(b,e,oy.g(a));if(x.h(Ot,A(g)))return d;f+=1;var l=MG.g(e);e=g;g=l;}}
    function AT(a,b){var c=mB.g(a),d=A(YF.g(a));d=Re(d)?NS(b):new S(null,2,5,T,[d,b],null);b=H(d,0,null);d=H(d,1,null);d=MS(d);var e=H(d,0,null);d=H(d,1,null);for(var f=0;;){var g=Re(e)&&(Lb(hA.g(dA.g(a)))||0<f);if(n(g?g:n(c)?f>=c:c))return d;g=nT(b,GS(A(e)),GS(C(e)));if(x.h(Lr,A(g)))return d;f+=1;e=C(e);}}
    function BT(a,b){var c=mB.g(a),d=A(YF.g(a)),e=Re(d)?NS(b):new S(null,2,5,T,[d,b],null);b=H(e,0,null);d=0;e=H(e,1,null);for(var f=-1;;){if(Lb(c)&&x.h(MG.g(e),f)&&1<d)throw Error("%@{ construct not consuming any arguments: Infinite loop!");f=Re(Hr.g(e))&&(Lb(hA.g(dA.g(a)))||0<d);if(n(f?f:n(c)?d>=c:c))return e;f=nT(b,e,oy.g(a));if(x.h(Ot,A(f)))return Ae(f);d+=1;var g=MG.g(e);e=f;f=g;}}
    function CT(a,b){var c=mB.g(a),d=A(YF.g(a)),e=Re(d)?NS(b):new S(null,2,5,T,[d,b],null);b=H(e,0,null);d=0;for(e=H(e,1,null);;){var f=Re(Hr.g(e))&&(Lb(hA.g(dA.g(a)))||0<d);if(n(f?f:n(c)?d>=c:c))return e;f=Hr.g(e);f=n(f)?new S(null,2,5,T,[A(f),new LS(zt.g(e),C(f),MG.g(e)+1,null,null,null)],null):new S(null,2,5,T,[null,e],null);e=H(f,0,null);f=H(f,1,null);e=nT(b,GS(e),f);if(x.h(Lr,A(e)))return f;e=f;d+=1;}}
    function DT(a,b){if(n(hA.g(dA.g(a)))){var c=YF.g(a),d=D(c),e=1<d?OB.g(OC.g(A(A(c)))):n(hA.g(a))?"(":null,f=qe(c,1<d?1:0);c=2<d?OB.g(OC.g(A(qe(c,2)))):n(hA.g(a))?")":null;d=MS(b);b=H(d,0,null);d=H(d,1,null);if(n(BS()))ad(ub,"#");else {var g=uS,l=vS;uS+=1;vS=0;try{lS(e,c),nT(f,GS(b),oy.g(a)),mS();}finally{vS=l,uS=g;}}a=d;}else a=ET(a,b);return a}
    function FT(a,b,c){for(var d=G;;){if(Re(a))return new S(null,2,5,T,[d,b],null);var e=A(a);a:{var f=new pb,g=ub;ub=new Ad(f);try{var l=new S(null,2,5,T,[nT(e,b,c),p.g(f)],null);break a}finally{ub=g;}l=void 0;}b=H(l,0,null);e=H(l,1,null);if(x.h(Ot,A(b)))return new S(null,2,5,T,[d,Ae(b)],null);a=C(a);d=De.h(d,e);}}
    function ET(a,b){var c=function(){var ja=yt.g(a);return n(ja)?FT(ja,b,oy.g(a)):null}(),d=H(c,0,null);d=H(d,0,null);c=H(c,1,null);var e=n(c)?c:b;c=function(){var ja=gw.g(a);return n(ja)?SS(ja,e):null}();var f=H(c,0,null);c=H(c,1,null);var g=n(c)?c:e;c=function(){var ja=A(NE.g(f));return n(ja)?ja:0}();var l=function(){var ja=A(Bq.g(f));return n(ja)?ja:IR(ub,QC)}(),m=YF.g(a);g=FT(m,g,oy.g(a));var q=H(g,0,null);g=H(g,1,null);var t=function(){var ja=D(q)-1+(n(hA.g(a))?1:0)+(n(us.g(a))?1:0);return 1>ja?
    1:ja}();m=$b.h(uf,ch.h(D,q));var v=Ax.g(a),y=AB.g(a),E=Kt.g(a),J=m+t*y;v=J<=v?v:v+E*(1+yf(J-v-1,E));var W=v-m;m=function(){var ja=yf(W,t);return y>ja?y:ja}();E=W-m*t;m=lg(p,hh(m,kx.g(a)));n(n(d)?IR(dG.g(r(r(ub))),ZG)+c+v>l:d)&&zR.l(F([d]));c=E;for(var Z=q,ma=function(){var ja=hA.g(a);return n(ja)?ja:x.h(D(Z),1)&&Lb(us.g(a))}();;)if(z(Z))zR.l(F([[p.g(Lb(ma)?A(Z):null),p.g(n(function(){var ja=ma;return n(ja)?ja:(ja=C(Z))?ja:us.g(a)}())?m:null),p.g(0<c?kx.g(a):null)].join("")])),--c,Z=d=n(ma)?Z:C(Z),
    ma=!1;else break;return g}
    function GT(a){if("undefined"===typeof qb||"undefined"===typeof sR||"undefined"===typeof SV)SV=function(b,c){this.Ga=b;this.Gh=c;this.C=1074135040;this.O=0;},SV.prototype.U=function(b,c){return new SV(this.Ga,c)},SV.prototype.T=function(){return this.Gh},SV.prototype.pc=function(){return bd(this.Ga)},SV.prototype.Sc=function(b,c){b=Rb(c);if(n(x.h?x.h(String,b):x.call(null,String,b)))return ad(this.Ga,c.toLowerCase());if(n(x.h?x.h(Number,b):x.call(null,Number,b)))return ad(this.Ga,wf(c).toLowerCase());
    throw Error(["No matching clause: ",p.g(b)].join(""));},SV.Za=!0,SV.Xa="cljs.pprint/t_cljs$pprint22372",SV.ab=function(b){return ad(b,"cljs.pprint/t_cljs$pprint22372")};return new SV(a,R)}
    function HT(a){if("undefined"===typeof qb||"undefined"===typeof sR||"undefined"===typeof VV)VV=function(b,c){this.Ga=b;this.Hh=c;this.C=1074135040;this.O=0;},VV.prototype.U=function(b,c){return new VV(this.Ga,c)},VV.prototype.T=function(){return this.Hh},VV.prototype.pc=function(){return bd(this.Ga)},VV.prototype.Sc=function(b,c){b=Rb(c);if(n(x.h?x.h(String,b):x.call(null,String,b)))return ad(this.Ga,c.toUpperCase());if(n(x.h?x.h(Number,b):x.call(null,Number,b)))return ad(this.Ga,wf(c).toUpperCase());
    throw Error(["No matching clause: ",p.g(b)].join(""));},VV.Za=!0,VV.Xa="cljs.pprint/t_cljs$pprint22378",VV.ab=function(b){return ad(b,"cljs.pprint/t_cljs$pprint22378")};return new VV(a,R)}
    function IT(a,b){var c=A(a);return lg(p,A(ER(function(d){if(Re(d))return new S(null,2,5,T,[null,null],null);var e=RegExp("\\W\\w","g").exec(d);e=n(e)?e.index+1:e;return n(e)?new S(null,2,5,T,[[d.substring(0,e),qe(d,e).toUpperCase()].join(""),d.substring(e+1)],null):new S(null,2,5,T,[d,null],null)},n(n(b)?n(c)?eb(c):c:b)?[c.toUpperCase(),a.substring(1)].join(""):a)))}
    function JT(a){var b=Vg(!0);if("undefined"===typeof qb||"undefined"===typeof sR||"undefined"===typeof WV)WV=function(c,d,e){this.Ga=c;this.Wd=d;this.Ih=e;this.C=1074135040;this.O=0;},WV.prototype.U=function(c,d){return new WV(this.Ga,this.Wd,d)},WV.prototype.T=function(){return this.Ih},WV.prototype.pc=function(){return bd(this.Ga)},WV.prototype.Sc=function(c,d){c=Rb(d);if(n(x.h?x.h(String,c):x.call(null,String,c)))return ad(this.Ga,IT(d.toLowerCase(),r(this.Wd))),0<d.length?Wg(this.Wd,Ya(qe(d,D(d)-
    1))):null;if(n(x.h?x.h(Number,c):x.call(null,Number,c)))return d=wf(d),c=n(r(this.Wd))?d.toUpperCase():d,ad(this.Ga,c),Wg(this.Wd,Ya(d));throw Error(["No matching clause: ",p.g(c)].join(""));},WV.Za=!0,WV.Xa="cljs.pprint/t_cljs$pprint22384",WV.ab=function(c){return ad(c,"cljs.pprint/t_cljs$pprint22384")};return new WV(a,b,R)}
    function KT(a){var b=Vg(!1);if("undefined"===typeof qb||"undefined"===typeof sR||"undefined"===typeof XV)XV=function(c,d,e){this.Ga=c;this.Bd=d;this.Jh=e;this.C=1074135040;this.O=0;},XV.prototype.U=function(c,d){return new XV(this.Ga,this.Bd,d)},XV.prototype.T=function(){return this.Jh},XV.prototype.pc=function(){return bd(this.Ga)},XV.prototype.Sc=function(c,d){c=Rb(d);if(n(x.h?x.h(String,c):x.call(null,String,c)))return d=d.toLowerCase(),Lb(r(this.Bd))?(c=RegExp("\\S","g").exec(d),c=n(c)?c.index:
    c,n(c)?(ad(this.Ga,[d.substring(0,c),qe(d,c).toUpperCase(),d.substring(c+1).toLowerCase()].join("")),Wg(this.Bd,!0)):ad(this.Ga,d)):ad(this.Ga,d.toLowerCase());if(n(x.h?x.h(Number,c):x.call(null,Number,c)))return d=wf(d),c=Lb(r(this.Bd)),n(c?eb(d):c)?(Wg(this.Bd,!0),ad(this.Ga,d.toUpperCase())):ad(this.Ga,d.toLowerCase());throw Error(["No matching clause: ",p.g(c)].join(""));},XV.Za=!0,XV.Xa="cljs.pprint/t_cljs$pprint22391",XV.ab=function(c){return ad(c,"cljs.pprint/t_cljs$pprint22391")};return new XV(a,
    b,R)}function LT(a,b){var c=n(hA.g(a))?Jm:Hv;DS(c,wE.g(a));return b}function MT(a,b){a=n(hA.g(a))?n(us.g(a))?Vs:KD:n(us.g(a))?Dm:Dw;CS(a);return b}
    var NT=dj("ASDBOXRPCFEG$%\x26|~\nT*?()[;]{}\x3c\x3e^W_I".split(""),[new k(null,5,[Js,"A",OC,new k(null,4,[Ax,new S(null,2,5,T,[0,Number],null),Kt,new S(null,2,5,T,[1,Number],null),AB,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return function(a,b){return US(wk,a,b)}}],null),new k(null,5,[Js,"S",OC,new k(null,4,[Ax,new S(null,2,5,T,[0,Number],null),Kt,new S(null,2,5,T,[1,Number],
    null),AB,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return function(a,b){return US(uk,a,b)}}],null),new k(null,5,[Js,"D",OC,new k(null,4,[Ax,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null),TE,new S(null,2,5,T,[",",String],null),xy,new S(null,2,5,T,[3,Number],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return function(a,
    b){return YS(10,a,b)}}],null),new k(null,5,[Js,"B",OC,new k(null,4,[Ax,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null),TE,new S(null,2,5,T,[",",String],null),xy,new S(null,2,5,T,[3,Number],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return function(a,b){return YS(2,a,b)}}],null),new k(null,5,[Js,"O",OC,new k(null,4,[Ax,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null),TE,new S(null,2,5,T,[",",String],
    null),xy,new S(null,2,5,T,[3,Number],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return function(a,b){return YS(8,a,b)}}],null),new k(null,5,[Js,"X",OC,new k(null,4,[Ax,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null),TE,new S(null,2,5,T,[",",String],null),xy,new S(null,2,5,T,[3,Number],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return function(a,b){return YS(16,a,b)}}],
    null),new k(null,5,[Js,"R",OC,new k(null,5,[dG,new S(null,2,5,T,[null,Number],null),Ax,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null),TE,new S(null,2,5,T,[",",String],null),xy,new S(null,2,5,T,[3,Number],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(a){return n(A(dG.g(a)))?function(b,c){return YS(dG.g(b),b,c)}:n(function(){var b=us.g(a);return n(b)?hA.g(a):b}())?function(b,c){return hT(fT,c)}:n(us.g(a))?function(b,c){return hT(gT,
    c)}:n(hA.g(a))?function(b,c){b=MS(c);c=H(b,0,null);b=H(b,1,null);if(x.h(0,c))zR.l(F(["zeroth"]));else {var d=WS(1E3,0>c?-c:c);if(D(d)<=D(cT)){var e=ch.h(dT,fh(1,d));e=eT(e,1);var f=Ce(d);d=yf(f,100);f=zf(f,100);var g=0<d?[p.g(qe(ZS,d))," hundred"].join(""):null,l=p,m=l.g;if(0<f)if(20>f)var q=qe($S,f);else {q=yf(f,10);var t=zf(f,10);q=0<q&&!(0<t)?qe(bT,q):[p.g(0<q?qe(aT,q):null),0<q&&0<t?"-":null,p.g(0<t?qe($S,t):null)].join("");}else q=0<d?"th":null;d=[g,0<d&&0<f?" ":null,m.call(l,q)].join("");zR.l(F([[0>
    c?"minus ":null,Re(e)||Re(d)?Re(e)?d:[e,"th"].join(""):[e,", ",d].join("")].join("")]));}else YS(10,new k(null,5,[Ax,0,kx," ",TE,",",xy,3,hA,!0],null),GS(new S(null,1,5,T,[c],null))),e=zf(c,100),c=11<e||19>e,e=zf(e,10),zR.l(F([1===e&&c?"st":2===e&&c?"nd":3===e&&c?"rd":"th"]));}return b}:function(b,c){c=MS(c);b=H(c,0,null);c=H(c,1,null);if(x.h(0,b))zR.l(F(["zero"]));else {var d=WS(1E3,0>b?-b:b);D(d)<=D(cT)?(d=ch.h(dT,d),d=eT(d,0),zR.l(F([[0>b?"minus ":null,d].join("")]))):YS(10,new k(null,5,[Ax,0,kx,
    " ",TE,",",xy,3,hA,!0],null),GS(new S(null,1,5,T,[b],null)));}return c}}],null),new k(null,5,[Js,"P",OC,R,AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return function(a,b){b=n(hA.g(a))?PS(b,-1):b;a=n(us.g(a))?new S(null,2,5,T,["y","ies"],null):new S(null,2,5,T,["","s"],null);var c=MS(b);b=H(c,0,null);c=H(c,1,null);zR.l(F([x.h(b,1)?A(a):Ae(a)]));return c}}],null),new k(null,5,[Js,"C",OC,new k(null,1,[er,new S(null,2,5,T,[null,String],null)],null),AD,new Hj(null,
    new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(a){return n(hA.g(a))?jT:n(us.g(a))?kT:lT}],null),new k(null,5,[Js,"F",OC,new k(null,5,[uE,new S(null,2,5,T,[null,Number],null),IE,new S(null,2,5,T,[null,Number],null),FE,new S(null,2,5,T,[0,Number],null),LE,new S(null,2,5,T,[null,String],null),kx,new S(null,2,5,T,[" ",String],null)],null),AD,new Hj(null,new k(null,1,[us,null],null),null),Xo,R,UD,function(){return sT}],null),new k(null,5,[Js,"E",OC,new k(null,7,[uE,new S(null,2,5,
    T,[null,Number],null),IE,new S(null,2,5,T,[null,Number],null),HE,new S(null,2,5,T,[null,Number],null),FE,new S(null,2,5,T,[1,Number],null),LE,new S(null,2,5,T,[null,String],null),kx,new S(null,2,5,T,[" ",String],null),pm,new S(null,2,5,T,[null,String],null)],null),AD,new Hj(null,new k(null,1,[us,null],null),null),Xo,R,UD,function(){return tT}],null),new k(null,5,[Js,"G",OC,new k(null,7,[uE,new S(null,2,5,T,[null,Number],null),IE,new S(null,2,5,T,[null,Number],null),HE,new S(null,2,5,T,[null,Number],
    null),FE,new S(null,2,5,T,[1,Number],null),LE,new S(null,2,5,T,[null,String],null),kx,new S(null,2,5,T,[" ",String],null),pm,new S(null,2,5,T,[null,String],null)],null),AD,new Hj(null,new k(null,1,[us,null],null),null),Xo,R,UD,function(){return uT}],null),new k(null,5,[Js,"$",OC,new k(null,4,[IE,new S(null,2,5,T,[2,Number],null),wE,new S(null,2,5,T,[1,Number],null),uE,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],
    null),null),Xo,R,UD,function(){return vT}],null),new k(null,5,[Js,"%",OC,new k(null,1,[zw,new S(null,2,5,T,[1,Number],null)],null),AD,Jj,Xo,R,UD,function(){return function(a,b){a=zw.g(a);for(var c=0;;)if(c<a)BR(),c+=1;else break;return b}}],null),new k(null,5,[Js,"\x26",OC,new k(null,1,[zw,new S(null,2,5,T,[1,Number],null)],null),AD,new Hj(null,new k(null,1,[uF,null],null),null),Xo,R,UD,function(){return function(a,b){a=zw.g(a);0<a&&((null!=ub?ub.C&32768||tb===ub.Gf||(ub.C?0:Qb(Ic,ub)):Qb(Ic,ub))?
    x.h(0,IR(dG.g(r(r(ub))),ZG))||BR():BR());--a;for(var c=0;;)if(c<a)BR(),c+=1;else break;return b}}],null),new k(null,5,[Js,"|",OC,new k(null,1,[zw,new S(null,2,5,T,[1,Number],null)],null),AD,Jj,Xo,R,UD,function(){return function(a,b){a=zw.g(a);for(var c=0;;)if(c<a)zR.l(F(["\f"])),c+=1;else break;return b}}],null),new k(null,5,[Js,"~",OC,new k(null,1,[wE,new S(null,2,5,T,[1,Number],null)],null),AD,Jj,Xo,R,UD,function(){return function(a,b){a=wE.g(a);zR.l(F([lg(p,hh(a,"~"))]));return b}}],null),new k(null,
    5,[Js,"\n",OC,R,AD,new Hj(null,new k(null,2,[hA,null,us,null],null),null),Xo,R,UD,function(){return function(a,b){n(us.g(a))&&BR();return b}}],null),new k(null,5,[Js,"T",OC,new k(null,2,[Sq,new S(null,2,5,T,[1,Number],null),Kt,new S(null,2,5,T,[1,Number],null)],null),AD,new Hj(null,new k(null,2,[us,null,uF,null],null),null),Xo,R,UD,function(a){return n(us.g(a))?function(b,c){var d=Sq.g(b);b=Kt.g(b);var e=d+IR(dG.g(r(r(ub))),ZG);e=0<b?zf(e,b):0;d+=x.h(0,e)?0:b-e;zR.l(F([lg(p,hh(d," "))]));return c}:
    function(b,c){var d=Sq.g(b);b=Kt.g(b);var e=IR(dG.g(r(r(ub))),ZG);d=e<d?d-e:x.h(b,0)?0:b-zf(e-d,b);zR.l(F([lg(p,hh(d," "))]));return c}}],null),new k(null,5,[Js,"*",OC,new k(null,1,[wE,new S(null,2,5,T,[1,Number],null)],null),AD,new Hj(null,new k(null,2,[hA,null,us,null],null),null),Xo,R,UD,function(){return function(a,b){var c=wE.g(a);return n(us.g(a))?OS(b,c):PS(b,n(hA.g(a))?-c:c)}}],null),new k(null,5,[Js,"?",OC,R,AD,new Hj(null,new k(null,1,[us,null],null),null),Xo,R,UD,function(a){return n(us.g(a))?
    function(b,c){var d=NS(c);c=H(d,0,null);d=H(d,1,null);return nT(c,d,oy.g(b))}:function(b,c){var d=NS(c);c=H(d,0,null);d=H(d,1,null);var e=MS(d);d=H(e,0,null);e=H(e,1,null);d=GS(d);nT(c,d,oy.g(b));return e}}],null),new k(null,5,[Js,"(",OC,R,AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,new k(null,3,[Bw,")",iy,null,yt,null],null),UD,function(a){var b=n(function(){var c=us.g(a);return n(c)?hA.g(a):c}())?HT:n(hA.g(a))?JT:n(us.g(a))?KT:GT;return function(c,d){a:{var e=A(YF.g(c)),
    f=ub;ub=b.g?b.g(ub):b.call(null,ub);try{var g=nT(e,d,oy.g(c));break a}finally{ub=f;}g=void 0;}return g}}],null),new k(null,5,[Js,")",OC,R,AD,Jj,Xo,R,UD,function(){return null}],null),new k(null,5,[Js,"[",OC,new k(null,1,[Fp,new S(null,2,5,T,[null,Number],null)],null),AD,new Hj(null,new k(null,2,[hA,null,us,null],null),null),Xo,new k(null,3,[Bw,"]",iy,!0,yt,UA],null),UD,function(a){return n(hA.g(a))?xT:n(us.g(a))?yT:wT}],null),new k(null,5,[Js,";",OC,new k(null,2,[NE,new S(null,2,5,T,[null,Number],null),
    Bq,new S(null,2,5,T,[null,Number],null)],null),AD,new Hj(null,new k(null,1,[hA,null],null),null),Xo,new k(null,1,[iD,!0],null),UD,function(){return null}],null),new k(null,5,[Js,"]",OC,R,AD,Jj,Xo,R,UD,function(){return null}],null),new k(null,5,[Js,"{",OC,new k(null,1,[mB,new S(null,2,5,T,[null,Number],null)],null),AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,new k(null,2,[Bw,"}",iy,!1],null),UD,function(a){var b=us.g(a);b=n(b)?hA.g(a):b;return n(b)?CT:n(hA.g(a))?AT:n(us.g(a))?
    BT:zT}],null),new k(null,5,[Js,"}",OC,R,AD,new Hj(null,new k(null,1,[hA,null],null),null),Xo,R,UD,function(){return null}],null),new k(null,5,[Js,"\x3c",OC,new k(null,4,[Ax,new S(null,2,5,T,[0,Number],null),Kt,new S(null,2,5,T,[1,Number],null),AB,new S(null,2,5,T,[0,Number],null),kx,new S(null,2,5,T,[" ",String],null)],null),AD,new Hj(null,new k(null,4,[hA,null,us,null,Kq,null,uF,null],null),null),Xo,new k(null,3,[Bw,"\x3e",iy,!0,yt,zu],null),UD,function(){return DT}],null),new k(null,5,[Js,"\x3e",
    OC,R,AD,new Hj(null,new k(null,1,[hA,null],null),null),Xo,R,UD,function(){return null}],null),new k(null,5,[Js,"^",OC,new k(null,3,[ny,new S(null,2,5,T,[null,Number],null),qy,new S(null,2,5,T,[null,Number],null),py,new S(null,2,5,T,[null,Number],null)],null),AD,new Hj(null,new k(null,1,[hA,null],null),null),Xo,R,UD,function(){return function(a,b){var c=ny.g(a),d=qy.g(a),e=py.g(a),f=n(hA.g(a))?Lr:Ot;return n(n(c)?n(d)?e:d:c)?c<=d&&d<=e?new S(null,2,5,T,[f,b],null):b:n(n(c)?d:c)?x.h(c,d)?new S(null,
    2,5,T,[f,b],null):b:n(c)?x.h(c,0)?new S(null,2,5,T,[f,b],null):b:(n(hA.g(a))?Re(Hr.g(oy.g(a))):Re(Hr.g(b)))?new S(null,2,5,T,[f,b],null):b}}],null),new k(null,5,[Js,"W",OC,R,AD,new Hj(null,new k(null,4,[hA,null,us,null,Kq,null,uF,null],null),null),Xo,R,UD,function(a){if(n(function(){var c=us.g(a);return n(c)?c:hA.g(a)}())){var b=cg.h(n(us.g(a))?new S(null,4,5,T,[nE,null,br,null],null):G,n(hA.g(a))?new S(null,2,5,T,[uF,!0],null):G);return function(c,d){d=MS(d);c=H(d,0,null);d=H(d,1,null);return n(mg(yS,
    c,b))?new S(null,2,5,T,[Ot,d],null):d}}return function(c,d){d=MS(d);c=H(d,0,null);d=H(d,1,null);return n(xS(c))?new S(null,2,5,T,[Ot,d],null):d}}],null),new k(null,5,[Js,"_",OC,R,AD,new Hj(null,new k(null,3,[hA,null,us,null,Kq,null],null),null),Xo,R,UD,function(){return MT}],null),new k(null,5,[Js,"I",OC,new k(null,1,[wE,new S(null,2,5,T,[0,Number],null)],null),AD,new Hj(null,new k(null,1,[hA,null],null),null),Xo,R,UD,function(){return LT}],null)]),OT=/^([vV]|#|('.)|([+-]?\d+)|(?=,))/,PT=new Hj(null,
    new k(null,2,[go,null,yp,null],null),null);
    function QT(a){var b=H(a,0,null),c=H(a,1,null),d=H(a,2,null);a=new RegExp(OT.source,"g");var e=a.exec(b);return n(e)?(d=A(e),b=b.substring(a.lastIndex),a=c+a.lastIndex,x.h(",",qe(b,0))?new S(null,2,5,T,[new S(null,2,5,T,[d,c],null),new S(null,3,5,T,[b.substring(1),a+1,!0],null)],null):new S(null,2,5,T,[new S(null,2,5,T,[d,c],null),new S(null,3,5,T,[b,a,!1],null)],null)):n(d)?KS("Badly formed parameters in format directive",c):new S(null,2,5,T,[null,new S(null,2,5,T,[b,c],null)],null)}
    function RT(a){var b=H(a,0,null);a=H(a,1,null);return new S(null,2,5,T,[x.h(b.length,0)?null:x.h(b.length,1)&&M(new Hj(null,new k(null,2,["V",null,"v",null],null),null),qe(b,0))?yp:x.h(b.length,1)&&x.h("#",qe(b,0))?go:x.h(b.length,2)&&x.h("'",qe(b,0))?qe(b,1):parseInt(b,10),a],null)}var ST=new k(null,2,[":",hA,"@",us],null);
    function TT(a,b){return ER(function(c){var d=H(c,0,null),e=H(c,1,null);c=H(c,2,null);if(Re(d))return new S(null,2,5,T,[null,new S(null,3,5,T,[d,e,c],null)],null);var f=u.h(ST,A(d));return n(f)?M(c,f)?KS(['Flag "',p.g(A(d)),'" appears more than once in a directive'].join(""),e):new S(null,2,5,T,[!0,new S(null,3,5,T,[d.substring(1),e+1,He.j(c,f,new S(null,2,5,T,[!0,e],null))],null)],null):new S(null,2,5,T,[null,new S(null,3,5,T,[d,e,c],null)],null)},new S(null,3,5,T,[a,b,R],null))}
    function UT(a,b){var c=AD.g(a);n(function(){var d=Lb(us.g(c));return d?us.g(b):d}())&&KS(['"@" is an illegal flag for format directive "',p.g(Js.g(a)),'"'].join(""),qe(us.g(b),1));n(function(){var d=Lb(hA.g(c));return d?hA.g(b):d}())&&KS(['":" is an illegal flag for format directive "',p.g(Js.g(a)),'"'].join(""),qe(hA.g(b),1));n(function(){var d=Lb(Kq.g(c));return d?(d=us.g(b),n(d)?hA.g(b):d):d}())&&KS(['Cannot combine "@" and ":" flags for format directive "',p.g(Js.g(a)),'"'].join(""),function(){var d=
    qe(hA.g(b),1),e=qe(us.g(b),1);return d<e?d:e}());}
    function VT(a,b,c,d){UT(a,c);D(b)>D(OC.g(a))&&KS(ES(null,'Too many parameters for directive "~C": ~D~:* ~[were~;was~:;were~] specified but only ~D~:* ~[are~;is~:;are~] allowed',F([Js.g(a),D(b),D(OC.g(a))])),Ae(A(b)));bk(ch.j(function(e,f){var g=A(e);return null==g||M(PT,g)||x.h(Ae(Ae(f)),Rb(g))?null:KS(["Parameter ",Rf(A(f)),' has bad type in directive "',p.g(Js.g(a)),'": ',p.g(Rb(g))].join(""),Ae(e))},b,OC.g(a)));return Cj.l(F([qh.h(R,Jf(function(){return function g(f){return new Sf(null,function(){for(;;){var l=
    z(f);if(l){if(Ze(l)){var m=pd(l),q=D(m),t=Wf(q);a:for(var v=0;;)if(v<q){var y=jc(m,v),E=H(y,0,null);y=H(y,1,null);y=H(y,0,null);t.add(new S(null,2,5,T,[E,new S(null,2,5,T,[y,d],null)],null));v+=1;}else {m=!0;break a}return m?Yf($f(t),g(qd(l))):Yf($f(t),null)}m=A(l);t=H(m,0,null);m=H(m,1,null);m=H(m,0,null);return we(new S(null,2,5,T,[t,new S(null,2,5,T,[m,d],null)],null),g(Td(l)))}return null}},null,null)}(OC.g(a))}())),$b.j(function(e,f){return mg(He,e,f)},R,mh.h(function(e){return A(qe(e,1))},Oj(ti(OC.g(a)),
    b))),c]))}
    function WT(a,b){b=ER(QT,new S(null,3,5,T,[a,b,!1],null));a=H(b,0,null);var c=H(b,1,null);b=H(c,0,null);c=H(c,1,null);b=TT(b,c);H(b,0,null);b=H(b,1,null);var d=H(b,0,null),e=H(b,1,null);b=H(b,2,null);c=A(d);var f=u.h(NT,c.toUpperCase()),g=n(f)?VT(f,ch.h(RT,a),b,e):null;Lb(c)&&KS("Format string ended in the middle of a directive",e);Lb(f)&&KS(['Directive "',p.g(c),'" is undefined'].join(""),e);return new S(null,2,5,T,[new QS(function(){var l=UD.g(f);return l.h?l.h(g,e):l.call(null,g,e)}(),f,g,e,null,
    null,null),function(){var l=d.substring(1),m=e+1;if(x.h("\n",Js.g(f))&&Lb(hA.g(g)))a:{var q=new S(null,2,5,T,[" ","\t"],null);q=Se(q)?Lj(q):Kj([q]);for(var t=0;;){var v;(v=x.h(t,D(l)))||(v=qe(l,t),v=q.g?q.g(v):q.call(null,v),v=Lb(v));if(v){q=t;break a}t+=1;}}else q=0;return new S(null,2,5,T,[l.substring(q),m+q],null)}()],null)}function XT(a,b){return new QS(function(c,d){zR.l(F([a]));return d},null,new k(null,1,[OB,a],null),b,null,null,null)}
    function YT(a,b){var c=ZT(Xo.g(AE.g(a)),wx.g(a),b);b=H(c,0,null);c=H(c,1,null);return new S(null,2,5,T,[new QS(HA.g(a),AE.g(a),Cj.l(F([OC.g(a),GR(b,wx.g(a))])),wx.g(a),null,null,null),c],null)}
    function $T(a,b,c){return ER(function(d){if(Re(d))return KS("No closing bracket found.",b);var e=A(d);d=C(d);if(n(Bw.g(Xo.g(AE.g(e)))))e=YT(e,d);else if(x.h(Bw.g(a),Js.g(AE.g(e))))e=new S(null,2,5,T,[null,new S(null,4,5,T,[au,OC.g(e),null,d],null)],null);else {var f=iD.g(Xo.g(AE.g(e)));f=n(f)?hA.g(OC.g(e)):f;e=n(f)?new S(null,2,5,T,[null,new S(null,4,5,T,[yt,null,OC.g(e),d],null)],null):n(iD.g(Xo.g(AE.g(e))))?new S(null,2,5,T,[null,new S(null,4,5,T,[iD,null,null,d],null)],null):new S(null,2,5,T,[e,
    d],null);}return e},c)}
    function ZT(a,b,c){return Ae(ER(function(d){var e=H(d,0,null),f=H(d,1,null);d=H(d,2,null);var g=$T(a,b,d);d=H(g,0,null);var l=H(g,1,null);g=H(l,0,null);var m=H(l,1,null),q=H(l,2,null);l=H(l,3,null);return x.h(g,au)?new S(null,2,5,T,[null,new S(null,2,5,T,[Dj.l(cg,F([e,Ie([n(f)?yt:YF,new S(null,1,5,T,[d],null),dA,m])])),l],null)],null):x.h(g,yt)?n(yt.g(e))?KS('Two else clauses ("~:;") inside bracket construction.',b):Lb(yt.g(a))?KS('An else clause ("~:;") is in a bracket type that doesn\'t support it.',b):
    x.h(zu,yt.g(a))&&z(YF.g(e))?KS('The else clause ("~:;") is only allowed in the first position for this directive.',b):x.h(zu,yt.g(a))?new S(null,2,5,T,[!0,new S(null,3,5,T,[Dj.l(cg,F([e,new k(null,2,[yt,new S(null,1,5,T,[d],null),gw,q],null)])),!1,l],null)],null):new S(null,2,5,T,[!0,new S(null,3,5,T,[Dj.l(cg,F([e,new k(null,1,[YF,new S(null,1,5,T,[d],null)],null)])),!0,l],null)],null):x.h(g,iD)?n(f)?KS('A plain clause (with "~;") follows an else clause ("~:;") inside bracket construction.',b):Lb(iy.g(a))?
    KS('A separator ("~;") is in a bracket type that doesn\'t support it.',b):new S(null,2,5,T,[!0,new S(null,3,5,T,[Dj.l(cg,F([e,new k(null,1,[YF,new S(null,1,5,T,[d],null)],null)])),!1,l],null)],null):null},new S(null,3,5,T,[new k(null,1,[YF,G],null),!1,c],null)))}function aU(a){return A(ER(function(b){var c=A(b);b=C(b);var d=Xo.g(AE.g(c));return n(Bw.g(d))?YT(c,b):new S(null,2,5,T,[c,b],null)},a))}
    function FS(a){var b=JS;JS=a;try{return aU(A(ER(function(c){var d=H(c,0,null);c=H(c,1,null);if(Re(d))return new S(null,2,5,T,[null,d],null);var e=d.indexOf("~");return 0>e?new S(null,2,5,T,[XT(d,c),new S(null,2,5,T,["",c+d.length],null)],null):0===e?WT(d.substring(1),c+1):new S(null,2,5,T,[XT(d.substring(0,e),c),new S(null,2,5,T,[d.substring(e),e+c],null)],null)},new S(null,2,5,T,[a,0],null))))}finally{JS=b;}}
    var HS=function HS(a){for(;;){if(Re(a))return !1;var c=uF.g(AD.g(AE.g(A(a))));n(c)||(c=Lg(HS,A(YF.g(OC.g(A(a))))),c=n(c)?c:Lg(HS,A(yt.g(OC.g(A(a))))));if(n(c))return !0;a=C(a);}};function IS(a,b){DR(function(c,d){if(mT(d))return new S(null,2,5,T,[null,d],null);d=SS(OC.g(c),d);var e=H(d,0,null);d=H(d,1,null);var f=FR(e);e=H(f,0,null);f=H(f,1,null);e=He.j(e,oy,d);return new S(null,2,5,T,[null,lg(HA.g(c),new S(null,3,5,T,[e,d,f],null))],null)},b,a);return null}
    var bU=Ek(FS),cU=new k(null,6,[Kl,"'",Jl,"#'",xB,"@",oD,"~",Ev,"@",xv,"~"],null);function dU(a){var b=A(a);b=cU.g?cU.g(b):cU.call(null,b);return n(n(b)?x.h(2,D(a)):b)?(ad(ub,b),xS(Ae(a)),!0):null}function eU(a){if(n(BS()))ad(ub,"#");else {var b=uS,c=vS;uS+=1;vS=0;try{lS("[","]");for(var d=0,e=z(a);;){if(Lb(yb)||d<yb){if(e&&(xS(A(e)),C(e))){ad(ub," ");CS(Dw);a=d+1;var f=C(e);d=a;e=f;continue}}else ad(ub,"...");break}mS();}finally{vS=c,uS=b;}}return null}
    (function(){var a=bU("~\x3c[~;~@{~w~^, ~:_~}~;]~:\x3e");return function(){function b(d){var e=null;if(0<arguments.length){e=0;for(var f=Array(arguments.length-0);e<f.length;)f[e]=arguments[e+0],++e;e=new Rd(f,0,null);}return c.call(this,e)}function c(d){d=GS(d);return IS(a,d)}b.I=0;b.M=function(d){d=z(d);return c(d)};b.l=c;return b}()})();
    function fU(a){var b=Xe(a)?null:function(){var m=new Od(function(){return Ak},wz,dj([kF,dt,ip,OD,Do,Es,pw,WG,zo,WC,ID],[!0,Cm,hy,"cljs/core.cljs",15,1,10543,10543,P(new S(null,1,5,T,[gu],null)),"Returns [lifted-ns lifted-map] or nil if m can't be lifted.",n(Ak)?Ak.od:null]));return m.g?m.g(a):m.call(null,a)}(),c=H(b,0,null);b=H(b,1,null);var d=n(b)?b:a,e=n(c)?["#:",p.g(c),"{"].join(""):"{";if(n(BS()))ad(ub,"#");else {c=uS;b=vS;uS+=1;vS=0;try{lS(e,"}");e=0;for(var f=z(d);;){if(Lb(yb)||e<yb){if(f){if(n(BS()))ad(ub,
    "#");else {d=uS;var g=vS;uS+=1;vS=0;try{lS(null,null),xS(A(A(f))),ad(ub," "),CS(Dw),vS=0,xS(Be(A(f))),mS();}finally{vS=g,uS=d;}}if(C(f)){ad(ub,", ");CS(Dw);d=e+1;var l=C(f);e=d;f=l;continue}}}else ad(ub,"...");break}mS();}finally{vS=b,uS=c;}}return null}function gU(a){return ad(ub,uk.l(F([a])))}
    var hU=function(){var a=bU("~\x3c#{~;~@{~w~^ ~:_~}~;}~:\x3e");return function(){function b(d){var e=null;if(0<arguments.length){e=0;for(var f=Array(arguments.length-0);e<f.length;)f[e]=arguments[e+0],++e;e=new Rd(f,0,null);}return c.call(this,e)}function c(d){d=GS(d);return IS(a,d)}b.I=0;b.M=function(d){d=z(d);return c(d)};b.l=c;return b}()}(),iU=new k(null,2,["core$future_call","Future","core$promise","Promise"],null),jU=function(){var a=bU("~\x3c\x3c-(~;~@{~w~^ ~_~}~;)-\x3c~:\x3e");return function(){function b(d){var e=
    null;if(0<arguments.length){e=0;for(var f=Array(arguments.length-0);e<f.length;)f[e]=arguments[e+0],++e;e=new Rd(f,0,null);}return c.call(this,e)}function c(d){d=GS(d);return IS(a,d)}b.I=0;b.M=function(d){d=z(d);return c(d)};b.l=c;return b}()}();function kU(a){return a instanceof ii?Gn:(null!=a?a.C&32768||tb===a.Gf||(a.C?0:Qb(Ic,a)):Qb(Ic,a))?fB:a instanceof Md?Mq:df(a)?jy:We(a)?NC:Ye(a)?tA:Te(a)?Ct:null==a?null:Tk}var lU,bW=Vg(R),tW=Vg(R),zW=Vg(R),BW=Vg(R),$W=u.j(R,su,Wk.v?Wk.v():Wk.call(null));
    lU=new jl(Nd.h("cljs.pprint","simple-dispatch"),kU,$W,bW,tW,zW,BW);fl(lU,jy,function(a){if(Lb(dU(a)))if(n(BS()))ad(ub,"#");else {var b=uS,c=vS;uS+=1;vS=0;try{lS("(",")");for(var d=0,e=z(a);;){if(Lb(yb)||d<yb){if(e&&(xS(A(e)),C(e))){ad(ub," ");CS(Dw);a=d+1;var f=C(e);d=a;e=f;continue}}else ad(ub,"...");break}mS();}finally{vS=c,uS=b;}}return null});fl(lU,tA,eU);fl(lU,NC,fU);fl(lU,Ct,hU);fl(lU,null,function(){return ad(ub,uk.l(F([null])))});fl(lU,Tk,gU);oS=lU;
    function rU(a){return Ye(a)?new S(null,2,5,T,["[","]"],null):new S(null,2,5,T,["(",")"],null)}
    function sU(a){if(Ve(a)){var b=rU(a),c=H(b,0,null),d=H(b,1,null),e=z(a),f=A(e),g=C(e);if(n(BS()))ad(ub,"#");else {var l=uS,m=vS,q=uS+1;uS=q;vS=0;try{lS(c,d);(function(){var B=bU("~w~:i");return function(){function I(O){var N=null;if(0<arguments.length){N=0;for(var U=Array(arguments.length-0);N<U.length;)U[N]=arguments[N+0],++N;N=new Rd(U,0,null);}return K.call(this,N)}function K(O){O=GS(O);return IS(B,O)}I.I=0;I.M=function(O){O=z(O);return K(O)};I.l=K;return I}()})()(f);for(var t=g;;)if(z(t)){(function(){var B=
    bU(" ");return function(I,K,O){return function(){function N(Q){var Y=null;if(0<arguments.length){Y=0;for(var da=Array(arguments.length-0);Y<da.length;)da[Y]=arguments[Y+0],++Y;Y=new Rd(da,0,null);}return U.call(this,Y)}function U(Q){Q=GS(Q);return IS(O,Q)}N.I=0;N.M=function(Q){Q=z(Q);return U(Q)};N.l=U;return N}()}(t," ",B,l,m,q,0,b,c,d,a,e,f,g,f,g)})()();var v=A(t);if(Ve(v)){var y=rU(v),E=H(y,0,null),J=H(y,1,null);if(n(BS()))ad(ub,"#");else {var W=uS,Z=vS,ma=uS+1;uS=ma;vS=0;try{lS(E,J);if(x.h(D(v),
    3)&&Ae(v)instanceof w){var ja=v,Ca=H(ja,0,null),Ba=H(ja,1,null),ta=H(ja,2,null);(function(){var B=bU("~w ~w ");return function(I,K,O){return function(){function N(Q){var Y=null;if(0<arguments.length){Y=0;for(var da=Array(arguments.length-0);Y<da.length;)da[Y]=arguments[Y+0],++Y;Y=new Rd(da,0,null);}return U.call(this,Y)}function U(Q){Q=GS(Q);return IS(O,Q)}N.I=0;N.M=function(Q){Q=z(Q);return U(Q)};N.l=U;return N}()}(t,"~w ~w ",B,ja,Ca,Ba,ta,W,Z,ma,0,y,E,J,v,l,m,q,0,b,c,d,a,e,f,g,f,g)})()(Ca,Ba);Ve(ta)?
    function(){var B=Ye(ta)?"~\x3c[~;~@{~w~^ ~:_~}~;]~:\x3e":"~\x3c(~;~@{~w~^ ~:_~}~;)~:\x3e",I="string"===typeof B?bU(B):B;return function(K,O,N){return function(){function U(Y){var da=null;if(0<arguments.length){da=0;for(var ia=Array(arguments.length-0);da<ia.length;)ia[da]=arguments[da+0],++da;da=new Rd(ia,0,null);}return Q.call(this,da)}function Q(Y){Y=GS(Y);return IS(N,Y)}U.I=0;U.M=function(Y){Y=z(Y);return Q(Y)};U.l=Q;return U}()}(t,B,I,ja,Ca,Ba,ta,W,Z,ma,0,y,E,J,v,l,m,q,0,b,c,d,a,e,f,g,f,g)}()(ta):
    xS(ta);}else lg(function(){var B=bU("~w ~:i~@{~w~^ ~:_~}");return function(I,K,O){return function(){function N(Q){var Y=null;if(0<arguments.length){Y=0;for(var da=Array(arguments.length-0);Y<da.length;)da[Y]=arguments[Y+0],++Y;Y=new Rd(da,0,null);}return U.call(this,Y)}function U(Q){Q=GS(Q);return IS(O,Q)}N.I=0;N.M=function(Q){Q=z(Q);return U(Q)};N.l=U;return N}()}(t,"~w ~:i~@{~w~^ ~:_~}",B,W,Z,ma,0,y,E,J,v,l,m,q,0,b,c,d,a,e,f,g,f,g)}(),v);mS();}finally{vS=Z,uS=W;}}C(t)&&function(){var B=bU("~_");return function(I,
    K,O){return function(){function N(Q){var Y=null;if(0<arguments.length){Y=0;for(var da=Array(arguments.length-0);Y<da.length;)da[Y]=arguments[Y+0],++Y;Y=new Rd(da,0,null);}return U.call(this,Y)}function U(Q){Q=GS(Q);return IS(O,Q)}N.I=0;N.M=function(Q){Q=z(Q);return U(Q)};N.l=U;return N}()}(t,"~_",B,y,E,J,v,l,m,q,0,b,c,d,a,e,f,g,f,g)}()();}else xS(v),C(t)&&function(){var B=bU("~:_");return function(I,K,O){return function(){function N(Q){var Y=null;if(0<arguments.length){Y=0;for(var da=Array(arguments.length-
    0);Y<da.length;)da[Y]=arguments[Y+0],++Y;Y=new Rd(da,0,null);}return U.call(this,Y)}function U(Q){Q=GS(Q);return IS(O,Q)}N.I=0;N.M=function(Q){Q=z(Q);return U(Q)};N.l=U;return N}()}(t,"~:_",B,v,l,m,q,0,b,c,d,a,e,f,g,f,g)}()();t=C(t);}else break;mS();}finally{vS=m,uS=l;}}}else xS(a);}
    var tU=function(){var a=bU("~:\x3c~w~^ ~@_~w~^ ~_~@{~w~^ ~_~}~:\x3e");return function(){function b(d){var e=null;if(0<arguments.length){e=0;for(var f=Array(arguments.length-0);e<f.length;)f[e]=arguments[e+0],++e;e=new Rd(f,0,null);}return c.call(this,e)}function c(d){d=GS(d);return IS(a,d)}b.I=0;b.M=function(d){d=z(d);return c(d)};b.l=c;return b}()}();
    function uU(a,b){z(a)&&(n(b)?function(){var c=bU(" ~_");return function(){function d(f){var g=null;if(0<arguments.length){g=0;for(var l=Array(arguments.length-0);g<l.length;)l[g]=arguments[g+0],++g;g=new Rd(l,0,null);}return e.call(this,g)}function e(f){f=GS(f);return IS(c,f)}d.I=0;d.M=function(f){f=z(f);return e(f)};d.l=e;return d}()}()():function(){var c=bU(" ~@_");return function(){function d(f){var g=null;if(0<arguments.length){g=0;for(var l=Array(arguments.length-0);g<l.length;)l[g]=arguments[g+
    0],++g;g=new Rd(l,0,null);}return e.call(this,g)}function e(f){f=GS(f);return IS(c,f)}d.I=0;d.M=function(f){f=z(f);return e(f)};d.l=e;return d}()}()(),function(){var c=bU("~{~w~^ ~_~}");return function(){function d(f){var g=null;if(0<arguments.length){g=0;for(var l=Array(arguments.length-0);g<l.length;)l[g]=arguments[g+0],++g;g=new Rd(l,0,null);}return e.call(this,g)}function e(f){f=GS(f);return IS(c,f)}d.I=0;d.M=function(f){f=z(f);return e(f)};d.l=e;return d}()}()(a));}
    function vU(a){z(a)&&function(){var b=bU(" ~_~{~w~^ ~_~}");return function(){function c(e){var f=null;if(0<arguments.length){f=0;for(var g=Array(arguments.length-0);f<g.length;)g[f]=arguments[f+0],++f;f=new Rd(g,0,null);}return d.call(this,f)}function d(e){e=GS(e);return IS(b,e)}c.I=0;c.M=function(e){e=z(e);return d(e)};c.l=d;return c}()}()(a);}
    function wU(a){if(C(a)){var b=z(a);a=A(b);var c=C(b);b=A(c);c=C(c);var d="string"===typeof A(c)?new S(null,2,5,T,[A(c),C(c)],null):new S(null,2,5,T,[null,c],null);c=H(d,0,null);d=H(d,1,null);var e=We(A(d))?new S(null,2,5,T,[A(d),C(d)],null):new S(null,2,5,T,[null,d],null);d=H(e,0,null);e=H(e,1,null);if(n(BS()))ad(ub,"#");else {var f=uS,g=vS;uS+=1;vS=0;try{lS("(",")"),function(){var l=bU("~w ~1I~@_~w");return function(){function m(t){var v=null;if(0<arguments.length){v=0;for(var y=Array(arguments.length-
    0);v<y.length;)y[v]=arguments[v+0],++v;v=new Rd(y,0,null);}return q.call(this,v)}function q(t){t=GS(t);return IS(l,t)}m.I=0;m.M=function(t){t=z(t);return q(t)};m.l=q;return m}()}()(a,b),n(c)&&function(){var l=bU(" ~_~w");return function(){function m(t){var v=null;if(0<arguments.length){v=0;for(var y=Array(arguments.length-0);v<y.length;)y[v]=arguments[v+0],++v;v=new Rd(y,0,null);}return q.call(this,v)}function q(t){t=GS(t);return IS(l,t)}m.I=0;m.M=function(t){t=z(t);return q(t)};m.l=q;return m}()}()(c),
    n(d)&&function(){var l=bU(" ~_~w");return function(){function m(t){var v=null;if(0<arguments.length){v=0;for(var y=Array(arguments.length-0);v<y.length;)y[v]=arguments[v+0],++v;v=new Rd(y,0,null);}return q.call(this,v)}function q(t){t=GS(t);return IS(l,t)}m.I=0;m.M=function(t){t=z(t);return q(t)};m.l=q;return m}()}()(d),Ye(A(e))?uU(e,n(c)?c:d):vU(e),mS();}finally{vS=g,uS=f;}}return null}return xU(a)}
    function yU(a){if(n(BS()))ad(ub,"#");else {var b=uS,c=vS;uS+=1;vS=0;try{lS("[","]");for(var d=0;;){if(Lb(yb)||d<yb){if(z(a)){if(n(BS()))ad(ub,"#");else {var e=uS,f=vS;uS+=1;vS=0;try{lS(null,null),xS(A(a)),C(a)&&(ad(ub," "),CS(Dm),xS(Ae(a))),mS();}finally{vS=f,uS=e;}}if(C(Td(a))){ad(ub," ");CS(Dw);e=d+1;var g=C(Td(a));d=e;a=g;continue}}}else ad(ub,"...");break}mS();}finally{vS=c,uS=b;}}}
    function zU(a){var b=A(a);if(n(BS()))ad(ub,"#");else {var c=uS,d=vS;uS+=1;vS=0;try{lS("(",")"),C(a)&&Ye(Ae(a))?(function(){var e=bU("~w ~1I~@_");return function(){function f(l){var m=null;if(0<arguments.length){m=0;for(var q=Array(arguments.length-0);m<q.length;)q[m]=arguments[m+0],++m;m=new Rd(q,0,null);}return g.call(this,m)}function g(l){l=GS(l);return IS(e,l)}f.I=0;f.M=function(l){l=z(l);return g(l)};f.l=g;return f}()}()(b),yU(Ae(a)),function(){var e=bU(" ~_~{~w~^ ~_~}");return function(){function f(l){var m=
    null;if(0<arguments.length){m=0;for(var q=Array(arguments.length-0);m<q.length;)q[m]=arguments[m+0],++m;m=new Rd(q,0,null);}return g.call(this,m)}function g(l){l=GS(l);return IS(e,l)}f.I=0;f.M=function(l){l=z(l);return g(l)};f.l=g;return f}()}()(C(Td(a)))):xU(a),mS();}finally{vS=d,uS=c;}}return null}
    var AU=function(){var a=bU("~:\x3c~1I~w~^ ~@_~w~@{ ~_~w~}~:\x3e");return function(){function b(d){var e=null;if(0<arguments.length){e=0;for(var f=Array(arguments.length-0);e<f.length;)f[e]=arguments[e+0],++e;e=new Rd(f,0,null);}return c.call(this,e)}function c(d){d=GS(d);return IS(a,d)}b.I=0;b.M=function(d){d=z(d);return c(d)};b.l=c;return b}()}(),BU=R;
    function xU(a){if(n(BS()))ad(ub,"#");else {var b=uS,c=vS;uS+=1;vS=0;try{lS("(",")");DS(Hv,1);for(var d=0,e=z(a);;){if(Lb(yb)||d<yb){if(e&&(xS(A(e)),C(e))){ad(ub," ");CS(Dw);a=d+1;var f=C(e);d=a;e=f;continue}}else ad(ub,"...");break}mS();}finally{vS=c,uS=b;}}return null}
    var CU=function(a){return qh.h(R,lh(qf,F([function(){return function d(c){return new Sf(null,function(){for(;;){var e=z(c);if(e){if(Ze(e)){var f=pd(e),g=D(f),l=Wf(g);a:for(var m=0;;)if(m<g){var q=jc(f,m);q=new S(null,2,5,T,[q,new S(null,2,5,T,[Nd.g(Rf(A(q))),Ae(q)],null)],null);l.add(q);m+=1;}else {f=!0;break a}return f?Yf($f(l),d(qd(e))):Yf($f(l),null)}l=A(e);return we(new S(null,2,5,T,[l,new S(null,2,5,T,[Nd.g(Rf(A(l))),Ae(l)],null)],null),d(Td(e)))}return null}},null,null)}(a)}()])))}(function(a){return qh.h(R,
    ch.h(function(b){var c=H(b,0,null),d=H(b,1,null);var e=Of(c);e=n(e)?e:tl(c);return Lb(e)?new S(null,2,5,T,[Nd.h("clojure.core",Rf(c)),d],null):b},a))}(dj([Il,Fl,Co,zl,nt,Sm,mo,At,uq,Gp,Tq,mA,dx,Nl,Lv,iz,Sx,$F,Bm,Bl,kB,qB,EF,hB,Bv,AG,Mm,In,Po,lC],[tU,function(a){var b=Ae(a),c=A(Td(Td(a)));if(Ye(b)){a=BU;BU=x.h(1,D(b))?Ie([A(b),"%"]):qh.h(R,ch.j(function(d,e){return new S(null,2,5,T,[d,["%",p.g(e)].join("")],null)},b,sc(D(b)+1)));try{return function(){var d=bU("~\x3c#(~;~@{~w~^ ~_~}~;)~:\x3e");return function(){function e(g){var l=
    null;if(0<arguments.length){l=0;for(var m=Array(arguments.length-0);l<m.length;)m[l]=arguments[l+0],++l;l=new Rd(m,0,null);}return f.call(this,l)}function f(g){g=GS(g);return IS(d,g)}e.I=0;e.M=function(g){g=z(g);return f(g)};e.l=f;return e}()}()(c)}finally{BU=a;}}else return xU(a)},zU,AU,function(a){if(3<D(a)){if(n(BS()))ad(ub,"#");else {var b=uS,c=vS;uS+=1;vS=0;try{lS("(",")");DS(Hv,1);lg(function(){var l=bU("~w ~@_~w ~@_~w ~_");return function(){function m(t){var v=null;if(0<arguments.length){v=0;
    for(var y=Array(arguments.length-0);v<y.length;)y[v]=arguments[v+0],++v;v=new Rd(y,0,null);}return q.call(this,v)}function q(t){t=GS(t);return IS(l,t)}m.I=0;m.M=function(t){t=z(t);return q(t)};m.l=q;return m}()}(),a);for(var d=0,e=z(eh(3,a));;){if(Lb(yb)||d<yb){if(e){if(n(BS()))ad(ub,"#");else {a=uS;var f=vS;uS+=1;vS=0;try{lS(null,null),xS(A(e)),C(e)&&(ad(ub," "),CS(Dm),xS(Ae(e))),mS();}finally{vS=f,uS=a;}}if(C(Td(e))){ad(ub," ");CS(Dw);a=d+1;var g=C(Td(e));d=a;e=g;continue}}}else ad(ub,"...");break}mS();}finally{vS=
    c,uS=b;}}return null}return xU(a)},tU,wU,wU,zU,tU,zU,AU,AU,tU,AU,zU,zU,tU,zU,function(a){if(C(a)){var b=z(a);a=A(b);var c=C(b);b=A(c);c=C(c);var d="string"===typeof A(c)?new S(null,2,5,T,[A(c),C(c)],null):new S(null,2,5,T,[null,c],null);c=H(d,0,null);d=H(d,1,null);d=We(A(d))?new S(null,2,5,T,[A(d),C(d)],null):new S(null,2,5,T,[null,d],null);var e=H(d,0,null),f=H(d,1,null);if(n(BS()))ad(ub,"#");else {d=uS;var g=vS;uS+=1;vS=0;try{lS("(",")");(function(){var m=bU("~w ~1I~@_~w");return function(){function q(v){var y=
    null;if(0<arguments.length){y=0;for(var E=Array(arguments.length-0);y<E.length;)E[y]=arguments[y+0],++y;y=new Rd(E,0,null);}return t.call(this,y)}function t(v){v=GS(v);return IS(m,v)}q.I=0;q.M=function(v){v=z(v);return t(v)};q.l=t;return q}()})()(a,b);n(n(c)?c:n(e)?e:z(f))&&function(){var m=bU("~@:_");return function(){function q(v){var y=null;if(0<arguments.length){y=0;for(var E=Array(arguments.length-0);y<E.length;)E[y]=arguments[y+0],++y;y=new Rd(E,0,null);}return t.call(this,y)}function t(v){v=
    GS(v);return IS(m,v)}q.I=0;q.M=function(v){v=z(v);return t(v)};q.l=t;return q}()}()();n(c)&&ES(!0,'"~a"~:[~;~:@_~]',F([c,n(e)?e:z(f)]));n(e)&&function(){var m=bU("~w~:[~;~:@_~]");return function(){function q(v){var y=null;if(0<arguments.length){y=0;for(var E=Array(arguments.length-0);y<E.length;)E[y]=arguments[y+0],++y;y=new Rd(E,0,null);}return t.call(this,y)}function t(v){v=GS(v);return IS(m,v)}q.I=0;q.M=function(v){v=z(v);return t(v)};q.l=t;return q}()}()(e,z(f));for(a=f;;){sU(A(a));var l=C(a);
    if(l)b=l,CS(Dw),a=b;else break}mS();}finally{vS=g,uS=d;}}return null}return xS(a)},zU,function(a){if(n(BS()))ad(ub,"#");else {var b=uS,c=vS;uS+=1;vS=0;try{lS("(",")");DS(Hv,1);xS(A(a));if(C(a)){ad(ub," ");CS(Dw);for(var d=0,e=C(a);;){if(Lb(yb)||d<yb){if(e){if(n(BS()))ad(ub,"#");else {a=uS;var f=vS;uS+=1;vS=0;try{lS(null,null),xS(A(e)),C(e)&&(ad(ub," "),CS(Dm),xS(Ae(e))),mS();}finally{vS=f,uS=a;}}if(C(Td(e))){ad(ub," ");CS(Dw);a=d+1;var g=C(Td(e));d=a;e=g;continue}}}else ad(ub,"...");break}}mS();}finally{vS=
    c,uS=b;}}return null},zU,wU,wU,tU,tU,zU,zU,tU]))),DU,aX=Vg(R),bX=Vg(R),cX=Vg(R),dX=Vg(R),$Y=u.j(R,su,Wk.v?Wk.v():Wk.call(null));DU=new jl(Nd.h("cljs.pprint","code-dispatch"),kU,$Y,aX,bX,cX,dX);fl(DU,jy,function(a){if(Lb(dU(a))){var b=CU.call(null,A(a));return n(b)?b.g?b.g(a):b.call(null,a):xU(a)}return null});fl(DU,Mq,function(a){var b=a.g?a.g(BU):a.call(null,BU);return n(b)?zR.l(F([b])):n(rS)?zR.l(F([Rf(a)])):AR.call(null,a)});fl(DU,tA,eU);fl(DU,NC,fU);fl(DU,Ct,hU);fl(DU,Gn,jU);
    fl(DU,fB,function(a){var b=p,c=b.g,d=Rb(a).name;var e=dk(/^[^$]+\$[^$]+/,d);e=n(e)?iU.g?iU.g(e):iU.call(null,e):null;b=["#\x3c",c.call(b,n(e)?e:d),"@",p.g(ea(a)),": "].join("");if(n(BS()))ad(ub,"#");else {c=uS;d=vS;uS+=1;vS=0;try{lS(b,"\x3e");DS(Hv,-(b.length-2));CS(Dw);var f=null!=a?a.O&1||tb===a.vi?!0:a.O?!1:Qb(ed,a):Qb(ed,a);var g=f?!fd(a):f;xS(g?Ex:r(a));mS();}finally{vS=d,uS=c;}}return null});fl(DU,null,AR);fl(DU,Tk,gU);oS=lU;var gY=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.local-node.core","process-response"),function(f){f=qg(f);var g=u.h(f,FB);u.h(f,bp);return Yv.g(g)},e,a,b,c,d)}();gY.B(null,vD,function(){return null});gY.B(null,Mt,function(){return null});gY.B(null,Dy,function(){return null});
    gY.B(null,sz,function(a){a=qg(a);var b=u.h(a,FB),c=u.h(a,bp);TU(vt,"gateway.local-node.core",38,new Dk(function(){return new S(null,3,5,T,["Sending message",c,"to local peer"],null)}),1778154751);return hI(Az.g(b),c)});gY.B(null,Tk,function(a){return TU(Px,"gateway.local-node.core",42,new Dk(function(){return new S(null,2,5,T,["Unable to process response",a],null)}),1091466801)});function hY(a){this.ch=a;}hY.prototype.Uf=function(){return pH(this.ch)};
    hY.prototype.Vf=function(a,b){return hI(this.ch,b)};hY.prototype.eh=function(){return null};hY.prototype.Wf=function(a,b){return hI(this.ch,new k(null,3,[Ht,sz,mt,b,bp,new k(null,1,[Yv,LB],null)],null))};
    function iY(a,b,c){var d=qg(c),e=u.h(d,mt),f=u.h(d,bp),g=u.h(d,Ht);u.h(d,FB);th.h(a,new S(null,2,5,T,[Cq,ww],null));try{return x.h(f,new k(null,1,[Mo,1],null))?TU(BD,"gateway.local-node.core",65,new Dk(function(){return new S(null,1,5,T,[function(){var m=new pb,q=wb,t=vb;wb=!0;vb=function(v){return m.append(v)};try{$V(a);}finally{vb=t,wb=q;}return p.g(m)}()],null)}),-2144747263):x.h(g,vD)?null:jW(b,a,c,e,f)}catch(m){if(m instanceof Error){var l=m;TU(Px,"gateway.local-node.core",70,new Dk(function(){return new S(null,
    3,5,T,[l,"Error handling message",c],null)}),-248066203);return new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R(null,e,fD.g(f),zG.g(f),BI(l,"global.errors.failure"))],null)],null)}throw m;}}function jY(a,b){var c=zG.g(b);if(n(c))return a=ZQ.h(a,c),n(a)?fA.g(a):null;a=fA.g(b);return n(a)?He.j(a,Kr,Kr.g(b)):null}
    function kY(a,b,c){var d=new ah(null);try{TU(Py,"gateway.local-node.core",89,new Dk(function(){return new S(null,2,5,T,["domain handler processing message",c],null)}),111098346);if(n(!1)){var e=bp.g(c),f=Yv.g(e);bh(d,jY(a,e));switch(f instanceof w?f.X:null){case "gateway.common.commands/source-removed":break;case "hello":n(!1)&&TU(BD,"gateway.local-node.core",null,new Dk(function(){return new S(null,2,5,T,[ty,new k(null,2,[fA,r(d),ty,lI(e,new S(null,2,5,T,[qu,"secret"],null))],null)],null)}),-933438777);
    break;default:n(!1)&&TU(BD,"gateway.local-node.core",null,new Dk(function(){return new S(null,2,5,T,[ty,new k(null,2,[fA,r(d),ty,e],null)],null)}),-119678903);}}var g=iY(a,b,c),l=H(g,0,null),m=H(g,1,null),q=n(l)?l:a,t=z(m);b=null;for(var v=f=0;;)if(v<f){var y=b.V(null,v);gY.g(y);n(!1)&&n(!1)&&TU(BD,"gateway.local-node.core",null,new Dk(function(Ba,ta,B,I,K,O,N,U,Q,Y){return function(){return new S(null,2,5,T,[ty,new k(null,2,[fA,r(Y),ty,bp.g(K)],null)],null)}}(t,b,f,v,y,g,l,m,q,d)),-1513290226);v+=
    1;}else {var E=z(t);if(E){var J=E;if(Ze(J)){var W=pd(J),Z=qd(J);J=W;var ma=D(W);t=Z;b=J;f=ma;}else {var ja=A(J);gY.g(ja);n(!1)&&n(!1)&&TU(BD,"gateway.local-node.core",null,new Dk(function(Ba,ta,B,I,K,O,N,U,Q,Y,da,ia){return function(){return new S(null,2,5,T,[ty,new k(null,2,[fA,r(ia),ty,bp.g(K)],null)],null)}}(t,b,f,v,ja,J,E,g,l,m,q,d)),-85497605);t=C(J);b=null;f=0;}v=0;}else break}return q}catch(Ba){if(Ba instanceof Error){var Ca=Ba;TU(Px,"gateway.local-node.core",107,new Dk(function(){return new S(null,
    3,5,T,[Ca,"error handling message",c],null)}),-579359034);return a}throw Ba;}}function lY(a){return qh.h(R,ch.h(function(b){var c=UQ(b);return new S(null,2,5,T,[SC.g(c),new k(null,2,[Iu,b,BD,c],null)],null)},a))}
    function mY(a){var b=R,c=YA.h(b,2E4);TU(BD,"gateway.local-node.core",120,new Dk(function(){return new S(null,2,5,T,["node buffer size:",c],null)}),-1088270010);var d=gI(fY(c,function(l,m){return TU(Fz,"gateway.local-node.core",125,new Dk(function(){return new S(null,4,5,T,["the message",l,"is dropped. total dropped so far",m],null)}),-665211312)})),e=lY(a);TU(vt,"gateway.local-node.core",128,new Dk(function(){return new S(null,1,5,T,[p.g(e)],null)}),-923068698);Fv.g(b);var f=uI(),g=gI(1);PH(function(){var l=
    function(){function q(t){var v=t[1];if(1===v){v=function(){return function(J,W){return VQ(W,J)}}();var y=FI(f);y=He.j(y,aF,e);y=He.j(y,Ov,d);var E=ui(e);E=ch.h(Iu,E);v=$b.j(v,y,E);t[7]=v;t[2]=null;t[1]=2;return rv}return 2===v?eI(t,d):3===v?fI(t,t[2]):4===v?(y=t[8],v=t[2],t[8]=v,t[1]=n(null==v)?5:6,rv):5===v?(y=t[8],v=t[7],y=function(){return function(J,W){return WQ(W,J)}}(),E=ui(e),E=ch.h(Iu,E),v=$b.j(y,v,E),t[2]=v,t[1]=7,rv):6===v?(y=t[8],v=t[7],v=kY(v,e,y),t[7]=v,t[2]=null,t[1]=2,rv):7===v?(t[2]=
    t[2],t[1]=3,rv):null}return function(){function t(E){for(;;){a:try{for(;;){var J=q(E);if(!Nf(J,rv)){var W=J;break a}}}catch(Z){W=Z;E[2]=W;if(z(E[4]))E[1]=A(E[4]);else throw W;W=rv;}if(!Nf(W,rv))return W}}function v(){var E=[null,null,null,null,null,null,null,null,null];E[0]=y;E[1]=1;return E}var y=null;y=function(E){switch(arguments.length){case 0:return v.call(this);case 1:return t.call(this,E)}throw Error("Invalid arity: "+arguments.length);};y.v=v;y.g=t;return y}()}(),m=function(){var q=l();q[6]=
    g;return q}();return dI(m)});return new hY(d)}var nY=AI("agm.peer-removed","Peer has been removed"),oY=AI("agm.method-removed","Method has been removed"),pY=AI("agm.errors.subscription.invalid_subscription","Trying to drop a subscription that wasnt established. Did you mean to return an error instead?");function qY(a,b,c,d,e){return MI(a,new k(null,6,[Iu,"agm",Yv,Bu,zG,b,qn,e,$C,c,rw,d],null))}function rY(a,b,c,d){return MI(a,new k(null,5,[Iu,"agm",Yv,sG,zG,b,$C,c,rw,d],null))}function sY(a,b,c,d){return MI(a,new k(null,5,[Iu,"agm",Yv,JA,fD,b,zG,c,JA,d],null))}function tY(a,b,c,d,e,f){b=new k(null,8,[Iu,"agm",Yv,Jo,CD,b,zG,c,fp,d,Bz,e,BE,SC.g(f),Tn,Nr.g(f)],null);return MI(a,b)}function aZ(a,b,c,d,e,f,g){return MI(a,new k(null,8,[Iu,"agm",Yv,ty,zG,b,CD,c,oB,d,Kw,e,Su,f,Sw,g],null))}
    function uY(a,b,c){return new k(null,6,[Iu,"agm",Yv,qw,CD,a,zG,b,BE,SC.g(c),Tn,Nr.g(c)],null)}function vY(a,b,c){var d=qg(c);c=u.h(d,$C);var e=u.h(d,fp),f=u.h(d,xr);d=u.h(d,UC);sg.h(xt.g(a),xt.g(b))&&Lb(kR.j(OF,a,b))&&CI("agm.errors.invocation.failure","Unable to invoke methods across different users");n(th.h(a,new S(null,4,5,T,[OF,rw,c,e],null)))||CI("agm.errors.invocation.failure",["Unable to find method with id ",p.g(e)," on server id ",p.g(c)," registered with this peer"].join(""));z(f)&&z(d)&&CI("agm.errors.invocation.failure","Cant use positional and by-name arguments at the same time");}
    function wY(a,b){if("string"===typeof a)return x.h(a,b);var c=null!=b;return c?ck(a,b):c}function xY(a,b){return $b.j(function(c,d){return n(wY(d,b))?ee(!0):!1},!1,a)}function yY(a,b){return $b.j(function(c,d){return n(wY(d,b))?ee(!0):c},!1,ZF.g(a))}function zY(a,b){a=ps.g(a);return n(a)?$b.j(function(c,d){return n(wY(d,b))?ee(!0):c},!1,a):!0}function AY(a,b){return We(b)?pf(function(c,d,e){return n(yY(a,d))?He.j(c,d,"\x3cREMOVED\x3e"):n(zY(a,d))?He.j(c,d,e):He.j(c,d,"\x3cREMOVED\x3e")},R,b):b}
    function BY(a,b){var c=$b.j(function(d,e){var f=wY(ip.g(e),b);f=n(f)?gv.h(e,!0):f;return n(f)?ee(e):d},null,rw.g(a));if(null!=c)return c;a=dv.g(a);switch(a instanceof w?a.X:null){case "whitelist":return new k(null,1,[xr,new k(null,1,[ZF,G],null)],null);case "blacklist":return null;default:return new k(null,1,[xr,new k(null,1,[ZF,G],null)],null)}}var CY=new k(null,1,[kG,null],null);function DY(){var a=null!=kG.g(CY);return a?th.h(CY,new S(null,2,5,T,[RC,Jv],null)):a}function EY(a,b){return AY(xr.g(a),b)}function FY(a,b,c){a=kG.g(a);n(a)&&(a.j?a.j("interop",b,c):a.call(null,"interop",b,c));}
    function GY(a){if(null!=kG.g(CY)){var b=r(a);b=qg(b);b=u.h(b,sw);var c=ip.g(b);b=th.h(CY,new S(null,2,5,T,[RC,sE],null));var d=jn.g(b);if(n(d)){if(n(d.g?d.g(c):d.call(null,c))){var e=bo.g(b);FY(CY,"invoke",He.j(wh(r(a),Wx,function(g){return n(e)?e.h?e.h(c,g):e.call(null,c,g):g}),sw,c));}}else {var f=BY(qC.g(b),c);n(f)&&FY(CY,"invoke",He.j(wh(r(a),Wx,function(g){return EY(f,g)}),sw,c));}}}
    function HY(a){if(null!=kG.g(CY)){var b=r(a);b=qg(b);b=u.h(b,sw);b=ip.g(b);var c=th.h(CY,new S(null,2,5,T,[RC,sE],null)),d=jn.g(c);n(d)?n(d.g?d.g(b):d.call(null,b))&&FY(CY,"yield",He.j(r(a),sw,b)):n(BY(qC.g(c),b))&&FY(CY,"yield",He.j(r(a),sw,b));}}
    function IY(a){if(null!=kG.g(CY)){var b=r(a);b=qg(b);b=u.h(b,sw);var c=ip.g(b);b=th.h(CY,new S(null,2,5,T,[RC,sE],null));var d=jn.g(b);if(n(d)){if(n(d.g?d.g(c):d.call(null,c))){var e=bo.g(b);FY(CY,"subscribe",He.j(wh(r(a),Wx,function(g){return n(e)?e.h?e.h(c,g):e.call(null,c,g):g}),sw,c));}}else {var f=BY(qC.g(b),c);n(f)&&FY(CY,"subscribe",He.j(wh(r(a),Wx,function(g){return EY(f,g)}),sw,c));}}}
    function JY(a){if(null!=kG.g(CY)){var b=r(a);b=qg(b);b=u.h(b,sw);b=ip.g(b);var c=th.h(CY,new S(null,2,5,T,[RC,sE],null)),d=jn.g(c);n(d)?n(d.g?d.g(b):d.call(null,b))&&FY(CY,"unsubscribe",He.j(r(a),sw,b)):n(BY(qC.g(c),b))&&FY(CY,"unsubscribe",He.j(r(a),sw,b));}}
    function KY(a){if(null!=kG.g(CY)){var b=r(a);b=qg(b);b=u.h(b,sw);var c=ip.g(b);b=th.h(CY,new S(null,2,5,T,[RC,sE],null));var d=jn.g(b);if(n(d)){if(n(d.g?d.g(c):d.call(null,c))){var e=bo.g(b);FY(CY,"event",He.j(wh(r(a),Sw,function(g){return n(e)?e.h?e.h(c,g):e.call(null,c,g):g}),sw,c));}}else {var f=BY(qC.g(b),c);n(f)&&FY(CY,"event",He.j(wh(r(a),Sw,function(g){return EY(f,g)}),sw,c));}}}function LY(a,b){return new k(null,3,[Yv,Dy,om,b,Mt,a],null)}gQ(Nx,as,as);gQ(im,vB,vB);gQ(Jq,P(vz,P(Ky,Us)),HQ(P(Ky,Us),uQ(NB,Pb,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,Us),Vz,function(a){return Se(a)}],null),null),null));gQ(xA,P(vz,hv),HQ(hv,We,null));gQ(Cy,P(vz,hv),HQ(hv,We,null));gQ(pt,P(vz,hv),HQ(hv,We,null));
    gQ(HG,P(jz,Vx,P(qD,Ln,new S(null,2,5,T,[im,Nx],null),pD,new S(null,4,5,T,[Jq,xA,Cy,pt],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,2,5,T,[im,Nx],null),pD,new S(null,4,5,T,[Jq,xA,Cy,pt],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[im,Nx],null),new S(null,4,5,T,[Jq,xA,Cy,pt],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,$C)},function(a){return M(a,fp)}],null),function(a){return We(a)&&M(a,$C)&&M(a,fp)},new S(null,
    4,5,T,[xr,UC,AD,Rp],null),new S(null,2,5,T,[im,Nx],null),null,new S(null,2,5,T,[$C,fp],null),new S(null,4,5,T,[Jq,xA,Cy,pt],null),new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,$C)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fp))],null),null]))],null),null));gQ(IG,dD,Nb);
    gQ(oA,P(jz,Vx,P(qD,Ln,new S(null,3,5,T,[IG,dp,hx],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,3,5,T,[IG,dp,hx],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[IG,dp,hx],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,CD)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,CD)&&M(a,BE)&&M(a,Tn)},G,new S(null,3,5,T,[IG,dp,hx],null),null,new S(null,3,5,T,[CD,BE,Tn],null),
    G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null]))],null),null));gQ(SF,vB,vB);
    gQ(xz,P(qD,Ln,new S(null,4,5,T,[IG,vB,Nx,SF],null),pD,new S(null,4,5,T,[Jq,xA,Cy,pt],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,4,5,T,[IG,vB,Nx,SF],null),new S(null,4,5,T,[Jq,xA,Cy,pt],null),null,new S(null,5,5,T,[function(a){return We(a)},function(a){return M(a,CD)},function(a){return M(a,zG)},function(a){return M(a,fp)},function(a){return M(a,Bz)}],null),function(a){return We(a)&&M(a,CD)&&M(a,zG)&&M(a,fp)&&M(a,Bz)},new S(null,4,5,T,[xr,UC,AD,Rp],null),new S(null,4,5,T,[IG,vB,
    Nx,SF],null),null,new S(null,4,5,T,[CD,zG,fp,Bz],null),new S(null,4,5,T,[Jq,xA,Cy,pt],null),new S(null,5,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zG)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fp)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Bz))],null),null])));
    gQ(Tr,P(qD,Ln,new S(null,6,5,T,[IG,vB,Nx,SF,dp,hx],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,6,5,T,[IG,vB,Nx,SF,dp,hx],null),null,null,new S(null,7,5,T,[function(a){return We(a)},function(a){return M(a,CD)},function(a){return M(a,zG)},function(a){return M(a,fp)},function(a){return M(a,Bz)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,CD)&&M(a,zG)&&M(a,fp)&&M(a,Bz)&&M(a,BE)&&M(a,Tn)},G,new S(null,6,5,T,[IG,vB,Nx,SF,dp,hx],null),null,
    new S(null,6,5,T,[CD,zG,fp,Bz,BE,Tn],null),G,new S(null,7,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zG)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fp)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Bz)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null])));gQ(Uo,dD,Nb);
    gQ(Ft,P(qD,Ln,new S(null,3,5,T,[IG,vB,Uo],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[IG,vB,Uo],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,CD)},function(a){return M(a,zG)},function(a){return M(a,Cu)}],null),function(a){return We(a)&&M(a,CD)&&M(a,zG)&&M(a,Cu)},G,new S(null,3,5,T,[IG,vB,Uo],null),null,new S(null,3,5,T,[CD,zG,Cu],null),G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD)),
    P(V,new S(null,1,5,T,[X],null),P(pq,X,zG)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Cu))],null),null])));
    gQ(JC,P(qD,Ln,new S(null,4,5,T,[vB,IG,dp,hx],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,4,5,T,[vB,IG,dp,hx],null),null,null,new S(null,5,5,T,[function(a){return We(a)},function(a){return M(a,zG)},function(a){return M(a,CD)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,zG)&&M(a,CD)&&M(a,BE)&&M(a,Tn)},G,new S(null,4,5,T,[vB,IG,dp,hx],null),null,new S(null,4,5,T,[zG,CD,BE,Tn],null),G,new S(null,5,5,T,[P(V,new S(null,1,5,T,[X],null),
    P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zG)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null])));gQ(HD,ru,Kb);gQ(bA,Zw,cf);gQ(Uv,hv,We);
    gQ(Bx,P(qD,Ln,new S(null,4,5,T,[vB,HD,bA,Uv],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,4,5,T,[vB,HD,bA,Uv],null),null,null,new S(null,5,5,T,[function(a){return We(a)},function(a){return M(a,zG)},function(a){return M(a,Kw)},function(a){return M(a,Su)},function(a){return M(a,Sw)}],null),function(a){return We(a)&&M(a,zG)&&M(a,Kw)&&M(a,Su)&&M(a,Sw)},G,new S(null,4,5,T,[vB,HD,bA,Uv],null),null,new S(null,4,5,T,[zG,Kw,Su,Sw],null),G,new S(null,5,5,T,[P(V,new S(null,1,5,T,[X],null),
    P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zG)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Kw)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Su)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sw))],null),null])));
    gQ(JF,P(jz,Bx,P(qD,Ln,new S(null,1,5,T,[IG],null))),sQ(new S(null,2,5,T,[Bx,P(qD,Ln,new S(null,1,5,T,[IG],null))],null),new S(null,2,5,T,[Bx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[IG],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,CD)}],null),function(a){return We(a)&&M(a,CD)},G,new S(null,1,5,T,[IG],null),null,new S(null,1,5,T,[CD],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD))],
    null),null]))],null),null));
    gQ(bu,P(jz,Bx,P(qD,Ln,new S(null,1,5,T,[Uo],null))),sQ(new S(null,2,5,T,[Bx,P(qD,Ln,new S(null,1,5,T,[Uo],null))],null),new S(null,2,5,T,[Bx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[Uo],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,Cu)}],null),function(a){return We(a)&&M(a,Cu)},G,new S(null,1,5,T,[Uo],null),null,new S(null,1,5,T,[Cu],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Cu))],
    null),null]))],null),null));
    gQ(FC,P(jz,Vx,P(qD,Ln,new S(null,2,5,T,[im,Nx],null),pD,new S(null,3,5,T,[Jq,xA,pt],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,2,5,T,[im,Nx],null),pD,new S(null,3,5,T,[Jq,xA,pt],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[im,Nx],null),new S(null,3,5,T,[Jq,xA,pt],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,$C)},function(a){return M(a,fp)}],null),function(a){return We(a)&&M(a,$C)&&M(a,fp)},new S(null,3,5,
    T,[xr,UC,Rp],null),new S(null,2,5,T,[im,Nx],null),null,new S(null,2,5,T,[$C,fp],null),new S(null,3,5,T,[Jq,xA,pt],null),new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,$C)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fp))],null),null]))],null),null));gQ(Er,dD,Nb);
    gQ($D,P(qD,Ln,new S(null,4,5,T,[Er,SF,vB,Nx],null),pD,new S(null,3,5,T,[Jq,xA,pt],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,4,5,T,[Er,SF,vB,Nx],null),new S(null,3,5,T,[Jq,xA,pt],null),null,new S(null,5,5,T,[function(a){return We(a)},function(a){return M(a,vv)},function(a){return M(a,Bz)},function(a){return M(a,zG)},function(a){return M(a,fp)}],null),function(a){return We(a)&&M(a,vv)&&M(a,Bz)&&M(a,zG)&&M(a,fp)},new S(null,3,5,T,[xr,UC,Rp],null),new S(null,4,5,T,[Er,SF,vB,Nx],null),
    null,new S(null,4,5,T,[vv,Bz,zG,fp],null),new S(null,3,5,T,[Jq,xA,pt],null),new S(null,5,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,vv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Bz)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zG)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fp))],null),null])));gQ(MF,hv,We);
    gQ(lB,P(qD,Ln,new S(null,3,5,T,[Er,vB,MF],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[Er,vB,MF],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,vv)},function(a){return M(a,zG)},function(a){return M(a,JA)}],null),function(a){return We(a)&&M(a,vv)&&M(a,zG)&&M(a,JA)},G,new S(null,3,5,T,[Er,vB,MF],null),null,new S(null,3,5,T,[vv,zG,JA],null),G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,vv)),
    P(V,new S(null,1,5,T,[X],null),P(pq,X,zG)),P(V,new S(null,1,5,T,[X],null),P(pq,X,JA))],null),null])));function MY(a,b,c,d){return vh.D(a,new S(null,4,5,T,[OF,Uz,b,c],null),Tg(De,Jj),d)}function NY(a,b,c,d){return null==b?a:oI(a,new S(null,4,5,T,[OF,Uz,b,c],null),d)}function OY(a,b,c,d,e){var f=qg(c);c=u.h(f,bC);var g=u.h(f,wC);f=u.h(f,fp);g=NY(lI(ZQ.h(a,c),new S(null,3,5,T,[OF,Ho,b],null)),g,d,b);a=iR(a,c,g);return bR(g)?new S(null,2,5,T,[a,tY(mt.g(g),b,c,f,d,e)],null):new S(null,2,5,T,[a,null],null)}
    function PY(a,b,c){var d=th.h(b,new S(null,2,5,T,[OF,Ry],null)),e=xt.g(b);b=$b.j(function(f,g){var l=H(g,0,null),m=H(g,1,null);g=H(f,0,null);f=H(f,1,null);m=OY(g,l,m,e,c);l=H(m,0,null);m=H(m,1,null);return new S(null,2,5,T,[n(l)?l:g,df(m)||Ye(m)?$b.j(Tg(De,G),f,m):null!=m?Tg(De,G)(f,m):f],null)},new S(null,2,5,T,[a,G],null),d);a=H(b,0,null);b=H(b,1,null);return new S(null,2,5,T,[a,b],null)}
    function QY(a,b,c){if(n(DY())){var d=xt.g(b);c=z(c);for(var e=null,f=0,g=0;;)if(g<f){var l=e.V(null,g),m=A(l),q=Ae(l),t=th.h(b,new S(null,4,5,T,[OF,rw,d,fp.g(q)],null));JY(new Dk(function(E,J,W,Z,ma,ja,Ca){return function(){return new k(null,4,[CD,ma,tp,fA.g(a),bC,fA.g(b),sw,Ca],null)}}(c,e,f,g,m,q,t)));g+=1;}else if(q=z(c)){m=q;if(Ze(m))c=pd(m),g=qd(m),e=c,f=D(c),c=g;else {l=A(m);t=A(l);var v=Ae(l),y=th.h(b,new S(null,4,5,T,[OF,rw,d,fp.g(v)],null));JY(new Dk(function(E,J,W,Z,ma,ja,Ca){return function(){return new k(null,
    4,[CD,ma,tp,fA.g(a),bC,fA.g(b),sw,Ca],null)}}(c,e,f,g,t,v,y)));c=C(m);e=null;f=0;}g=0;}else break}}function RY(a,b,c){return pf(function(d,e,f){return x.h(b,bC.g(f))&&(Re(c)||M(c,fp.g(f)))?wh(d,it,function(g){return He.j(g,e,f)}):wh(d,zs,function(g){return He.j(g,e,f)})},R,a)}
    function SY(a,b,c,d,e){var f=xt.g(c);d=RY(th.h(b,new S(null,2,5,T,[OF,Ry],null)),f,d);f=qg(d);d=u.h(f,it);var g=u.h(f,zs);f=pf(function(l,m,q){return A(OY(l,m,q,xt.g(b),e))},a,d);return z(d)?(QY(b,c,d),new S(null,2,5,T,[jR(f,xt.g(b),function(l){return z(g)?uh(l,new S(null,2,5,T,[OF,Ry],null),g):xh(l,OF,Je,Ry)}),RI(mt.g(b))?rh.h(function(l){var m=mt.g(b);l=Ac(l);var q=xt.g(b);return MI(m,uY(l,q,e))},d):null],null)):new S(null,2,5,T,[a,null],null)}
    function TY(a,b,c){var d=qg(c),e=u.h(d,zG),f=u.h(d,$C),g=u.h(d,CD),l=u.h(d,fp),m=u.h(d,xr),q=u.h(d,UC),t=u.h(d,Rp);d=u.h(d,AD);var v=ZQ.h(b,f);if(n(v)){var y=uh(v,new S(null,3,5,T,[OF,Ho,g],null),new k(null,2,[tp,e,fp,l],null));v=mt.g(y);var E=th.h(a,new S(null,4,5,T,[OF,rw,f,l],null));IY(new Dk(function(){return new k(null,5,[CD,g,tp,fA.g(a),bC,fA.g(y),sw,E,Wx,q],null)}));return new S(null,2,5,T,[iR(b,f,y),RI(v)?new S(null,1,5,T,[MI(v,dj([xr,Yv,Bz,CD,zG,Rp,Iu,AD,UC,fp],[m,Hw,e,g,f,t,"agm",d,q,l]))],
    null):new S(null,1,5,T,[OI(LY(vI(Cq.g(b)),e),new k(null,2,[Yv,Mt,Mt,Mt.g(v)],null),c)],null)],null)}throw ol(["Unable to find server with id ",p.g(f)].join(""),R);}
    function UY(a,b,c){var d=qg(b),e=u.h(d,fD),f=u.h(d,zG),g=u.h(d,$C),l=u.h(d,fp),m=uh(aR(a,f,OF),new S(null,3,5,T,[OF,Ry,c],null),new k(null,3,[bC,g,fp,l,fD,e],null)),q=aR(a,g,OF),t=function(){var v=Ne(b);return null==v?null:Zt.g(v)}();vY(m,q,b);n(t)&&TU(Fz,"gateway.domains.agm.subscriptions",176,new Dk(function(){return new S(null,13,5,T,["agm","peer",fA.g(m),"subscribes for method",l,"on server",fA.g(q),"with subscription",c,"using request",e,"with large payload",t],null)}),-1627218891);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.subscriptions",
    183,new Dk(function(){return new S(null,10,5,T,["peer",f,"subscribes for method",l,"on",g,"with subscription",c,"using request",e],null)}),-220927300);return TY(m,iR(a,f,m),He.j(b,CD,c))}
    function VY(a,b,c,d,e,f,g){if(n(b)){var l=new S(null,3,5,T,[OF,Ry,d],null),m=th.h(b,l),q=fD.g(m);m=mt.g(b);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.subscriptions",214,new Dk(function(){return new S(null,8,5,T,["peer",c,"dropped/rejected subscription",d,"for request",q,"error?:",g],null)}),1875883160);return new S(null,2,5,T,[iR(a,c,lI(b,l)),RI(m)?n(g)?new S(null,1,5,T,[PI.ga("agm",m,q,c,e,f)],null):new S(null,1,5,T,[MI(m,uY(d,c,e))],null):null],null)}return new S(null,2,5,T,[a,null],null)}
    function WY(a,b,c,d,e){var f=ZQ.h(a,b),g=th.h(f,new S(null,4,5,T,[OF,Ry,c,fD],null));a=iR(a,b,uh(f,new S(null,4,5,T,[OF,Ry,c,wC],null),d));d=mt.g(f);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.subscriptions",235,new Dk(function(){return new S(null,6,5,T,["peer",b,"is accepted subscription",c,"for request",g],null)}),2065721372);return bR(f)?new S(null,2,5,T,[a,new S(null,1,5,T,[MI(d,new k(null,5,[Iu,"agm",Yv,jp,fD,g,zG,b,CD,c],null))],null)],null):new S(null,2,5,T,[a,new S(null,1,5,T,[OI(LY(vI(Cq.g(a)),
    zG.g(e)),new k(null,2,[Yv,Mt,Mt,Mt.g(d)],null),e)],null)],null)}
    function XY(a,b,c){var d=qg(c),e=u.h(d,CD),f=u.h(d,zG);d=u.h(d,Cu);null==d&&CI("agm.errors.subscription.invalid_subscription","Invalid or missing stream id");var g=th.h(b,new S(null,3,5,T,[OF,Ho,e],null));return n(g)?(g=tp.g(g),WY(iR(a,f,MY(uh(b,new S(null,4,5,T,[OF,Ho,e,wC],null),d),d,g,e)),g,e,d,c)):TU(vt,"gateway.domains.agm.subscriptions",260,new Dk(function(){return new S(null,3,5,T,["Subscription accept response",c,"for missing interest"],null)}),-1293537436)}
    function YY(a,b){var c=qg(b),d=u.h(c,CD),e=u.h(c,zG);c=u.h(c,On);e=ZQ.j(a,e,OF);if(n(e))return XY(a,e,b);TU(Fz,"gateway.domains.agm.subscriptions",270,new Dk(function(){return new S(null,3,5,T,["Subscription accept response",b,"from missing peer"],null)}),-511879783);return VY(a,ZQ.h(a,c),c,d,AI("agm.errors.subscription.failure","Received a response from a missing server"),null,!0)}var ZY,bZ=Vg(R),cZ=Vg(R),dZ=Vg(R),h2=Vg(R),n2=u.j(R,su,Wk.v?Wk.v():Wk.call(null));
    ZY=new jl(Nd.h("gateway.domains.agm.subscriptions","drop-interest-rq"),Yv,n2,bZ,cZ,dZ,h2);ZY.B(null,Px,function(){return tr});ZY.B(null,Nu,function(){return JC});gQ(lG,P(Tx,uy,Yv),kQ(uy,new Od(function(){return ZY},uy,dj([dt,ip,OD,Do,Es,pw,WG,zo,WC,ID],[ar,uA,"gateway/domains/agm/subscriptions.cljc",27,1,296,296,Ud,null,n(ZY)?ZY.od:null]))));
    function eZ(a,b,c,d){var e=zG.g(c),f=u.h(c,n(d)?fD:CD),g=aR(a,e,OF),l=th.h(g,new S(null,3,5,T,[OF,Ho,f],null));if(n(l)){var m=tp.g(l),q=u.h(l,wC);l=ZQ.h(a,m);var t=mt.g(l);return n(n(q)?q:d)?(g=new S(null,2,5,T,[iR(a,e,NY(lI(g,new S(null,3,5,T,[OF,Ho,f],null)),q,m,f)),G],null),b=H(g,0,null),g=H(g,1,null),f=VY(b,l,m,f,DI(c),Rp.g(c),d),d=H(f,0,null),f=H(f,1,null),f=new S(null,2,5,T,[n(d)?d:b,df(f)||Ye(f)?$b.j(Tg(De,G),g,f):null!=f?Tg(De,G)(g,f):g],null),d=H(f,0,null),f=H(f,1,null),c=n(n(l)?!RI(t):l)?
    new S(null,2,5,T,[null,OI(LY(vI(Cq.g(a)),e),new k(null,2,[Yv,Mt,Mt,Mt.g(t)],null),c)],null):null,a=H(c,0,null),c=H(c,1,null),new S(null,2,5,T,[n(a)?a:d,df(c)||Ye(c)?$b.j(Tg(De,G),f,c):null!=c?Tg(De,G)(f,c):f],null)):new S(null,2,5,T,[a,new S(null,1,5,T,[PI.ga("agm",b,f,e,pY,null)],null)],null)}return new S(null,2,5,T,[a,new S(null,1,5,T,[PI.ga("agm",b,f,e,AI("agm.errors.subscription.invalid_subscription","Trying to drop a non-existing subscription"),null)],null)],null)}
    function fZ(a,b,c,d,e){var f=ZQ.h(a,c);if(n(f)){var g=th.h(f,new S(null,3,5,T,[OF,Ho,d],null));if(n(g)){JY(new Dk(function(){return new k(null,4,[CD,d,tp,fA.g(b),bC,fA.g(f),sw,th.h(f,new S(null,4,5,T,[OF,rw,c,fp.g(g)],null))],null)}));var l=xt.g(b),m=mt.g(f);a=iR(a,c,NY(lI(f,new S(null,3,5,T,[OF,Ho,d],null)),wC.g(g),l,d));return new S(null,2,5,T,[a,new S(null,1,5,T,[RI(m)?tY(m,d,c,fp.g(g),l,DI(e)):OI(LY(vI(Cq.g(a)),l),new k(null,2,[Yv,Mt,Mt,Mt.g(m)],null),e)],null)],null)}}return null}
    function gZ(a,b,c,d,e){var f=aR(a,c,OF),g=new S(null,3,5,T,[OF,Ry,d],null),l=th.h(f,g);l=qg(l);l=u.h(l,bC);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.subscriptions",376,new Dk(function(){return new S(null,6,5,T,["peer",c,"unsubscribes subscription",d,"using request",e],null)}),-212045690);return n(l)?(a=iR(a,c,lI(f,g)),b=fZ(a,f,l,d,b),n(b)?b:new S(null,2,5,T,[a,G],null)):CI("agm.errors.subscription.invalid_subscription",["Unable to find subscription with id ",p.g(d)," on subscriber id ",p.g(c)].join(""))}
    function hZ(a,b,c,d,e,f,g){if(n(DY())){var l=xt.g(c),m=th.h(c,new S(null,2,5,T,[OF,Ho],null)),q=th.h(c,new S(null,3,5,T,[OF,rw,l],null));a=z(a);for(var t=null,v=0,y=0;;)if(y<v){var E=t.V(null,y),J=u.h(m,E),W=u.h(q,fp.g(J));KY(new Dk(function(ja,Ca,Ba,ta,B,I,K){return function(){return new k(null,8,[CD,K,tp,fA.g(b),bC,fA.g(c),sw,I,oB,d,Ir,e,Su,f,Sw,g],null)}}(a,t,v,y,J,W,E)));y+=1;}else if(W=z(a)){J=W;if(Ze(J))a=pd(J),y=qd(J),t=a,v=D(a),a=y;else {E=A(J);var Z=u.h(m,E),ma=u.h(q,fp.g(Z));KY(new Dk(function(ja,
    Ca,Ba,ta,B,I,K){return function(){return new k(null,8,[CD,K,tp,fA.g(b),bC,fA.g(c),sw,I,oB,d,Ir,e,Su,f,Sw,g],null)}}(a,t,v,y,Z,ma,E)));a=C(J);t=null;v=0;}y=0;}else break}}
    function iZ(a,b){var c=qg(b),d=u.h(c,zG),e=u.h(c,Cu),f=u.h(c,Kw),g=u.h(c,Su),l=u.h(c,Sw),m=function(){var v=Ne(b);return null==v?null:Zt.g(v)}(),q=ZQ.j(a,d,OF);c=th.h(q,new S(null,3,5,T,[OF,Uz,e],null));var t=new ah(Jj);n(m)&&TU(Fz,"gateway.domains.agm.subscriptions",463,new Dk(function(){return new S(null,7,5,T,["agm","peer",fA.g(q),"publishes data on stream",e,"with large payload",m],null)}),482670653);return new S(null,2,5,T,[a,bk(mh.h(Mb,lh(function(v){var y=H(v,0,null);v=H(v,1,null);var E=ZQ.h(a,
    y),J=mt.g(E);if(RI(J))return hZ(v,E,q,!1,f,g,l),ch.h(function(W){return aZ(J,y,W,!1,f,g,l)},v);v=Mt.g(J);if(M(r(t),v))return null;t.Ec(null,De.h(t.Db(null),v));return new S(null,1,5,T,[OI(LY(vI(Cq.g(a)),d),new k(null,2,[Yv,Mt,Mt,v],null),b)],null)},F([c]))))],null)}
    function o2(a,b){var c=qg(b),d=u.h(c,zG),e=u.h(c,CD),f=u.h(c,Kw),g=u.h(c,Su);c=u.h(c,Sw);var l=function(){var J=Ne(b);return null==J?null:Zt.g(J)}(),m=ZQ.j(a,d,OF),q=th.h(m,new S(null,4,5,T,[OF,Ho,e,tp],null)),t=ZQ.h(a,q);if(n(l)){q=th.h(m,new S(null,4,5,T,[OF,Ho,e,fp],null));var v=th.h(m,new S(null,5,5,T,[OF,rw,d,q,ip],null));TU(Fz,"gateway.domains.agm.subscriptions",512,new Dk(function(){return new S(null,10,5,T,["agm","server",fA.g(m),"posts data on method/subscription",v,e,"to peer",fA.g(t),"with large payload",
    l],null)}),1325987297);}var y=mt.g(t);if(n(y)){var E=q=T;bR(t)?(hZ(new S(null,1,5,T,[e],null),t,m,!0,f,g,c),d=aZ(y,xt.g(t),e,!0,f,g,c)):d=OI(LY(vI(Cq.g(a)),d),new k(null,2,[Yv,Mt,Mt,Mt.g(y)],null),b);a=new S(null,2,5,q,[a,new S(null,1,5,E,[d],null)],null);}else a=null;return a}gQ(Lt,P(Ky,Dx),uQ(Dx,Dx,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,Dx),Vz,function(a){return Se(a)}],null),null));
    gQ(or,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[Lt],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[Lt],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[Lt],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,rw)}],null),function(a){return We(a)&&M(a,rw)},G,new S(null,1,5,T,[Lt],null),null,new S(null,1,5,T,[rw],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,rw))],
    null),null]))],null),null));gQ(kt,P(Ky,as),uQ(as,as,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,as),Vz,function(a){return Se(a)}],null),null));
    gQ(lE,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[kt],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[kt],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[kt],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,rw)}],null),function(a){return We(a)&&M(a,rw)},G,new S(null,1,5,T,[kt],null),null,new S(null,1,5,T,[rw],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,rw))],
    null),null]))],null),null));function jZ(a){a=tI(a);var b=zP(Sp.g(a));return n(b)?He.j(a,hp,b):a}function kZ(a,b,c){a=hp.g(a);return n(a)?AP(a,b,c):!0}function lZ(a,b,c){var d=ZQ.h(a,c),e=new S(null,3,5,T,[OF,rw,b],null),f=qh.h(Jj,ch.h(A,th.h(d,e)));return z(f)?mZ(a,b,d,e,f):new S(null,2,5,T,[jR(a,c,function(g){return sI(lI(g,e),OF)}),null],null)}
    function mZ(a,b,c,d,e){var f=ZQ.h(a,b);e=$b.j(function(g,l){var m=H(g,0,null);g=H(g,1,null);var q=De.h(d,l);return n(th.h(m,q))?new S(null,2,5,T,[lI(m,q),De.h(g,l)],null):new S(null,2,5,T,[m,g],null)},new S(null,2,5,T,[c,Jj],null),e);c=H(e,0,null);e=H(e,1,null);a=iR(a,xt.g(c),sI(c,OF));if(Lb(z(e)))return new S(null,2,5,T,[a,null],null);a=SY(a,c,f,e,oY);f=H(a,0,null);a=H(a,1,null);c=new S(null,2,5,T,[f,bR(c)?rY(mt.g(c),xt.g(c),b,Uh(e)):null],null);b=H(c,0,null);c=H(c,1,null);return new S(null,2,5,
    T,[n(b)?b:f,df(c)||Ye(c)?$b.j(Tg(De,G),a,c):null!=c?Tg(De,G)(a,c):a],null)}
    function nZ(a,b){b=qg(b);var c=u.h(b,zG),d=u.h(b,rw),e=new S(null,3,5,T,[OF,rw,c],null);b=sI($b.j(function(g,l){var m=De.h(e,l);return n(th.h(g,m))?lI(g,m):CI("agm.errors.unregistration.failure",["Unable to unregister missing method ",p.g(l)].join(""))},$Q(a,c),d),OF);var f=iR(a,c,b);b=tf(nh.g(function(g){return x.h(c,xt.g(g))}),rf(function(g,l){var m=H(g,0,null);g=H(g,1,null);var q=mZ(m,c,l,e,d);l=H(q,0,null);q=H(q,1,null);return new S(null,2,5,T,[n(l)?l:m,df(q)||Ye(q)?$b.j(Tg(De,G),g,q):null!=q?
    Tg(De,G)(g,q):g],null)},qf),new S(null,2,5,T,[f,G],null),mR(a,OF,b,!1));a=H(b,0,null);b=H(b,1,null);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.mthds",120,new Dk(function(){return new S(null,4,5,T,["peer",c,"un-registers methods",d],null)}),789221531);return new S(null,2,5,T,[a,b],null)}
    function oZ(a,b,c,d){var e=xt.g(b),f=fA.g(b),g=xt.g(d),l=fA.g(d),m=th.h(d,new S(null,3,5,T,[OF,rw,e],null));m=tf(mh.g(function(q){return kZ(q,f,l)}),rf(function(q,t){var v=H(q,0,null);q=H(q,1,null);return new S(null,2,5,T,[He.j(v,xt.g(t),t),De.h(q,Je.h(t,hp))],null)},qf),new S(null,2,5,T,[m,G],null),c);c=H(m,0,null);m=H(m,1,null);return z(m)?new S(null,2,5,T,[iR(a,g,uh(d,new S(null,3,5,T,[OF,rw,e],null),c)),bR(d)?qY(mt.g(d),g,e,m,Yv.g(mt.g(b))):null],null):new S(null,2,5,T,[a,null],null)}
    function pZ(a,b){b=qg(b);var c=u.h(b,zG),d=u.h(b,rw),e=ch.h(jZ,d),f=$b.j(function(g,l){return uh(g,new S(null,4,5,T,[OF,rw,c,xt.g(l)],null),l)},$Q(a,c),e);b=iR(a,c,f);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.mthds",200,new Dk(function(){return new S(null,4,5,T,["peer",c,"registers methods",d],null)}),793793040);return $b.j(function(g,l){var m=H(g,0,null);g=H(g,1,null);var q=oZ(m,f,e,l);l=H(q,0,null);q=H(q,1,null);return new S(null,2,5,T,[n(l)?l:m,df(q)||Ye(q)?$b.j(Tg(De,G),g,q):null!=q?Tg(De,
    G)(g,q):g],null)},new S(null,2,5,T,[b,G],null),mR(a,OF,f,!1))}function qZ(a,b,c){var d=fA.g(a),e=fA.g(c);return tf(mh.g(function(f){return kZ(f,d,e)}),rf(function(f,g){return De.h(f,He.j(Je.h(g,hp),$C,xt.g(a)))},qf),G,b)}function rZ(a,b,c){var d=qg(b),e=u.h(d,fD),f=u.h(d,zG),g=u.h(d,$C),l=u.h(d,vv),m=u.h(d,fp),q=u.h(d,xr),t=u.h(d,UC);d=u.h(d,Rp);var v=uh(c,new S(null,3,5,T,[OF,Xp,l],null),new k(null,3,[mn,f,fp,m,fD,e],null)),y=!bR(v);c=T;e=iR(a,g,v);y?f=new S(null,1,5,T,[OI(LY(vI(Cq.g(a)),f),new k(null,2,[Yv,Mt,Mt,th.h(v,new S(null,2,5,T,[mt,Mt],null))],null),b)],null):(a=T,b=mt.g(v),f=MI(b,dj([xr,vv,Yv,Bz,zG,Rp,Iu,UC,fp],[q,l,sE,f,g,d,"agm",t,m])),f=new S(null,1,5,a,[f],null));return new S(null,2,5,c,[e,f],null)}
    function sZ(a,b,c,d,e){var f=qg(b),g=u.h(f,fD),l=u.h(f,zG),m=u.h(f,$C),q=u.h(f,fp),t=function(){var E=Ne(b);return null==E?null:Zt.g(E)}(),v=th.h(d,new S(null,4,5,T,[OF,rw,m,q],null));n(t)&&TU(Fz,"gateway.domains.agm.calls",62,new Dk(function(){return new S(null,11,5,T,["agm","peer",fA.g(e),"calls method",ip.g(v),"on",fA.g(d),"using request",g,"with large payload",t],null)}),-1488349747);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.calls",67,new Dk(function(){return new S(null,8,5,T,["peer",
    l,"calls method",q,"on",m,"using request",g],null)}),215412465);var y=uh(e,new S(null,3,5,T,[OF,gy,g],null),new k(null,3,[fn,m,fp,q,vv,c],null));GY(new Dk(function(){return new k(null,5,[fD,g,mn,fA.g(y),bC,fA.g(d),sw,v,Wx,UC.g(b)],null)}));return rZ(iR(a,l,y),He.j(b,vv,c),x.h(l,m)?y:d)}
    function tZ(a,b,c,d){function e(m){return PI.R("agm",b,Ac(m),xt.g(c),AI("agm.errors.invocation.failure","Peer has left while waiting for result"))}var f=xt.g(d);d=Uk(function(m){return x.h(fn.g(Bc(m)),f)},th.h(c,new S(null,2,5,T,[OF,gy],null)));d=qg(d);var g=u.h(d,!0),l=u.h(d,!1);return z(g)?new S(null,2,5,T,[jR(a,xt.g(c),function(m){return z(l)?uh(m,new S(null,2,5,T,[OF,gy],null),qh.h(R,l)):xh(m,OF,Je,gy)}),bR(c)?rh.h(e,g):null],null):new S(null,2,5,T,[a,null],null)}
    function uZ(a,b,c,d,e){var f=fD.g(c),g=mn.g(c),l=fp.g(c),m=function(){var W=ZQ.h(a,g);return null==W?null:lI(W,new S(null,3,5,T,[OF,gy,f],null))}();if(n(m)){var q=iR(a,g,m),t=ZQ.h(q,b),v=th.h(t,new S(null,4,5,T,[OF,rw,b,l],null)),y=vC.g(e),E=tx.g(e),J=function(){var W=Ne(d);return null==W?null:Zt.g(W)}();if(bR(m)){if(n(y))return HY(new Dk(function(){return new k(null,6,[fD,fD.g(c),mn,fA.g(m),bC,fA.g(t),sw,v,vC,!0,JA,JA.g(y)],null)})),n(J)&&TU(Fz,"gateway.domains.agm.calls",164,new Dk(function(){return new S(null,
    11,5,T,["agm","method",ip.g(v),"on server",fA.g(t),"yield success to",fA.g(m),"for request",f,"with large payload",J],null)}),1630019798),TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.calls",170,new Dk(function(){return new S(null,4,5,T,["yield success to",g,"for request",f],null)}),828446296),new S(null,2,5,T,[q,new S(null,1,5,T,[sY(mt.g(m),f,g,JA.g(y))],null)],null);HY(new Dk(function(){return new k(null,6,[fD,fD.g(c),mn,fA.g(m),bC,fA.g(t),sw,v,vC,!1,JA,Ej(E,new S(null,2,5,T,[Tn,BE],null))],
    null)}));TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.calls",182,new Dk(function(){return new S(null,4,5,T,["yield error to",g,"for request",f],null)}),1911440045);return new S(null,2,5,T,[q,new S(null,1,5,T,[PI.ga("agm",mt.g(m),f,g,DI(E),Rp.g(E))],null)],null)}return new S(null,2,5,T,[q,new S(null,1,5,T,[OI(LY(vI(Cq.g(q)),b),new k(null,2,[Yv,Mt,Mt,th.h(m,new S(null,2,5,T,[mt,Mt],null))],null),d)],null)],null)}return null}
    function vZ(a,b,c,d,e){var f=ZQ.h(a,c),g=th.h(f,new S(null,3,5,T,[OF,Xp,b],null));return n(g)?(b=new S(null,2,5,T,[iR(a,c,lI(f,new S(null,3,5,T,[OF,Xp,b],null))),G],null),a=H(b,0,null),b=H(b,1,null),d=uZ(a,c,g,d,e),c=H(d,0,null),d=H(d,1,null),new S(null,2,5,T,[n(c)?c:a,df(d)||Ye(d)?$b.j(Tg(De,G),b,d):null!=d?Tg(De,G)(b,d):b],null)):null}function wZ(a,b,c,d,e,f){b=new k(null,6,[Iu,"global",Yv,Lx,fD,b,zG,c,uv,d,zx,e],null);f=n(f)?He.j(b,hu,f):b;return MI(a,f)}gQ(WD,dD,Nb);gQ(Pn,dD,Nb);gQ(JG,Zw,cf);gQ(HB,P(qD,Ln,new S(null,1,5,T,[JG],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[JG],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,sz)}],null),function(a){return We(a)&&M(a,sz)},G,new S(null,1,5,T,[JG],null),null,new S(null,1,5,T,[sz],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,sz))],null),null])));
    OQ.B(null,xG,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[nr,Fw,HB],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[nr,Fw,HB],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,Sr)},function(a){return M(a,fA)},function(a){return M(a,kb)}],null),function(a){return We(a)&&M(a,Sr)&&M(a,fA)&&M(a,kb)},G,new S(null,3,5,T,[nr,Fw,HB],null),null,new S(null,3,5,T,[Sr,fA,kb],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sr)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fA)),P(V,new S(null,1,5,T,[X],null),P(pq,X,kb))],null),null]))],null),null)});gQ(wF,vB,vB);
    OQ.B(null,mx,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[wF,WD,Pn],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[wF,WD,Pn],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,Ew)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,Ew)&&M(a,BE)&&M(a,Tn)},G,new S(null,3,5,T,[wF,WD,Pn],null),null,new S(null,3,5,T,[Ew,BE,Tn],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Ew)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null]))],null),null)});
    OQ.B(null,sG,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,1,5,T,[kt],null),pD,new S(null,2,5,T,[WD,Pn],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[kt],null),new S(null,2,5,T,[WD,Pn],null),null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,rw)}],null),function(a){return We(a)&&M(a,rw)},new S(null,2,5,T,[BE,Tn],null),new S(null,1,5,T,[kt],null),null,new S(null,1,5,T,[rw],null),new S(null,2,5,T,[WD,Pn],null),new S(null,
    2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,rw))],null),null]))],null),null)});gQ(NF,new Hj(null,new k(null,4,[vD,"null",Dy,"null",Mt,"null",sz,"null"],null),null),new Hj(null,new k(null,4,[vD,null,Dy,null,Mt,null,sz,null],null),null));
    OQ.B(null,Bu,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[im,NF,hr],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[im,NF,hr],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,$C)},function(a){return M(a,qn)},function(a){return M(a,rw)}],null),function(a){return We(a)&&M(a,$C)&&M(a,qn)&&M(a,rw)},G,new S(null,3,5,T,[im,NF,hr],null),null,new S(null,3,5,T,[$C,qn,rw],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,$C)),P(V,new S(null,1,5,T,[X],null),P(pq,X,qn)),P(V,new S(null,1,5,T,[X],null),P(pq,X,rw))],null),null]))],null),null)});OQ.B(null,Hw,function(){return sQ(new S(null,2,5,T,[Vo,xz],null),new S(null,2,5,T,[Vo,xz],null),null)});OQ.B(null,Jo,function(){return sQ(new S(null,2,5,T,[Vo,Tr],null),new S(null,2,5,T,[Vo,Tr],null),null)});OQ.B(null,am,function(){return sQ(new S(null,2,5,T,[UG,HG],null),new S(null,2,5,T,[UG,HG],null),null)});
    OQ.B(null,Eo,function(){return sQ(new S(null,2,5,T,[UG,Ft],null),new S(null,2,5,T,[UG,Ft],null),null)});
    OQ.B(null,jp,function(){return sQ(new S(null,2,5,T,[Rl,P(qD,Ln,new S(null,1,5,T,[IG],null))],null),new S(null,2,5,T,[Rl,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[IG],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,CD)}],null),function(a){return We(a)&&M(a,CD)},G,new S(null,1,5,T,[IG],null),null,new S(null,1,5,T,[CD],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD))],null),null]))],null),
    null)});OQ.B(null,Nu,function(){return sQ(new S(null,2,5,T,[UG,JC],null),new S(null,2,5,T,[UG,JC],null),null)});
    OQ.B(null,qw,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[IG,WD,Pn],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[IG,WD,Pn],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,CD)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,CD)&&M(a,BE)&&M(a,Tn)},G,new S(null,3,5,T,[IG,WD,Pn],null),null,new S(null,3,5,T,[CD,BE,Tn],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null]))],null),null)});OQ.B(null,Nv,function(){return sQ(new S(null,2,5,T,[UG,or],null),new S(null,2,5,T,[UG,or],null),null)});OQ.B(null,$n,function(){return sQ(new S(null,2,5,T,[UG,lE],null),new S(null,2,5,T,[UG,lE],null),null)});OQ.B(null,Xn,function(){return sQ(new S(null,2,5,T,[UG,JF],null),new S(null,2,5,T,[UG,JF],null),null)});
    OQ.B(null,Gm,function(){return sQ(new S(null,2,5,T,[UG,bu],null),new S(null,2,5,T,[UG,bu],null),null)});gQ(Nm,Zw,cf);
    OQ.B(null,ty,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,5,5,T,[IG,Nm,HD,bA,Uv],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,5,5,T,[IG,Nm,HD,bA,Uv],null),null,null,new S(null,6,5,T,[function(a){return We(a)},function(a){return M(a,CD)},function(a){return M(a,oB)},function(a){return M(a,Kw)},function(a){return M(a,Su)},function(a){return M(a,Sw)}],null),function(a){return We(a)&&M(a,CD)&&M(a,oB)&&M(a,Kw)&&M(a,Su)&&M(a,Sw)},G,new S(null,
    5,5,T,[IG,Nm,HD,bA,Uv],null),null,new S(null,5,5,T,[CD,oB,Kw,Su,Sw],null),G,new S(null,6,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,CD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,oB)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Kw)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Su)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sw))],null),null]))],null),null)});OQ.B(null,Jp,function(){return sQ(new S(null,2,5,T,[UG,FC],null),new S(null,2,5,T,[UG,FC],null),null)});
    OQ.B(null,sE,function(){return sQ(new S(null,2,5,T,[UG,$D],null),new S(null,2,5,T,[UG,$D],null),null)});OQ.B(null,IA,function(){return sQ(new S(null,2,5,T,[UG,lB],null),new S(null,2,5,T,[UG,lB],null),null)});
    OQ.B(null,JA,function(){return sQ(new S(null,2,5,T,[Rl,P(qD,Ln,new S(null,1,5,T,[MF],null))],null),new S(null,2,5,T,[Rl,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[MF],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,JA)}],null),function(a){return We(a)&&M(a,JA)},G,new S(null,1,5,T,[MF],null),null,new S(null,1,5,T,[JA],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,JA))],null),null]))],null),
    null)});gQ(BC,dD,Nb);
    gQ(Pq,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[Fw],null),pD,new S(null,1,5,T,[BC],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[Fw],null),pD,new S(null,1,5,T,[BC],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[Fw],null),new S(null,1,5,T,[BC],null),null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,fA)}],null),function(a){return We(a)&&M(a,fA)},new S(null,1,5,T,[Sp],null),new S(null,1,5,T,[Fw],null),null,new S(null,1,5,T,
    [fA],null),new S(null,1,5,T,[BC],null),new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fA))],null),null]))],null),null));function xZ(a,b,c){var d=aR(a,c,OF);return $b.j(function(e,f){var g=H(e,0,null);H(e,1,null);var l=H(e,0,null);e=H(e,1,null);g=ZQ.h(g,c);var m=fA.g(f),q=xt.g(f),t=Jk(F([ch.g(Xh),th.h(f,new S(null,3,5,T,[OF,rw,q],null))])),v=xt.g(g),y=bR(g),E=bR(f);m=y?De.h(G,SI.ga("agm",b,v,q,m,new k(null,1,[sz,E],null))):G;q=E?De.h(m,SI.ga("agm",mt.g(f),q,v,fA.g(g),new k(null,1,[sz,y],null))):m;g=oZ(l,f,t,g);f=H(g,0,null);g=H(g,1,null);g=new S(null,2,5,T,[f,n(g)?De.h(q,g):q],null);f=H(g,0,null);g=H(g,1,null);return new S(null,
    2,5,T,[n(f)?f:l,df(g)||Ye(g)?$b.j(Tg(De,G),e,g):null!=g?Tg(De,G)(e,g):e],null)},new S(null,2,5,T,[a,G],null),mR(a,OF,d,!1))}function yZ(a,b,c,d,e){e=zP(e);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.core",87,new Dk(function(){return new S(null,4,5,T,["peer",c,"joins with identity",d],null)}),1561932089);return xZ(GI(a,c,OF,e),b,c)}
    function zZ(a,b,c,d){var e=ZQ.h(a,c),f=mt.g(e),g=function(){var m=new S(null,2,5,T,[a,null],null),q=function(){var J=H(m,0,null),W=H(m,1,null),Z=tZ(J,f,e,b),ma=H(Z,0,null);Z=H(Z,1,null);return new S(null,2,5,T,[n(ma)?ma:J,df(Z)||Ye(Z)?$b.j(Tg(De,G),W,Z):null!=Z?Tg(De,G)(W,Z):W],null)}(),t=function(){var J=H(q,0,null),W=H(q,1,null),Z=SY(J,e,b,null,nY),ma=H(Z,0,null);Z=H(Z,1,null);return new S(null,2,5,T,[n(ma)?ma:J,df(Z)||Ye(Z)?$b.j(Tg(De,G),W,Z):null!=Z?Tg(De,G)(W,Z):W],null)}(),v=H(t,0,null);t=H(t,
    1,null);var y=lZ(v,xt.g(b),c),E=H(y,0,null);y=H(y,1,null);return new S(null,2,5,T,[n(E)?E:v,df(y)||Ye(y)?$b.j(Tg(De,G),t,y):null!=y?Tg(De,G)(t,y):t],null)}(),l=H(g,0,null);g=H(g,1,null);return new S(null,2,5,T,[l,RI(f)?De.h(g,TI.R("agm",f,c,xt.g(b),d)):g],null)}
    function AZ(a,b,c){var d=xt.g(b),e=tf(ch.g(xt),rf(function(f,g){var l=H(f,0,null);f=H(f,1,null);var m=zZ(l,b,g,c);g=H(m,0,null);m=H(m,1,null);return new S(null,2,5,T,[n(g)?g:l,df(m)||Ye(m)?$b.j(Tg(De,G),f,m):null!=m?Tg(De,G)(f,m):f],null)},qf),PY(a,b,c),mR(a,OF,b,!1));a=H(e,0,null);e=H(e,1,null);TU(BD,"GATEWAY_ACTION_LOG|agm|gateway.domains.agm.core",164,new Dk(function(){return new S(null,3,5,T,["peer",d,"leaves agm domain"],null)}),-1844333082);return new S(null,2,5,T,[HI(a,d,OF),e],null)}
    function BZ(a,b){TU(vt,"gateway.domains.agm.core",199,new Dk(function(){return new S(null,1,5,T,["removing source from agm domain"],null)}),2087757306);b=Jg(fR(a,b,OF));a=tf(ch.g(xt),rf(function(c,d){return HI(c,d,OF)},qf),a,b);a=$b.j(function(c,d){var e=H(c,0,null);c=H(c,1,null);var f=AZ(e,d,nY);d=H(f,0,null);f=H(f,1,null);return new S(null,2,5,T,[n(d)?d:e,df(f)||Ye(f)?$b.j(Tg(De,G),c,f):null!=f?Tg(De,G)(c,f):c],null)},new S(null,2,5,T,[a,null],null),b);TU(vt,"gateway.domains.agm.core",210,new Dk(function(){return new S(null,
    1,5,T,["removed source from agm domain"],null)}),-1538541664);return a}function CZ(a,b,c){c=qg(c);var d=u.h(c,zG);c=u.h(c,fD);var e=aR(a,d,OF);e=Uh(ph(ch.h(function(f){f=qg(f);var g=u.h(f,xt),l=ZQ.h(a,d);g=ui(th.h(f,new S(null,3,5,T,[OF,rw,g],null)));return qZ(f,g,l)},mh.h(bR,mR(a,OF,e,!1)))));return new S(null,2,5,T,[a,new S(null,1,5,T,[MI(b,new k(null,4,[rw,e,fD,c,Yv,rw,zG,d],null))],null)],null)}
    var DZ=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.domains.agm.core","handle-request"),function(f,g,l){return Yv.g(l)},e,a,b,c,d)}();
    DZ.B(null,XG,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG),g=u.h(d,fA);d=u.h(d,Sp);if(n(II(a,f,OF)))a=new S(null,2,5,T,[a,new S(null,1,5,T,[QI.D("agm",b,e,f)],null)],null);else {d=yZ(a,b,f,g,d);g=H(d,0,null);d=H(d,1,null);var l=ZQ.h(g,f),m=T,q=De.l;b=QI.D("agm",b,e,f);a=LY(vI(Cq.g(a)),f);c=He.j(c,Yv,Dt);c=n(hu.g(l))?He.j(c,hu,hu.g(l)):c;a=new S(null,2,5,m,[g,q.call(De,d,b,F([NI(a,c)]))],null);}}else g=qg(c),c=u.h(g,zG),f=u.h(g,fA),g=u.h(g,Sp),a=n(II(a,c,OF))?null:yZ(a,b,c,f,g);return a});
    DZ.B(null,yv,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD);d=u.h(d,zG);var f=AZ(a,$Q(a,d),DI(c)),g=H(f,0,null);f=H(f,1,null);a=new S(null,2,5,T,[g,De.l(f,QI.D("agm",b,e,d),F([NI(LY(vI(Cq.g(a)),d),He.j(c,Yv,aA))]))],null);}else b=qg(c),b=u.h(b,zG),b=ZQ.h(a,b),a=n(b)?AZ(a,b,DI(c)):null;return a});
    DZ.B(null,Nv,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG);d=u.h(d,rw);var g=pZ(a,c);a=H(g,0,null);g=H(g,1,null);b=new S(null,2,5,T,[a,De.l(g,qY(b,f,f,d,sz),F([QI.D("agm",b,e,f),NI(LY(vI(Cq.g(a)),f),c)]))],null);}else b=pZ(a,c);return b});DZ.B(null,$n,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG);d=u.h(d,rw);var g=nZ(a,c),l=H(g,0,null);g=H(g,1,null);a=new S(null,2,5,T,[l,De.l(g,rY(b,f,f,d),F([QI.D("agm",b,e,f),NI(LY(vI(Cq.g(a)),f),c)]))],null);}else a=nZ(a,c);return a});
    DZ.B(null,Jp,function(a,b,c){if(RI(b)){b=qg(c);u.h(b,fD);var d=u.h(b,zG);b=u.h(b,$C);b=aR(a,b,OF);d=aR(a,d,OF);var e=wI(Cq.g(a)),f=H(e,0,null);e=H(e,1,null);vY(d,b,c);a=sZ(He.j(a,Cq,f),c,e,b,d);}else f=qg(c),u.h(f,fD),b=u.h(f,zG),d=u.h(f,$C),f=u.h(f,vv),d=ZQ.j(a,d,OF),a=bR(d)?sZ(a,c,f,d,aR(a,b,OF)):null;return a});DZ.B(null,IA,function(a,b,c){RI(b);var d=qg(c);b=u.h(d,vv);d=u.h(d,zG);aR(a,d,OF);return vZ(a,b,d,c,new k(null,1,[vC,c],null))});
    DZ.B(null,am,function(a,b,c){if(RI(b)){var d=wI(Cq.g(a));b=H(d,0,null);d=H(d,1,null);a=UY(He.j(a,Cq,b),c,d);}else d=qg(c),b=u.h(d,CD),d=u.h(d,$C),a=n(ZQ.h(a,d))?UY(a,c,b):null;return a});DZ.B(null,rB,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG);d=u.h(d,CD);c=gZ(a,c,f,d,e);a=H(c,0,null);c=H(c,1,null);a=new S(null,2,5,T,[a,De.h(c,QI.D("agm",b,e,f))],null);}else f=qg(c),b=u.h(f,fD),e=u.h(f,zG),f=u.h(f,CD),a=gZ(a,c,e,f,b);return a});DZ.B(null,Nu,function(a,b,c){return eZ(a,b,c,!1)});
    DZ.B(null,Eo,function(a,b,c){RI(b)?(b=qg(c),u.h(b,CD),b=u.h(b,zG),b=aR(a,b,OF),a=XY(a,b,c)):a=YY(a,c);return a});DZ.B(null,Gm,function(a,b,c){return iZ(a,c)});DZ.B(null,Xn,function(a,b,c){return o2(a,c)});DZ.B(null,Px,function(a,b,c){var d=qg(c),e=u.h(d,fD);d=u.h(d,zG);$Q(a,d);e=vZ(a,e,d,c,new k(null,1,[tx,c],null));return n(e)?e:eZ(a,b,c,!0)});DZ.B(null,LB,function(a,b){return BZ(a,b)});DZ.B(null,Zx,function(a,b,c){return CZ(a,b,c)});
    DZ.B(null,Tk,function(a,b,c){TU(Px,"gateway.domains.agm.core",304,new Dk(function(){return new S(null,2,5,T,["Unhandled message",c],null)}),1551364790);return new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("agm",b,fD.h(c,-1),zG.g(c),EI("agm.errors.unhandled_message",["Unhandled message ",p.g(c)].join("")))],null)],null)});
    function EZ(a,b){var c=qg(b),d=u.h(c,mt);c=u.h(c,bp);try{return DZ.j(a,d,c)}catch(f){var e=f;n(rl(e))||TU(Px,"gateway.domains.agm.core",321,new Dk(function(){return new S(null,3,5,T,[e,"Error handling request",b],null)}),-243623448);return RI(d)?new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("agm",d,fD.g(c),zG.g(c),BI(e,"agm.errors.failure"))],null)],null):null}}function FZ(){}FZ.prototype.cd=function(){return new k(null,3,[SC,"agm",Cr,"",nD,1],null)};FZ.prototype.dd=function(a,b){return b};
    FZ.prototype.ad=function(a,b){return b};FZ.prototype.bd=function(a,b,c){return EZ(b,c)};var GZ=AI("activity.peer-removed","Peer has been removed"),HZ=AI("activity.destroyed","Activity destroyed");function IZ(a,b,c){return new k(null,6,[Iu,"activity",Yv,wq,zG,a,RA,b,BE,SC.g(c),Tn,Nr.g(c)],null)}function JZ(a,b){return new k(null,4,[Iu,"activity",Yv,fq,zG,a,sp,b],null)}function KZ(a,b,c,d){return MI(a,new k(null,5,[Iu,"activity",Yv,Cn,fD,b,zG,c,aw,d],null))}var LZ=function LZ(a){return qh.h(R,ch.h(function(c){var d=H(c,0,null);c=H(c,1,null);return new S(null,2,5,T,[d,wh(wh(c,Rp,Sw),zC,LZ)],null)},a))};function MZ(a,b){a=ZQ.h(a,b);return new k(null,3,[zG,b,ip,gn.g(a),Yv,BA.g(a)],null)}
    function NZ(a,b,c,d){var e=zC.g(c),f=gn.g(b),g=BA.g(b);a=dj([Hp,mp,Yv,zG,Yz,Iv,Iu,du,aw,cv],[rh.h(Qg(MZ,a),Bn.g(c)),mp.g(c),Gs,xt.g(b),Yv.g(c),d,"activity",fz.g(c),xt.g(c),MZ(a,cv.g(c))]);f=n(f)?He.j(a,gn,f):a;g=n(g)?He.j(f,BA,g):f;return n(e)?He.j(g,zC,LZ(e)):g}
    var OZ=function OZ(a){switch(arguments.length){case 4:return OZ.D(arguments[0],arguments[1],arguments[2],arguments[3]);case 3:return OZ.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};OZ.D=function(a,b,c,d){return MI(b,OZ.j(a,c,d))};OZ.j=function(a,b,c){var d=zC.g(c);a=dj([Hp,mp,Yv,zG,Yz,Iu,du,aw,cv],[rh.h(Qg(MZ,a),qR(Hp.g(c),Bn.g(c))),mp.g(c),lv,b,Yv.g(c),"activity",fz.g(c),xt.g(c),MZ(a,cv.g(c))]);return n(d)?He.j(a,zC,LZ(d)):a};
    OZ.I=4;var PZ=Qg(QI,"activity"),QZ=Qg(PI,"activity");function RZ(a,b,c){return $b.j(function(d,e){e=new S(null,2,5,T,[ux,e],null);return uh(d,e,De.h(th.j(d,e,G),c))},a,b)}function SZ(a,b,c){return n(function(){var d=z(b);return d?c:d}())?$b.j(function(d,e){e=new S(null,2,5,T,[ux,e],null);var f=qI(c,th.j(d,e,null));return z(f)?uh(d,e,f):lI(d,e)},a,b):a}function TZ(a,b){return n(b)?th.h(a,new S(null,2,5,T,[Wo,b],null)):null}function UZ(a,b,c){return n(b)?uh(a,new S(null,2,5,T,[Wo,b],null),c):a}
    function VZ(a,b){return th.h(a,new S(null,2,5,T,[Pz,b],null))}function WZ(a,b,c){return $b.j(function(d,e){return uh(d,new S(null,3,5,T,[Pz,b,ip.g(e)],null),e)},a,c)}function XZ(a,b,c){return $b.j(function(d,e){return lI(d,new S(null,3,5,T,[Pz,b,e],null))},a,c)}function YZ(a,b){return qR(th.h(a,new S(null,2,5,T,[Lu,b],null)),th.h(a,new S(null,2,5,T,[Lu,Pm],null)))}function ZZ(a,b,c){return vh.D(a,new S(null,2,5,T,[Lu,c],null),Tg(De,Jj),b)}
    function $Z(a,b,c){return vh.D(a,new S(null,2,5,T,[Lu,c],null),Qe,b)}function a_(a,b){return n(b)?(a=TZ(a,b),n(a)?a:CI("activity.errors.invalid_activity",["Unable to find activity with id ",p.g(b)].join(""))):null}function b_(a,b){return uh(a,new S(null,2,5,T,[jD,xt.g(b)],null),b)}function c_(a,b){return n(b)?th.h(a,new S(null,2,5,T,[jD,b],null)):null}function d_(a,b,c){if(n(n(b)?c:b)){var d=u.h(b,aE);return M(d,c)?a:uh(a,new S(null,2,5,T,[jD,xt.g(b)],null),xh(b,aE,Tg(De,Jj),c))}return a}function e_(a,b,c){var d=xh(b,aE,Qe,c);c=x.h(c,cv.g(d))?Je.h(d,cv):d;return new S(null,2,5,T,[uh(a,new S(null,2,5,T,[jD,xt.g(b)],null),c),c],null)}
    var f_=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.domains.global.state","apply-command"),function(f,g){return A(g)},e,a,b,c,d)}();f_.B(null,it,function(a,b){H(b,0,null);b=H(b,1,null);return z(b)?mg(Je,a,b):a});f_.B(null,Pw,function(a,b){H(b,0,null);b=H(b,1,null);return null!=b?pf(He,a,b):a});
    f_.B(null,TB,function(a,b){H(b,0,null);b=H(b,1,null);return null!=b?pf(function(c,d,e){return wh(c,d,function(f){return Ye(e)||df(e)||Ye(f)||df(f)?e:Ue(e)&&Ue(f)?Cj.l(F([f,e])):e})},a,b):a});f_.B(null,MD,function(a,b){H(b,0,null);b=H(b,1,null);return n(b)?b:a});f_.B(null,Tk,function(a,b){var c=H(b,0,null),d=H(b,1,null);TU(Fz,"gateway.domains.global.state",101,new Dk(function(){return new S(null,4,5,T,["ignoring unknown context delta command",c,"with payload",d],null)}),1278330307);return a});function g_(a,b,c){var d=Uk(BA,c);return RZ(iR(a,xt.g(b),vh.j(b,new S(null,2,5,T,[Mr,ux],null),Tg(function(e){return pf(function(f,g,l){return He.j(f,g,A(l))},e,d)},R))),ti(d),xt.g(b))}function h_(a,b,c){return rh.h(function(d){var e=mt.g(d);d=xt.g(d);var f=xt.g(b);return MI(e,new k(null,5,[Iu,"activity",Yv,Eq,zG,d,nC,f,ux,c],null))},mR(a,Mr,b,!1))}
    function i_(a,b,c,d){var e=xt.g(b);return sh(Mb,ch.h(function(f){if(n(n(d)?d:sg.h(e,xt.g(f)))){var g=mt.g(f);f=xt.g(f);var l=Uh(c);g=MI(g,new k(null,5,[Iu,"activity",Yv,Fo,zG,f,nC,e,rp,l],null));}else g=null;return g},mR(a,Mr,b,!1)))}var j_=function j_(a){switch(arguments.length){case 2:return j_.h(arguments[0],arguments[1]);case 3:return j_.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};
    j_.h=function(a,b){return sh(Mb,ch.h(Rg(j_,a,b),mh.h(Rg(kR,Mr,b),ch.h(Qg(ZQ,a),Lj(ph(ui(u.h(a,ux))))))))};j_.j=function(a,b,c){var d=ui(th.h(c,new S(null,2,5,T,[Mr,ux],null)));n(d)?(a=mt.g(b),b=xt.g(b),c=xt.g(c),d=Uh(d),a=MI(a,new k(null,5,[Iu,"activity",Yv,Eq,zG,b,nC,c,ux,d],null))):a=null;return a};j_.I=3;
    function k_(a,b){b=BA.g(b);n(th.h(a,new S(null,3,5,T,[Mr,ux,b],null)))&&CI("activity.errors.factory_already_registered",["Factory for type ",p.g(b)," is already registered by this peer"].join(""));}function l_(a,b){return rI(function(c){return x.h(xt.g(c),b)},ui(a))}
    function m_(a,b){var c=th.h(a,new S(null,2,5,T,[Mr,ux],null));b=$b.j(function(d,e){var f=H(d,0,null);d=H(d,1,null);e=l_(c,e);return n(e)?new S(null,2,5,T,[lI(f,new S(null,3,5,T,[Mr,ux,BA.g(e)],null)),De.h(d,e)],null):new S(null,2,5,T,[f,d],null)},new S(null,2,5,T,[a,Jj],null),b);a=H(b,0,null);b=H(b,1,null);return new S(null,2,5,T,[sI(a,Mr),b],null)}
    function n_(a,b,c,d,e,f,g,l){f=n(f)?He.j(R,oz,new k(null,4,[xt,xt.g(f),Yv,Yv.g(f),du,xt.g(g),EB,Sw.g(g)],null)):R;l=n(l)?He.j(f,gn,l):f;f=mt.g(a);a=xt.g(a);g=xt.g(b);b=Cj.l(F([PB.g(b),c]));return MI(f,Cj.l(F([new k(null,7,[Iu,"activity",Yv,IF,fD,e,zG,a,Fr,g,YG,d,PB,b],null),l])))}function o_(a,b,c){var d=ZQ.h(a,zG.g(c));return n(d)?new S(null,2,5,T,[a,new S(null,1,5,T,[QZ(mt.g(d),fD.g(c),xt.g(d),b)],null)],null):new S(null,2,5,T,[a,null],null)}
    function p_(a,b,c){a=ZQ.h(a,n(b)?b:A(th.h(a,new S(null,2,5,T,[ux,c],null))));b=th.h(a,new S(null,3,5,T,[Mr,ux,c],null));return n(b)?new S(null,2,5,T,[a,b],null):CI("activity.errors.missing_factory",["Unable to find factory owner for type ",p.g(c)].join(""))}
    function q_(a,b,c,d,e,f,g){var l=p_(a,null,Yv.g(c)),m=H(l,0,null);l=H(l,1,null);var q=$Q(a,b),t=wI(Cq.g(a));b=H(t,0,null);t=H(t,1,null);f=new k(null,4,[Yv,oz,xt,t,BA,Yv.g(c),oz,new k(null,2,[xt,xt.g(d),iA,f],null)],null);c=n(ip.g(c))?He.j(f,gn,ip.g(c)):f;f=fA.g(q);f=WX(a,f,c);a=JI(He.j(a,Cq,b),t,c);return new k(null,3,[Fu,a,bw,new S(null,1,5,T,[n_(m,l,g,f,t,d,e,null)],null),Wm,t],null)}function r_(a){return ui(th.h(a,new S(null,1,5,T,[jD],null)))}
    function s_(a,b,c){var d=function(){var g=null==c?null:fA.g(c);return null==g?null:Kr.g(g)}(),e=function(){var g=null==c?null:hu.g(c);return null==g?null:np.g(g)}();a=ui(jD.g(a));var f=$b.j(function(g,l){if(g=x.h(b,ip.g(l))){g=x;var m=g.h;var q=null==l?null:fA.g(l);q=null==q?null:Kr.g(q);g=m.call(g,d,q);}return g?ee(l):null},null,a);return n(f)?f:$b.j(function(g,l){return n(function(){var m=x.h(b,ip.g(l));if(m){if(n(e))return e;m=null==l?null:hu.g(l);return null==m?null:np.g(m)}return m}())?ee(l):
    null},null,a)}function t_(a,b){a=th.h(a,new S(null,2,5,T,[jD,b],null));if(n(a))return a;throw ol(["Unable to find context with id ",p.g(b)].join(""),R);}function u_(a,b,c){if(n(n(b)?c:b)){var d=u.h(b,aE);return M(d,c)?a:uh(a,new S(null,2,5,T,[jD,xt.g(b)],null),xh(b,aE,Tg(De,Jj),c))}return a}var v_=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.common.context.state","apply-delta-cmd"),function(f,g){return A(g)},e,a,b,c,d)}();
    v_.B(null,it,function(a,b){H(b,0,null);b=H(b,1,null);return z(b)?mg(Je,a,b):a});v_.B(null,Pw,function(a,b){H(b,0,null);b=H(b,1,null);return null!=b?pf(He,a,b):a});v_.B(null,TB,function(a,b){H(b,0,null);b=H(b,1,null);return null!=b?pf(function(c,d,e){return wh(c,d,function(f){return Ye(e)&&Ye(f)?e:Ue(e)&&Ue(f)?Cj.l(F([f,e])):e})},a,b):a});v_.B(null,MD,function(a,b){H(b,0,null);b=H(b,1,null);return n(b)?b:a});
    var w_=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.common.context.state","apply-command"),function(f,g){return Qf.g(Yv.g(g))},e,a,b,c,d)}(),x_=function x_(a,b,c){var e=z(b);b=A(e);var f=C(e);if(null==b)a=c;else if(f){e=He.j;var g=u.h(a,b);g=null!=g&&We(g)?g:R;c=x_.j?x_.j(g,f,c):x_.call(null,g,f,c);a=e.call(He,a,b,c);}else a=He.j(a,b,c);return a};
    w_.B(null,Ct,function(a,b){var c=qg(b);b=u.h(c,By);c=u.h(c,ZC);a=n(a)?a:R;c=Ya(null==c?"":String(c))?null:lJ(c,/\./,0);return x_(a,c,b)});w_.B(null,yA,function(a,b){b=qg(b);b=u.h(b,ZC);b=Ya(null==b?"":String(b))?null:lJ(b,/\./,0);return null==b?R:lI.l(a,b,F([new k(null,1,[Iq,!0],null)]))});v_.B(null,av,function(a,b){H(b,0,null);b=H(b,1,null);return $b.j(function(c,d){return w_.h(c,tI(d))},a,b)});
    v_.B(null,Tk,function(a,b){var c=H(b,0,null),d=H(b,1,null);TU(Fz,"gateway.common.context.state",154,new Dk(function(){return new S(null,4,5,T,["ignoring unknown context delta command",c,"with payload",d],null)}),-10847204);return a});function y_(a,b,c,d){var e=xt.g(b),f=new S(null,3,5,T,[jD,e,Sw],null),g=$b,l=g.j;b=Sw.g(b);return uh(uh(a,f,l.call(g,v_,n(b)?b:R,c)),new S(null,3,5,T,[jD,e,nD],null),d)}
    function z_(a,b,c,d,e,f,g){var l=new k(null,2,[$B,0,GA,(new Date).getTime()],null),m=fA.g(a),q=hu.g(a);a=dj([ED,fA,lw,ip,aB,xt,VF,aE,nD,Sw],[f,m,xt.g(a),b,e,g,d,Jj,l,c]);return n(q)?He.j(a,hu,q):a}function A_(a,b,c,d,e,f,g){this.id=a;this.type=b;this.Zb=c;this.ec=d;this.F=e;this.m=f;this.G=g;this.C=2230716170;this.O=139264;}h=A_.prototype;h.da=function(a,b){return this.S(null,b,null)};h.S=function(a,b,c){switch(b instanceof w?b.X:null){case "id":return this.id;case "type":return this.type;case "context-id":return this.Zb;case "initiator":return this.ec;default:return u.j(this.m,b,c)}};
    h.Ya=function(a,b,c){return $b.j(function(d,e){var f=H(e,0,null);e=H(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};h.W=function(a,b,c){return gk(b,function(d){return gk(b,ok,""," ","",c,d)},"#gateway.domains.activity.activity.Activity{",", ","}",c,cg.h(new S(null,4,5,T,[new S(null,2,5,T,[xt,this.id],null),new S(null,2,5,T,[Yv,this.type],null),new S(null,2,5,T,[fz,this.Zb],null),new S(null,2,5,T,[mp,this.ec],null)],null),this.m))};
    h.Aa=function(){return new ni(this,4,new S(null,4,5,T,[xt,Yv,fz,mp],null),n(this.m)?zd(this.m):ug())};h.T=function(){return this.F};h.ca=function(){return 4+D(this.m)};h.ba=function(){var a=this.G;return null!=a?a:this.G=a=246370226^ae(this)};h.aa=function(a,b){return null!=b&&this.constructor===b.constructor&&x.h(this.id,b.id)&&x.h(this.type,b.type)&&x.h(this.Zb,b.Zb)&&x.h(this.ec,b.ec)&&x.h(this.m,b.m)};
    h.nb=function(a,b){return M(new Hj(null,new k(null,4,[mp,null,Yv,null,xt,null,fz,null],null),null),b)?Je.h(Mc(qh.h(R,this),this.F),b):new A_(this.id,this.type,this.Zb,this.ec,this.F,tg(Je.h(this.m,b)),null)};h.Ca=function(a,b){switch(b instanceof w?b.X:null){case "id":case "type":case "context-id":case "initiator":return !0;default:return M(this.m,b)}};
    h.la=function(a,b,c){return n(Nf.h?Nf.h(xt,b):Nf.call(null,xt,b))?new A_(c,this.type,this.Zb,this.ec,this.F,this.m,null):n(Nf.h?Nf.h(Yv,b):Nf.call(null,Yv,b))?new A_(this.id,c,this.Zb,this.ec,this.F,this.m,null):n(Nf.h?Nf.h(fz,b):Nf.call(null,fz,b))?new A_(this.id,this.type,c,this.ec,this.F,this.m,null):n(Nf.h?Nf.h(mp,b):Nf.call(null,mp,b))?new A_(this.id,this.type,this.Zb,c,this.F,this.m,null):new A_(this.id,this.type,this.Zb,this.ec,this.F,He.j(this.m,b,c),null)};
    h.ea=function(){return z(cg.h(new S(null,4,5,T,[new Nh(xt,this.id),new Nh(Yv,this.type),new Nh(fz,this.Zb),new Nh(mp,this.ec)],null),this.m))};h.U=function(a,b){return new A_(this.id,this.type,this.Zb,this.ec,b,this.m,this.G)};h.ka=function(a,b){return Ye(b)?this.la(null,jc(b,0),jc(b,1)):$b.j(hc,this,b)};
    function B_(a,b,c){var d=xI(Cq.g(a)),e=H(d,0,null);d=H(d,1,null);c=z_(c,d,ht.g(b),oz,aB.g(b),ED.g(b),d);var f=kv.h(e,1);var g=["a-",p.g(ww.g(e)),"-",p.g(f)].join("");f=new S(null,2,5,T,[He.j(e,kv,f+1),g],null);e=H(f,0,null);f=H(f,1,null);g=He.j;var l=Yz.g(b),m=zG.g(b);b=g.call(He,new A_(f,l,d,m,null,null,null),bx,b);return new S(null,3,5,T,[He.j(a,Cq,e),b,c],null)}function C_(a,b,c){return qh.j(G,Pg.h(mh.g(function(d){return x.h(b,th.h(d,new S(null,2,5,T,[fA,Kr],null)))}),ch.g(function(d){var e=mt.g(d);d=xt.g(d);return MI(e,JZ(d,c))})),cR(a,Mr))}function D_(a,b,c){return qh.j(G,Pg.h(mh.g(function(d){return x.h(b,th.h(d,new S(null,2,5,T,[fA,Kr],null)))}),ch.g(function(d){var e=mt.g(d);d=xt.g(d);return MI(e,new k(null,4,[Iu,"activity",Yv,es,zG,d,sp,c],null))})),cR(a,Mr))}
    function E_(a,b,c){a=u.h(VZ(a,th.h(b,new S(null,2,5,T,[fA,Kr],null))),c);return n(a)?a:CI("activity.errors.missing_type",["Unable to find activity type ",p.g(c)].join(""))}function F_(a,b){var c=PB.g(a);return Cj.l(F([c,u.h(b,new k(null,1,[Yv,Yv.g(a)],null)),u.h(b,new k(null,2,[Yv,Yv.g(a),ip,ip.g(a)],null))]))}
    function G_(a,b,c,d,e){a=qg(a);var f=u.h(a,Fu),g=u.h(a,oz);b=q_(f,c,b,g,d,!0,F_(b,e));return mI(nI(He.j(a,Fu,Fu.g(b)),new S(null,1,5,T,[bw],null),bw.g(b)),new S(null,2,5,T,[oz,xn],null),F([Wm.g(b)]))}
    function H_(a,b,c,d,e){a=qg(a);u.h(a,Fu);var f=u.h(a,oz);return $b.j(function(g,l){try{var m=q_(Fu.g(g),c,l,oz.g(g),d,!1,F_(l,e)),q=qg(m),t=u.h(q,Fu),v=u.h(q,bw),y=u.h(q,Wm);return mI(nI(He.j(g,Fu,t),new S(null,1,5,T,[bw],null),v),new S(null,2,5,T,[oz,xn],null),F([y]))}catch(J){var E=J;TU(Fz,"gateway.domains.activity.activities",157,new Dk(function(){return new S(null,5,5,T,[E,"Unable to create helper type",l,"for activity",xt.g(f)],null)}),988425660);return g}},a,b)}
    function I_(a,b,c,d){var e=qg(c),f=u.h(e,fD);e=u.h(e,zG);var g=aR(a,e,Mr),l=Yz.g(c),m=E_(a,g,l);d=qh.h(R,ch.h(function(t){return new S(null,2,5,T,[Ej(t,new S(null,2,5,T,[Yv,ip],null)),PB.g(t)],null)},d));var q=Xr.g(c);n(n(q)?!Re(d):q)&&CI("activity.errors.activity_is_child","Cannot specify types override and custom configuration at the same time");a=B_(a,c,g);c=H(a,0,null);g=H(a,1,null);a=H(a,2,null);b=H_(G_(new k(null,3,[Fu,c,bw,new S(null,1,5,T,[KZ(b,f,e,xt.g(g))],null),oz,g],null),function(){var t=
    ry.g(q);return n(t)?t:ry.g(m)}(),e,a,d),function(){var t=yE.g(q);return n(t)?t:yE.g(m)}(),e,a,d);e=qg(b);f=u.h(e,Fu);b=u.h(e,bw);e=u.h(e,oz);f=UZ(b_(f,a),xt.g(e),e);return new S(null,2,5,T,[f,b],null)}function J_(a,b,c){var d=xt.g(c);return M(Bn.g(a),d)||M(Hp.g(a),d)||x.h(cv.g(a),d)?!0:kR.ga(fA.g(b),aB.g(a),th.h(b,new S(null,2,5,T,[hu,np],null)),fA.g(c),null,th.h(c,new S(null,2,5,T,[hu,np],null)))}
    function K_(a,b,c){var d=cv.g(b),e=Bn.g(b);return rh.h(function(f){var g=mt.g(f);return MI(g,NZ(a,f,b,c))},mh.h(Mb,ch.h(function(f){return ZQ.h(a,f)},De.h(e,d))))}function L_(a,b,c,d){var e=mh.h,f=Rg(J_,c,d),g=ch.h,l=Qg(ZQ,a),m=nh.h;b=Qg(x,b);a=YZ(a,Yv.g(c));n(!0)?(d=xt.g(d),c=rR(Kj([d]),u.j(c,Hp,Jj),F([u.h(c,Bn)]))):c=null;return e.call(mh,f,g.call(ch,l,m.call(nh,b,qR(a,c))))}
    function M_(a,b){var c=Yv.g(b),d=ZQ.h(a,cv.g(b));return rh.h(function(e){return OZ.D(a,mt.g(e),xt.g(e),b)},mh.h(function(e){return J_(b,d,e)},ch.h(Qg(ZQ,a),YZ(a,c))))}function N_(a,b,c,d){return n(My.g(b))?(c=ZQ.h(a,c),rh.h(function(e){var f=mt.g(e);e=xt.g(e);var g=xt.g(b);e=new k(null,6,[Iu,"activity",Yv,qq,zG,e,aw,g,BE,SC.g(d),Tn,Nr.g(d)],null);return MI(f,e)},L_(a,null,b,c))):null}
    function O_(a,b,c){if(n(My.g(b))){var d=xt.g(c);return rh.h(function(e){var f=mt.g(e),g=xt.g(e),l=xt.g(b),m=gn.g(c);e=BA.g(c);g=new k(null,5,[Iu,"activity",Yv,fv,zG,g,aw,l,nC,xt.g(c)],null);m=n(m)?He.j(g,gn,m):g;e=n(e)?He.j(m,BA,e):m;return MI(f,e)},L_(a,d,b,c))}return null}
    function P_(a,b,c,d){var e=xt.g(b);return rh.h(function(f){var g=mt.g(f),l=xt.g(f),m=xt.g(c);f=gn.g(b);l=new k(null,6,[Iu,"activity",Yv,VC,zG,l,aw,m,$A,xt.g(b),gs,BA.g(b)],null);f=n(f)?He.j(l,zq,f):l;return MI(g,f)},L_(a,e,c,d))}function Q_(a,b,c,d){var e=ZQ.h(a,cv.g(c));return rh.h(function(f){var g=mt.g(f);f=xt.g(f);var l=xt.g(c);f=new k(null,7,[Iu,"activity",Yv,mw,zG,f,aw,l,RG,b,BE,SC.g(d),Tn,Nr.g(d)],null);return MI(g,f)},L_(a,b,c,e))}
    function R_(a,b,c){var d=xt.g(c),e=fz.g(b);e=c_(a,e);b=xh(b,Bn,Tg(De,Jj),d);if(n(My.g(b))){var f=cv.g(b),g=ZQ.h(a,f);f=De.h;g=P_(a,c,b,g);var l=mt.g(c),m=Sw.g(e);c=MI(l,NZ(a,c,b,m));c=f.call(De,g,c);}else c=null;return new k(null,3,[Fu,d_(a,e,d),oz,b,bw,c],null)}function S_(a){return sI(lI(lI(a,new S(null,2,5,T,[Mr,Zo],null)),new S(null,2,5,T,[Mr,cv],null)),Mr)}
    function T_(a,b,c){return $b.j(function(d,e){var f=H(d,0,null);d=H(d,1,null);var g=ZQ.h(f,e);if(n(g)){var l=T;f=iR(f,e,S_(g));var m=De.h;g=mt.g(g);e=MI(g,IZ(e,null,c));e=new S(null,2,5,l,[f,m.call(De,d,e)],null);}else e=new S(null,2,5,T,[f,d],null);return e},new S(null,2,5,T,[a,G],null),b)}function U_(a,b){return $b.j(function(c,d){return A(KI(c,d))},a,xn.g(b))}
    function V_(a,b,c){var d=bx.g(b),e=cv.g(b);xt.g(b);var f=T;a=U_(a,b);var g=xt.g(b);a=lI(a,new S(null,2,5,T,[Wo,g],null));g=fz.g(b);a=lI(a,new S(null,2,5,T,[jD,g],null));a=new S(null,2,5,f,[a,null],null);f=H(a,0,null);a=H(a,1,null);var l=T_(f,rR(Kj([e]),Hp.g(b),F([Bn.g(b)])),c);g=H(l,0,null);l=H(l,1,null);a=new S(null,2,5,T,[n(g)?g:f,df(l)||Ye(l)?$b.j(Tg(De,G),a,l):null!=l?Tg(De,G)(a,l):a],null);f=H(a,0,null);a=H(a,1,null);e=new S(null,2,5,T,[f,N_(f,b,e,c)],null);b=H(e,0,null);e=H(e,1,null);e=new S(null,
    2,5,T,[n(b)?b:f,df(e)||Ye(e)?$b.j(Tg(De,G),a,e):null!=e?Tg(De,G)(a,e):a],null);b=H(e,0,null);e=H(e,1,null);f=n(d)?ZQ.h(b,zG.g(d)):d;return n(f)?new S(null,2,5,T,[b,De.h(e,QZ(mt.g(f),fD.g(d),zG.g(d),c))],null):new S(null,2,5,T,[b,e],null)}function W_(a,b){n(iA.g(b))?(b=TZ(a,xt.g(b)),a=V_(a,b,AI("activity.errors.owner_creation","Activity owner cannot be created"))):a=new S(null,2,5,T,[a,null],null);return a}function X_(a,b){var c=n(Hp.g(a))?xh(a,Hp,Qe,b):a;return n(Bn.g(a))?xh(c,Bn,Qe,b):c}
    function Y_(a,b,c,d){TU(vt,"gateway.domains.activity.activities",563,new Dk(function(){return new S(null,5,5,T,["a participant",xt.g(c),"of activity",xt.g(b),"has left"],null)}),1381391649);var e=xt.g(c),f=X_(b,e),g=xt.g(f);d=Q_(a,e,f,d);return new k(null,3,[Fu,A(e_(UZ(iR(a,e,S_(c)),g,f),c_(a,fz.g(f)),e)),oz,f,bw,d],null)}
    function Z_(a,b,c,d,e){var f=xt.g(c);TU(vt,"gateway.domains.activity.activities",583,new Dk(function(){return new S(null,5,5,T,["the owner",f,"of activity",xt.g(b),"has left"],null)}),319322095);if(n(e))return V_(iR(a,f,S_(c)),b,d);a=Y_(a,b,c,d);c=qg(a);a=u.h(c,Fu);c=u.h(c,bw);return new S(null,2,5,T,[a,c],null)}
    function $_(a,b,c,d,e,f){a=z(e)?$b.j(function(g,l){return f.j?f.j(g,d,l):f.call(null,g,d,l)},a,nh.h(Ib,e)):f.j?f.j(a,d,Pm):f.call(null,a,d,Pm);return new S(null,2,5,T,[a,new S(null,1,5,T,[PZ(b,c,d)],null)],null)}function a0(a,b,c){c=qg(c);var d=u.h(c,fD),e=u.h(c,zG),f=u.h(c,xs);c=aR(a,e,Mr);b=$_(a,b,d,e,f,ZZ);a=H(b,0,null);b=H(b,1,null);d=mh.h(My,ui(u.h(a,Wo)));return new S(null,2,5,T,[a,qh.h(b,rh.h(Sg(OZ,a,mt.g(c),xt.g(c)),z(f)?mh.h(function(g){return M(f,Yv.g(g))},d):d))],null)}function b0(a,b,c,d,e){return MI(b,new k(null,5,[Iu,a,Yv,co,fD,c,zG,d,du,e],null))}function p2(a,b,c,d,e,f){return MI(b,new k(null,6,[Iu,a,Yv,rq,fD,c,zG,d,du,e,Sw,f],null))}function c0(a,b,c,d,e){return MI(b,new k(null,6,[Iu,a,Yv,Tv,zG,c,du,d,BE,SC.g(e),Tn,Nr.g(e)],null))}function d0(a){return [p.g(a),".errors.not_authorized"].join("")}function e0(a){return EI([p.g(a),".destroyed"].join(""),"Context destroyed explicitly")}function f0(a){return EI([p.g(a),".peer-left"].join(""),"Context destroyed because its owner/last peer left")}function g0(a){return [p.g(a),".errors.failure"].join("")}gQ(SE,dD,Nb);
    gQ(Ux,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[Fw],null),pD,new S(null,1,5,T,[SE],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[Fw],null),pD,new S(null,1,5,T,[SE],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[Fw],null),new S(null,1,5,T,[SE],null),null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,fA)}],null),function(a){return We(a)&&M(a,fA)},new S(null,1,5,T,[Sp],null),new S(null,1,5,T,[Fw],null),null,new S(null,1,5,T,
    [fA],null),new S(null,1,5,T,[SE],null),new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fA))],null),null]))],null),null));gQ(CG,LC,LC);gQ(Fx,P(Ky,dD),uQ(AC,Nb,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,dD),Vz,function(a){return Se(a)}],null),null));gQ(KC,hv,We);gQ(oo,hv,We);gQ(FG,hv,We);gQ(UF,new Hj(null,new k(null,2,[yA,"null",Ct,"null"],null),null),new Hj(null,new k(null,2,[yA,null,Ct,null],null),null));gQ(lm,dD,Nb);gQ(Hz,Us,Pb);
    gQ(Xw,P(qD,Ln,new S(null,2,5,T,[UF,lm],null),pD,new S(null,1,5,T,[Hz],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[UF,lm],null),new S(null,1,5,T,[Hz],null),null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,ZC)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,ZC)},new S(null,1,5,T,[By],null),new S(null,2,5,T,[UF,lm],null),null,new S(null,2,5,T,[Yv,ZC],null),new S(null,1,5,T,[Hz],null),new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],
    null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ZC))],null),null])));gQ(kp,P(Ky,Xw,Wr,uB,mF,G),uQ(Xw,Xw,new k(null,6,[dw,!0,Wr,Ye,mF,G,Qo,uB,FD,P(Ky,Xw,Wr,uB,mF,G),Vz,function(a){return Ye(a)}],null),null));
    gQ(ZD,P(qD,pD,new S(null,5,5,T,[Fx,KC,oo,FG,kp],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,new S(null,5,5,T,[Fx,KC,oo,FG,kp],null),null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},new S(null,5,5,T,[it,Pw,TB,MD,av],null),G,null,G,new S(null,5,5,T,[Fx,KC,oo,FG,kp],null),new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null])));
    gQ(ss,P(jz,Vx,P(qD,Ln,new S(null,2,5,T,[CG,ZD],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,2,5,T,[CG,ZD],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[CG,ZD],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,du)},function(a){return M(a,nG)}],null),function(a){return We(a)&&M(a,du)&&M(a,nG)},G,new S(null,2,5,T,[CG,ZD],null),null,new S(null,2,5,T,[du,nG],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),
    P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,nG))],null),null]))],null),null));gQ(zp,P(V,new S(null,1,5,T,[X],null),P(hs,Wz,P(Xy,X))),function(a){return eQ(Wz,Qf.g(a))});gQ(Jw,P(vz,dD),HQ(dD,Nb,null));gQ(MC,P(vz,dD),HQ(dD,Nb,null));
    gQ(JD,P(jz,Vx,P(qD,Ln,new S(null,3,5,T,[yw,nq,zp],null),pD,new S(null,3,5,T,[oC,Jw,MC],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,3,5,T,[yw,nq,zp],null),pD,new S(null,3,5,T,[oC,Jw,MC],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[yw,nq,zp],null),new S(null,3,5,T,[oC,Jw,MC],null),null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,ip)},function(a){return M(a,Sw)},function(a){return M(a,VF)}],null),function(a){return We(a)&&
    M(a,ip)&&M(a,Sw)&&M(a,VF)},new S(null,3,5,T,[nD,aB,ED],null),new S(null,3,5,T,[yw,nq,zp],null),null,new S(null,3,5,T,[ip,Sw,VF],null),new S(null,3,5,T,[oC,Jw,MC],null),new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ip)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sw)),P(V,new S(null,1,5,T,[X],null),P(pq,X,VF))],null),null]))],null),null));gQ(CG,LC,LC);
    gQ(vA,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[CG],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[CG],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[CG],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[CG],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],
    null),null]))],null),null));
    gQ(ev,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[CG],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[CG],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[CG],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[CG],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],
    null),null]))],null),null));
    gQ(qx,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[CG],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[CG],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[CG],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[CG],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],
    null),null]))],null),null));gQ(jE,dD,Nb);gQ(js,dD,Nb);gQ(QB,vB,vB);
    OQ.B(null,Oq,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[QB,pr,ZD],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[QB,pr,ZD],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,vo)},function(a){return M(a,du)},function(a){return M(a,nG)}],null),function(a){return We(a)&&M(a,vo)&&M(a,du)&&M(a,nG)},G,new S(null,3,5,T,[QB,pr,ZD],null),null,new S(null,3,5,T,[vo,du,nG],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,vo)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,nG))],null),null]))],null),null)});OQ.B(null,WF,function(){return sQ(new S(null,2,5,T,[UG,ss],null),new S(null,2,5,T,[UG,ss],null),null)});
    OQ.B(null,co,function(){return sQ(new S(null,2,5,T,[Rl,P(qD,Ln,new S(null,1,5,T,[pr],null))],null),new S(null,2,5,T,[Rl,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[pr],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[pr],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],null),null]))],null),
    null)});gQ(Ut,vB,vB);gQ(pr,LC,LC);
    OQ.B(null,sr,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[Ut,pr,yw],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[Ut,pr,yw],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,fC)},function(a){return M(a,du)},function(a){return M(a,ip)}],null),function(a){return We(a)&&M(a,fC)&&M(a,du)&&M(a,ip)},G,new S(null,3,5,T,[Ut,pr,yw],null),null,new S(null,3,5,T,[fC,du,ip],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fC)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ip))],null),null]))],null),null)});
    OQ.B(null,rq,function(){return sQ(new S(null,2,5,T,[Rl,P(qD,Ln,new S(null,2,5,T,[pr,nq],null))],null),new S(null,2,5,T,[Rl,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[pr,nq],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,du)},function(a){return M(a,Sw)}],null),function(a){return We(a)&&M(a,du)&&M(a,Sw)},G,new S(null,2,5,T,[pr,nq],null),null,new S(null,2,5,T,[du,Sw],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,
    1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sw))],null),null]))],null),null)});
    OQ.B(null,Tv,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[pr,jE,js],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[pr,jE,js],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,du)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,du)&&M(a,BE)&&M(a,Tn)},G,new S(null,3,5,T,[pr,jE,js],null),null,new S(null,3,5,T,[du,BE,Tn],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null]))],null),null)});OQ.B(null,bv,function(){return sQ(new S(null,2,5,T,[UG,JD],null),new S(null,2,5,T,[UG,JD],null),null)});OQ.B(null,So,function(){return sQ(new S(null,2,5,T,[UG,qx],null),new S(null,2,5,T,[UG,qx],null),null)});OQ.B(null,yu,function(){return sQ(new S(null,2,5,T,[UG,vA],null),new S(null,2,5,T,[UG,vA],null),null)});
    OQ.B(null,Ks,function(){return sQ(new S(null,2,5,T,[UG,ev],null),new S(null,2,5,T,[UG,ev],null),null)});function h0(a,b){a=nD.g(a);b=nD.g(b);return $B.g(a)>$B.g(b)||x.h($B.g(a),$B.g(b))&&GA.g(a)>=GA.g(b)}function i0(a,b,c){var d=VF.g(a);return function(){var e=x.h(xt.g(b),lw.g(a));if(e)return e;if(x.h(d,oz))return M(aE.g(a),xt.g(b));if((e=x.h(xt.g(b),lw.g(a)))||(e=x.h(xt.g(b),cv.g(a))))return e;if(Lb(c))return AP(ED.g(a),fA.g(a),fA.g(b));e=ED.g(a);return n(e)?AP(ED.g(a),fA.g(a),fA.g(b)):e}()}
    function j0(a,b,c){x.h(VF.g(b),oz)&&CI(d0(a),"Activity contexts cannot be explicitly destroyed");var d=x.h(VF.g(b),dC);var e=d&&x.h(cv.g(b),xt.g(c));b=e?e:(d=!d)?i0(b,c,!1):d;n(b)||CI(d0(a),"Not authorized to destroy context");}function k0(a,b){var c=x.h(xt.g(b),lw.g(a));if(c||(c=x.h(xt.g(b),cv.g(a))))return c;c=AP(aB.g(a),fA.g(a),fA.g(b));return n(c)?c:i0(a,b,!0)}function l0(a,b){var c=bR(a);return c?(c=sg.h(VF.g(b),oz))?k0(b,a):c:c}
    function m0(a,b,c){n(k0(b,c))||CI(d0(a),"Not authorized to read context");}function n0(a){return n(th.h(a,new S(null,2,5,T,[hu,dq],null)))?"global":"context"}function o0(a,b,c,d,e){var f=xt.g(b);a=y_(a,b,d,e);return new S(null,2,5,T,[a,rh.h(function(g){var l=n0(g),m=mt.g(g);g=xt.g(g);return MI(m,new k(null,6,[Iu,l,Yv,Oq,zG,g,vo,c,du,f,nG,d],null))},mh.h(bR,ch.h(Qg(ZQ,a),nh.h(Qg(x,c),aE.g(b)))))],null)}
    function p0(a,b){var c=qg(b);u.h(c,fD);var d=u.h(c,zG),e=u.h(c,ip);c=u.h(c,nG);try{var f=$Q(a,d),g=s_(a,e,f);if(n(g))return n(function(){var m=i0(g,f,!1);return n(m)?h0(b,g):m}())?o0(a,g,d,tI(c),nD.g(b)):new S(null,2,5,T,[a,null],null);TU(Fz,"gateway.common.context.ops",156,new Dk(function(){return new S(null,2,5,T,["unable to find remote context",e],null)}),-1617032971);return new S(null,2,5,T,[a,null],null)}catch(m){var l=m;TU(Px,"gateway.common.context.ops",160,new Dk(function(){return new S(null,
    2,5,T,[l,"error performing remote context update"],null)}),-227225172);return new S(null,2,5,T,[a,null],null)}}
    function q0(a,b,c,d){if(RI(c)){var e=qg(d),f=u.h(e,fD),g=u.h(e,zG),l=u.h(e,du);e=u.h(e,nG);try{var m=$Q(b,g),q=t_(b,l),t=nD.h(q,new k(null,1,[$B,0],null));var v=He.j(wh(t,$B,ce),GA,(new Date).getTime());n(i0(q,m,!1))||CI(d0(a),"Not authorized to update context");var y=o0(b,q,g,tI(e),v),E=H(y,0,null),J=H(y,1,null),W=new S(null,2,5,T,[E,new S(null,2,5,T,[QI.D(a,c,f,g),NI(LY(vI(Cq.g(b)),g),He.l(d,Yv,WF,F([nD,v,ip,ip.g(q)])))],null)],null),Z=H(W,0,null),ma=H(W,1,null);var ja=new S(null,2,5,T,[n(Z)?Z:
    E,df(ma)||Ye(ma)?$b.j(Tg(De,G),J,ma):null!=ma?Tg(De,G)(J,ma):J],null);}catch(Ca){ja=new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R(a,c,f,g,BI(Ca,g0(a)))],null)],null);}}else ja=p0(b,d);return ja}function r0(a){if(a instanceof w)return a;switch(a){case "ownership":return dC;case "ref-counted":return aq;case "retained":return yC;default:return null}}
    function s0(a,b,c,d){d=qg(d);var e=u.h(d,ip),f=u.h(d,Sw),g=u.h(d,VF),l=u.h(d,aB),m=u.h(d,ED),q=u.h(d,zG),t=xI(Cq.g(a));d=H(t,0,null);t=H(t,1,null);b=He.l(z_(b,e,f,g,l,m,t),aE,Kj([q]),F([uG,c]));b=x.h(g,dC)?He.j(b,cv,q):b;c=T;a=He.j(a,Cq,d);a=uh(a,new S(null,2,5,T,[jD,xt.g(b)],null),b);return new S(null,2,5,c,[a,b],null)}
    function t0(a,b,c,d,e,f){TU(BD,"GATEWAY_ACTION_LOG|context|gateway.common.context.ops",240,new Dk(function(){return new S(null,6,5,T,["peer",f,"subscribes for context",ip.g(e),"using request",d],null)}),1331897172);b=u_(b,e,f);return new S(null,2,5,T,[b,new S(null,1,5,T,[p2(a,c,d,f,xt.g(e),Sw.g(e))],null)],null)}
    function u0(a,b,c){c=qg(c);u.h(c,fD);var d=u.h(c,zG),e=u.h(c,ip);try{var f=$Q(b,d),g=s_(b,e,f);if(n(g))return m0(a,g,f),new S(null,2,5,T,[u_(b,g,d),null],null);TU(Fz,"gateway.common.context.ops",257,new Dk(function(){return new S(null,2,5,T,["unable to find remote context",e],null)}),720468104);return new S(null,2,5,T,[b,null],null)}catch(l){return new S(null,2,5,T,[b,null],null)}}
    function v0(a,b,c,d){if(RI(c)){var e=qg(d),f=u.h(e,fD),g=u.h(e,zG);e=u.h(e,du);try{var l=$Q(b,g),m=t_(b,e),q=Qg(t0,a);m0(a,m,l);var t=new S(null,2,5,T,[b,null],null),v=H(t,0,null),y=H(t,1,null),E=q(v,c,f,m,g),J=H(E,0,null),W=H(E,1,null);var Z=new S(null,2,5,T,[n(J)?J:v,df(W)||Ye(W)?$b.j(Tg(De,G),y,W):null!=W?Tg(De,G)(y,W):y],null);var ma=H(Z,0,null),ja=H(Z,1,null),Ca=new S(null,2,5,T,[null,NI(LY(vI(Cq.g(b)),g),He.l(d,Yv,yu,F([ip,ip.g(m)])))],null),Ba=H(Ca,0,null),ta=H(Ca,1,null);var B=new S(null,
    2,5,T,[n(Ba)?Ba:ma,df(ta)||Ye(ta)?$b.j(Tg(De,G),ja,ta):null!=ta?Tg(De,G)(ja,ta):ja],null);}catch(I){B=new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R(a,c,f,g,BI(I,g0(a)))],null)],null);}}else B=u0(a,b,d);return B}function w0(a,b,c){var d=ip.g(b),e=xt.g(b),f=xt.g(c);return qh.j(G,Pg.j(mh.g(bR),mh.g(Qg(k0,b)),ch.g(function(g){var l=n0(g),m=mt.g(g);g=xt.g(g);return MI(m,new k(null,6,[Iu,l,Yv,sr,zG,g,fC,f,du,e,ip,d],null))})),mR(a,jq,c,!0))}
    function x0(a,b,c){var d=xt.g(a);return qh.j(G,Pg.j(mh.g(bR),mh.g(Qg(k0,a)),ch.g(function(e){return c0(n0(e),mt.g(e),xt.g(e),d,c)})),b)}function y0(a,b){var c=zP(aB.g(b)),d=zP(ED.g(b)),e=r0(VF.g(b));n(e)||CI([p.g(a),".errors.bad_lifetime"].join(""),["Bad lifetime value ",p.g(e)].join(""));return Cj.l(F([b,new k(null,3,[aB,c,ED,d,VF,e],null)]))}
    function z0(a,b,c,d){var e=qg(d),f=u.h(e,fD),g=u.h(e,zG),l=u.h(e,ip);try{var m=$Q(b,g),q=s_(b,l,m);if(n(q))return m0(a,q,m),t0(a,b,c,f,q,g);var t=s0(b,m,!0,y0(a,d)),v=H(t,0,null),y=H(t,1,null);TU(BD,"GATEWAY_ACTION_LOG|context|gateway.common.context.ops",380,new Dk(function(){return new S(null,6,5,T,["peer",g,"creates context",l,"using request",f],null)}),1675155880);return new S(null,2,5,T,[v,De.l(w0(v,y,m),b0(a,c,f,g,xt.g(y)),F([NI(LY(vI(Cq.g(b)),g),He.l(d,Yv,bv,F([nD,nD.g(y)])))]))],null)}catch(J){var E=
    J;TU(Px,"gateway.common.context.ops",389,new Dk(function(){return new S(null,2,5,T,[E,"error"],null)}),1461426546);return new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R(a,c,f,g,BI(E,g0(a)))],null)],null)}}
    function A0(a,b,c,d){if(RI(c))var e=z0(a,b,c,d);else {var f=qg(d);u.h(f,fD);c=u.h(f,zG);f=u.h(f,ip);try{var g=$Q(b,c),l=s_(b,f,g);if(n(l))m0(a,l,g),e=h0(d,l)?o0(b,l,c,new k(null,1,[MD,Sw.g(d)],null),nD.g(d)):new S(null,2,5,T,[b,null],null);else {var m=s0(b,g,!1,y0(a,d)),q=H(m,0,null),t=H(m,1,null);e=new S(null,2,5,T,[q,w0(q,t,g)],null);}}catch(v){e=new S(null,2,5,T,[b,null],null);}}return e}
    function B0(a,b,c,d){TU(BD,"GATEWAY_ACTION_LOG|context|gateway.common.context.ops",419,new Dk(function(){return new S(null,5,5,T,["context",ip.g(c),"is destroyed","with reason",d],null)}),759190579);var e=xt.g(c),f=aE.g(c);return new S(null,2,5,T,[lI(b,new S(null,2,5,T,[jD,e],null)),$b.j(De,rh.h(function(g){return c0(a,mt.g(g),xt.g(g),e,d)},mh.h(bR,ch.h(Qg(ZQ,b),f))),x0(c,Jk(F([nh.h(function(g){return u.h(f,xt.g(g))},cR(b,jq))])),d))],null)}
    function C0(a,b,c){c=qg(c);var d=u.h(c,zG),e=u.h(c,ip);try{var f=$Q(b,d),g=s_(b,e,f);if(n(g))return j0(a,g,f),B0(a,b,g,e0(a));TU(Fz,"gateway.common.context.ops",446,new Dk(function(){return new S(null,2,5,T,["unable to find remote context",e],null)}),-281323491);return new S(null,2,5,T,[b,null],null)}catch(l){return new S(null,2,5,T,[b,null],null)}}
    function D0(a,b,c,d){if(RI(c)){var e=qg(d),f=u.h(e,fD),g=u.h(e,zG);e=u.h(e,du);try{var l=$Q(b,g),m=t_(b,e);j0(a,m,l);var q=B0(a,b,m,e0(a)),t=H(q,0,null),v=H(q,1,null),y=new S(null,2,5,T,[null,new S(null,2,5,T,[QI.D(a,c,f,g),NI(LY(vI(Cq.g(b)),g),He.l(d,Yv,So,F([ip,ip.g(m)])))],null)],null),E=H(y,0,null),J=H(y,1,null);var W=new S(null,2,5,T,[n(E)?E:t,df(J)||Ye(J)?$b.j(Tg(De,G),v,J):null!=J?Tg(De,G)(v,J):v],null);}catch(Z){W=new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R(a,c,f,g,BI(Z,g0(a)))],null)],null);}}else W=
    C0(a,b,d);return W}var E0=function E0(a){switch(arguments.length){case 3:return E0.j(arguments[0],arguments[1],arguments[2]);case 4:return E0.D(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",p.g(arguments.length)].join(""));}};
    E0.j=function(a,b,c){var d=xt.g(c),e=Qg(E0,a);return $b.j(function(f,g){var l=H(f,0,null);f=H(f,1,null);var m=e(l,d,g);g=H(m,0,null);m=H(m,1,null);return new S(null,2,5,T,[n(g)?g:l,df(m)||Ye(m)?$b.j(Tg(De,G),f,m):null!=m?Tg(De,G)(f,m):f],null)},new S(null,2,5,T,[b,G],null),r_(b))};
    E0.D=function(a,b,c,d){if(M(aE.g(d),c)){var e=xh(d,aE,Qe,c);c=x.h(c,cv.g(e))?Je.h(e,cv):e;d=new S(null,2,5,T,[uh(b,new S(null,2,5,T,[jD,xt.g(d)],null),c),c],null);b=H(d,0,null);d=H(d,1,null);a:switch(c=VF.g(d),c instanceof w?c.X:null){case "ownership":c=null==cv.g(d);break a;case "ref-counted":c=Re(aE.g(d));break a;default:c=!1;}return n(c)?B0(a,b,d,f0(a)):new S(null,2,5,T,[b,null],null)}return new S(null,2,5,T,[b,null],null)};E0.I=4;
    function F0(a,b,c){var d=qg(c);u.h(d,fD);var e=u.h(d,zG),f=u.h(d,ip);try{var g=$Q(b,e),l=s_(b,f,g);if(n(l))return E0.D(a,b,e,l);TU(Fz,"gateway.common.context.ops",517,new Dk(function(){return new S(null,2,5,T,["unable to find remote context",f],null)}),699394628);return new S(null,2,5,T,[b,null],null)}catch(q){var m=q;TU(Fz,"gateway.common.context.ops",521,new Dk(function(){return new S(null,3,5,T,[m,"unable to process remote unsubscribe",c],null)}),-1796280269);return new S(null,2,5,T,[b,null],null)}}
    function G0(a,b,c,d){if(RI(c)){var e=qg(d),f=u.h(e,fD),g=u.h(e,zG);e=u.h(e,du);try{$Q(b,g);var l=t_(b,e),m=E0.D(a,b,g,l),q=H(m,0,null),t=H(m,1,null),v=new S(null,2,5,T,[null,new S(null,2,5,T,[QI.D(a,c,f,g),NI(LY(vI(Cq.g(b)),g),He.l(d,Yv,Ks,F([ip,ip.g(l)])))],null)],null),y=H(v,0,null),E=H(v,1,null);var J=new S(null,2,5,T,[n(y)?y:q,df(E)||Ye(E)?$b.j(Tg(De,G),t,E):null!=E?Tg(De,G)(t,E):t],null);}catch(W){J=new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R(a,c,f,g,BI(W,g0(a)))],null)],null);}}else J=F0(a,b,d);
    return J}function H0(a,b,c){var d=mt.g(c),e=xt.g(c);return ch.h(function(f){var g=cv.g(f),l=xt.g(f);f=ip.g(f);return MI(d,new k(null,6,[Iu,a,Yv,sr,zG,e,fC,g,du,l,ip,f],null))},mh.h(Qg(l0,c),r_(b)))}function I0(a,b){a=ZQ.h(a,zG.g(bp.g(b)));return n(a)?Lb(dq.g(hu.g(a))):null}var J0=Qg(q0,"activity");function K0(a){a=1E3*th.j(a,new S(null,2,5,T,[qu,zA],null),0);return 0<a?a:VX}function L0(a,b){var c=KI(a,fD.g(b));a=H(c,0,null);var d=H(c,1,null);if(n(d))switch(c=Yv.g(d),c instanceof w?c.X:null){case "activity":return b=oz.g(d),n(b)?W_(a,b):null;case "create-peer":return o_(a,DI(b),bx.g(d));default:return TU(Px,"gateway.domains.activity.core",37,new Dk(function(){return new S(null,2,5,T,["Unable to handle error for an unknown incoming request type",Yv.g(d)],null)}),-110404347)}else return null}var M0=Rg(oR,"activity",Mr);
    function N0(a,b,c,d){var e=new S(null,2,5,T,[a,null],null),f=function(){var m=H(e,0,null),q=H(e,1,null);var t=th.h(b,new S(null,2,5,T,[Mr,Zo],null)),v=TZ(m,t);if(n(v)){t=cv.g(v);var y=xt.g(b);var E=M(qF.g(v),y);v=E?xh(v,qF,Tg(Qe,Jj),y):v;x.h(t,y)?y=Z_(m,v,b,c,!E):(t=Y_(m,v,b,c),y=qg(t),t=u.h(y,Fu),y=u.h(y,bw),y=new S(null,2,5,T,[t,y],null));}else y=null;t=H(y,0,null);y=H(y,1,null);return new S(null,2,5,T,[n(t)?t:m,df(y)||Ye(y)?$b.j(Tg(De,G),q,y):null!=y?Tg(De,G)(q,y):q],null)}(),g=function(){var m=
    H(f,0,null),q=H(f,1,null),t=ui(th.h(b,new S(null,2,5,T,[Mr,ux],null)));var v=n(t)?new S(null,2,5,T,[SZ(m,ch.h(BA,t),xt.g(b)),i_(m,b,ch.h(xt,t),!1)],null):null;t=H(v,0,null);v=H(v,1,null);return new S(null,2,5,T,[n(t)?t:m,df(v)||Ye(v)?$b.j(Tg(De,G),q,v):null!=v?Tg(De,G)(q,v):q],null)}();a=H(g,0,null);g=H(g,1,null);var l=M0(a,b,c,d);d=H(l,0,null);l=H(l,1,null);return new S(null,2,5,T,[n(d)?d:a,df(l)||Ye(l)?$b.j(Tg(De,G),g,l):null!=l?Tg(De,G)(g,l):g],null)}
    function O0(a,b){b=fR(a,b,Mr);a=tf(ch.g(xt),rf(function(c,d){return HI(c,d,Mr)},qf),a,b);return $b.j(function(c,d){var e=H(c,0,null);c=H(c,1,null);var f=N0(e,d,GZ,!0);d=H(f,0,null);f=H(f,1,null);return new S(null,2,5,T,[n(d)?d:e,df(f)||Ye(f)?$b.j(Tg(De,G),c,f):null!=f?Tg(De,G)(c,f):c],null)},new S(null,2,5,T,[a,null],null),b)}
    var P0=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.domains.activity.core","handle-request"),function(f,g,l){return Yv.g(l)},e,a,b,c,d)}();
    P0.B(null,XG,function(a,b,c){var d=qg(c);c=u.h(d,fD);var e=u.h(d,zG);d=u.h(d,Sp);if(n(II(a,e,Mr)))b=new S(null,2,5,T,[a,new S(null,1,5,T,[PZ(b,c,e)],null)],null);else {d=zP(d);d=GI(a,e,Mr,d);a=ZQ.h(d,e);b:{var f=ew.g(a);if(n(f)){var g=gn.g(f),l=BA.g(f);g=n(g)?He.j(a,gn,g):a;l=n(l)?He.j(g,BA,l):g;g=Yv.g(f);g=g instanceof w?g.X:null;switch(g){case "activity":g=th.h(f,new S(null,2,5,T,[oz,xt],null));var m=TZ(d,g);if(n(m)){var q=xt.g(l),t=th.h(f,new S(null,2,5,T,[oz,iA],null)),v=c_(d,fz.g(m));m=mI(m,new S(null,
    1,5,T,[Hp],null),F([q]));t=n(t)?He.j(m,cv,xt.g(l)):m;t=oI(t,new S(null,1,5,T,[xn],null),xt.g(f));d=d_(iR(UZ(d,g,t),q,uh(uh(l,new S(null,2,5,T,[Mr,Zo],null),g),new S(null,2,5,T,[Mr,bn],null),bn.g(f))),v,q);}break b;case "create-peer":d=iR(d,xt.g(l),l);break b;default:throw Error(["No matching clause: ",p.g(g)].join(""));}}}f=De.h;g=l=qh.h;q=nR("activity",Mr,d,b,a);v=Lj(ui(VZ(d,th.h(a,new S(null,2,5,T,[fA,Kr],null)))));if(z(v)){t=T;m=mt.g(a);var y=xt.g(a);v=new S(null,1,5,t,[MI(m,JZ(y,v))],null);}else v=
    null;b=f.call(De,l.call(qh,g.call(qh,q,v),j_.h(d,a)),PZ(b,c,e));b=new S(null,2,5,T,[d,b],null);}return b});P0.B(null,yv,function(a,b,c){var d=qg(c),e=u.h(d,fD);d=u.h(d,zG);var f=aR(a,d,Mr);c=N0(a,f,DI(c),!1);a=H(c,0,null);c=H(c,1,null);e=new S(null,2,5,T,[null,PZ(b,e,d)],null);b=H(e,0,null);e=H(e,1,null);return new S(null,2,5,T,[n(b)?b:a,df(e)||Ye(e)?$b.j(Tg(De,G),c,e):null!=e?Tg(De,G)(c,e):c],null)});
    P0.B(null,hk,function(a,b,c){c=zG.g(c);c=ZQ.h(a,c);var d=th.h(c,new S(null,2,5,T,[Mr,Zo],null));if(n(d)){var e=xt.g(c),f=TZ(a,d);if(n(f)){var g=x.h(cv.g(f),e);b=g?f:xh(f,Bn,Tg(De,Jj),e);b=oI(b,new S(null,1,5,T,[Hp],null),e);if(g){e=fz.g(b);e=Sw.g(c_(a,e));g=xt.g(c);f=th.h(c,new S(null,2,5,T,[Mr,bn],null));b=Je.h(He.l(b,cv,g,F([My,!0])),bx);g=UZ(iR(a,g,uh(c,new S(null,2,5,T,[Mr,Zo],null),xt.g(b))),xt.g(b),b);if(n(f)){f=qh.h;var l=T,m=mt.g(c);e=MI(m,NZ(a,c,b,e));a=f.call(qh,new S(null,1,5,l,[e],null),
    O_(a,b,c));}else a=qh.h(K_(a,b,e),M_(a,b));a=new k(null,3,[Fu,g,oz,b,bw,a],null);}else a=R_(a,b,c);b=qg(a);a=u.h(b,Fu);c=u.h(b,oz);b=u.h(b,bw);a=new S(null,2,5,T,[UZ(a,d,c),b],null);}else a=new S(null,2,5,T,[iR(a,e,S_(c)),new S(null,1,5,T,[MI(b,IZ(e,null,HZ))],null)],null);}else f=th.h(c,new S(null,2,5,T,[ew,bx],null)),n(f)?(d=zG.g(f),g=ZQ.h(a,d),e=b=T,g=mt.g(g),f=fD.g(f),c=xt.g(c),a=new S(null,2,5,b,[a,new S(null,1,5,e,[MI(g,new k(null,5,[Iu,"activity",Yv,xo,fD,f,zG,d,vs,c],null))],null)],null)):a=CI("activity.errors.invalid_peer",
    ["Unable to find originating request for a ready message from peer ",p.g(xt.g(c))].join(""));return a});function Q0(a){return wh(wh(a,ry,tI),yE,Qg(rh,tI))}function R0(a){return rh.h(function(b){return Q0(Ej(tI(b),new S(null,4,5,T,[ip,ry,yE,Qv],null)))},a)}
    P0.B(null,$E,function(a,b,c){var d=qg(c);c=u.h(d,fD);var e=u.h(d,zG);d=u.h(d,sp);d=R0(d);var f=aR(a,e,Mr),g=th.h(f,new S(null,2,5,T,[fA,Kr],null));return n(g)?new S(null,2,5,T,[WZ(a,g,d),De.h(C_(a,g,d),PZ(b,c,e))],null):new S(null,2,5,T,[a,new S(null,1,5,T,[QZ(b,c,e,EI("activity.errors.registration.failure",["Registering peer is missing an user in its identity",p.g(fA.g(f))].join("")))],null)],null)});
    P0.B(null,fG,function(a,b,c){var d=qg(c);c=u.h(d,fD);var e=u.h(d,zG),f=u.h(d,sp),g=aR(a,e,Mr);d=th.h(g,new S(null,2,5,T,[fA,Kr],null));n(d)?(f=Lj(f),f=Lj(mh.h(f,ti(VZ(a,d)))),a=new S(null,2,5,T,[XZ(a,d,f),De.h(D_(a,d,f),PZ(b,c,e))],null)):a=new S(null,2,5,T,[a,new S(null,1,5,T,[QZ(b,c,e,EI("activity.errors.registration.failure",["Removing peer is missing an user in its identity",p.g(fA.g(g))].join("")))],null)],null);return a});
    P0.B(null,fx,function(a,b,c,d){var e=VX;VX=K0(d);try{var f=Je.h(c,PB);var g=n(Xr.g(c))?wh(f,Xr,Pg.h(Q0,tI)):f;return I_(a,b,g,ch.h(tI,PB.g(c)))}finally{VX=e;}});
    P0.B(null,sx,function(a,b,c){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG),g=u.h(d,aw);d=aR(a,f,Mr);g=a_(a,g);var l=xt.g(d);M(Bn.g(g),l)||M(Hp.g(g),l)||x.h(cv.g(g),l)?d=!0:(l=ZQ.h(a,cv.g(g)),d=kR.ga(fA.g(l),ED.g(g),!1,fA.g(d),null,!1));n(d)?(c=V_(a,g,DI(c)),a=H(c,0,null),c=H(c,1,null),e=new S(null,2,5,T,[null,PZ(b,e,f)],null),b=H(e,0,null),e=H(e,1,null),b=new S(null,2,5,T,[n(b)?b:a,df(e)||Ye(e)?$b.j(Tg(De,G),c,e):null!=e?Tg(De,G)(c,e):c],null)):b=new S(null,2,5,T,[a,QZ(b,e,f,AI("activity.errors.not_authorized",
    "Not authorized to destroy activity"))],null);return b});P0.B(null,am,function(a,b,c){return a0(a,b,c)});P0.B(null,rB,function(a,b,c){var d=qg(c);c=u.h(d,fD);var e=u.h(d,zG);d=u.h(d,xs);aR(a,e,Mr);return $_(a,b,c,e,d,$Z)});
    P0.B(null,XA,function(a,b,c){var d=qg(c);c=u.h(d,fD);var e=u.h(d,zG),f=u.h(d,xC),g=u.h(d,aw),l=u.h(d,BA),m=u.h(d,gn);aR(a,e,Mr);d=a_(a,g);f=Cj.l(F([aR(a,f,Mr),qh.h(R,mh.h(Ae,new k(null,2,[gn,m,BA,l],null)))]));m=Mr.g(f);l=Zo.g(m);m=cv.g(m);l=TZ(a,n(l)?l:m);x.h(xt.g(l),g)?b=new S(null,2,5,T,[a,new S(null,1,5,T,[PZ(b,c,e)],null)],null):n(l)?b=CI("activity.errors.activity_is_child",["Peer is already in activity ",p.g(xt.g(l))].join("")):(g=xt.g(d),l=xt.g(f),a=R_(a,d,f),m=qg(a),a=u.h(m,Fu),d=u.h(m,oz),
    m=u.h(m,bw),a=new k(null,3,[Fu,iR(UZ(a,g,d),l,uh(f,new S(null,2,5,T,[Mr,Zo],null),g)),oz,d,bw,m],null),f=qg(a),a=u.h(f,Fu),f=u.h(f,bw),b=new S(null,2,5,T,[a,De.h(f,PZ(b,c,e))],null));return b});
    P0.B(null,HF,function(a,b,c){var d=qg(c),e=u.h(d,fD);d=u.h(d,zG);var f=aR(a,d,Mr),g=th.h(f,new S(null,2,5,T,[Mr,Zo],null));g=TZ(a,g);var l=cv.g(g);n(g)||CI("activity.errors.not_a_member","Not a member of an activity");c=DI(c);x.h(l,d)?c=Z_(a,g,f,c,!0):(a=Y_(a,g,f,c),c=qg(a),a=u.h(c,Fu),c=u.h(c,bw),c=new S(null,2,5,T,[a,c],null));a=H(c,0,null);c=H(c,1,null);e=new S(null,2,5,T,[null,PZ(b,e,d)],null);b=H(e,0,null);e=H(e,1,null);return new S(null,2,5,T,[n(b)?b:a,df(e)||Ye(e)?$b.j(Tg(De,G),c,e):null!=
    e?Tg(De,G)(c,e):c],null)});P0.B(null,Au,function(a,b,c){var d=qg(c);c=u.h(d,fD);var e=u.h(d,zG),f=u.h(d,ux);d=aR(a,e,Mr);f=ch.h(yL,f);for(var g=z(f),l=null,m=0,q=0;;)if(q<m){var t=l.V(null,q);k_(d,t);q+=1;}else if(g=z(g))l=g,Ze(l)?(g=pd(l),q=qd(l),l=g,m=D(g),g=q):(g=A(l),k_(d,g),g=C(l),l=null,m=0),q=0;else break;a=g_(a,d,f);return new S(null,2,5,T,[a,De.h(h_(a,d,f),PZ(b,c,e))],null)});
    P0.B(null,BF,function(a,b,c){var d=qg(c);c=u.h(d,fD);var e=u.h(d,zG),f=u.h(d,rp);d=aR(a,e,Mr);var g=m_(d,f);f=H(g,0,null);g=H(g,1,null);a=SZ(iR(a,e,f),ch.h(BA,g),e);b=De.h(i_(a,d,rh.h(xt,g),!0),PZ(b,c,e));return new S(null,2,5,T,[a,b],null)});
    P0.B(null,tn,function(a,b,c,d){var e=VX;VX=K0(d);try{var f=qg(c),g=u.h(f,fD),l=u.h(f,zG),m=u.h(f,nC),q=u.h(f,BA),t=u.h(f,gn),v=u.h(f,aw);aR(a,l,Mr);var y=n(v)?a_(a,v):null,E=n(t)?t:q,J=PB.g(c),W=p_(a,m,q),Z=H(W,0,null),ma=H(W,1,null),ja=$Q(a,l),Ca=wI(Cq.g(a)),Ba=H(Ca,0,null),ta=H(Ca,1,null),B=Ej(c,new S(null,2,5,T,[fD,zG],null)),I=new k(null,4,[Yv,tn,xt,ta,BA,q,bx,B],null);var K=n(E)?He.j(I,gn,E):I;var O=fA.g(ja);var N=WX(a,O,K);var U=JI(He.j(a,Cq,Ba),ta,K);var Q=new k(null,3,[Fu,U,bw,new S(null,
    1,5,T,[n_(Z,ma,J,N,ta,y,c_(a,fz.g(y)),E)],null),Wm,ta],null);return new S(null,2,5,T,[Fu.g(Q),De.h(bw.g(Q),PZ(b,g,l))],null)}finally{VX=e;}});P0.B(null,kC,function(a,b,c){var d=qg(c);b=u.h(d,fD);var e=u.h(d,zG),f=u.h(d,PF);aR(a,e,Mr);var g=$Q(a,f),l=d=T;g=mt.g(g);c=DI(c);c=MI(g,IZ(f,e,c));return new S(null,2,5,d,[a,new S(null,2,5,l,[c,PZ(b,e)],null)],null)});P0.B(null,Px,function(a,b,c){return L0(a,c)});
    P0.B(null,bn,function(a,b,c,d){var e=VX;VX=K0(d);try{var f=qg(c),g=u.h(f,fD),l=u.h(f,zG),m=$Q(a,l),q=th.h(m,new S(null,2,5,T,[Mr,Zo],null)),t=TZ(a,q),v=wI(Cq.g(a)),y=H(v,0,null),E=H(v,1,null),J=new k(null,5,[Yv,oz,xt,E,BA,BA.g(m),oz,new k(null,2,[xt,xt.g(t),iA,x.h(xt.g(m),cv.g(t))],null),bn,!0],null);var W=n(gn.g(m))?He.j(J,gn,gn.g(m)):J;var Z=JI(He.j(a,Cq,y),E,W);c=T;var ma=n(q)?UZ(Z,q,xh(t,qF,Tg(De,Jj),l)):Z;q=T;var ja=fA.g(m);var Ca=WX(a,ja,W);return new S(null,2,5,c,[ma,new S(null,1,5,q,[MI(b,
    new k(null,5,[Iu,"activity",Yv,Pl,fD,g,zG,l,Pl,Ca],null))],null)],null)}finally{VX=e;}});P0.B(null,WF,function(a,b,c){return J0(a,b,c)});P0.B(null,LB,function(a,b){return O0(a,b)});P0.B(null,Tk,function(a,b,c){TU(Px,"gateway.domains.activity.core",251,new Dk(function(){return new S(null,2,5,T,["Unhandled message",c],null)}),1014881282);return new S(null,2,5,T,[a,new S(null,1,5,T,[QZ(b,fD.h(c,-1),zG.g(c),EI("activity.errors.unhandled_message",["Unhandled message ",p.g(c)].join("")))],null)],null)});
    function S0(){this.fh=null;}S0.prototype.cd=function(){return new k(null,3,[SC,"activity",Cr,"",nD,2],null)};S0.prototype.dd=function(a,b){return b};S0.prototype.ad=function(a,b){return b};
    S0.prototype.bd=function(a,b,c){var d=qg(c);a=u.h(d,mt);d=u.h(d,bp);Yv.g(d);try{return P0.D(b,a,d,this.fh)}catch(f){var e=f;n(rl(e))||TU(Px,"gateway.domains.activity.core",275,new Dk(function(){return new S(null,3,5,T,[e,"Error handling request",c],null)}),-1309331552);return RI(a)?new S(null,2,5,T,[b,new S(null,1,5,T,[QZ(a,fD.g(d),zG.g(d),BI(e,"activity.errors.failure"))],null)],null):null}};gQ(Ps,P(V,new S(null,1,5,T,[X],null),P(hs,bz,P(ls,X))),function(a){return eQ(bz,yL(a))});
    gQ(fE,P(qD,Ln,new S(null,3,5,T,[EC,Fw,Ps],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[EC,Fw,Ps],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,fD)},function(a){return M(a,fA)},function(a){return M(a,qu)}],null),function(a){return We(a)&&M(a,fD)&&M(a,fA)&&M(a,qu)},G,new S(null,3,5,T,[EC,Fw,Ps],null),null,new S(null,3,5,T,[fD,fA,qu],null),G,new S(null,4,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fD)),
    P(V,new S(null,1,5,T,[X],null),P(pq,X,fA)),P(V,new S(null,1,5,T,[X],null),P(pq,X,qu))],null),null])));gQ(XE,gD,gD);
    gQ(bB,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[XE],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[XE],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[XE],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,Kz)}],null),function(a){return We(a)&&M(a,Kz)},G,new S(null,1,5,T,[XE],null),null,new S(null,1,5,T,[Kz],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Kz))],
    null),null]))],null),null));
    gQ(kr,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[XE],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[XE],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[XE],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,Kz)}],null),function(a){return We(a)&&M(a,Kz)},G,new S(null,1,5,T,[XE],null),null,new S(null,1,5,T,[Kz],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Kz))],
    null),null]))],null),null));gQ(ay,P(V,new S(null,1,5,T,[X],null),P(hs,Wz,P(Xy,X))),function(a){return eQ(Wz,Qf.g(a))});gQ(dz,P(vz,dD),HQ(dD,Nb,null));gQ(fw,P(vz,dD),HQ(dD,Nb,null));
    gQ(Dq,P(jz,Vx,P(qD,Ln,new S(null,5,5,T,[yw,nq,ay,dz,fw],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,5,5,T,[yw,nq,ay,dz,fw],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,5,5,T,[yw,nq,ay,dz,fw],null),null,null,new S(null,6,5,T,[function(a){return We(a)},function(a){return M(a,ip)},function(a){return M(a,Sw)},function(a){return M(a,VF)},function(a){return M(a,aB)},function(a){return M(a,ED)}],null),function(a){return We(a)&&M(a,ip)&&M(a,Sw)&&M(a,VF)&&
    M(a,aB)&&M(a,ED)},G,new S(null,5,5,T,[yw,nq,ay,dz,fw],null),null,new S(null,5,5,T,[ip,Sw,VF,aB,ED],null),G,new S(null,6,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ip)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sw)),P(V,new S(null,1,5,T,[X],null),P(pq,X,VF)),P(V,new S(null,1,5,T,[X],null),P(pq,X,aB)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ED))],null),null]))],null),null));gQ(aC,LC,LC);
    gQ(pv,P(Ky,dD),uQ(AC,Nb,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,dD),Vz,function(a){return Se(a)}],null),null));gQ(ut,hv,We);gQ(fm,hv,We);gQ(eq,hv,We);
    gQ(qm,P(qD,pD,new S(null,4,5,T,[pv,ut,fm,eq],null)),jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[null,new S(null,4,5,T,[pv,ut,fm,eq],null),null,new S(null,1,5,T,[function(a){return We(a)}],null),function(a){return We(a)},new S(null,4,5,T,[it,Pw,TB,MD],null),G,null,G,new S(null,4,5,T,[pv,ut,fm,eq],null),new S(null,1,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X))],null),null])));
    gQ(Zy,P(jz,Vx,P(qD,Ln,new S(null,2,5,T,[aC,qm],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,2,5,T,[aC,qm],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[aC,qm],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,du)},function(a){return M(a,nG)}],null),function(a){return We(a)&&M(a,du)&&M(a,nG)},G,new S(null,2,5,T,[aC,qm],null),null,new S(null,2,5,T,[du,nG],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),
    P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,nG))],null),null]))],null),null));
    gQ(hD,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[aC],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[aC],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[aC],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[aC],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],
    null),null]))],null),null));
    gQ(zz,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[aC],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[aC],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[aC],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[aC],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],
    null),null]))],null),null));
    gQ(kq,P(jz,Vx,P(qD,Ln,new S(null,1,5,T,[aC],null))),sQ(new S(null,2,5,T,[Vx,P(qD,Ln,new S(null,1,5,T,[aC],null))],null),new S(null,2,5,T,[Vx,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[aC],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[aC],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],
    null),null]))],null),null));gQ(iC,dD,Nb);gQ(GB,dD,Nb);OQ.B(null,Xm,function(){return sQ(new S(null,2,5,T,[UG,fE],null),new S(null,2,5,T,[UG,fE],null),null)});OQ.B(null,Dt,function(){return sQ(new S(null,2,5,T,[UG,bB],null),new S(null,2,5,T,[UG,bB],null),null)});OQ.B(null,aA,function(){return sQ(new S(null,2,5,T,[UG,kr],null),new S(null,2,5,T,[UG,kr],null),null)});gQ(Ap,Fw,Fw);
    OQ.B(null,ln,function(){return jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,5,5,T,[fF,EC,Ap,lD,Mv],null),new S(null,1,5,T,[Im],null),null,new S(null,6,5,T,[function(a){return We(a)},function(a){return M(a,Yv)},function(a){return M(a,fD)},function(a){return M(a,Cz)},function(a){return M(a,Kr)},function(a){return M(a,uz)}],null),function(a){return We(a)&&M(a,Yv)&&M(a,fD)&&M(a,Cz)&&M(a,Kr)&&M(a,uz)},new S(null,1,5,T,[Vp],null),new S(null,5,5,T,[fF,EC,Ap,lD,Mv],null),null,new S(null,5,5,T,
    [Yv,fD,Cz,Kr,uz],null),new S(null,1,5,T,[Im],null),new S(null,6,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Yv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fD)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Cz)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Kr)),P(V,new S(null,1,5,T,[X],null),P(pq,X,uz))],null),null]))});gQ(ir,P(Ky,zm),uQ(zm,zm,new k(null,4,[dw,!0,Qo,null,FD,P(Ky,zm),Vz,function(a){return Se(a)}],null),null));gQ(gr,Fw,Fw);
    OQ.B(null,Lx,function(){return sQ(new S(null,2,5,T,[Rl,P(qD,Ln,new S(null,2,5,T,[ir,gr],null))],null),new S(null,2,5,T,[Rl,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[ir,gr],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,uv)},function(a){return M(a,zx)}],null),function(a){return We(a)&&M(a,uv)&&M(a,zx)},G,new S(null,2,5,T,[ir,gr],null),null,new S(null,2,5,T,[uv,zx],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,
    1,5,T,[X],null),P(pq,X,uv)),P(V,new S(null,1,5,T,[X],null),P(pq,X,zx))],null),null]))],null),null)});
    OQ.B(null,co,function(){return sQ(new S(null,2,5,T,[Rl,P(qD,Ln,new S(null,1,5,T,[bt],null))],null),new S(null,2,5,T,[Rl,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,1,5,T,[bt],null),null,null,new S(null,2,5,T,[function(a){return We(a)},function(a){return M(a,du)}],null),function(a){return We(a)&&M(a,du)},G,new S(null,1,5,T,[bt],null),null,new S(null,1,5,T,[du],null),G,new S(null,2,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du))],null),null]))],null),
    null)});gQ(Zz,vB,vB);gQ(bt,LC,LC);
    OQ.B(null,sr,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[Zz,bt,yw],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[Zz,bt,yw],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,fC)},function(a){return M(a,du)},function(a){return M(a,ip)}],null),function(a){return We(a)&&M(a,fC)&&M(a,du)&&M(a,ip)},G,new S(null,3,5,T,[Zz,bt,yw],null),null,new S(null,3,5,T,[fC,du,ip],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,fC)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,ip))],null),null]))],null),null)});
    OQ.B(null,rq,function(){return sQ(new S(null,2,5,T,[Rl,P(qD,Ln,new S(null,2,5,T,[bt,nq],null))],null),new S(null,2,5,T,[Rl,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,2,5,T,[bt,nq],null),null,null,new S(null,3,5,T,[function(a){return We(a)},function(a){return M(a,du)},function(a){return M(a,Sw)}],null),function(a){return We(a)&&M(a,du)&&M(a,Sw)},G,new S(null,2,5,T,[bt,nq],null),null,new S(null,2,5,T,[du,Sw],null),G,new S(null,3,5,T,[P(V,new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,
    1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Sw))],null),null]))],null),null)});gQ(SB,vB,vB);
    OQ.B(null,Oq,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[SB,bt,qm],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[SB,bt,qm],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,vo)},function(a){return M(a,du)},function(a){return M(a,nG)}],null),function(a){return We(a)&&M(a,vo)&&M(a,du)&&M(a,nG)},G,new S(null,3,5,T,[SB,bt,qm],null),null,new S(null,3,5,T,[vo,du,nG],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,vo)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,nG))],null),null]))],null),null)});
    OQ.B(null,Tv,function(){return sQ(new S(null,2,5,T,[Vo,P(qD,Ln,new S(null,3,5,T,[bt,iC,GB],null))],null),new S(null,2,5,T,[Vo,jQ(dj([Ln,pD,Oz,MB,VD,Zp,wm,ko,DE,ME,lq,NA],[new S(null,3,5,T,[bt,iC,GB],null),null,null,new S(null,4,5,T,[function(a){return We(a)},function(a){return M(a,du)},function(a){return M(a,BE)},function(a){return M(a,Tn)}],null),function(a){return We(a)&&M(a,du)&&M(a,BE)&&M(a,Tn)},G,new S(null,3,5,T,[bt,iC,GB],null),null,new S(null,3,5,T,[du,BE,Tn],null),G,new S(null,4,5,T,[P(V,
    new S(null,1,5,T,[X],null),P(hv,X)),P(V,new S(null,1,5,T,[X],null),P(pq,X,du)),P(V,new S(null,1,5,T,[X],null),P(pq,X,BE)),P(V,new S(null,1,5,T,[X],null),P(pq,X,Tn))],null),null]))],null),null)});function T0(a,b,c){c=RE.g(c);return n(c)?D(th.h(a,new S(null,2,5,T,[JB,n(b)?b:Cv],null)))>=c:null}function U0(a,b){return pf(function(c,d,e){return He.j(c,d,x.h("?",e)?b:e)},R,a)}
    function V0(a,b,c){function d(q,t){return PI.R("global",b,f,g,AI(q,t))}var e=qg(c),f=u.h(e,fD),g=u.h(e,zG);e=u.h(e,Kz);var l=fA.g(ZQ.h(a,g));if(n(l)){var m=LI(a,e);return n(m)?XQ(m,a,new k(null,3,[Ht,sz,mt,b,bp,He.j(He.j(c,fA,l),Yv,XG)],null)):new S(null,2,5,T,[a,new S(null,1,5,T,[d("global.errors.invalid_domain",["Unable to join missing domain ",p.g(e)].join(""))],null)],null)}return new S(null,2,5,T,[a,new S(null,1,5,T,[d("global.errors.invalid_peer",["Unable to find peer with id ",p.g(g)].join(""))],
    null)],null)}function W0(a,b,c){return V0(a,b,c)}
    function X0(a,b,c,d,e){var f=qg(c),g=u.h(f,fD),l=u.h(f,Cz),m=u.h(f,rz),q=u.h(f,Kr),t=u.h(f,Vp),v=u.h(f,hu);f=yD.g(d);a=KI(a,xt.g(m));var y=H(a,0,null);H(a,1,null);var E=function(){var da=Cj.l(F([new k(null,1,[Ny,iX(Kv.g(b),tE.g(e))],null),fX(l),Ej(c,new S(null,2,5,T,[Kr,uz],null))]));if(n(uD.g(c))){var ia=uD.g(c);ia=Kr.g(ia);da=n(ia)?He.j(da,Kr,ia):da;}return da}(),J=n(iw.g(E))?new S(null,2,5,T,[E,y],null):function(){var da=Cq.g(y);var ia=kv.h(da,1);var qa=["i-",p.g(ww.g(da)),"-",p.g(ia)].join("");
    ia=new S(null,2,5,T,[He.j(da,kv,ia+1),qa],null);da=H(ia,0,null);ia=H(ia,1,null);return new S(null,2,5,T,[He.j(E,iw,ia),He.j(y,Cq,da)],null)}();a=H(J,0,null);J=H(J,1,null);v=He.j(v,dq,!0);try{var W=th.h(J,new S(null,2,5,T,[Pu,a],null));n(W)&&CI("global.errors.already_seen","Hello already received once");hX(a);n(T0(J,q,f))&&CI("global.errors.limits_exceeded","Maximum number of peers per user have been reached");var Z=yI(Cq.g(J)),ma=H(Z,0,null),ja=H(Z,1,null),Ca=U0(a,ja),Ba=gR(He.j(J,Cq,ma),b,ja,Ca,
    m,v),ta=H(Ba,0,null),B=H(Ba,1,null),I=wZ(b,g,xt.g(B),ch.h(BD,ui(aF.g(ta))),Ca,Cj.l(F([function(){var da=BD.g(d);return n(da)?new k(null,1,[BD,da],null):null}(),n(t)?new k(null,1,[Vp,t],null):null])));n(null)&&cW(tm,"global/peer-count",D(GG.g(ta)));var K=new S(null,2,5,T,[ta,new S(null,1,5,T,[I],null)],null),O=H(K,0,null),N=H(K,1,null),U=W0(O,b,new k(null,6,[fD,g,zG,xt.g(B),fA,Ca,hu,v,Kz,"context",Iu,"global"],null)),Q=H(U,0,null),Y=H(U,1,null);return new S(null,2,5,T,[n(Q)?Q:O,df(Y)||Ye(Y)?$b.j(Tg(De,
    G),N,Y):null!=Y?Tg(De,G)(N,Y):N],null)}catch(da){return m=da,RI(b)?new S(null,2,5,T,[J,new S(null,1,5,T,[PI.R("global",b,g,null,BI(m,"global.errors.failure"))],null)],null):null}}
    function Y0(a,b,c){TU(vt,"gateway.domains.global.core",230,new Dk(function(){return new S(null,1,5,T,["removing source from global domain"],null)}),-796715134);var d=th.h(a,new S(null,2,5,T,[Cq,ww],null));a=$b.j(function(f,g){var l=H(f,0,null);f=H(f,1,null);var m=new S(null,2,5,T,[hR(l,g),null],null),q=H(m,0,null);m=H(m,1,null);f=new S(null,2,5,T,[n(q)?q:l,df(m)||Ye(m)?$b.j(Tg(De,G),f,m):null!=m?Tg(De,G)(f,m):f],null);l=H(f,0,null);f=H(f,1,null);q=new S(null,2,5,T,[null,RI(b)?NI(new k(null,3,[Yv,
    Dy,om,xt.g(g),Mt,d],null),c):null],null);g=H(q,0,null);q=H(q,1,null);return new S(null,2,5,T,[n(g)?g:l,df(q)||Ye(q)?$b.j(Tg(De,G),f,q):null!=q?Tg(De,G)(f,q):f],null)},new S(null,2,5,T,[a,null],null),eR(a,b));var e=H(a,0,null);H(a,1,null);TU(vt,"gateway.domains.global.core",243,new Dk(function(){return new S(null,1,5,T,["removed source from global domain"],null)}),807004370);n(null)&&cW(tm,"global/peer-count",D(GG.g(e)));return a}
    function Z0(a,b,c,d,e){c=qg(c);var f=u.h(c,fD),g=u.h(c,fA);c=u.h(c,qu);c=yL(c);var l=Qf.g(Sn.h(c,Tk.g(d)));d=th.h(d,new S(null,2,5,T,[Aw,l],null));return n(d)?(QW(RW(QW(VW(d,new k(null,4,[fD,f,Cz,g,qu,c,so,so.g(a)],null)),function(m){return wh(m,Yv,function(q){switch(q instanceof w?q.X:null){case "success":return ln;case "continue":return EE;default:return q}})}),function(m){return He.j(rl(m),Yv,St)}),function(m){return hI(e,new k(null,3,[Ht,sz,mt,b,bp,He.l(m,fD,f,F([Cz,g]))],null))}),new S(null,
    2,5,T,[a,null],null)):new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("global",b,f,null,EI("global.errors.authentication.failure",["Requested authentication provider ",p.g(l)," is not available"].join("")))],null)],null)}
    var $0=Qg(q0,"global"),a1=Qg(A0,"global"),b1=Qg(D0,"global"),c1=Qg(v0,"global"),d1=Qg(G0,"global"),e1=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.domains.global.core","handle-request"),function(f,g,l){return Yv.g(l)},e,a,b,c,d)}();e1.B(null,Xm,function(a,b,c,d){return Z0(a,b,c,d,Ov.g(a))});
    e1.B(null,Dt,function(a,b,c){if(RI(b))b=V0(a,b,c);else {var d=qg(c),e=u.h(d,zG),f=u.h(d,Kz);d=u.h(d,hu);f=LI(a,f);n(f)?(a=gR(a,b,e,fA.g(c),null,d),e=H(a,0,null),H(a,1,null),b=XQ(f,e,new k(null,3,[Ht,vD,mt,b,bp,He.j(c,Yv,XG)],null))):b=null;}return b});
    e1.B(null,aA,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG);d=u.h(d,Kz);if(n(ZQ.h(a,f))){var g=LI(a,d);a=n(g)?XQ(g,a,new k(null,3,[Ht,sz,mt,b,bp,He.j(c,Yv,yv)],null)):new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("global",b,e,f,EI("global.errors.invalid_domain",["Unable to leave missing domain ",p.g(d)].join("")))],null)],null);}else a=new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("global",b,e,f,EI("global.errors.invalid_peer",["Unable to find peer with id ",p.g(f)].join("")))],null)],null);}else f=
    qg(c),e=u.h(f,zG),f=u.h(f,Kz),n(ZQ.h(a,e))?(e=LI(a,f),a=n(e)?XQ(e,a,new k(null,3,[Ht,sz,mt,b,bp,He.j(c,Yv,yv)],null)):null):a=null;return a});e1.B(null,ln,function(a,b,c,d,e,f){return X0(a,b,c,e,f)});e1.B(null,St,function(a,b,c){var d=qg(c);c=u.h(d,Nr);d=u.h(d,fD);return new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("global",b,d,null,AI("global.errors.authentication.failure",c))],null)],null)});
    e1.B(null,EE,function(a,b,c){var d=qg(c);c=u.h(d,fD);d=u.h(d,qu);return new S(null,2,5,T,[a,new S(null,1,5,T,[MI(b,new k(null,4,[Iu,"global",Yv,zF,fD,c,qu,d],null))],null)],null)});e1.B(null,bv,function(a,b,c){return a1(a,b,c)});e1.B(null,WF,function(a,b,c){return $0(a,b,c)});e1.B(null,yu,function(a,b,c){return c1(a,b,c)});e1.B(null,Ks,function(a,b,c){return d1(a,b,c)});e1.B(null,So,function(a,b,c){return b1(a,b,c)});e1.B(null,zy,function(a){return new S(null,1,5,T,[a],null)});
    e1.B(null,LB,function(a,b,c){return Y0(a,b,c)});e1.B(null,kD,function(a,b,c,d,e){d=qg(c);c=u.h(d,fD);d=u.h(d,zG);var f=$Q(a,d),g=T,l=T;a:{var m=VX;VX=K0(e);try{var q=fA.g(f),t=kI()+VX,v=new k(null,2,[Yv,qu,Kr,Kr.g(q)],null);var y=n(t)?He.j(v,$l,yf(t,1E3)):v;var E=UX(y,so.g(a));break a}finally{VX=m;}E=void 0;}return new S(null,2,5,g,[a,new S(null,1,5,l,[MI(b,new k(null,5,[Iu,"global",Yv,Pl,fD,c,zG,d,Pl,E],null))],null)],null)});
    e1.B(null,Tk,function(a,b,c){TU(Px,"gateway.domains.global.core",410,new Dk(function(){return new S(null,2,5,T,["Unhandled message",c],null)}),1626326116);return new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("global",b,fD.h(c,-1),zG.g(c),EI("global.errors.unhandled_message",["Unhandled message ",p.g(c)].join("")))],null)],null)});
    function f1(a,b,c,d,e){var f=qg(e),g=u.h(f,mt);f=u.h(f,bp);try{return e1.ga(d,g,f,a,b,c)}catch(m){if(m instanceof Error){var l=m;n(rl(l))||TU(Px,"gateway.domains.global.core",426,new Dk(function(){return new S(null,3,5,T,[l,"Error processing message",e],null)}),406053774);return new S(null,2,5,T,[d,new S(null,1,5,T,[PI.R("global",g,fD.h(f,-1),zG.g(f),BI(l,"global.errors.failure"))],null)],null)}throw m;}}
    function g1(a){this.df=new k(null,1,[tE,"127.0.0.1"],null);this.zg=a;this.configuration=null;}g1.prototype.cd=function(){return new k(null,3,[SC,"global",Cr,"",nD,1],null)};g1.prototype.dd=function(a,b){return b};g1.prototype.ad=function(a,b){return b};g1.prototype.bd=function(a,b,c){return f1(this.zg,this.configuration,this.df,b,c)};function h1(a,b){return pf(function(c,d,e){c=u.h(b,d);return Lb(wY(e,c))?ee(!1):!0},!0,a)}function i1(a,b,c){var d=$b.j(function(e,f){return n(h1(kG.g(f),b))?n(xY(th.h(f,new S(null,2,5,T,[Fs,ZF],null)),c))?ee(!1):n(e)?e:xY(th.h(f,new S(null,2,5,T,[Fs,ps],null)),c):e},null,ow.g(a));if(null!=d)return d;a=dv.g(a);switch(a instanceof w?a.X:null){case "whitelist":return !0;case "blacklist":return !1;default:return !0}}function j1(a){if(null!=a&&null!=a.ah)a=a.ah(a);else {var b=j1[ba(null==a?null:a)];if(null!=b)a=b.g?b.g(a):b.call(null,a);else if(b=j1._,null!=b)a=b.g?b.g(a):b.call(null,a);else throw Sb("Repository.start!",a);}return a}function k1(a){if(null!=a&&null!=a.bh)a.bh(a);else {var b=k1[ba(null==a?null:a)];if(null!=b)b.g?b.g(a):b.call(null,a);else if(b=k1._,null!=b)b.g?b.g(a):b.call(null,a);else throw Sb("Repository.stop!",a);}}
    function l1(a,b){if(null!=a&&null!=a.Zg)a=a.Zg(a,b);else {var c=l1[ba(null==a?null:a)];if(null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else if(c=l1._,null!=c)a=c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Repository.add!",a);}return a}function m1(a,b){if(null!=a&&null!=a.$g)a.$g(a,b);else {var c=m1[ba(null==a?null:a)];if(null!=c)c.h?c.h(a,b):c.call(null,a,b);else if(c=m1._,null!=c)c.h?c.h(a,b):c.call(null,a,b);else throw Sb("Repository.publish!",a);}}
    function n1(a,b){if(null!=a&&null!=a.dh)a=a.dh(a,b,null);else {var c=n1[ba(null==a?null:a)];if(null!=c)a=c.j?c.j(a,b,null):c.call(null,a,b,null);else if(c=n1._,null!=c)a=c.j?c.j(a,b,null):c.call(null,a,b,null);else throw Sb("RepositoryFactory.repository",a);}return a}var o1=new Hj(null,new k(null,3,[ju,null,zE,null,iw,null],null),null);function p1(a){var b=Lg(function(c){var d=!M(a,c);return d?c:d},o1);n(b)&&CI("metrics.errors.bad_identity",["Repository is missing required ",p.g(b)," property"].join(""));}
    function q1(a,b){var c=xt.g(b);b=th.h(b,new S(null,2,5,T,[$u,Sv],null));if(z(b)){TU(BD,"gateway.domains.metrics.core",72,new Dk(function(){return new S(null,2,5,T,["stopping metrics publishing for peer",c],null)}),-963772244);b=z(b);for(var d=null,e=0,f=0;;)if(f<e){var g=d.V(null,f);k1(g);f+=1;}else if(b=z(b))d=b,Ze(d)?(b=pd(d),f=qd(d),d=b,e=D(b),b=f):(b=A(d),k1(b),b=C(d),d=null,e=0),f=0;else break}return HI(a,c,$u)}
    function r1(a,b,c){var d=qg(c),e=u.h(d,fD);d=u.h(d,zG);var f=$Q(a,d);a=q1(a,f,DI(c));return new S(null,2,5,T,[a,new S(null,1,5,T,[QI.D("metrics",b,e,d)],null)],null)}function s1(a){return pf(function(b,c,d){return He.j(b,c,t1.g?t1.g(d):t1.call(null,d))},R,a)}function t1(a){return pf(function(b,c,d){c=Qf.g(c);return He.j(b,c,x.h(c,Iy)?s1(d):d)},R,a)}
    function u1(a,b,c){var d=th.h(c,new S(null,2,5,T,[$u,Sv],null));if(n(d))return new S(null,2,5,T,[a,d],null);d=xt.g(c);var e=th.h(c,new S(null,2,5,T,[$u,Pp],null));b=bk(ch.h(function(f){return j1(n1(f,e))},b));return new S(null,2,5,T,[uh(a,new S(null,4,5,T,[GG,d,$u,Sv],null),b),b],null)}
    function v1(a,b,c,d){var e=qg(b);b=u.h(e,zG);e=u.h(e,Fs);var f=$Q(a,b),g=th.h(f,new S(null,2,5,T,[$u,Pp],null)),l=mh.h(function(m){return i1(d,g,ip.g(m))},ch.h(t1,e));return z(l)?(TU(vt,"gateway.domains.metrics.core",130,new Dk(function(){return new S(null,4,5,T,["publisher",g,"adding metrics",ch.h(ip,l)],null)}),1020560941),c=u1(a,c,f),a=H(c,0,null),c=H(c,1,null),z(c)?new S(null,2,5,T,[uh(a,new S(null,4,5,T,[GG,b,$u,Sv],null),bk(ch.h(function(m){return l1(m,l)},c))),null],null):null):null}
    function w1(a,b,c){var d=qg(b);b=u.h(d,zG);d=u.h(d,CF);b=$Q(a,b);var e=th.h(b,new S(null,2,5,T,[$u,Pp],null));a=mh.h(function(m){return i1(c,e,ip.g(m))},ch.h(tI,d));if(z(a))if(b=th.h(b,new S(null,2,5,T,[$u,Sv],null)),n(b)){b=z(b);d=null;for(var f=0,g=0;;)if(g<f){var l=d.V(null,g);m1(l,a);g+=1;}else if(b=z(b))d=b,Ze(d)?(b=pd(d),f=qd(d),d=b,l=D(b),b=f,f=l):(l=A(d),m1(l,a),b=C(d),d=null,f=0),g=0;else return null}else return null;else return null}
    function x1(a,b){TU(vt,"gateway.domains.metrics.core",154,new Dk(function(){return new S(null,2,5,T,["removing source",b],null)}),-2074390088);a=$b.j(function(c,d){return q1(c,d)},a,fR(a,b,$u));return new S(null,2,5,T,[a,null],null)}
    var y1=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.domains.metrics.core","handle-request"),function(){function f(g,l,m,q){if(3<arguments.length)for(var t=0,v=Array(arguments.length-3);t<v.length;)v[t]=arguments[t+3],++t;return Yv.g(m)}f.I=3;f.M=function(g){A(g);g=C(g);A(g);g=C(g);var l=A(g);Td(g);return Yv.g(l)};f.l=function(g,l,m){return Yv.g(m)};return f}(),e,a,b,c,d)}();
    y1.B(null,XG,function(){function a(c,d,e,f){var g=null;if(3<arguments.length){g=0;for(var l=Array(arguments.length-3);g<l.length;)l[g]=arguments[g+3],++g;g=new Rd(l,0,null);}return b.call(this,c,d,e,g)}function b(c,d,e,f){f=qg(f);var g=u.h(f,Qw);var l=qg(e);e=u.h(l,fD);f=u.h(l,zG);var m=u.h(l,fA);l=u.h(l,hu);var q=Cj.l;var t=Ny.g(m);n(t)||(t=iX(Kv.g(d),tE.g(g)),t=n(t)?t:"127.0.0.1");g=new k(null,6,[Ny,t,io,io.g(g),pB,(new Date).getTime(),Is,Is.g(g),zE,zE.g(m),ju,OE.g(m)],null);g=q.call(Cj,F([g,tI(l),
    tI(m)]));n(II(c,f,$u))?d=new S(null,2,5,T,[c,new S(null,1,5,T,[QI.D("metrics",d,e,f)],null)],null):(p1(g),c=uh(GI(c,f,$u,null),new S(null,4,5,T,[GG,f,$u,Pp],null),g),d=new S(null,2,5,T,[c,new S(null,1,5,T,[QI.D("metrics",d,e,f)],null)],null));return d}a.I=3;a.M=function(c){var d=A(c);c=C(c);var e=A(c);c=C(c);var f=A(c);c=Td(c);return b(d,e,f,c)};a.l=b;return a}());
    y1.B(null,yv,function(){function a(b,c,d,e){if(3<arguments.length)for(var f=0,g=Array(arguments.length-3);f<g.length;)g[f]=arguments[f+3],++f;return r1(b,c,d)}a.I=3;a.M=function(b){var c=A(b);b=C(b);var d=A(b);b=C(b);var e=A(b);Td(b);return r1(c,d,e)};a.l=function(b,c,d){return r1(b,c,d)};return a}());
    y1.B(null,LB,function(){function a(b,c,d,e){if(3<arguments.length)for(var f=0,g=Array(arguments.length-3);f<g.length;)g[f]=arguments[f+3],++f;return x1(b,c)}a.I=3;a.M=function(b){var c=A(b);b=C(b);var d=A(b);b=C(b);A(b);Td(b);return x1(c,d)};a.l=function(b,c){return x1(b,c)};return a}());
    y1.B(null,an,function(){function a(c,d,e,f){var g=null;if(3<arguments.length){g=0;for(var l=Array(arguments.length-3);g<l.length;)l[g]=arguments[g+3],++g;g=new Rd(l,0,null);}return b.call(this,c,d,e,g)}function b(c,d,e,f){f=qg(f);d=u.h(f,XB);f=u.h(f,qC);return v1(c,e,d,f)}a.I=3;a.M=function(c){var d=A(c);c=C(c);var e=A(c);c=C(c);var f=A(c);c=Td(c);return b(d,e,f,c)};a.l=b;return a}());
    y1.B(null,Gm,function(){function a(c,d,e,f){var g=null;if(3<arguments.length){g=0;for(var l=Array(arguments.length-3);g<l.length;)l[g]=arguments[g+3],++g;g=new Rd(l,0,null);}return b.call(this,c,d,e,g)}function b(c,d,e,f){d=qg(f);d=u.h(d,qC);return w1(c,e,d)}a.I=3;a.M=function(c){var d=A(c);c=C(c);var e=A(c);c=C(c);var f=A(c);c=Td(c);return b(d,e,f,c)};a.l=b;return a}());
    y1.B(null,Tk,function(){function a(c,d,e,f){var g=null;if(3<arguments.length){g=0;for(var l=Array(arguments.length-3);g<l.length;)l[g]=arguments[g+3],++g;g=new Rd(l,0,null);}return b.call(this,c,d,e,g)}function b(c,d,e){TU(Px,"gateway.domains.metrics.core",185,new Dk(function(){return new S(null,2,5,T,["Unhandled message",e],null)}),1878140694);return new S(null,2,5,T,[c,new S(null,1,5,T,[PI.R("metrics",d,fD.h(e,-1),zG.g(e),EI("metrics.errors.unhandled_message",["Unhandled message ",p.g(e)].join("")))],
    null)],null)}a.I=3;a.M=function(c){var d=A(c);c=C(c);var e=A(c);c=C(c);var f=A(c);c=Td(c);return b(d,e,f)};a.l=b;return a}());function z1(a){this.df=a;this.filters=this.$h=null;}z1.prototype.cd=function(){return new k(null,3,[SC,"metrics",Cr,"",nD,1],null)};z1.prototype.dd=function(a,b){return b};z1.prototype.ad=function(a,b){return $b.j(function(c,d){return q1(c,d)},b,cR(b,$u))};
    z1.prototype.bd=function(a,b,c){var d=qg(c);a=u.h(d,mt);d=u.h(d,bp);try{return y1.Ea(b,a,d,Qw,this.df,XB,this.$h,qC,this.filters)}catch(f){var e=f;n(rl(e))||TU(Px,"gateway.domains.metrics.core",218,new Dk(function(){return new S(null,3,5,T,[e,"Error processing message",c],null)}),-1981409396);return new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R("metrics",a,fD.g(d),zG.g(d),BI(e,"metrics.errors.failure"))],null)],null)}};
    function A1(){var a=B1;TU(vt,"gateway.domains.metrics.core",228,new Dk(function(){return new S(null,2,5,T,["initializing metrics domain with filters",null],null)}),-1358954511);return new z1(a)}function C1(a,b){TU(vt,"gateway.domains.bus.core",53,new Dk(function(){return new S(null,2,5,T,["removing source",b],null)}),1463470859);a=$b.j(function(c,d){return HI(c,om.g(d),FF)},a,fR(a,b,FF));return new S(null,2,5,T,[a,null],null)}function D1(a){return lh(function(b){var c=H(b,0,null);b=H(b,1,null);return ch.j(function(d,e){return new k(null,2,[Dy,d,jx,e],null)},Db(c),b)},F([ch.h(function(b){return new S(null,2,5,T,[b,th.h(b,new S(null,2,5,T,[FF,Ry],null))],null)},a)]))}
    function E1(a,b,c){H(c,0,null);c=H(c,1,null);var d=qg(c),e=u.h(d,YD);d=u.h(d,Ip);a=n(d)?ck(d,a):x.h(e,a);n(a)?(a=zn.g(c),b=Lb(a)||Lb(b)||x.h(a,b)):b=a;return b}function F1(a,b){var c=fA.g(b);return pf(function(d,e,f){return x.h(u.h(c,e),f)?!0:ee(!1)},!0,a)}
    function G1(a,b,c){var d=Sw.g(b);if(n(d)){var e=qg(b),f=u.h(e,YD),g=u.h(e,Lz),l=u.h(e,zG);e=u.h(e,fs);var m=Rg(E1,f,g);f=Qg(F1,fX(e));var q=fA.g(c),t=new ah(Jj);c=$b.j(function(v,y){y=qg(y);var E=u.h(y,Dy),J=u.h(y,jx);y=mt.g(E);E=xt.g(E);RI(y)?(J=A(J),y=MI(y,new k(null,6,[Iu,"bus",Yv,ty,zG,E,CD,J,gq,q,Sw,d],null))):x.h(l,E)?y=null:(y=Mt.g(y),M(r(t),y)?y=null:(t.Ec(null,De.h(t.Db(null),y)),y=OI(LY(vI(Cq.g(a)),l),new k(null,2,[Yv,Mt,Mt,y],null),b)));return n(y)?De.h(v,y):v},G,mh.h(function(v){return m(jx.g(v))},
    D1(mh.h(f,mR(a,FF,c,!0)))));return new S(null,2,5,T,[a,c],null)}return null}
    function H1(a,b,c,d){var e=qg(b),f=u.h(e,YD),g=u.h(e,Lz),l=u.h(e,fD);e=u.h(e,zG);var m=mt.g(d),q=new S(null,3,5,T,[FF,Ry,c],null);g=new k(null,2,[YD,f,zn,g],null);f=-1!=f.indexOf("\x3e")||-1!=f.indexOf("*")?He.j(g,Ip,fk(iJ(iJ(iJ(f,".","\\."),"*","[a-zA-Z_0-9]+"),"\x3e",".*"))):g;d=uh(d,q,f);return new S(null,2,5,T,[iR(a,e,d),RI(m)?new S(null,2,5,T,[MI(m,new k(null,5,[Iu,"bus",Yv,jp,fD,l,zG,e,CD,c],null)),NI(LY(vI(Cq.g(a)),e),He.j(b,CD,c))],null):null],null)}
    function I1(a,b,c){var d=qg(b),e=u.h(d,fD),f=u.h(d,zG),g=u.h(d,CD);d=mt.g(c);c=vh.D(c,new S(null,2,5,T,[FF,Ry],null),Je,g);return new S(null,2,5,T,[iR(a,f,c),RI(d)?new S(null,2,5,T,[QI.D("bus",d,e,f),NI(LY(vI(Cq.g(a)),f),b)],null):null],null)}var J1=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.domains.bus.core","handle-request"),function(f,g,l){return Yv.g(l)},e,a,b,c,d)}();
    J1.B(null,XG,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG);u.h(d,fA);d=u.h(d,Sp);if(n(II(a,f,FF)))a=new S(null,2,5,T,[a,new S(null,1,5,T,[QI.D("bus",b,e,f)],null)],null);else {d=GI(a,f,FF,zP(d));var g=ZQ.h(d,f),l=T,m=T;b=QI.D("bus",b,e,f);a=LY(vI(Cq.g(a)),f);c=He.j(c,Yv,Dt);c=n(hu.g(g))?He.j(c,hu,hu.g(g)):c;a=new S(null,2,5,l,[d,new S(null,2,5,m,[b,NI(a,c)],null)],null);}}else d=qg(c),c=u.h(d,zG),d=u.h(d,Sp),a=n(II(a,c,FF))?null:new S(null,2,5,T,[GI(a,c,FF,zP(d)),null],null);return a});
    J1.B(null,yv,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD);d=u.h(d,zG);var f=HI(a,d,FF);a=new S(null,2,5,T,[f,new S(null,2,5,T,[QI.D("bus",b,e,d),NI(LY(vI(Cq.g(a)),d),He.j(c,Yv,aA))],null)],null);}else b=qg(c),b=u.h(b,zG),c=ZQ.h(a,b),a=n(c)?new S(null,2,5,T,[HI(a,b,FF),null],null):null;return a});J1.B(null,Gm,function(a,b,c){RI(b)?(b=zG.g(c),b=$Q(a,b),a=n(b)?G1(a,c,b):null):(b=zG.g(c),b=ZQ.h(a,b),a=n(b)?G1(a,c,b):null);return a});
    J1.B(null,am,function(a,b,c){if(RI(b)){var d=wI(Cq.g(a));b=H(d,0,null);d=H(d,1,null);var e=zG.g(c);e=aR(a,e,FF);a=H1(He.j(a,Cq,b),c,d,e);}else d=qg(c),b=u.h(d,CD),d=u.h(d,zG),d=ZQ.j(a,d,FF),a=n(d)?H1(a,c,b,d):null;return a});J1.B(null,rB,function(a,b,c){RI(b)?(b=aR(a,zG.g(c),FF),a=I1(a,c,b)):(b=ZQ.h(a,zG.g(c)),a=n(b)?I1(a,c,b):null);return a});J1.B(null,LB,function(a,b){return C1(a,b)});
    J1.B(null,Tk,function(a,b,c){TU(Px,"gateway.domains.bus.core",306,new Dk(function(){return new S(null,2,5,T,["Unhandled message",c],null)}),-613148747);return new S(null,2,5,T,[a,new S(null,1,5,T,[PI.R("bus",b,fD.h(c,-1),zG.g(c),EI("bus.errors.unhandled_message",["Unhandled message ",p.g(c)].join("")))],null)],null)});function K1(){}K1.prototype.cd=function(){return new k(null,3,[SC,"bus",Cr,"",nD,1],null)};K1.prototype.dd=function(a,b){return b};K1.prototype.ad=function(a,b){return b};
    K1.prototype.bd=function(a,b,c){var d=qg(c);a=u.h(d,mt);d=u.h(d,bp);try{return J1.j(b,a,d)}catch(f){var e=f;n(rl(e))||TU(Px,"gateway.domains.bus.core",342,new Dk(function(){return new S(null,3,5,T,[e,"Error processing message",c],null)}),-603933941);return new S(null,2,5,T,[b,new S(null,1,5,T,[PI.R("bus",a,fD.g(d),zG.g(d),BI(e,"bus.errors.failure"))],null)],null)}};f0("context");var L1=AI("context.peer-removed","Peer has been removed");var M1=Qg(QI,"context"),N1=Qg(PI,"context");var O1=Qg(q0,"context"),P1=Qg(A0,"context"),Q1=Qg(D0,"context"),R1=Qg(v0,"context"),S1=Qg(G0,"context"),T1=Qg(function(a,b,c,d,e){var f=Qg(E0,a);b=oR(a,jq,b,c,d,e);a=H(b,0,null);b=H(b,1,null);b=mh.h(Qg(I0,a),b);b=new S(null,2,5,T,[a,b],null);a=H(b,0,null);b=H(b,1,null);f=f(a,c);c=H(f,0,null);f=H(f,1,null);return new S(null,2,5,T,[n(c)?c:a,df(f)||Ye(f)?$b.j(Tg(De,G),b,f):null!=f?Tg(De,G)(b,f):b],null)},"context");
    function U1(a,b,c,d){var e=aR(a,c,jq),f=function(){var g=mh.h(Qg(I0,a),nR("context",jq,a,b,e));return n(d)?nh.h(function(l){return x.h(c,Sr.g(bp.g(l)))},g):g}();return Uh(cg.h(f,Lb(d)?H0(n0(e),a,e):Ud))}function V1(a,b,c,d,e){var f=zP(d);d=function(){var g=GI(a,c,jq,f);return n(e)?jR(g,c,function(l){return lI(l,new S(null,2,5,T,[hu,dq],null))}):g}();return new S(null,2,5,T,[d,U1(d,b,c,e)],null)}
    function W1(a,b,c){var d=qg(c),e=u.h(d,fD),f=u.h(d,zG);u.h(d,fA);d=u.h(d,Sp);var g=th.h(c,new S(null,2,5,T,[hu,dq],null)),l=function(){var v=ZQ.h(a,f);v=null==v?null:hu.g(v);return null==v?null:dq.g(v)}(),m=II(a,f,jq);if(n(n(m)?Lb(l):m))return new S(null,2,5,T,[a,new S(null,1,5,T,[M1(b,e,f)],null)],null);d=V1(a,b,f,d,n(m)?l:m);l=H(d,0,null);var q=H(d,1,null),t=ZQ.h(l,f);return new S(null,2,5,T,[l,function(){var v=De.h,y=LY(vI(Cq.g(a)),f);var E=He.j(c,Yv,Dt);E=n(hu.g(t))?He.j(E,hu,hu.g(t)):E;v=v.call(De,
    q,NI(y,E));return Lb(g)?De.h(v,M1(b,e,f)):v}()],null)}function X1(a,b,c){c=qg(c);var d=u.h(c,zG);u.h(c,fA);c=u.h(c,Sp);var e=function(){var f=ZQ.h(a,d);f=null==f?null:hu.g(f);return null==f?null:dq.g(f)}();return n(function(){var f=Lb(e);return f?II(a,d,jq):f}())?null:V1(a,b,d,c,e)}
    function Y1(a,b){TU(vt,"gateway.domains.context.core",124,new Dk(function(){return new S(null,1,5,T,["removing source from the context domain"],null)}),-837293965);b=Jg(fR(a,b,jq));a=tf(ch.g(xt),rf(function(d,e){return HI(d,e,jq)},qf),a,b);var c=new k(null,6,[fD,null,Iu,"global",Yv,aA,Kz,"context",BE,L1.uri,Tn,L1.message],null);a=$b.j(function(d,e){var f=H(d,0,null);d=H(d,1,null);var g=T1(f,e,L1,!0),l=H(g,0,null);g=H(g,1,null);d=new S(null,2,5,T,[n(l)?l:f,df(g)||Ye(g)?$b.j(Tg(De,G),d,g):null!=g?Tg(De,
    G)(d,g):d],null);f=H(d,0,null);d=H(d,1,null);l=new S(null,2,5,T,[f,NI(LY(vI(Cq.g(f)),xt.g(e)),He.j(c,zG,xt.g(e)))],null);e=H(l,0,null);l=H(l,1,null);return new S(null,2,5,T,[n(e)?e:f,df(l)||Ye(l)?$b.j(Tg(De,G),d,l):null!=l?Tg(De,G)(d,l):d],null)},new S(null,2,5,T,[a,null],null),b);TU(vt,"gateway.domains.context.core",144,new Dk(function(){return new S(null,1,5,T,["removed source from context domain"],null)}),-374996970);return a}
    var Z1=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.domains.context.core","handle-request"),function(f,g,l){return Yv.g(l)},e,a,b,c,d)}();Z1.B(null,XG,function(a,b,c){return RI(b)?W1(a,b,c):X1(a,b,c)});
    Z1.B(null,yv,function(a,b,c){if(RI(b)){var d=qg(c),e=u.h(d,fD);d=u.h(d,zG);var f=T1(a,$Q(a,d),DI(c),!1),g=H(f,0,null);f=H(f,1,null);a=new S(null,2,5,T,[g,De.l(f,M1(b,e,d),F([NI(LY(vI(Cq.g(a)),d),He.j(c,Yv,aA))]))],null);}else b=qg(c),b=u.h(b,zG),b=ZQ.h(a,b),a=n(b)?T1(a,b,DI(c),!1):null;return a});Z1.B(null,bv,function(a,b,c){return P1(a,b,c)});Z1.B(null,WF,function(a,b,c){return O1(a,b,c)});Z1.B(null,yu,function(a,b,c){return R1(a,b,c)});Z1.B(null,Ks,function(a,b,c){return S1(a,b,c)});
    Z1.B(null,So,function(a,b,c){return Q1(a,b,c)});Z1.B(null,LB,function(a,b){return Y1(a,b)});Z1.B(null,Tk,function(a,b,c){TU(Px,"gateway.domains.context.core",209,new Dk(function(){return new S(null,2,5,T,["Unhandled message",c],null)}),-1431009604);return new S(null,2,5,T,[a,new S(null,1,5,T,[N1(b,fD.h(c,-1),zG.g(c),EI([p.g("context"),".errors.unhandled_message"].join(""),["Unhandled message ",p.g(c)].join("")))],null)],null)});
    function $1(a,b){var c=qg(b),d=u.h(c,mt);c=u.h(c,bp);try{return Z1.j(a,d,c)}catch(f){var e=f;n(rl(e))||TU(Px,"gateway.domains.context.core",226,new Dk(function(){return new S(null,3,5,T,[e,"Error handling request",b],null)}),-1692403590);return RI(d)?new S(null,2,5,T,[a,new S(null,1,5,T,[N1(d,fD.g(c),zG.g(c),BI(e,"context.errors.failure"))],null)],null):null}}function a2(){}a2.prototype.cd=function(){return new k(null,3,[SC,"context",Cr,"",nD,2],null)};a2.prototype.dd=function(a,b){return b};
    a2.prototype.ad=function(a,b){return b};a2.prototype.bd=function(a,b,c){return $1(b,c)};var b2=function(){var a=Vg(R),b=Vg(R),c=Vg(R),d=Vg(R),e=u.j(R,su,Wk.v?Wk.v():Wk.call(null));return new jl(Nd.h("gateway.basic-auth.core","authenticate"),function(f){return th.h(f,new S(null,2,5,T,[qu,sw],null))},e,a,b,c,d)}();b2.B(null,"secret",function(a,b,c){return QW(XW(a),function(d){var e=UX(new k(null,2,[Kr,Kr.g(d),$l,yf(kI()+c,1E3)],null),b);return He.j(d,Vp,e)})});
    b2.B(null,"access-token",function(a,b){try{var c=th.h(a,new S(null,2,5,T,[qu,Pl],null)),d=Kr.g(TX.j(c,b,new k(null,1,[nv,yf(kI(),1E3)],null)));return NW.resolve(new k(null,4,[Yv,vC,uz,d,Kr,d,Vp,c],null))}catch(f){var e=f;TU(vt,"gateway.basic-auth.core",37,new Dk(function(){return new S(null,2,5,T,[e,"Error processing access token authentication request"],null)}),-2094989234);return NW.reject(ol(sl(e),new k(null,2,[Yv,tx,Nr,["Invalid or expired token: ",p.g(sl(e))].join("")],null)))}});
    b2.B(null,Tk,function(a){a=th.h(a,new S(null,2,5,T,[qu,sw],null));var b=["Unknown authentication method ",p.g(a)].join("");TU(vt,"gateway.basic-auth.core",44,new Dk(function(){return new S(null,1,5,T,[b],null)}),-1674206715);return NW.reject(ol(b,new k(null,2,[Yv,tx,Nr,b],null)))});function c2(a,b){this.fi=a;this.ii=b;}c2.prototype.hf=function(a,b){return b2.j(b,this.fi,this.ii)};function d2(a,b){return new c2(a,b)}
    function e2(){var a=R;TU(BD,"gateway.basic-auth.core",57,new Dk(function(){return new S(null,2,5,T,["creating basic authenticator with configuration",a],null)}),1816689796);return bY(a,d2(uI(),1E3*Iw.h(a,6E4)))}var f2={},g2={},q2;(function(a){return PV(function(b){return He.j(b,Ay,a)})})(BD);var B1=new k(null,1,[pB,(new Date).getTime()],null);function i2(a){return new k(null,6,[ZB,!0,nw,!1,Ay,null,vy,null,Bo,UE,Vr,function(b){b={time:Qu.g(b),level:Rf(nE.g(b)),namespace:wy.g(b),file:PG.g(b),line:ap.g(b),stacktrace:Ts.g(b),message:Hk(sn.g(b)),output:Hk(yo.g(b))};return a.g?a.g(b):a.call(null,b)}],null)}
    pa("gateway_web.core.configure_logging",function(a){a=Sk(a,F([Ck,!0]));var b=new k(null,2,[nE,BD,pA,new k(null,1,[Gt,JV.g?JV.g(R):JV.call(null,R)],null)],null);b=n(nE.g(a))?He.j(b,nE,Qf.g(nE.g(a))):b;b=n(ps.g(a))?He.j(b,Uw,ps.g(a)):b;b=n(ZF.g(a))?He.j(b,Lq,ZF.g(a)):b;a=n(Yw.g(a))?uh(b,new S(null,2,5,T,[pA,Gt],null),i2(Yw.g(a))):b;return QV(a)});
    function j2(a){a=th.h(a,new S(null,2,5,T,[qu,qt],null));return n(a)?(TU(BD,"gateway-web.core",65,new Dk(function(){return new S(null,1,5,T,["will be using custom JS authenticator"],null)}),1484537673),new k(null,2,[Tk,Wv,Aw,new k(null,1,[Wv,bY(R,new cY(a))],null)],null)):new k(null,2,[Tk,Wv,Aw,new k(null,1,[Wv,e2()],null)],null)}
    var k2=function k2(a,b,c,d,e){return n(function(){var g=r(a);return n(g)?0<e:g}())?(rW(c,d,(new Date).getTime()-1E3*e),Yg.h(b,function(){return JW(function(){return k2.R?k2.R(a,b,c,d,e):k2.call(null,a,b,c,d,e)})})):null};
    function l2(a){var b=ft.g(r(a));TU(BD,"gateway-web.core",82,new Dk(function(){return new S(null,2,5,T,["starting gateway with configuration",b],null)}),1523345153);Yg.h(a,function(c){var d=j2(b),e=new S(null,6,5,T,[new FZ,new S0,new g1(d),new K1,new a2,A1()],null);e=mY(e);var f=Vg(R),g=Vg(null),l=Vg(!0),m=th.j(b,new S(null,2,5,T,[xw,gz],null),60);0<m&&(TU(BD,"gateway-web.core",97,new Dk(function(){return new S(null,3,5,T,["clients inactive for",m,"will be scavenged"],null)}),-478238905),k2(l,g,f,
    e,m));return He.l(c,rE,l,F([ku,d,Mt,e,xw,f,eA,g]))});}
    function m2(a){TU(BD,"gateway-web.core",115,new Dk(function(){return new S(null,1,5,T,["stopping gateway"],null)}),-785453270);Yg.h(a,function(b){Yg.h(rE.g(b),Og(!1));var c=eA.g(b);c=null==c?null:r(c);null!=c&&DW(c);c=Mt.g(b);null!=c&&dW(c);c=ku.g(b);if(null!=c)a:{c=z(ui(Aw.g(c)));for(var d=null,e=0,f=0;;)if(f<e){var g=d.V(null,f);WW(g);f+=1;}else if(c=z(c))d=c,Ze(d)?(c=pd(d),e=qd(d),d=c,g=D(c),c=e,e=g):(g=A(d),WW(g),c=C(d),d=null,e=0),f=0;else break a}return new k(null,1,[ft,ft.g(b)],null)});}
    pa("gateway_web.core.create",function(a){var b=Vg(new k(null,1,[ft,yL(Rk(a))],null));if("undefined"===typeof f2||"undefined"===typeof g2||"undefined"===typeof q2)q2=function(c,d,e){this.Sg=c;this.sd=d;this.Kh=e;this.C=393216;this.O=0;},q2.prototype.U=function(c,d){return new q2(this.Sg,this.sd,d)},q2.prototype.T=function(){return this.Kh},q2.prototype.start=function(){var c=this,d=this;return new Promise(function(e){l2(c.sd);return e.g?e.g(d):e.call(null,d)})},q2.prototype.stop=function(){var c=this,
    d=this;return new Promise(function(e){m2(c.sd);return e.g?e.g(d):e.call(null,d)})},q2.prototype.connect=function(c){return xW(this.sd,c)},q2.Za=!0,q2.Xa="gateway-web.core/t_gateway_web$core24091",q2.ab=function(c){return ad(c,"gateway-web.core/t_gateway_web$core24091")};return new q2(a,b,R)});
    }).call(commonjsGlobal);

    class Gateway {
        constructor() {
            this.configureLogging = window.gateway_web.core.configure_logging;
            this.create = window.gateway_web.core.create;
        }
        start(config) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (config === null || config === void 0 ? void 0 : config.logging) {
                    this.configureLogging({
                        level: config.logging.level,
                        appender: config.logging.appender
                    });
                }
                const buffer_size = typeof ((_a = config === null || config === void 0 ? void 0 : config.clients) === null || _a === void 0 ? void 0 : _a.buffer_size) === "number" ? config.clients.buffer_size : 1000;
                this._gatewayWebInstance = this.create({ clients: { inactive_seconds: 0, buffer_size } });
                yield this._gatewayWebInstance.start();
            });
        }
        connectClient(clientPort) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const client = yield this._gatewayWebInstance.connect((_, message) => clientPort.postMessage(message));
                return client;
            });
        }
        connectExtClient(port, removeFromPlatform) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const client = yield this._gatewayWebInstance.connect((_, message) => port.postMessage({ glue42ExtInc: message }));
                port.onMessage.addListener((message) => {
                    var _a;
                    const coreData = (_a = message === null || message === void 0 ? void 0 : message.glue42ExtOut) === null || _a === void 0 ? void 0 : _a.glue42core;
                    if (coreData && coreData.type === Glue42CoreMessageTypes.clientUnload.name) {
                        client.disconnect();
                        port.disconnect();
                        if (removeFromPlatform) {
                            removeFromPlatform(coreData.data.clientId, true);
                        }
                        return;
                    }
                    if (message.glue42ExtOut && !coreData) {
                        const msg = message.glue42ExtOut;
                        client.send(msg);
                        return;
                    }
                });
            });
        }
        setupInternalClient(clientPort) {
            return __awaiter$3(this, void 0, void 0, function* () {
                let client;
                clientPort.onmessage = (event) => __awaiter$3(this, void 0, void 0, function* () {
                    var _a;
                    const data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
                    if (data && data.type === Glue42CoreMessageTypes.gatewayInternalConnect.name) {
                        client = yield this.handleInternalGatewayConnectionRequest(clientPort);
                        return;
                    }
                    if (!client || clientPort.closed) {
                        return;
                    }
                    if (data && data.type === Glue42CoreMessageTypes.gatewayDisconnect.name) {
                        clientPort.closed = true;
                        client === null || client === void 0 ? void 0 : client.disconnect();
                        return;
                    }
                    client === null || client === void 0 ? void 0 : client.send(event.data);
                });
            });
        }
        handleInternalGatewayConnectionRequest(clientPort) {
            return __awaiter$3(this, void 0, void 0, function* () {
                clientPort.closed = false;
                try {
                    const client = yield this._gatewayWebInstance.connect((_, message) => clientPort.postMessage(message));
                    clientPort.postMessage({
                        glue42core: {
                            type: Glue42CoreMessageTypes.gatewayInternalConnect.name,
                            success: true
                        }
                    });
                    return client;
                }
                catch (err) {
                    const stringError = typeof err === "string" ? err : JSON.stringify(err.message);
                    clientPort.postMessage({
                        glue42core: {
                            type: Glue42CoreMessageTypes.gatewayInternalConnect.name,
                            error: stringError
                        }
                    });
                    return;
                }
            });
        }
    }

    class PlatformLogger {
        setLogger(logger) {
            this._logger = logger;
        }
        get(subSystem) {
            if (!this._logger) {
                return;
            }
            return this._logger.subLogger(subSystem);
        }
    }
    var logger = new PlatformLogger();

    var shortidExports$1 = {};
    var shortid$3 = {
      get exports(){ return shortidExports$1; },
      set exports(v){ shortidExports$1 = v; },
    };

    var libExports$1 = {};
    var lib$3 = {
      get exports(){ return libExports$1; },
      set exports(v){ libExports$1 = v; },
    };

    // Found this seed-based random generator somewhere
    // Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

    var seed$1 = 1;

    /**
     * return a random number based on a seed
     * @param seed
     * @returns {number}
     */
    function getNextValue$1() {
        seed$1 = (seed$1 * 9301 + 49297) % 233280;
        return seed$1/(233280.0);
    }

    function setSeed$3(_seed_) {
        seed$1 = _seed_;
    }

    var randomFromSeed$3 = {
        nextValue: getNextValue$1,
        seed: setSeed$3
    };

    var randomFromSeed$2 = randomFromSeed$3;

    var ORIGINAL$1 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
    var alphabet$5;
    var previousSeed$1;

    var shuffled$1;

    function reset$1() {
        shuffled$1 = false;
    }

    function setCharacters$1(_alphabet_) {
        if (!_alphabet_) {
            if (alphabet$5 !== ORIGINAL$1) {
                alphabet$5 = ORIGINAL$1;
                reset$1();
            }
            return;
        }

        if (_alphabet_ === alphabet$5) {
            return;
        }

        if (_alphabet_.length !== ORIGINAL$1.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL$1.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
        }

        var unique = _alphabet_.split('').filter(function(item, ind, arr){
           return ind !== arr.lastIndexOf(item);
        });

        if (unique.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL$1.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
        }

        alphabet$5 = _alphabet_;
        reset$1();
    }

    function characters$1(_alphabet_) {
        setCharacters$1(_alphabet_);
        return alphabet$5;
    }

    function setSeed$2(seed) {
        randomFromSeed$2.seed(seed);
        if (previousSeed$1 !== seed) {
            reset$1();
            previousSeed$1 = seed;
        }
    }

    function shuffle$1() {
        if (!alphabet$5) {
            setCharacters$1(ORIGINAL$1);
        }

        var sourceArray = alphabet$5.split('');
        var targetArray = [];
        var r = randomFromSeed$2.nextValue();
        var characterIndex;

        while (sourceArray.length > 0) {
            r = randomFromSeed$2.nextValue();
            characterIndex = Math.floor(r * sourceArray.length);
            targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
        }
        return targetArray.join('');
    }

    function getShuffled$1() {
        if (shuffled$1) {
            return shuffled$1;
        }
        shuffled$1 = shuffle$1();
        return shuffled$1;
    }

    /**
     * lookup shuffled letter
     * @param index
     * @returns {string}
     */
    function lookup$1(index) {
        var alphabetShuffled = getShuffled$1();
        return alphabetShuffled[index];
    }

    function get$1 () {
      return alphabet$5 || ORIGINAL$1;
    }

    var alphabet_1$1 = {
        get: get$1,
        characters: characters$1,
        seed: setSeed$2,
        lookup: lookup$1,
        shuffled: getShuffled$1
    };

    var crypto$2 = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

    var randomByte$1;

    if (!crypto$2 || !crypto$2.getRandomValues) {
        randomByte$1 = function(size) {
            var bytes = [];
            for (var i = 0; i < size; i++) {
                bytes.push(Math.floor(Math.random() * 256));
            }
            return bytes;
        };
    } else {
        randomByte$1 = function(size) {
            return crypto$2.getRandomValues(new Uint8Array(size));
        };
    }

    var randomByteBrowser$1 = randomByte$1;

    // This file replaces `format.js` in bundlers like webpack or Rollup,
    // according to `browser` config in `package.json`.

    var format_browser$1 = function (random, alphabet, size) {
      // We can’t use bytes bigger than the alphabet. To make bytes values closer
      // to the alphabet, we apply bitmask on them. We look for the closest
      // `2 ** x - 1` number, which will be bigger than alphabet size. If we have
      // 30 symbols in the alphabet, we will take 31 (00011111).
      // We do not use faster Math.clz32, because it is not available in browsers.
      var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
      // Bitmask is not a perfect solution (in our example it will pass 31 bytes,
      // which is bigger than the alphabet). As a result, we will need more bytes,
      // than ID size, because we will refuse bytes bigger than the alphabet.

      // Every hardware random generator call is costly,
      // because we need to wait for entropy collection. This is why often it will
      // be faster to ask for few extra bytes in advance, to avoid additional calls.

      // Here we calculate how many random bytes should we call in advance.
      // It depends on ID length, mask / alphabet size and magic number 1.6
      // (which was selected according benchmarks).

      // -~f => Math.ceil(f) if n is float number
      // -~i => i + 1 if n is integer number
      var step = -~(1.6 * mask * size / alphabet.length);
      var id = '';

      while (true) {
        var bytes = random(step);
        // Compact alternative for `for (var i = 0; i < step; i++)`
        var i = step;
        while (i--) {
          // If random byte is bigger than alphabet even after bitmask,
          // we refuse it by `|| ''`.
          id += alphabet[bytes[i] & mask] || '';
          // More compact than `id.length + 1 === size`
          if (id.length === +size) return id
        }
      }
    };

    var alphabet$4 = alphabet_1$1;
    var random$1 = randomByteBrowser$1;
    var format$1 = format_browser$1;

    function generate$3(number) {
        var loopCounter = 0;
        var done;

        var str = '';

        while (!done) {
            str = str + format$1(random$1, alphabet$4.get(), 1);
            done = number < (Math.pow(16, loopCounter + 1 ) );
            loopCounter++;
        }
        return str;
    }

    var generate_1$1 = generate$3;

    var generate$2 = generate_1$1;

    // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
    // This number should be updated every year or so to keep the generated id short.
    // To regenerate `new Date() - 0` and bump the version. Always bump the version!
    var REDUCE_TIME$1 = 1567752802062;

    // don't change unless we change the algos or REDUCE_TIME
    // must be an integer and less than 16
    var version$3 = 7;

    // Counter is used when shortid is called multiple times in one second.
    var counter$1;

    // Remember the last time shortid was called in case counter is needed.
    var previousSeconds$1;

    /**
     * Generate unique id
     * Returns string id
     */
    function build$1(clusterWorkerId) {
        var str = '';

        var seconds = Math.floor((Date.now() - REDUCE_TIME$1) * 0.001);

        if (seconds === previousSeconds$1) {
            counter$1++;
        } else {
            counter$1 = 0;
            previousSeconds$1 = seconds;
        }

        str = str + generate$2(version$3);
        str = str + generate$2(clusterWorkerId);
        if (counter$1 > 0) {
            str = str + generate$2(counter$1);
        }
        str = str + generate$2(seconds);
        return str;
    }

    var build_1$1 = build$1;

    var alphabet$3 = alphabet_1$1;

    function isShortId$1(id) {
        if (!id || typeof id !== 'string' || id.length < 6 ) {
            return false;
        }

        var nonAlphabetic = new RegExp('[^' +
          alphabet$3.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') +
        ']');
        return !nonAlphabetic.test(id);
    }

    var isValid$1 = isShortId$1;

    (function (module) {

    	var alphabet = alphabet_1$1;
    	var build = build_1$1;
    	var isValid = isValid$1;

    	// if you are using cluster or multiple servers use this to make each instance
    	// has a unique value for worker
    	// Note: I don't know if this is automatically set when using third
    	// party cluster solutions such as pm2.
    	var clusterWorkerId = 0;

    	/**
    	 * Set the seed.
    	 * Highly recommended if you don't want people to try to figure out your id schema.
    	 * exposed as shortid.seed(int)
    	 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
    	 */
    	function seed(seedValue) {
    	    alphabet.seed(seedValue);
    	    return module.exports;
    	}

    	/**
    	 * Set the cluster worker or machine id
    	 * exposed as shortid.worker(int)
    	 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
    	 * returns shortid module so it can be chained.
    	 */
    	function worker(workerId) {
    	    clusterWorkerId = workerId;
    	    return module.exports;
    	}

    	/**
    	 *
    	 * sets new characters to use in the alphabet
    	 * returns the shuffled alphabet
    	 */
    	function characters(newCharacters) {
    	    if (newCharacters !== undefined) {
    	        alphabet.characters(newCharacters);
    	    }

    	    return alphabet.shuffled();
    	}

    	/**
    	 * Generate unique id
    	 * Returns string id
    	 */
    	function generate() {
    	  return build(clusterWorkerId);
    	}

    	// Export all other functions as properties of the generate function
    	module.exports = generate;
    	module.exports.generate = generate;
    	module.exports.seed = seed;
    	module.exports.worker = worker;
    	module.exports.characters = characters;
    	module.exports.isValid = isValid;
    } (lib$3));

    (function (module) {
    	module.exports = libExports$1;
    } (shortid$3));

    var shortid$2 = /*@__PURE__*/getDefaultExportFromCjs$1(shortidExports$1);

    class PlatformController {
        constructor(domainsController, glueController, portsBridge, stateController, serviceWorkerController, preferredConnectionController, interceptionController, pluginsController) {
            this.domainsController = domainsController;
            this.glueController = glueController;
            this.portsBridge = portsBridge;
            this.stateController = stateController;
            this.serviceWorkerController = serviceWorkerController;
            this.preferredConnectionController = preferredConnectionController;
            this.interceptionController = interceptionController;
            this.pluginsController = pluginsController;
        }
        get logger() {
            return logger.get("main.web.platform");
        }
        get ctxTrackingGlue() {
            return this.glueController.contextsTrackingGlue;
        }
        get systemGlue() {
            return this.glueController.systemGlue;
        }
        get platformApi() {
            return this._platformApi;
        }
        start(config) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                yield this.portsBridge.configure(config);
                this.portsBridge.onClientUnloaded(this.handleClientUnloaded.bind(this));
                yield this.glueController.start(config);
                yield Promise.all([
                    this.glueController.createPlatformSystemMethod(this.handleClientMessage.bind(this)),
                    this.glueController.createPlatformSystemStream()
                ]);
                this.stateController.start();
                yield this.domainsController.startAllDomains(config);
                yield this.glueController.initClientGlue(config === null || config === void 0 ? void 0 : config.glue, config === null || config === void 0 ? void 0 : config.glueFactory, (_a = config === null || config === void 0 ? void 0 : config.workspaces) === null || _a === void 0 ? void 0 : _a.isFrame);
                yield this.serviceWorkerController.connect(config);
                this._platformApi = this.buildPlatformApi(config);
                yield this.pluginsController.startCorePlus(config);
                yield this.pluginsController.start({
                    platformConfig: config,
                    plugins: (_b = config.plugins) === null || _b === void 0 ? void 0 : _b.definitions,
                    api: this.platformApi,
                    handlePluginMessage: this.handlePluginMessage.bind(this)
                });
                if (config.connection.preferred) {
                    yield this.preferredConnectionController.start(config.connection.preferred);
                }
                this.serviceWorkerController.notifyReady();
                this.portsBridge.start();
            });
        }
        getClientGlue() {
            return this.glueController.clientGlue;
        }
        handleClientMessage(args, caller, success, error) {
            this.processControllerCommand(args, "client", caller.instance)
                .then((result) => success(result))
                .catch((err) => error(err));
        }
        handlePluginMessage(args, pluginName) {
            return __awaiter$3(this, void 0, void 0, function* () {
                return this.processControllerCommand(args, "plugin", pluginName);
            });
        }
        processControllerCommand(args, callerType, callerId) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                try {
                    this.domainsController.validateDomain(args.domain);
                }
                catch (error) {
                    const errString = JSON.stringify(error);
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`rejecting execution of a command issued by a ${callerType}: ${callerId}, because of a domain validation error: ${errString}`);
                    throw new Error(`Cannot execute this platform control, because of domain validation error: ${errString}`);
                }
                const controlMessage = Object.assign({}, args, {
                    commandId: shortidExports$1.generate(),
                    callerId, callerType
                });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${controlMessage.commandId}] received a command for a valid domain: ${args.domain} from ${callerType}: ${callerId}, forwarding to the appropriate controller`);
                try {
                    const result = yield this.executeCommand(controlMessage);
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${controlMessage.commandId}] this command was executed successfully, sending the result to the caller.`);
                    return result;
                }
                catch (error) {
                    const stringError = typeof error === "string" ?
                        error :
                        error.message ? JSON.stringify(error.message) :
                            JSON.stringify(error);
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${controlMessage.commandId}] this command's execution was rejected, reason: ${stringError}`);
                    throw new Error(`The platform rejected operation ${controlMessage.operation} for domain: ${args.domain} with reason: ${stringError}`);
                }
            });
        }
        handleClientUnloaded(client) {
            this.domainsController.notifyDomainsClientUnloaded(client);
        }
        executeCommand(controlMessage) {
            var _a, _b;
            const interceptor = this.interceptionController.getOperationInterceptor({ domain: controlMessage.domain, operation: controlMessage.operation });
            if (interceptor && !((_a = controlMessage.settings) === null || _a === void 0 ? void 0 : _a.skipInterception)) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${controlMessage.commandId}] The operation is being intercepted and executed by: ${interceptor.name}`);
                return interceptor.intercept(controlMessage);
            }
            return this.domainsController.executeControlMessage(controlMessage);
        }
        buildPlatformApi(config) {
            return {
                version: this.glueController.platformVersion,
                corePlus: config.corePlus ? { version: config.corePlus.version } : undefined,
                contextTrackGlue: this.ctxTrackingGlue,
                systemGlue: this.systemGlue,
                connectExtClient: (client, port) => {
                    return this.connectExtClient(client, port);
                },
                onSystemReconnect: (callback) => {
                    return this.onSystemReconnect(callback);
                }
            };
        }
        connectExtClient(client, port) {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield this.portsBridge.handleExtConnectionRequest(client, port);
            });
        }
        onSystemReconnect(callback) {
            return this.preferredConnectionController.onReconnect(callback);
        }
    }

    /**
     * Wraps values in an `Ok` type.
     *
     * Example: `ok(5) // => {ok: true, result: 5}`
     */
    var ok = function (result) { return ({ ok: true, result: result }); };
    /**
     * Wraps errors in an `Err` type.
     *
     * Example: `err('on fire') // => {ok: false, error: 'on fire'}`
     */
    var err = function (error) { return ({ ok: false, error: error }); };
    /**
     * Create a `Promise` that either resolves with the result of `Ok` or rejects
     * with the error of `Err`.
     */
    var asPromise = function (r) {
        return r.ok === true ? Promise.resolve(r.result) : Promise.reject(r.error);
    };
    /**
     * Unwraps a `Result` and returns either the result of an `Ok`, or
     * `defaultValue`.
     *
     * Example:
     * ```
     * Result.withDefault(5, number().run(json))
     * ```
     *
     * It would be nice if `Decoder` had an instance method that mirrored this
     * function. Such a method would look something like this:
     * ```
     * class Decoder<A> {
     *   runWithDefault = (defaultValue: A, json: any): A =>
     *     Result.withDefault(defaultValue, this.run(json));
     * }
     *
     * number().runWithDefault(5, json)
     * ```
     * Unfortunately, the type of `defaultValue: A` on the method causes issues
     * with type inference on  the `object` decoder in some situations. While these
     * inference issues can be solved by providing the optional type argument for
     * `object`s, the extra trouble and confusion doesn't seem worth it.
     */
    var withDefault = function (defaultValue, r) {
        return r.ok === true ? r.result : defaultValue;
    };
    /**
     * Return the successful result, or throw an error.
     */
    var withException = function (r) {
        if (r.ok === true) {
            return r.result;
        }
        else {
            throw r.error;
        }
    };
    /**
     * Apply `f` to the result of an `Ok`, or pass the error through.
     */
    var map = function (f, r) {
        return r.ok === true ? ok(f(r.result)) : r;
    };
    /**
     * Apply `f` to the result of two `Ok`s, or pass an error through. If both
     * `Result`s are errors then the first one is returned.
     */
    var map2 = function (f, ar, br) {
        return ar.ok === false ? ar :
            br.ok === false ? br :
                ok(f(ar.result, br.result));
    };
    /**
     * Apply `f` to the error of an `Err`, or pass the success through.
     */
    var mapError = function (f, r) {
        return r.ok === true ? r : err(f(r.error));
    };
    /**
     * Chain together a sequence of computations that may fail, similar to a
     * `Promise`. If the first computation fails then the error will propagate
     * through. If it succeeds, then `f` will be applied to the value, returning a
     * new `Result`.
     */
    var andThen = function (f, r) {
        return r.ok === true ? f(r.result) : r;
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */



    var __assign$1 = function() {
        __assign$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function isEqual(a, b) {
        if (a === b) {
            return true;
        }
        if (a === null && b === null) {
            return true;
        }
        if (typeof (a) !== typeof (b)) {
            return false;
        }
        if (typeof (a) === 'object') {
            // Array
            if (Array.isArray(a)) {
                if (!Array.isArray(b)) {
                    return false;
                }
                if (a.length !== b.length) {
                    return false;
                }
                for (var i = 0; i < a.length; i++) {
                    if (!isEqual(a[i], b[i])) {
                        return false;
                    }
                }
                return true;
            }
            // Hash table
            var keys = Object.keys(a);
            if (keys.length !== Object.keys(b).length) {
                return false;
            }
            for (var i = 0; i < keys.length; i++) {
                if (!b.hasOwnProperty(keys[i])) {
                    return false;
                }
                if (!isEqual(a[keys[i]], b[keys[i]])) {
                    return false;
                }
            }
            return true;
        }
    }
    /*
     * Helpers
     */
    var isJsonArray = function (json) { return Array.isArray(json); };
    var isJsonObject = function (json) {
        return typeof json === 'object' && json !== null && !isJsonArray(json);
    };
    var typeString = function (json) {
        switch (typeof json) {
            case 'string':
                return 'a string';
            case 'number':
                return 'a number';
            case 'boolean':
                return 'a boolean';
            case 'undefined':
                return 'undefined';
            case 'object':
                if (json instanceof Array) {
                    return 'an array';
                }
                else if (json === null) {
                    return 'null';
                }
                else {
                    return 'an object';
                }
            default:
                return JSON.stringify(json);
        }
    };
    var expectedGot = function (expected, got) {
        return "expected " + expected + ", got " + typeString(got);
    };
    var printPath = function (paths) {
        return paths.map(function (path) { return (typeof path === 'string' ? "." + path : "[" + path + "]"); }).join('');
    };
    var prependAt = function (newAt, _a) {
        var at = _a.at, rest = __rest(_a, ["at"]);
        return (__assign$1({ at: newAt + (at || '') }, rest));
    };
    /**
     * Decoders transform json objects with unknown structure into known and
     * verified forms. You can create objects of type `Decoder<A>` with either the
     * primitive decoder functions, such as `boolean()` and `string()`, or by
     * applying higher-order decoders to the primitives, such as `array(boolean())`
     * or `dict(string())`.
     *
     * Each of the decoder functions are available both as a static method on
     * `Decoder` and as a function alias -- for example the string decoder is
     * defined at `Decoder.string()`, but is also aliased to `string()`. Using the
     * function aliases exported with the library is recommended.
     *
     * `Decoder` exposes a number of 'run' methods, which all decode json in the
     * same way, but communicate success and failure in different ways. The `map`
     * and `andThen` methods modify decoders without having to call a 'run' method.
     *
     * Alternatively, the main decoder `run()` method returns an object of type
     * `Result<A, DecoderError>`. This library provides a number of helper
     * functions for dealing with the `Result` type, so you can do all the same
     * things with a `Result` as with the decoder methods.
     */
    var Decoder = /** @class */ (function () {
        /**
         * The Decoder class constructor is kept private to separate the internal
         * `decode` function from the external `run` function. The distinction
         * between the two functions is that `decode` returns a
         * `Partial<DecoderError>` on failure, which contains an unfinished error
         * report. When `run` is called on a decoder, the relevant series of `decode`
         * calls is made, and then on failure the resulting `Partial<DecoderError>`
         * is turned into a `DecoderError` by filling in the missing information.
         *
         * While hiding the constructor may seem restrictive, leveraging the
         * provided decoder combinators and helper functions such as
         * `andThen` and `map` should be enough to build specialized decoders as
         * needed.
         */
        function Decoder(decode) {
            var _this = this;
            this.decode = decode;
            /**
             * Run the decoder and return a `Result` with either the decoded value or a
             * `DecoderError` containing the json input, the location of the error, and
             * the error message.
             *
             * Examples:
             * ```
             * number().run(12)
             * // => {ok: true, result: 12}
             *
             * string().run(9001)
             * // =>
             * // {
             * //   ok: false,
             * //   error: {
             * //     kind: 'DecoderError',
             * //     input: 9001,
             * //     at: 'input',
             * //     message: 'expected a string, got 9001'
             * //   }
             * // }
             * ```
             */
            this.run = function (json) {
                return mapError(function (error) { return ({
                    kind: 'DecoderError',
                    input: json,
                    at: 'input' + (error.at || ''),
                    message: error.message || ''
                }); }, _this.decode(json));
            };
            /**
             * Run the decoder as a `Promise`.
             */
            this.runPromise = function (json) { return asPromise(_this.run(json)); };
            /**
             * Run the decoder and return the value on success, or throw an exception
             * with a formatted error string.
             */
            this.runWithException = function (json) { return withException(_this.run(json)); };
            /**
             * Construct a new decoder that applies a transformation to the decoded
             * result. If the decoder succeeds then `f` will be applied to the value. If
             * it fails the error will propagated through.
             *
             * Example:
             * ```
             * number().map(x => x * 5).run(10)
             * // => {ok: true, result: 50}
             * ```
             */
            this.map = function (f) {
                return new Decoder(function (json) { return map(f, _this.decode(json)); });
            };
            /**
             * Chain together a sequence of decoders. The first decoder will run, and
             * then the function will determine what decoder to run second. If the result
             * of the first decoder succeeds then `f` will be applied to the decoded
             * value. If it fails the error will propagate through.
             *
             * This is a very powerful method -- it can act as both the `map` and `where`
             * methods, can improve error messages for edge cases, and can be used to
             * make a decoder for custom types.
             *
             * Example of adding an error message:
             * ```
             * const versionDecoder = valueAt(['version'], number());
             * const infoDecoder3 = object({a: boolean()});
             *
             * const decoder = versionDecoder.andThen(version => {
             *   switch (version) {
             *     case 3:
             *       return infoDecoder3;
             *     default:
             *       return fail(`Unable to decode info, version ${version} is not supported.`);
             *   }
             * });
             *
             * decoder.run({version: 3, a: true})
             * // => {ok: true, result: {a: true}}
             *
             * decoder.run({version: 5, x: 'abc'})
             * // =>
             * // {
             * //   ok: false,
             * //   error: {... message: 'Unable to decode info, version 5 is not supported.'}
             * // }
             * ```
             *
             * Example of decoding a custom type:
             * ```
             * // nominal type for arrays with a length of at least one
             * type NonEmptyArray<T> = T[] & { __nonEmptyArrayBrand__: void };
             *
             * const nonEmptyArrayDecoder = <T>(values: Decoder<T>): Decoder<NonEmptyArray<T>> =>
             *   array(values).andThen(arr =>
             *     arr.length > 0
             *       ? succeed(createNonEmptyArray(arr))
             *       : fail(`expected a non-empty array, got an empty array`)
             *   );
             * ```
             */
            this.andThen = function (f) {
                return new Decoder(function (json) {
                    return andThen(function (value) { return f(value).decode(json); }, _this.decode(json));
                });
            };
            /**
             * Add constraints to a decoder _without_ changing the resulting type. The
             * `test` argument is a predicate function which returns true for valid
             * inputs. When `test` fails on an input, the decoder fails with the given
             * `errorMessage`.
             *
             * ```
             * const chars = (length: number): Decoder<string> =>
             *   string().where(
             *     (s: string) => s.length === length,
             *     `expected a string of length ${length}`
             *   );
             *
             * chars(5).run('12345')
             * // => {ok: true, result: '12345'}
             *
             * chars(2).run('HELLO')
             * // => {ok: false, error: {... message: 'expected a string of length 2'}}
             *
             * chars(12).run(true)
             * // => {ok: false, error: {... message: 'expected a string, got a boolean'}}
             * ```
             */
            this.where = function (test, errorMessage) {
                return _this.andThen(function (value) { return (test(value) ? Decoder.succeed(value) : Decoder.fail(errorMessage)); });
            };
        }
        /**
         * Decoder primitive that validates strings, and fails on all other input.
         */
        Decoder.string = function () {
            return new Decoder(function (json) {
                return typeof json === 'string'
                    ? ok(json)
                    : err({ message: expectedGot('a string', json) });
            });
        };
        /**
         * Decoder primitive that validates numbers, and fails on all other input.
         */
        Decoder.number = function () {
            return new Decoder(function (json) {
                return typeof json === 'number'
                    ? ok(json)
                    : err({ message: expectedGot('a number', json) });
            });
        };
        /**
         * Decoder primitive that validates booleans, and fails on all other input.
         */
        Decoder.boolean = function () {
            return new Decoder(function (json) {
                return typeof json === 'boolean'
                    ? ok(json)
                    : err({ message: expectedGot('a boolean', json) });
            });
        };
        Decoder.constant = function (value) {
            return new Decoder(function (json) {
                return isEqual(json, value)
                    ? ok(value)
                    : err({ message: "expected " + JSON.stringify(value) + ", got " + JSON.stringify(json) });
            });
        };
        Decoder.object = function (decoders) {
            return new Decoder(function (json) {
                if (isJsonObject(json) && decoders) {
                    var obj = {};
                    for (var key in decoders) {
                        if (decoders.hasOwnProperty(key)) {
                            var r = decoders[key].decode(json[key]);
                            if (r.ok === true) {
                                // tslint:disable-next-line:strict-type-predicates
                                if (r.result !== undefined) {
                                    obj[key] = r.result;
                                }
                            }
                            else if (json[key] === undefined) {
                                return err({ message: "the key '" + key + "' is required but was not present" });
                            }
                            else {
                                return err(prependAt("." + key, r.error));
                            }
                        }
                    }
                    return ok(obj);
                }
                else if (isJsonObject(json)) {
                    return ok(json);
                }
                else {
                    return err({ message: expectedGot('an object', json) });
                }
            });
        };
        Decoder.array = function (decoder) {
            return new Decoder(function (json) {
                if (isJsonArray(json) && decoder) {
                    var decodeValue_1 = function (v, i) {
                        return mapError(function (err$$1) { return prependAt("[" + i + "]", err$$1); }, decoder.decode(v));
                    };
                    return json.reduce(function (acc, v, i) {
                        return map2(function (arr, result) { return arr.concat([result]); }, acc, decodeValue_1(v, i));
                    }, ok([]));
                }
                else if (isJsonArray(json)) {
                    return ok(json);
                }
                else {
                    return err({ message: expectedGot('an array', json) });
                }
            });
        };
        Decoder.tuple = function (decoders) {
            return new Decoder(function (json) {
                if (isJsonArray(json)) {
                    if (json.length !== decoders.length) {
                        return err({
                            message: "expected a tuple of length " + decoders.length + ", got one of length " + json.length
                        });
                    }
                    var result = [];
                    for (var i = 0; i < decoders.length; i++) {
                        var nth = decoders[i].decode(json[i]);
                        if (nth.ok) {
                            result[i] = nth.result;
                        }
                        else {
                            return err(prependAt("[" + i + "]", nth.error));
                        }
                    }
                    return ok(result);
                }
                else {
                    return err({ message: expectedGot("a tuple of length " + decoders.length, json) });
                }
            });
        };
        Decoder.union = function (ad, bd) {
            var decoders = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                decoders[_i - 2] = arguments[_i];
            }
            return Decoder.oneOf.apply(Decoder, [ad, bd].concat(decoders));
        };
        Decoder.intersection = function (ad, bd) {
            var ds = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                ds[_i - 2] = arguments[_i];
            }
            return new Decoder(function (json) {
                return [ad, bd].concat(ds).reduce(function (acc, decoder) { return map2(Object.assign, acc, decoder.decode(json)); }, ok({}));
            });
        };
        /**
         * Escape hatch to bypass validation. Always succeeds and types the result as
         * `any`. Useful for defining decoders incrementally, particularly for
         * complex objects.
         *
         * Example:
         * ```
         * interface User {
         *   name: string;
         *   complexUserData: ComplexType;
         * }
         *
         * const userDecoder: Decoder<User> = object({
         *   name: string(),
         *   complexUserData: anyJson()
         * });
         * ```
         */
        Decoder.anyJson = function () { return new Decoder(function (json) { return ok(json); }); };
        /**
         * Decoder identity function which always succeeds and types the result as
         * `unknown`.
         */
        Decoder.unknownJson = function () {
            return new Decoder(function (json) { return ok(json); });
        };
        /**
         * Decoder for json objects where the keys are unknown strings, but the values
         * should all be of the same type.
         *
         * Example:
         * ```
         * dict(number()).run({chocolate: 12, vanilla: 10, mint: 37});
         * // => {ok: true, result: {chocolate: 12, vanilla: 10, mint: 37}}
         * ```
         */
        Decoder.dict = function (decoder) {
            return new Decoder(function (json) {
                if (isJsonObject(json)) {
                    var obj = {};
                    for (var key in json) {
                        if (json.hasOwnProperty(key)) {
                            var r = decoder.decode(json[key]);
                            if (r.ok === true) {
                                obj[key] = r.result;
                            }
                            else {
                                return err(prependAt("." + key, r.error));
                            }
                        }
                    }
                    return ok(obj);
                }
                else {
                    return err({ message: expectedGot('an object', json) });
                }
            });
        };
        /**
         * Decoder for values that may be `undefined`. This is primarily helpful for
         * decoding interfaces with optional fields.
         *
         * Example:
         * ```
         * interface User {
         *   id: number;
         *   isOwner?: boolean;
         * }
         *
         * const decoder: Decoder<User> = object({
         *   id: number(),
         *   isOwner: optional(boolean())
         * });
         * ```
         */
        Decoder.optional = function (decoder) {
            return new Decoder(function (json) { return (json === undefined || json === null ? ok(undefined) : decoder.decode(json)); });
        };
        /**
         * Decoder that attempts to run each decoder in `decoders` and either succeeds
         * with the first successful decoder, or fails after all decoders have failed.
         *
         * Note that `oneOf` expects the decoders to all have the same return type,
         * while `union` creates a decoder for the union type of all the input
         * decoders.
         *
         * Examples:
         * ```
         * oneOf(string(), number().map(String))
         * oneOf(constant('start'), constant('stop'), succeed('unknown'))
         * ```
         */
        Decoder.oneOf = function () {
            var decoders = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                decoders[_i] = arguments[_i];
            }
            return new Decoder(function (json) {
                var errors = [];
                for (var i = 0; i < decoders.length; i++) {
                    var r = decoders[i].decode(json);
                    if (r.ok === true) {
                        return r;
                    }
                    else {
                        errors[i] = r.error;
                    }
                }
                var errorsList = errors
                    .map(function (error) { return "at error" + (error.at || '') + ": " + error.message; })
                    .join('", "');
                return err({
                    message: "expected a value matching one of the decoders, got the errors [\"" + errorsList + "\"]"
                });
            });
        };
        /**
         * Decoder that always succeeds with either the decoded value, or a fallback
         * default value.
         */
        Decoder.withDefault = function (defaultValue, decoder) {
            return new Decoder(function (json) {
                return ok(withDefault(defaultValue, decoder.decode(json)));
            });
        };
        /**
         * Decoder that pulls a specific field out of a json structure, instead of
         * decoding and returning the full structure. The `paths` array describes the
         * object keys and array indices to traverse, so that values can be pulled out
         * of a nested structure.
         *
         * Example:
         * ```
         * const decoder = valueAt(['a', 'b', 0], string());
         *
         * decoder.run({a: {b: ['surprise!']}})
         * // => {ok: true, result: 'surprise!'}
         *
         * decoder.run({a: {x: 'cats'}})
         * // => {ok: false, error: {... at: 'input.a.b[0]' message: 'path does not exist'}}
         * ```
         *
         * Note that the `decoder` is ran on the value found at the last key in the
         * path, even if the last key is not found. This allows the `optional`
         * decoder to succeed when appropriate.
         * ```
         * const optionalDecoder = valueAt(['a', 'b', 'c'], optional(string()));
         *
         * optionalDecoder.run({a: {b: {c: 'surprise!'}}})
         * // => {ok: true, result: 'surprise!'}
         *
         * optionalDecoder.run({a: {b: 'cats'}})
         * // => {ok: false, error: {... at: 'input.a.b.c' message: 'expected an object, got "cats"'}
         *
         * optionalDecoder.run({a: {b: {z: 1}}})
         * // => {ok: true, result: undefined}
         * ```
         */
        Decoder.valueAt = function (paths, decoder) {
            return new Decoder(function (json) {
                var jsonAtPath = json;
                for (var i = 0; i < paths.length; i++) {
                    if (jsonAtPath === undefined) {
                        return err({
                            at: printPath(paths.slice(0, i + 1)),
                            message: 'path does not exist'
                        });
                    }
                    else if (typeof paths[i] === 'string' && !isJsonObject(jsonAtPath)) {
                        return err({
                            at: printPath(paths.slice(0, i + 1)),
                            message: expectedGot('an object', jsonAtPath)
                        });
                    }
                    else if (typeof paths[i] === 'number' && !isJsonArray(jsonAtPath)) {
                        return err({
                            at: printPath(paths.slice(0, i + 1)),
                            message: expectedGot('an array', jsonAtPath)
                        });
                    }
                    else {
                        jsonAtPath = jsonAtPath[paths[i]];
                    }
                }
                return mapError(function (error) {
                    return jsonAtPath === undefined
                        ? { at: printPath(paths), message: 'path does not exist' }
                        : prependAt(printPath(paths), error);
                }, decoder.decode(jsonAtPath));
            });
        };
        /**
         * Decoder that ignores the input json and always succeeds with `fixedValue`.
         */
        Decoder.succeed = function (fixedValue) {
            return new Decoder(function (json) { return ok(fixedValue); });
        };
        /**
         * Decoder that ignores the input json and always fails with `errorMessage`.
         */
        Decoder.fail = function (errorMessage) {
            return new Decoder(function (json) { return err({ message: errorMessage }); });
        };
        /**
         * Decoder that allows for validating recursive data structures. Unlike with
         * functions, decoders assigned to variables can't reference themselves
         * before they are fully defined. We can avoid prematurely referencing the
         * decoder by wrapping it in a function that won't be called until use, at
         * which point the decoder has been defined.
         *
         * Example:
         * ```
         * interface Comment {
         *   msg: string;
         *   replies: Comment[];
         * }
         *
         * const decoder: Decoder<Comment> = object({
         *   msg: string(),
         *   replies: lazy(() => array(decoder))
         * });
         * ```
         */
        Decoder.lazy = function (mkDecoder) {
            return new Decoder(function (json) { return mkDecoder().decode(json); });
        };
        return Decoder;
    }());

    /* tslint:disable:variable-name */
    /** See `Decoder.string` */
    var string = Decoder.string;
    /** See `Decoder.number` */
    var number = Decoder.number;
    /** See `Decoder.boolean` */
    var boolean = Decoder.boolean;
    /** See `Decoder.anyJson` */
    var anyJson = Decoder.anyJson;
    /** See `Decoder.unknownJson` */
    Decoder.unknownJson;
    /** See `Decoder.constant` */
    var constant = Decoder.constant;
    /** See `Decoder.object` */
    var object = Decoder.object;
    /** See `Decoder.array` */
    var array = Decoder.array;
    /** See `Decoder.tuple` */
    Decoder.tuple;
    /** See `Decoder.dict` */
    Decoder.dict;
    /** See `Decoder.optional` */
    var optional = Decoder.optional;
    /** See `Decoder.oneOf` */
    var oneOf = Decoder.oneOf;
    /** See `Decoder.union` */
    Decoder.union;
    /** See `Decoder.intersection` */
    var intersection = Decoder.intersection;
    /** See `Decoder.withDefault` */
    Decoder.withDefault;
    /** See `Decoder.valueAt` */
    Decoder.valueAt;
    /** See `Decoder.succeed` */
    Decoder.succeed;
    /** See `Decoder.fail` */
    var fail = Decoder.fail;
    /** See `Decoder.lazy` */
    var lazy = Decoder.lazy;

    const nonNegativeNumberDecoder = number().where((num) => num >= 0, "Expected a non-negative number");
    const nonEmptyStringDecoder = string().where((s) => s.length > 0, "Expected a non-empty string");
    const anyDecoder = anyJson();
    const windowBoundsDecoder = object({
        top: number(),
        left: number(),
        width: nonNegativeNumberDecoder,
        height: nonNegativeNumberDecoder
    });
    const windowRelativeDirectionDecoder = oneOf(constant("top"), constant("left"), constant("right"), constant("bottom"));
    const logLevelDecoder = oneOf(constant("trace"), constant("debug"), constant("info"), constant("warn"), constant("error"));
    const channelMetaDecoder = anyJson().where((meta) => typeof meta["color"] === "string" && meta["color"].length > 0, "Expected color to be a non-empty string");
    const layoutTypeDecoder = oneOf(constant("Global"), constant("Activity"), constant("ApplicationDefault"), constant("Swimlane"), constant("Workspace"));
    const componentTypeDecoder = oneOf(constant("application"), constant("activity"));
    const functionCheck = (input, propDescription) => {
        const providedType = typeof input;
        return providedType === "function" ?
            anyJson() :
            fail(`The provided argument as ${propDescription} should be of type function, provided: ${typeof providedType}`);
    };
    const operationCheckConfigDecoder = object({
        operation: nonEmptyStringDecoder
    });
    const operationCheckResultDecoder = object({
        isSupported: boolean()
    });
    const layoutSummaryDecoder$1 = object({
        name: nonEmptyStringDecoder,
        type: layoutTypeDecoder,
        context: optional(anyJson()),
        metadata: optional(anyJson())
    });
    const windowComponentStateDecoder = object({
        context: optional(anyJson()),
        bounds: windowBoundsDecoder,
        createArgs: object({
            name: optional(nonEmptyStringDecoder),
            url: optional(nonEmptyStringDecoder),
            context: optional(anyJson())
        }),
        windowState: optional(nonEmptyStringDecoder),
        restoreState: optional(nonEmptyStringDecoder),
        instanceId: nonEmptyStringDecoder,
        isCollapsed: optional(boolean()),
        isSticky: optional(boolean()),
        restoreSettings: object({
            groupId: optional(nonEmptyStringDecoder),
            groupZOrder: optional(number())
        })
    });
    const windowLayoutComponentDecoder = object({
        type: constant("window"),
        componentType: optional(componentTypeDecoder),
        application: nonEmptyStringDecoder,
        state: windowComponentStateDecoder
    });
    const libDomainDecoder = oneOf(constant("system"), constant("windows"), constant("appManager"), constant("layouts"), constant("workspaces"), constant("intents"), constant("notifications"), constant("extension"), constant("channels"));
    const systemOperationTypesDecoder = oneOf(constant("getEnvironment"), constant("getBase"), constant("operationCheck"));
    const windowLayoutItemDecoder = object({
        type: constant("window"),
        config: object({
            appName: nonEmptyStringDecoder,
            windowId: optional(nonEmptyStringDecoder),
            context: optional(anyJson()),
            url: optional(nonEmptyStringDecoder),
            title: optional(string()),
            showCloseButton: optional(boolean()),
            allowExtract: optional(boolean()),
            allowReorder: optional(boolean()),
            isMaximized: optional(boolean())
        })
    });
    const groupLayoutItemDecoder$1 = object({
        type: constant("group"),
        config: anyJson(),
        children: array(oneOf(windowLayoutItemDecoder))
    });
    const columnLayoutItemDecoder$1 = object({
        type: constant("column"),
        config: anyJson(),
        children: array(oneOf(groupLayoutItemDecoder$1, windowLayoutItemDecoder, lazy(() => columnLayoutItemDecoder$1), lazy(() => rowLayoutItemDecoder$1)))
    });
    const rowLayoutItemDecoder$1 = object({
        type: constant("row"),
        config: anyJson(),
        children: array(oneOf(columnLayoutItemDecoder$1, groupLayoutItemDecoder$1, windowLayoutItemDecoder, lazy(() => rowLayoutItemDecoder$1)))
    });
    const workspaceLayoutComponentStateDecoder = object({
        config: anyJson(),
        context: anyJson(),
        children: array(oneOf(rowLayoutItemDecoder$1, columnLayoutItemDecoder$1, groupLayoutItemDecoder$1, windowLayoutItemDecoder))
    });
    const workspaceLayoutComponentDecoder = object({
        type: constant("Workspace"),
        application: optional(string()),
        state: workspaceLayoutComponentStateDecoder
    });
    const workspaceFrameComponentStateDecoder = object({
        bounds: windowBoundsDecoder,
        instanceId: nonEmptyStringDecoder,
        selectedWorkspace: nonNegativeNumberDecoder,
        workspaces: array(workspaceLayoutComponentStateDecoder),
        windowState: optional(nonEmptyStringDecoder),
        restoreState: optional(nonEmptyStringDecoder),
        context: optional(anyJson())
    });
    const workspaceFrameComponentDecoder = object({
        type: constant("workspaceFrame"),
        application: nonEmptyStringDecoder,
        componentType: optional(componentTypeDecoder),
        state: workspaceFrameComponentStateDecoder
    });
    const glueLayoutDecoder = object({
        name: nonEmptyStringDecoder,
        type: layoutTypeDecoder,
        components: array(oneOf(windowLayoutComponentDecoder, workspaceLayoutComponentDecoder, workspaceFrameComponentDecoder)),
        context: optional(anyJson()),
        metadata: optional(anyJson()),
        version: optional(number())
    });
    const applicationDetailsDecoder = object({
        url: nonEmptyStringDecoder,
        top: optional(number()),
        left: optional(number()),
        width: optional(nonNegativeNumberDecoder),
        height: optional(nonNegativeNumberDecoder)
    });
    const intentDefinitionDecoder = object({
        name: nonEmptyStringDecoder,
        displayName: optional(string()),
        contexts: optional(array(string())),
        customConfig: optional(object()),
        resultType: optional(nonEmptyStringDecoder)
    });
    const glueCoreAppDefinitionDecoder = object({
        name: nonEmptyStringDecoder,
        type: nonEmptyStringDecoder.where((s) => s === "window", "Expected a value of window"),
        title: optional(nonEmptyStringDecoder),
        version: optional(nonEmptyStringDecoder),
        customProperties: optional(anyJson()),
        icon: optional(string()),
        caption: optional(string()),
        details: applicationDetailsDecoder,
        intents: optional(array(intentDefinitionDecoder)),
        hidden: optional(boolean())
    });
    const fdc3AppDefinitionDecoder = object({
        name: nonEmptyStringDecoder,
        title: optional(nonEmptyStringDecoder),
        version: optional(nonEmptyStringDecoder),
        appId: optional(nonEmptyStringDecoder),
        manifest: nonEmptyStringDecoder,
        manifestType: nonEmptyStringDecoder,
        tooltip: optional(nonEmptyStringDecoder),
        description: optional(nonEmptyStringDecoder),
        contactEmail: optional(nonEmptyStringDecoder),
        supportEmail: optional(nonEmptyStringDecoder),
        publisher: optional(nonEmptyStringDecoder),
        images: optional(array(object({ url: optional(nonEmptyStringDecoder) }))),
        icons: optional(array(object({ icon: optional(nonEmptyStringDecoder) }))),
        customConfig: anyJson(),
        intents: optional(array(intentDefinitionDecoder))
    });
    const remoteStoreDecoder = object({
        url: nonEmptyStringDecoder,
        pollingInterval: optional(nonNegativeNumberDecoder),
        requestTimeout: optional(nonNegativeNumberDecoder),
        customHeaders: optional(anyJson())
    });
    object({
        fetch: anyJson().andThen((result) => functionCheck(result, "supplier fetch")),
        timeout: optional(nonNegativeNumberDecoder),
        pollingInterval: optional(nonNegativeNumberDecoder),
        save: optional(anyJson().andThen((result) => functionCheck(result, "supplier save"))),
        delete: optional(anyJson().andThen((result) => functionCheck(result, "supplier delete")))
    });
    const channelDefinitionDecoder = object({
        name: nonEmptyStringDecoder,
        meta: channelMetaDecoder,
        data: optional(anyJson())
    });
    const pluginDefinitionDecoder = object({
        name: nonEmptyStringDecoder,
        start: anyJson(),
        version: optional(nonEmptyStringDecoder),
        config: optional(anyJson()),
        critical: optional(boolean())
    });
    const allApplicationDefinitionsDecoder = oneOf(glueCoreAppDefinitionDecoder, fdc3AppDefinitionDecoder);
    array(allApplicationDefinitionsDecoder);
    const applicationsConfigDecoder = object({
        local: optional(array(allApplicationDefinitionsDecoder)),
        remote: optional(remoteStoreDecoder)
    });
    const layoutsConfigDecoder = object({
        mode: optional(oneOf(constant("idb"), constant("session"))),
        local: optional(array(glueLayoutDecoder))
    });
    const channelsConfigDecoder = object({
        definitions: array(channelDefinitionDecoder)
    });
    const pluginsConfigDecoder = object({
        definitions: array(pluginDefinitionDecoder)
    });
    const gatewayConfigDecoder = object({
        logging: optional(object({
            level: optional(logLevelDecoder),
            appender: optional(anyJson().andThen((result) => functionCheck(result, "gateway log appender")))
        })),
        clients: optional(object({
            buffer_size: optional(number())
        }))
    });
    const glueConfigDecoder = anyJson();
    const maximumActiveWorkspacesDecoder = object({
        threshold: number().where((num) => num > 1, "Expected a number larger than 1")
    });
    const idleWorkspacesDecoder = object({
        idleMSThreshold: number().where((num) => num > 100, "Expected a number larger than 100")
    });
    const hibernationConfigDecoder = object({
        maximumActiveWorkspaces: optional(maximumActiveWorkspacesDecoder),
        idleWorkspaces: optional(idleWorkspacesDecoder)
    });
    const loadingConfigDecoder = object({
        delayed: optional(object({
            batch: optional(number()),
            initialOffsetInterval: optional(number()),
            interval: optional(number())
        })),
        defaultStrategy: optional(oneOf(constant("direct"), constant("delayed"), constant("lazy"))),
        showDelayedIndicator: optional(boolean())
    });
    const workspacesConfigDecoder = object({
        src: nonEmptyStringDecoder,
        hibernation: optional(hibernationConfigDecoder),
        loadingStrategy: optional(loadingConfigDecoder),
        isFrame: optional(boolean()),
        initAsEmpty: optional(boolean()),
        frameCache: optional(boolean())
    });
    const preferredConnectionSettingsDecoder = object({
        url: nonEmptyStringDecoder,
        auth: optional(object({
            username: optional(nonEmptyStringDecoder),
            password: optional(nonEmptyStringDecoder),
            sessionId: optional(nonEmptyStringDecoder),
            provider: optional(nonEmptyStringDecoder),
            providerContext: optional(anyJson()),
            token: optional(nonEmptyStringDecoder),
            gatewayToken: optional(nonEmptyStringDecoder),
            flowName: optional(constant("sspi")),
            flowCallback: optional(anyJson().andThen((result) => functionCheck(result, "flowCallback function")))
        })),
        forceIncompleteSwitch: optional(boolean()),
        discoveryIntervalMS: optional(nonNegativeNumberDecoder)
    });
    const connectionConfigDecoder = object({
        preferred: optional(preferredConnectionSettingsDecoder)
    });
    const windowsConfigDecoder = object({
        windowResponseTimeoutMs: optional(nonNegativeNumberDecoder),
        defaultWindowOpenBounds: optional(windowBoundsDecoder)
    });
    const serviceWorkerConfigDecoder = object({
        url: optional(nonEmptyStringDecoder),
        registrationPromise: optional(anyJson())
    });
    const corePlusConfigDecoder = object({
        start: anyJson(),
        version: nonEmptyStringDecoder
    });
    const notificationsConfigDecoder = object({
        enable: optional(boolean()),
        enableToasts: optional(boolean()),
        clearNotificationOnClick: optional(boolean())
    });
    const platformConfigDecoder = object({
        windows: optional(windowsConfigDecoder),
        applications: optional(applicationsConfigDecoder),
        notifications: optional(notificationsConfigDecoder),
        layouts: optional(layoutsConfigDecoder),
        channels: optional(channelsConfigDecoder),
        plugins: optional(pluginsConfigDecoder),
        serviceWorker: optional(serviceWorkerConfigDecoder),
        gateway: optional(gatewayConfigDecoder),
        connection: optional(connectionConfigDecoder),
        glue: optional(glueConfigDecoder),
        workspaces: optional(workspacesConfigDecoder),
        environment: optional(anyJson()),
        corePlus: optional(corePlusConfigDecoder),
        glueFactory: optional(anyJson().andThen((result) => functionCheck(result, "glueFactory")))
    });
    const windowOpenSettingsDecoder = object({
        top: optional(number()),
        left: optional(number()),
        width: optional(nonNegativeNumberDecoder),
        height: optional(nonNegativeNumberDecoder),
        context: optional(anyJson()),
        relativeTo: optional(nonEmptyStringDecoder),
        relativeDirection: optional(windowRelativeDirectionDecoder),
        windowId: optional(nonEmptyStringDecoder),
        layoutComponentId: optional(nonEmptyStringDecoder)
    });
    const interceptorRegistrationRequestDecoder = object({
        callInterceptor: anyJson().andThen((result) => functionCheck(result, "callInterceptor")),
        interceptions: array(object({
            domain: libDomainDecoder,
            operation: nonEmptyStringDecoder
        }))
    });
    const focusEventDataDecoder = object({
        windowId: nonEmptyStringDecoder,
        hasFocus: boolean()
    });

    var isMergeableObject = function isMergeableObject(value) {
    	return isNonNullObject(value)
    		&& !isSpecial(value)
    };

    function isNonNullObject(value) {
    	return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
    	var stringValue = Object.prototype.toString.call(value);

    	return stringValue === '[object RegExp]'
    		|| stringValue === '[object Date]'
    		|| isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
    	return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
    	return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
    	return (options.clone !== false && options.isMergeableObject(value))
    		? deepmerge(emptyTarget(value), value, options)
    		: value
    }

    function defaultArrayMerge(target, source, options) {
    	return target.concat(source).map(function(element) {
    		return cloneUnlessOtherwiseSpecified(element, options)
    	})
    }

    function getMergeFunction(key, options) {
    	if (!options.customMerge) {
    		return deepmerge
    	}
    	var customMerge = options.customMerge(key);
    	return typeof customMerge === 'function' ? customMerge : deepmerge
    }

    function getEnumerableOwnPropertySymbols(target) {
    	return Object.getOwnPropertySymbols
    		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    			return Object.propertyIsEnumerable.call(target, symbol)
    		})
    		: []
    }

    function getKeys(target) {
    	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
    }

    function propertyIsOnObject(object, property) {
    	try {
    		return property in object
    	} catch(_) {
    		return false
    	}
    }

    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
    	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
    		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
    			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
    	var destination = {};
    	if (options.isMergeableObject(target)) {
    		getKeys(target).forEach(function(key) {
    			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    		});
    	}
    	getKeys(source).forEach(function(key) {
    		if (propertyIsUnsafe(target, key)) {
    			return
    		}

    		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
    			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    		} else {
    			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    		}
    	});
    	return destination
    }

    function deepmerge(target, source, options) {
    	options = options || {};
    	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    	// implementations can use it. The caller may not replace it.
    	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

    	var sourceIsArray = Array.isArray(source);
    	var targetIsArray = Array.isArray(target);
    	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    	if (!sourceAndTargetTypesMatch) {
    		return cloneUnlessOtherwiseSpecified(source, options)
    	} else if (sourceIsArray) {
    		return options.arrayMerge(target, source, options)
    	} else {
    		return mergeObject(target, source, options)
    	}
    }

    deepmerge.all = function deepmergeAll(array, options) {
    	if (!Array.isArray(array)) {
    		throw new Error('first argument should be an array')
    	}

    	return array.reduce(function(prev, next) {
    		return deepmerge(prev, next, options)
    	}, {})
    };

    var deepmerge_1 = deepmerge;

    var cjs = deepmerge_1;

    let nanoid = (size = 21) =>
      crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
        byte &= 63;
        if (byte < 36) {
          id += byte.toString(36);
        } else if (byte < 62) {
          id += (byte - 26).toString(36).toUpperCase();
        } else if (byte > 62) {
          id += '-';
        } else {
          id += '_';
        }
        return id
      }, '');

    class Platform {
        constructor(controller, session, config) {
            this.controller = controller;
            this.session = session;
            this.checkSingleton();
            this.processConfig(config);
        }
        ready() {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield this.controller.start(this.platformConfig);
            });
        }
        getClientGlue() {
            return this.controller.getClientGlue();
        }
        getPlatformApi() {
            return this.controller.platformApi;
        }
        checkSingleton() {
            const glue42CoreNamespace = window.glue42core;
            if (glue42CoreNamespace && glue42CoreNamespace.platformStarted) {
                throw new Error("The Glue42 Core Platform has already been started for this application.");
            }
        }
        processConfig(config = {}) {
            var _a, _b, _c, _d, _e, _f;
            const verifiedConfig = config.corePlus ? config : platformConfigDecoder.runWithException(config);
            this.validatePlugins(verifiedConfig);
            this.platformConfig = cjs(defaultPlatformConfig, verifiedConfig);
            let systemSettings = this.session.getSystemSettings();
            if (!systemSettings) {
                systemSettings = {
                    systemInstanceId: nanoid(),
                    ctxTrackInstanceId: nanoid()
                };
                this.session.saveSystemSettings(systemSettings);
            }
            this.platformConfig.workspacesFrameCache = typeof ((_a = verifiedConfig.workspaces) === null || _a === void 0 ? void 0 : _a.frameCache) === "boolean" ? (_b = verifiedConfig.workspaces) === null || _b === void 0 ? void 0 : _b.frameCache : true;
            this.transferPromiseObjects(verifiedConfig);
            const glue42core = {
                isPlatformFrame: !!((_c = verifiedConfig.workspaces) === null || _c === void 0 ? void 0 : _c.isFrame),
                initAsEmptyFrame: !!((_d = verifiedConfig.workspaces) === null || _d === void 0 ? void 0 : _d.initAsEmpty),
                workspacesFrameCache: this.platformConfig.workspacesFrameCache,
                platformStarted: true,
                environment: Object.assign({}, this.platformConfig.environment, { extension: undefined }),
                communicationId: systemSettings.systemInstanceId,
                workspaces: {
                    frameCache: this.platformConfig.workspacesFrameCache,
                    isPlatform: !!((_e = verifiedConfig.workspaces) === null || _e === void 0 ? void 0 : _e.isFrame),
                    initAsEmpty: !!((_f = verifiedConfig.workspaces) === null || _f === void 0 ? void 0 : _f.initAsEmpty)
                }
            };
            window.glue42core = glue42core;
        }
        transferPromiseObjects(verifiedConfig) {
            var _a;
            if ((_a = verifiedConfig.serviceWorker) === null || _a === void 0 ? void 0 : _a.registrationPromise) {
                this.platformConfig.serviceWorker.registrationPromise = verifiedConfig.serviceWorker.registrationPromise;
            }
            if (verifiedConfig.plugins && verifiedConfig.plugins.definitions.length) {
                const definitions = verifiedConfig.plugins.definitions;
                definitions.forEach((def) => {
                    var _a;
                    const found = (_a = this.platformConfig.plugins) === null || _a === void 0 ? void 0 : _a.definitions.find((savedDef) => savedDef.name === def.name);
                    if (found) {
                        found.config = def.config;
                    }
                });
            }
        }
        validatePlugins(verifiedConfig) {
            var _a;
            if ((_a = verifiedConfig.plugins) === null || _a === void 0 ? void 0 : _a.definitions) {
                const badDefinitions = verifiedConfig.plugins.definitions.reduce((soFar, definition) => {
                    const startType = typeof definition.start;
                    const name = definition.name;
                    if (startType !== "function") {
                        soFar.push({ name, startType });
                    }
                    return soFar;
                }, []);
                if (badDefinitions.length) {
                    const errorStack = badDefinitions
                        .map((def) => `The start function for plugin ${def.name} was expected to be of type function, but was provided: ${def.startType}`)
                        .join("\n");
                    throw new Error(errorStack);
                }
            }
        }
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var MetricTypes = {
        STRING: 1,
        NUMBER: 2,
        TIMESTAMP: 3,
        OBJECT: 4
    };

    function getMetricTypeByValue(metric) {
        if (metric.type === MetricTypes.TIMESTAMP) {
            return "timestamp";
        }
        else if (metric.type === MetricTypes.NUMBER) {
            return "number";
        }
        else if (metric.type === MetricTypes.STRING) {
            return "string";
        }
        else if (metric.type === MetricTypes.OBJECT) {
            return "object";
        }
        return "unknown";
    }
    function getTypeByValue(value) {
        if (value.constructor === Date) {
            return "timestamp";
        }
        else if (typeof value === "number") {
            return "number";
        }
        else if (typeof value === "string") {
            return "string";
        }
        else if (typeof value === "object") {
            return "object";
        }
        else {
            return "string";
        }
    }
    function serializeMetric(metric) {
        var serializedMetrics = {};
        var type = getMetricTypeByValue(metric);
        if (type === "object") {
            var values = Object.keys(metric.value).reduce(function (memo, key) {
                var innerType = getTypeByValue(metric.value[key]);
                if (innerType === "object") {
                    var composite = defineNestedComposite(metric.value[key]);
                    memo[key] = {
                        type: "object",
                        description: "",
                        context: {},
                        composite: composite,
                    };
                }
                else {
                    memo[key] = {
                        type: innerType,
                        description: "",
                        context: {},
                    };
                }
                return memo;
            }, {});
            serializedMetrics.composite = values;
        }
        serializedMetrics.name = normalizeMetricName(metric.path.join("/") + "/" + metric.name);
        serializedMetrics.type = type;
        serializedMetrics.description = metric.description;
        serializedMetrics.context = {};
        return serializedMetrics;
    }
    function defineNestedComposite(values) {
        return Object.keys(values).reduce(function (memo, key) {
            var type = getTypeByValue(values[key]);
            if (type === "object") {
                memo[key] = {
                    type: "object",
                    description: "",
                    context: {},
                    composite: defineNestedComposite(values[key]),
                };
            }
            else {
                memo[key] = {
                    type: type,
                    description: "",
                    context: {},
                };
            }
            return memo;
        }, {});
    }
    function normalizeMetricName(name) {
        if (typeof name !== "undefined" && name.length > 0 && name[0] !== "/") {
            return "/" + name;
        }
        else {
            return name;
        }
    }
    function getMetricValueByType(metric) {
        var type = getMetricTypeByValue(metric);
        if (type === "timestamp") {
            return Date.now();
        }
        else {
            return publishNestedComposite(metric.value);
        }
    }
    function publishNestedComposite(values) {
        if (typeof values !== "object") {
            return values;
        }
        return Object.keys(values).reduce(function (memo, key) {
            var value = values[key];
            if (typeof value === "object" && value.constructor !== Date) {
                memo[key] = publishNestedComposite(value);
            }
            else if (value.constructor === Date) {
                memo[key] = new Date(value).getTime();
            }
            else if (value.constructor === Boolean) {
                memo[key] = value.toString();
            }
            else {
                memo[key] = value;
            }
            return memo;
        }, {});
    }
    function flatten(arr) {
        return arr.reduce(function (flat, toFlatten) {
            return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
        }, []);
    }
    function getHighestState(arr) {
        return arr.sort(function (a, b) {
            if (!a.state) {
                return 1;
            }
            if (!b.state) {
                return -1;
            }
            return b.state - a.state;
        })[0];
    }
    function aggregateDescription(arr) {
        var msg = "";
        arr.forEach(function (m, idx, a) {
            var path = m.path.join(".");
            if (idx === a.length - 1) {
                msg += path + "." + m.name + ": " + m.description;
            }
            else {
                msg += path + "." + m.name + ": " + m.description + ",";
            }
        });
        if (msg.length > 100) {
            return msg.slice(0, 100) + "...";
        }
        else {
            return msg;
        }
    }
    function composeMsgForRootStateMetric(system) {
        var aggregatedState = system.root.getAggregateState();
        var merged = flatten(aggregatedState);
        var highestState = getHighestState(merged);
        var aggregateDesc = aggregateDescription(merged);
        return {
            description: aggregateDesc,
            value: highestState.state,
        };
    }

    function gw3 (connection, config) {
        var _this = this;
        if (!connection || typeof connection !== "object") {
            throw new Error("Connection is required parameter");
        }
        var joinPromise;
        var session;
        var init = function (repo) {
            var resolveReadyPromise;
            joinPromise = new Promise(function (resolve) {
                resolveReadyPromise = resolve;
            });
            session = connection.domain("metrics");
            session.onJoined(function (reconnect) {
                if (!reconnect && resolveReadyPromise) {
                    resolveReadyPromise();
                    resolveReadyPromise = undefined;
                }
                var rootStateMetric = {
                    name: "/State",
                    type: "object",
                    composite: {
                        Description: {
                            type: "string",
                            description: "",
                        },
                        Value: {
                            type: "number",
                            description: "",
                        },
                    },
                    description: "System state",
                    context: {},
                };
                var defineRootMetricsMsg = {
                    type: "define",
                    metrics: [rootStateMetric],
                };
                session.send(defineRootMetricsMsg);
                if (reconnect) {
                    replayRepo(repo);
                }
            });
            session.join({
                system: config.system,
                service: config.service,
                instance: config.instance
            });
        };
        var replayRepo = function (repo) {
            replaySystem(repo.root);
        };
        var replaySystem = function (system) {
            createSystem(system);
            system.metrics.forEach(function (m) {
                createMetric(m);
            });
            system.subSystems.forEach(function (ss) {
                replaySystem(ss);
            });
        };
        var createSystem = function (system) { return __awaiter(_this, void 0, void 0, function () {
            var metric, createMetricsMsg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (system.parent === undefined) {
                            return [2];
                        }
                        return [4, joinPromise];
                    case 1:
                        _a.sent();
                        metric = {
                            name: normalizeMetricName(system.path.join("/") + "/" + system.name + "/State"),
                            type: "object",
                            composite: {
                                Description: {
                                    type: "string",
                                    description: "",
                                },
                                Value: {
                                    type: "number",
                                    description: "",
                                },
                            },
                            description: "System state",
                            context: {},
                        };
                        createMetricsMsg = {
                            type: "define",
                            metrics: [metric],
                        };
                        session.send(createMetricsMsg);
                        return [2];
                }
            });
        }); };
        var updateSystem = function (system, state) { return __awaiter(_this, void 0, void 0, function () {
            var shadowedUpdateMetric, stateObj, rootMetric;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, joinPromise];
                    case 1:
                        _a.sent();
                        shadowedUpdateMetric = {
                            type: "publish",
                            values: [{
                                    name: normalizeMetricName(system.path.join("/") + "/" + system.name + "/State"),
                                    value: {
                                        Description: state.description,
                                        Value: state.state,
                                    },
                                    timestamp: Date.now(),
                                }],
                        };
                        session.send(shadowedUpdateMetric);
                        stateObj = composeMsgForRootStateMetric(system);
                        rootMetric = {
                            type: "publish",
                            peer_id: connection.peerId,
                            values: [{
                                    name: "/State",
                                    value: {
                                        Description: stateObj.description,
                                        Value: stateObj.value,
                                    },
                                    timestamp: Date.now(),
                                }],
                        };
                        session.send(rootMetric);
                        return [2];
                }
            });
        }); };
        var createMetric = function (metric) { return __awaiter(_this, void 0, void 0, function () {
            var metricClone, m, createMetricsMsg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metricClone = cloneMetric(metric);
                        return [4, joinPromise];
                    case 1:
                        _a.sent();
                        m = serializeMetric(metricClone);
                        createMetricsMsg = {
                            type: "define",
                            metrics: [m],
                        };
                        session.send(createMetricsMsg);
                        if (typeof metricClone.value !== "undefined") {
                            updateMetricCore(metricClone);
                        }
                        return [2];
                }
            });
        }); };
        var updateMetric = function (metric) { return __awaiter(_this, void 0, void 0, function () {
            var metricClone;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metricClone = cloneMetric(metric);
                        return [4, joinPromise];
                    case 1:
                        _a.sent();
                        updateMetricCore(metricClone);
                        return [2];
                }
            });
        }); };
        var updateMetricCore = function (metric) {
            if (canUpdate()) {
                var value = getMetricValueByType(metric);
                var publishMetricsMsg = {
                    type: "publish",
                    values: [{
                            name: normalizeMetricName(metric.path.join("/") + "/" + metric.name),
                            value: value,
                            timestamp: Date.now(),
                        }],
                };
                return session.sendFireAndForget(publishMetricsMsg);
            }
            return Promise.resolve();
        };
        var cloneMetric = function (metric) {
            var metricClone = __assign({}, metric);
            if (typeof metric.value === "object" && metric.value !== null) {
                metricClone.value = __assign({}, metric.value);
            }
            return metricClone;
        };
        var canUpdate = function () {
            var _a;
            try {
                var func = (_a = config.canUpdateMetric) !== null && _a !== void 0 ? _a : (function () { return true; });
                return func();
            }
            catch (_b) {
                return true;
            }
        };
        return {
            init: init,
            createSystem: createSystem,
            updateSystem: updateSystem,
            createMetric: createMetric,
            updateMetric: updateMetric,
        };
    }

    var Helpers = {
        validate: function (definition, parent, transport) {
            if (definition === null || typeof definition !== "object") {
                throw new Error("Missing definition");
            }
            if (parent === null || typeof parent !== "object") {
                throw new Error("Missing parent");
            }
            if (transport === null || typeof transport !== "object") {
                throw new Error("Missing transport");
            }
        },
    };

    var BaseMetric = (function () {
        function BaseMetric(definition, system, transport, value, type) {
            this.definition = definition;
            this.system = system;
            this.transport = transport;
            this.value = value;
            this.type = type;
            this.path = [];
            Helpers.validate(definition, system, transport);
            this.path = system.path.slice(0);
            this.path.push(system.name);
            this.name = definition.name;
            this.description = definition.description;
            transport.createMetric(this);
        }
        Object.defineProperty(BaseMetric.prototype, "repo", {
            get: function () {
                var _a;
                return (_a = this.system) === null || _a === void 0 ? void 0 : _a.repo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseMetric.prototype, "id", {
            get: function () { return "".concat(this.system.path, "/").concat(name); },
            enumerable: false,
            configurable: true
        });
        BaseMetric.prototype.update = function (newValue) {
            this.value = newValue;
            return this.transport.updateMetric(this);
        };
        return BaseMetric;
    }());

    var NumberMetric = (function (_super) {
        __extends(NumberMetric, _super);
        function NumberMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes.NUMBER) || this;
        }
        NumberMetric.prototype.incrementBy = function (num) {
            this.update(this.value + num);
        };
        NumberMetric.prototype.increment = function () {
            this.incrementBy(1);
        };
        NumberMetric.prototype.decrement = function () {
            this.incrementBy(-1);
        };
        NumberMetric.prototype.decrementBy = function (num) {
            this.incrementBy(num * -1);
        };
        return NumberMetric;
    }(BaseMetric));

    var ObjectMetric = (function (_super) {
        __extends(ObjectMetric, _super);
        function ObjectMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes.OBJECT) || this;
        }
        ObjectMetric.prototype.update = function (newValue) {
            this.mergeValues(newValue);
            return this.transport.updateMetric(this);
        };
        ObjectMetric.prototype.mergeValues = function (values) {
            var _this = this;
            return Object.keys(this.value).forEach(function (k) {
                if (typeof values[k] !== "undefined") {
                    _this.value[k] = values[k];
                }
            });
        };
        return ObjectMetric;
    }(BaseMetric));

    var StringMetric = (function (_super) {
        __extends(StringMetric, _super);
        function StringMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes.STRING) || this;
        }
        return StringMetric;
    }(BaseMetric));

    var TimestampMetric = (function (_super) {
        __extends(TimestampMetric, _super);
        function TimestampMetric(definition, system, transport, value) {
            return _super.call(this, definition, system, transport, value, MetricTypes.TIMESTAMP) || this;
        }
        TimestampMetric.prototype.now = function () {
            this.update(new Date());
        };
        return TimestampMetric;
    }(BaseMetric));

    function system(name, repo, protocol, parent, description) {
        if (!repo) {
            throw new Error("Repository is required");
        }
        if (!protocol) {
            throw new Error("Transport is required");
        }
        var _transport = protocol;
        var _name = name;
        var _description = description || "";
        var _repo = repo;
        var _parent = parent;
        var _path = _buildPath(parent);
        var _state = {};
        var id = _arrayToString(_path, "/") + name;
        var root = repo.root;
        var _subSystems = [];
        var _metrics = [];
        function subSystem(nameSystem, descriptionSystem) {
            if (!nameSystem || nameSystem.length === 0) {
                throw new Error("name is required");
            }
            var match = _subSystems.filter(function (s) { return s.name === nameSystem; });
            if (match.length > 0) {
                return match[0];
            }
            var _system = system(nameSystem, _repo, _transport, me, descriptionSystem);
            _subSystems.push(_system);
            return _system;
        }
        function setState(state, stateDescription) {
            _state = { state: state, description: stateDescription };
            _transport.updateSystem(me, _state);
        }
        function stringMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes.STRING, value, function (metricDef) { return new StringMetric(metricDef, me, _transport, value); });
        }
        function numberMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes.NUMBER, value, function (metricDef) { return new NumberMetric(metricDef, me, _transport, value); });
        }
        function objectMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes.OBJECT, value, function (metricDef) { return new ObjectMetric(metricDef, me, _transport, value); });
        }
        function timestampMetric(definition, value) {
            return _getOrCreateMetric(definition, MetricTypes.TIMESTAMP, value, function (metricDef) { return new TimestampMetric(metricDef, me, _transport, value); });
        }
        function _getOrCreateMetric(metricObject, expectedType, value, createMetric) {
            var metricDef = { name: "" };
            if (typeof metricObject === "string") {
                metricDef = { name: metricObject };
            }
            else {
                metricDef = metricObject;
            }
            var matching = _metrics.filter(function (shadowedMetric) { return shadowedMetric.name === metricDef.name; });
            if (matching.length > 0) {
                var existing = matching[0];
                if (existing.type !== expectedType) {
                    throw new Error("A metric named ".concat(metricDef.name, " is already defined with different type."));
                }
                if (typeof value !== "undefined") {
                    existing
                        .update(value)
                        .catch(function () { });
                }
                return existing;
            }
            var metric = createMetric(metricDef);
            _metrics.push(metric);
            return metric;
        }
        function _buildPath(shadowedSystem) {
            if (!shadowedSystem || !shadowedSystem.parent) {
                return [];
            }
            var path = _buildPath(shadowedSystem.parent);
            path.push(shadowedSystem.name);
            return path;
        }
        function _arrayToString(path, separator) {
            return ((path && path.length > 0) ? path.join(separator) : "");
        }
        function getAggregateState() {
            var aggState = [];
            if (Object.keys(_state).length > 0) {
                aggState.push({
                    name: _name,
                    path: _path,
                    state: _state.state,
                    description: _state.description,
                });
            }
            _subSystems.forEach(function (shadowedSubSystem) {
                var result = shadowedSubSystem.getAggregateState();
                if (result.length > 0) {
                    aggState.push.apply(aggState, result);
                }
            });
            return aggState;
        }
        var me = {
            get name() {
                return _name;
            },
            get description() {
                return _description;
            },
            get repo() {
                return _repo;
            },
            get parent() {
                return _parent;
            },
            path: _path,
            id: id,
            root: root,
            get subSystems() {
                return _subSystems;
            },
            get metrics() {
                return _metrics;
            },
            subSystem: subSystem,
            getState: function () {
                return _state;
            },
            setState: setState,
            stringMetric: stringMetric,
            timestampMetric: timestampMetric,
            objectMetric: objectMetric,
            numberMetric: numberMetric,
            getAggregateState: getAggregateState,
        };
        _transport.createSystem(me);
        return me;
    }

    var Repository = (function () {
        function Repository(options, protocol) {
            protocol.init(this);
            this.root = system("", this, protocol);
            this.addSystemMetrics(this.root, options.clickStream || options.clickStream === undefined);
        }
        Repository.prototype.addSystemMetrics = function (rootSystem, useClickStream) {
            if (typeof navigator !== "undefined") {
                rootSystem.stringMetric("UserAgent", navigator.userAgent);
            }
            if (useClickStream && typeof document !== "undefined") {
                var clickStream_1 = rootSystem.subSystem("ClickStream");
                var documentClickHandler = function (e) {
                    var _a;
                    if (!e.target) {
                        return;
                    }
                    var target = e.target;
                    var className = target ? (_a = target.getAttribute("class")) !== null && _a !== void 0 ? _a : "" : "";
                    clickStream_1.objectMetric("LastBrowserEvent", {
                        type: "click",
                        timestamp: new Date(),
                        target: {
                            className: className,
                            id: target.id,
                            type: "<" + target.tagName.toLowerCase() + ">",
                            href: target.href || "",
                        },
                    });
                };
                clickStream_1.objectMetric("Page", {
                    title: document.title,
                    page: window.location.href,
                });
                if (document.addEventListener) {
                    document.addEventListener("click", documentClickHandler);
                }
                else {
                    document.attachEvent("onclick", documentClickHandler);
                }
            }
            rootSystem.stringMetric("StartTime", (new Date()).toString());
            var urlMetric = rootSystem.stringMetric("StartURL", "");
            var appNameMetric = rootSystem.stringMetric("AppName", "");
            if (typeof window !== "undefined") {
                if (typeof window.location !== "undefined") {
                    var startUrl = window.location.href;
                    urlMetric.update(startUrl);
                }
                if (typeof window.glue42gd !== "undefined") {
                    appNameMetric.update(window.glue42gd.appName);
                }
            }
        };
        return Repository;
    }());

    var NullProtocol = (function () {
        function NullProtocol() {
        }
        NullProtocol.prototype.init = function (repo) {
        };
        NullProtocol.prototype.createSystem = function (system) {
            return Promise.resolve();
        };
        NullProtocol.prototype.updateSystem = function (metric, state) {
            return Promise.resolve();
        };
        NullProtocol.prototype.createMetric = function (metric) {
            return Promise.resolve();
        };
        NullProtocol.prototype.updateMetric = function (metric) {
            return Promise.resolve();
        };
        return NullProtocol;
    }());

    var PerfTracker = (function () {
        function PerfTracker(api, initialPublishTimeout, publishInterval) {
            this.api = api;
            this.lastCount = 0;
            this.initialPublishTimeout = 10 * 1000;
            this.publishInterval = 60 * 1000;
            this.initialPublishTimeout = initialPublishTimeout !== null && initialPublishTimeout !== void 0 ? initialPublishTimeout : this.initialPublishTimeout;
            this.publishInterval = publishInterval !== null && publishInterval !== void 0 ? publishInterval : this.publishInterval;
            this.scheduleCollection();
            this.system = this.api.subSystem("performance", "Performance data published by the web application");
        }
        PerfTracker.prototype.scheduleCollection = function () {
            var _this = this;
            setTimeout(function () {
                _this.collect();
                setInterval(function () {
                    _this.collect();
                }, _this.publishInterval);
            }, this.initialPublishTimeout);
        };
        PerfTracker.prototype.collect = function () {
            try {
                this.collectMemory();
                this.collectEntries();
            }
            catch (_a) {
            }
        };
        PerfTracker.prototype.collectMemory = function () {
            var memory = window.performance.memory;
            this.system.stringMetric("memory", JSON.stringify({
                totalJSHeapSize: memory.totalJSHeapSize,
                usedJSHeapSize: memory.usedJSHeapSize
            }));
        };
        PerfTracker.prototype.collectEntries = function () {
            var allEntries = window.performance.getEntries();
            if (allEntries.length <= this.lastCount) {
                return;
            }
            this.lastCount = allEntries.length;
            var jsonfiedEntries = allEntries.map(function (i) { return i.toJSON(); });
            this.system.stringMetric("entries", JSON.stringify(jsonfiedEntries));
        };
        return PerfTracker;
    }());

    var metrics = (function (options) {
        var protocol;
        if (!options.connection || typeof options.connection !== "object") {
            protocol = new NullProtocol();
        }
        else {
            protocol = gw3(options.connection, options);
        }
        var repo = new Repository(options, protocol);
        var rootSystem = repo.root;
        if (!options.disableAutoAppSystem) {
            rootSystem = rootSystem.subSystem("App");
        }
        var api = addFAVSupport(rootSystem);
        initPerf(api, options.pagePerformanceMetrics);
        return api;
    });
    function initPerf(api, config) {
        var _a, _b;
        if (typeof window === "undefined") {
            return;
        }
        var perfConfig = (_b = (_a = window === null || window === void 0 ? void 0 : window.glue42gd) === null || _a === void 0 ? void 0 : _a.metrics) === null || _b === void 0 ? void 0 : _b.pagePerformanceMetrics;
        if (perfConfig) {
            config = perfConfig;
        }
        if (config === null || config === void 0 ? void 0 : config.enabled) {
            new PerfTracker(api, config.initialPublishTimeout, config.publishInterval);
        }
    }
    function addFAVSupport(system) {
        var reportingSystem = system.subSystem("reporting");
        var def = {
            name: "features"
        };
        var featureMetric;
        var featureMetricFunc = function (name, action, payload) {
            if (typeof name === "undefined" || name === "") {
                throw new Error("name is mandatory");
            }
            else if (typeof action === "undefined" || action === "") {
                throw new Error("action is mandatory");
            }
            else if (typeof payload === "undefined" || payload === "") {
                throw new Error("payload is mandatory");
            }
            if (!featureMetric) {
                featureMetric = reportingSystem.objectMetric(def, { name: name, action: action, payload: payload });
            }
            else {
                featureMetric.update({
                    name: name,
                    action: action,
                    payload: payload
                });
            }
        };
        system.featureMetric = featureMetricFunc;
        return system;
    }

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createRegistry$1(options) {
        if (options && options.errorHandling
            && typeof options.errorHandling !== "function"
            && options.errorHandling !== "log"
            && options.errorHandling !== "silent"
            && options.errorHandling !== "throw") {
            throw new Error("Invalid options passed to createRegistry. Prop errorHandling should be [\"log\" | \"silent\" | \"throw\" | (err) => void], but " + typeof options.errorHandling + " was passed");
        }
        var _userErrorHandler = options && typeof options.errorHandling === "function" && options.errorHandling;
        var callbacks = {};
        function add(key, callback, replayArgumentsArr) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                callbacksForKey = [];
                callbacks[key] = callbacksForKey;
            }
            callbacksForKey.push(callback);
            if (replayArgumentsArr) {
                setTimeout(function () {
                    replayArgumentsArr.forEach(function (replayArgument) {
                        var _a;
                        if ((_a = callbacks[key]) === null || _a === void 0 ? void 0 : _a.includes(callback)) {
                            try {
                                if (Array.isArray(replayArgument)) {
                                    callback.apply(undefined, replayArgument);
                                }
                                else {
                                    callback.apply(undefined, [replayArgument]);
                                }
                            }
                            catch (err) {
                                _handleError(err, key);
                            }
                        }
                    });
                }, 0);
            }
            return function () {
                var allForKey = callbacks[key];
                if (!allForKey) {
                    return;
                }
                allForKey = allForKey.reduce(function (acc, element, index) {
                    if (!(element === callback && acc.length === index)) {
                        acc.push(element);
                    }
                    return acc;
                }, []);
                if (allForKey.length === 0) {
                    delete callbacks[key];
                }
                else {
                    callbacks[key] = allForKey;
                }
            };
        }
        function execute(key) {
            var argumentsArr = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                argumentsArr[_i - 1] = arguments[_i];
            }
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey || callbacksForKey.length === 0) {
                return [];
            }
            var results = [];
            callbacksForKey.forEach(function (callback) {
                try {
                    var result = callback.apply(undefined, argumentsArr);
                    results.push(result);
                }
                catch (err) {
                    results.push(undefined);
                    _handleError(err, key);
                }
            });
            return results;
        }
        function _handleError(exceptionArtifact, key) {
            var errParam = exceptionArtifact instanceof Error ? exceptionArtifact : new Error(exceptionArtifact);
            if (_userErrorHandler) {
                _userErrorHandler(errParam);
                return;
            }
            var msg = "[ERROR] callback-registry: User callback for key \"" + key + "\" failed: " + errParam.stack;
            if (options) {
                switch (options.errorHandling) {
                    case "log":
                        return console.error(msg);
                    case "silent":
                        return;
                    case "throw":
                        throw new Error(msg);
                }
            }
            console.error(msg);
        }
        function clear() {
            callbacks = {};
        }
        function clearKey(key) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                return;
            }
            delete callbacks[key];
        }
        return {
            add: add,
            execute: execute,
            clear: clear,
            clearKey: clearKey
        };
    }
    createRegistry$1.default = createRegistry$1;
    var lib$1 = createRegistry$1;

    var InProcTransport = (function () {
        function InProcTransport(settings, logger) {
            var _this = this;
            this.registry = lib$1();
            this.gw = settings.facade;
            this.gw.connect(function (_client, message) {
                _this.messageHandler(message);
            }).then(function (client) {
                _this.client = client;
            });
        }
        Object.defineProperty(InProcTransport.prototype, "isObjectBasedTransport", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        InProcTransport.prototype.sendObject = function (msg) {
            if (this.client) {
                this.client.send(msg);
                return Promise.resolve(undefined);
            }
            else {
                return Promise.reject("not connected");
            }
        };
        InProcTransport.prototype.send = function (_msg) {
            return Promise.reject("not supported");
        };
        InProcTransport.prototype.onMessage = function (callback) {
            return this.registry.add("onMessage", callback);
        };
        InProcTransport.prototype.onConnectedChanged = function (callback) {
            callback(true);
            return function () { };
        };
        InProcTransport.prototype.close = function () {
            return Promise.resolve();
        };
        InProcTransport.prototype.open = function () {
            return Promise.resolve();
        };
        InProcTransport.prototype.name = function () {
            return "in-memory";
        };
        InProcTransport.prototype.reconnect = function () {
            return Promise.resolve();
        };
        InProcTransport.prototype.messageHandler = function (msg) {
            this.registry.execute("onMessage", msg);
        };
        return InProcTransport;
    }());

    var SharedWorkerTransport = (function () {
        function SharedWorkerTransport(workerFile, logger) {
            var _this = this;
            this.logger = logger;
            this.registry = lib$1();
            this.worker = new SharedWorker(workerFile);
            this.worker.port.onmessage = function (e) {
                _this.messageHandler(e.data);
            };
        }
        Object.defineProperty(SharedWorkerTransport.prototype, "isObjectBasedTransport", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        SharedWorkerTransport.prototype.sendObject = function (msg) {
            this.worker.port.postMessage(msg);
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.send = function (_msg) {
            return Promise.reject("not supported");
        };
        SharedWorkerTransport.prototype.onMessage = function (callback) {
            return this.registry.add("onMessage", callback);
        };
        SharedWorkerTransport.prototype.onConnectedChanged = function (callback) {
            callback(true);
            return function () { };
        };
        SharedWorkerTransport.prototype.close = function () {
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.open = function () {
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.name = function () {
            return "shared-worker";
        };
        SharedWorkerTransport.prototype.reconnect = function () {
            return Promise.resolve();
        };
        SharedWorkerTransport.prototype.messageHandler = function (msg) {
            this.registry.execute("onMessage", msg);
        };
        return SharedWorkerTransport;
    }());

    var Utils = (function () {
        function Utils() {
        }
        Utils.getGDMajorVersion = function () {
            if (typeof window === "undefined") {
                return undefined;
            }
            if (!window.glueDesktop) {
                return undefined;
            }
            if (!window.glueDesktop.version) {
                return undefined;
            }
            var ver = Number(window.glueDesktop.version.substr(0, 1));
            return isNaN(ver) ? undefined : ver;
        };
        Utils.isNode = function () {
            if (typeof Utils._isNode !== "undefined") {
                return Utils._isNode;
            }
            if (typeof window !== "undefined") {
                Utils._isNode = false;
                return false;
            }
            try {
                Utils._isNode = Object.prototype.toString.call(global.process) === "[object process]";
            }
            catch (e) {
                Utils._isNode = false;
            }
            return Utils._isNode;
        };
        return Utils;
    }());

    var PromiseWrapper = (function () {
        function PromiseWrapper() {
            var _this = this;
            this.rejected = false;
            this.resolved = false;
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = function (t) {
                    _this.resolved = true;
                    resolve(t);
                };
                _this.reject = function (err) {
                    _this.rejected = true;
                    reject(err);
                };
            });
        }
        PromiseWrapper.delay = function (time) {
            return new Promise(function (resolve) { return setTimeout(resolve, time); });
        };
        Object.defineProperty(PromiseWrapper.prototype, "ended", {
            get: function () {
                return this.rejected || this.resolved;
            },
            enumerable: false,
            configurable: true
        });
        return PromiseWrapper;
    }());

    var timers = {};
    function getAllTimers() {
        return timers;
    }
    function timer (timerName) {
        var existing = timers[timerName];
        if (existing) {
            return existing;
        }
        var marks = [];
        function now() {
            return new Date().getTime();
        }
        var startTime = now();
        mark("start", startTime);
        var endTime;
        var period;
        function stop() {
            endTime = now();
            mark("end", endTime);
            period = endTime - startTime;
            return period;
        }
        function mark(name, time) {
            var currentTime = time !== null && time !== void 0 ? time : now();
            var diff = 0;
            if (marks.length > 0) {
                diff = currentTime - marks[marks.length - 1].time;
            }
            marks.push({ name: name, time: currentTime, diff: diff });
        }
        var timerObj = {
            get startTime() {
                return startTime;
            },
            get endTime() {
                return endTime;
            },
            get period() {
                return period;
            },
            stop: stop,
            mark: mark,
            marks: marks
        };
        timers[timerName] = timerObj;
        return timerObj;
    }

    var WebSocketConstructor = Utils.isNode() ? require("ws") : window.WebSocket;
    var WS = (function () {
        function WS(settings, logger) {
            this.startupTimer = timer("connection");
            this._running = true;
            this._registry = lib$1();
            this.wsRequests = [];
            this.settings = settings;
            this.logger = logger;
            if (!this.settings.ws) {
                throw new Error("ws is missing");
            }
        }
        WS.prototype.onMessage = function (callback) {
            return this._registry.add("onMessage", callback);
        };
        WS.prototype.send = function (msg, options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.waitForSocketConnection(function () {
                    var _a;
                    try {
                        (_a = _this.ws) === null || _a === void 0 ? void 0 : _a.send(msg);
                        resolve();
                    }
                    catch (e) {
                        reject(e);
                    }
                }, reject);
            });
        };
        WS.prototype.open = function () {
            var _this = this;
            this.logger.info("opening ws...");
            this._running = true;
            return new Promise(function (resolve, reject) {
                _this.waitForSocketConnection(resolve, reject);
            });
        };
        WS.prototype.close = function () {
            this._running = false;
            if (this.ws) {
                this.ws.close();
            }
            return Promise.resolve();
        };
        WS.prototype.onConnectedChanged = function (callback) {
            return this._registry.add("onConnectedChanged", callback);
        };
        WS.prototype.name = function () {
            return this.settings.ws;
        };
        WS.prototype.reconnect = function () {
            var _a;
            (_a = this.ws) === null || _a === void 0 ? void 0 : _a.close();
            var pw = new PromiseWrapper();
            this.waitForSocketConnection(function () {
                pw.resolve();
            });
            return pw.promise;
        };
        WS.prototype.waitForSocketConnection = function (callback, failed) {
            var _a;
            failed = failed !== null && failed !== void 0 ? failed : (function () { });
            if (!this._running) {
                failed("wait for socket on ".concat(this.settings.ws, " failed - socket closed by user"));
                return;
            }
            if (((_a = this.ws) === null || _a === void 0 ? void 0 : _a.readyState) === 1) {
                callback();
                return;
            }
            this.wsRequests.push({ callback: callback, failed: failed });
            if (this.wsRequests.length > 1) {
                return;
            }
            this.openSocket();
        };
        WS.prototype.openSocket = function (retryInterval, retriesLeft) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.startupTimer.mark("opening-socket");
                            if (retryInterval === undefined) {
                                retryInterval = this.settings.reconnectInterval;
                            }
                            if (typeof retriesLeft === "undefined") {
                                retriesLeft = this.settings.reconnectAttempts;
                            }
                            if (retriesLeft !== undefined) {
                                if (retriesLeft === 0) {
                                    this.notifyForSocketState("wait for socket on ".concat(this.settings.ws, " failed - no more retries left"));
                                    return [2];
                                }
                                this.logger.debug("will retry ".concat(retriesLeft, " more times (every ").concat(retryInterval, " ms)"));
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4, this.initiateSocket()];
                        case 2:
                            _b.sent();
                            this.startupTimer.mark("socket-initiated");
                            this.notifyForSocketState();
                            return [3, 4];
                        case 3:
                            _b.sent();
                            setTimeout(function () {
                                var retries = retriesLeft === undefined ? undefined : retriesLeft - 1;
                                _this.openSocket(retryInterval, retries);
                            }, retryInterval);
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            });
        };
        WS.prototype.initiateSocket = function () {
            var _this = this;
            var pw = new PromiseWrapper();
            this.logger.debug("initiating ws to ".concat(this.settings.ws, "..."));
            this.ws = new WebSocketConstructor(this.settings.ws || "");
            this.ws.onerror = function (err) {
                var reason = "";
                try {
                    reason = JSON.stringify(err);
                }
                catch (error) {
                    var seen_1 = new WeakSet();
                    var replacer = function (key, value) {
                        if (typeof value === "object" && value !== null) {
                            if (seen_1.has(value)) {
                                return;
                            }
                            seen_1.add(value);
                        }
                        return value;
                    };
                    reason = JSON.stringify(err, replacer);
                }
                pw.reject("error");
                _this.notifyStatusChanged(false, reason);
            };
            this.ws.onclose = function (err) {
                _this.logger.info("ws closed ".concat(err));
                pw.reject("closed");
                _this.notifyStatusChanged(false);
            };
            this.ws.onopen = function () {
                var _a;
                _this.startupTimer.mark("ws-opened");
                _this.logger.info("ws opened ".concat((_a = _this.settings.identity) === null || _a === void 0 ? void 0 : _a.application));
                pw.resolve();
                _this.notifyStatusChanged(true);
            };
            this.ws.onmessage = function (message) {
                _this._registry.execute("onMessage", message.data);
            };
            return pw.promise;
        };
        WS.prototype.notifyForSocketState = function (error) {
            this.wsRequests.forEach(function (wsRequest) {
                if (error) {
                    if (wsRequest.failed) {
                        wsRequest.failed(error);
                    }
                }
                else {
                    wsRequest.callback();
                }
            });
            this.wsRequests = [];
        };
        WS.prototype.notifyStatusChanged = function (status, reason) {
            this._registry.execute("onConnectedChanged", status, reason);
        };
        return WS;
    }());

    var shortidExports = {};
    var shortid$1 = {
      get exports(){ return shortidExports; },
      set exports(v){ shortidExports = v; },
    };

    var libExports = {};
    var lib$2 = {
      get exports(){ return libExports; },
      set exports(v){ libExports = v; },
    };

    // Found this seed-based random generator somewhere
    // Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

    var seed = 1;

    /**
     * return a random number based on a seed
     * @param seed
     * @returns {number}
     */
    function getNextValue() {
        seed = (seed * 9301 + 49297) % 233280;
        return seed/(233280.0);
    }

    function setSeed$1(_seed_) {
        seed = _seed_;
    }

    var randomFromSeed$1 = {
        nextValue: getNextValue,
        seed: setSeed$1
    };

    var randomFromSeed = randomFromSeed$1;

    var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
    var alphabet$2;
    var previousSeed;

    var shuffled;

    function reset() {
        shuffled = false;
    }

    function setCharacters(_alphabet_) {
        if (!_alphabet_) {
            if (alphabet$2 !== ORIGINAL) {
                alphabet$2 = ORIGINAL;
                reset();
            }
            return;
        }

        if (_alphabet_ === alphabet$2) {
            return;
        }

        if (_alphabet_.length !== ORIGINAL.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
        }

        var unique = _alphabet_.split('').filter(function(item, ind, arr){
           return ind !== arr.lastIndexOf(item);
        });

        if (unique.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
        }

        alphabet$2 = _alphabet_;
        reset();
    }

    function characters(_alphabet_) {
        setCharacters(_alphabet_);
        return alphabet$2;
    }

    function setSeed(seed) {
        randomFromSeed.seed(seed);
        if (previousSeed !== seed) {
            reset();
            previousSeed = seed;
        }
    }

    function shuffle() {
        if (!alphabet$2) {
            setCharacters(ORIGINAL);
        }

        var sourceArray = alphabet$2.split('');
        var targetArray = [];
        var r = randomFromSeed.nextValue();
        var characterIndex;

        while (sourceArray.length > 0) {
            r = randomFromSeed.nextValue();
            characterIndex = Math.floor(r * sourceArray.length);
            targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
        }
        return targetArray.join('');
    }

    function getShuffled() {
        if (shuffled) {
            return shuffled;
        }
        shuffled = shuffle();
        return shuffled;
    }

    /**
     * lookup shuffled letter
     * @param index
     * @returns {string}
     */
    function lookup(index) {
        var alphabetShuffled = getShuffled();
        return alphabetShuffled[index];
    }

    function get () {
      return alphabet$2 || ORIGINAL;
    }

    var alphabet_1 = {
        get: get,
        characters: characters,
        seed: setSeed,
        lookup: lookup,
        shuffled: getShuffled
    };

    var crypto$1 = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

    var randomByte;

    if (!crypto$1 || !crypto$1.getRandomValues) {
        randomByte = function(size) {
            var bytes = [];
            for (var i = 0; i < size; i++) {
                bytes.push(Math.floor(Math.random() * 256));
            }
            return bytes;
        };
    } else {
        randomByte = function(size) {
            return crypto$1.getRandomValues(new Uint8Array(size));
        };
    }

    var randomByteBrowser = randomByte;

    // This file replaces `format.js` in bundlers like webpack or Rollup,
    // according to `browser` config in `package.json`.

    var format_browser = function (random, alphabet, size) {
      // We can’t use bytes bigger than the alphabet. To make bytes values closer
      // to the alphabet, we apply bitmask on them. We look for the closest
      // `2 ** x - 1` number, which will be bigger than alphabet size. If we have
      // 30 symbols in the alphabet, we will take 31 (00011111).
      // We do not use faster Math.clz32, because it is not available in browsers.
      var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
      // Bitmask is not a perfect solution (in our example it will pass 31 bytes,
      // which is bigger than the alphabet). As a result, we will need more bytes,
      // than ID size, because we will refuse bytes bigger than the alphabet.

      // Every hardware random generator call is costly,
      // because we need to wait for entropy collection. This is why often it will
      // be faster to ask for few extra bytes in advance, to avoid additional calls.

      // Here we calculate how many random bytes should we call in advance.
      // It depends on ID length, mask / alphabet size and magic number 1.6
      // (which was selected according benchmarks).

      // -~f => Math.ceil(f) if n is float number
      // -~i => i + 1 if n is integer number
      var step = -~(1.6 * mask * size / alphabet.length);
      var id = '';

      while (true) {
        var bytes = random(step);
        // Compact alternative for `for (var i = 0; i < step; i++)`
        var i = step;
        while (i--) {
          // If random byte is bigger than alphabet even after bitmask,
          // we refuse it by `|| ''`.
          id += alphabet[bytes[i] & mask] || '';
          // More compact than `id.length + 1 === size`
          if (id.length === +size) return id
        }
      }
    };

    var alphabet$1 = alphabet_1;
    var random = randomByteBrowser;
    var format = format_browser;

    function generate$1(number) {
        var loopCounter = 0;
        var done;

        var str = '';

        while (!done) {
            str = str + format(random, alphabet$1.get(), 1);
            done = number < (Math.pow(16, loopCounter + 1 ) );
            loopCounter++;
        }
        return str;
    }

    var generate_1 = generate$1;

    var generate = generate_1;

    // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
    // This number should be updated every year or so to keep the generated id short.
    // To regenerate `new Date() - 0` and bump the version. Always bump the version!
    var REDUCE_TIME = 1567752802062;

    // don't change unless we change the algos or REDUCE_TIME
    // must be an integer and less than 16
    var version$1 = 7;

    // Counter is used when shortid is called multiple times in one second.
    var counter;

    // Remember the last time shortid was called in case counter is needed.
    var previousSeconds;

    /**
     * Generate unique id
     * Returns string id
     */
    function build(clusterWorkerId) {
        var str = '';

        var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

        if (seconds === previousSeconds) {
            counter++;
        } else {
            counter = 0;
            previousSeconds = seconds;
        }

        str = str + generate(version$1);
        str = str + generate(clusterWorkerId);
        if (counter > 0) {
            str = str + generate(counter);
        }
        str = str + generate(seconds);
        return str;
    }

    var build_1 = build;

    var alphabet = alphabet_1;

    function isShortId(id) {
        if (!id || typeof id !== 'string' || id.length < 6 ) {
            return false;
        }

        var nonAlphabetic = new RegExp('[^' +
          alphabet.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') +
        ']');
        return !nonAlphabetic.test(id);
    }

    var isValid = isShortId;

    (function (module) {

    	var alphabet = alphabet_1;
    	var build = build_1;
    	var isValid$1 = isValid;

    	// if you are using cluster or multiple servers use this to make each instance
    	// has a unique value for worker
    	// Note: I don't know if this is automatically set when using third
    	// party cluster solutions such as pm2.
    	var clusterWorkerId = 0;

    	/**
    	 * Set the seed.
    	 * Highly recommended if you don't want people to try to figure out your id schema.
    	 * exposed as shortid.seed(int)
    	 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
    	 */
    	function seed(seedValue) {
    	    alphabet.seed(seedValue);
    	    return module.exports;
    	}

    	/**
    	 * Set the cluster worker or machine id
    	 * exposed as shortid.worker(int)
    	 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
    	 * returns shortid module so it can be chained.
    	 */
    	function worker(workerId) {
    	    clusterWorkerId = workerId;
    	    return module.exports;
    	}

    	/**
    	 *
    	 * sets new characters to use in the alphabet
    	 * returns the shuffled alphabet
    	 */
    	function characters(newCharacters) {
    	    if (newCharacters !== undefined) {
    	        alphabet.characters(newCharacters);
    	    }

    	    return alphabet.shuffled();
    	}

    	/**
    	 * Generate unique id
    	 * Returns string id
    	 */
    	function generate() {
    	  return build(clusterWorkerId);
    	}

    	// Export all other functions as properties of the generate function
    	module.exports = generate;
    	module.exports.generate = generate;
    	module.exports.seed = seed;
    	module.exports.worker = worker;
    	module.exports.characters = characters;
    	module.exports.isValid = isValid$1;
    } (lib$2));

    (function (module) {
    	module.exports = libExports;
    } (shortid$1));

    var shortid = /*@__PURE__*/getDefaultExportFromCjs(shortidExports);

    function domainSession (domain, connection, logger, successMessages, errorMessages) {
        if (domain == null) {
            domain = "global";
        }
        successMessages = successMessages || ["success"];
        errorMessages = errorMessages || ["error"];
        var isJoined = false;
        var tryReconnecting = false;
        var _latestOptions;
        var _connectionOn = false;
        var callbacks = lib$1();
        connection.disconnected(handleConnectionDisconnected);
        connection.loggedIn(handleConnectionLoggedIn);
        connection.on("success", function (msg) { return handleSuccessMessage(msg); });
        connection.on("error", function (msg) { return handleErrorMessage(msg); });
        connection.on("result", function (msg) { return handleSuccessMessage(msg); });
        if (successMessages) {
            successMessages.forEach(function (sm) {
                connection.on(sm, function (msg) { return handleSuccessMessage(msg); });
            });
        }
        if (errorMessages) {
            errorMessages.forEach(function (sm) {
                connection.on(sm, function (msg) { return handleErrorMessage(msg); });
            });
        }
        var requestsMap = {};
        function join(options) {
            _latestOptions = options;
            return new Promise(function (resolve, reject) {
                if (isJoined) {
                    resolve({});
                    return;
                }
                var joinPromise;
                if (domain === "global") {
                    joinPromise = _connectionOn ? Promise.resolve({}) : Promise.reject("not connected to gateway");
                }
                else {
                    logger.debug("joining domain ".concat(domain));
                    var joinMsg = {
                        type: "join",
                        destination: domain,
                        domain: "global",
                        options: options,
                    };
                    joinPromise = send(joinMsg);
                }
                joinPromise
                    .then(function () {
                    handleJoined();
                    resolve({});
                })
                    .catch(function (err) {
                    logger.debug("error joining " + domain + " domain: " + JSON.stringify(err));
                    reject(err);
                });
            });
        }
        function leave() {
            if (domain === "global") {
                return Promise.resolve();
            }
            logger.debug("stopping session " + domain + "...");
            var leaveMsg = {
                type: "leave",
                destination: domain,
                domain: "global",
            };
            tryReconnecting = false;
            return send(leaveMsg)
                .then(function () {
                isJoined = false;
                callbacks.execute("onLeft");
            })
                .catch(function () {
                isJoined = false;
                callbacks.execute("onLeft");
            });
        }
        function handleJoined() {
            logger.debug("did join " + domain);
            isJoined = true;
            var wasReconnect = tryReconnecting;
            tryReconnecting = false;
            callbacks.execute("onJoined", wasReconnect);
        }
        function handleConnectionDisconnected() {
            _connectionOn = false;
            logger.debug("connection is down");
            isJoined = false;
            tryReconnecting = true;
            callbacks.execute("onLeft", { disconnected: true });
        }
        function handleConnectionLoggedIn() {
            _connectionOn = true;
            if (tryReconnecting) {
                logger.debug("connection is now up - trying to reconnect...");
                join(_latestOptions);
            }
        }
        function onJoined(callback) {
            if (isJoined) {
                callback(false);
            }
            return callbacks.add("onJoined", callback);
        }
        function onLeft(callback) {
            if (!isJoined) {
                callback();
            }
            return callbacks.add("onLeft", callback);
        }
        function handleErrorMessage(msg) {
            if (domain !== msg.domain) {
                return;
            }
            var requestId = msg.request_id;
            if (!requestId) {
                return;
            }
            var entry = requestsMap[requestId];
            if (!entry) {
                return;
            }
            entry.error(msg);
        }
        function handleSuccessMessage(msg) {
            if (msg.domain !== domain) {
                return;
            }
            var requestId = msg.request_id;
            if (!requestId) {
                return;
            }
            var entry = requestsMap[requestId];
            if (!entry) {
                return;
            }
            entry.success(msg);
        }
        function getNextRequestId() {
            return shortid();
        }
        function send(msg, tag, options) {
            options = options || {};
            msg.request_id = msg.request_id || getNextRequestId();
            msg.domain = msg.domain || domain;
            if (!options.skipPeerId) {
                msg.peer_id = connection.peerId;
            }
            var requestId = msg.request_id;
            return new Promise(function (resolve, reject) {
                requestsMap[requestId] = {
                    success: function (successMsg) {
                        delete requestsMap[requestId];
                        successMsg._tag = tag;
                        resolve(successMsg);
                    },
                    error: function (errorMsg) {
                        logger.warn("GW error - ".concat(JSON.stringify(errorMsg), " for request ").concat(JSON.stringify(msg)));
                        delete requestsMap[requestId];
                        errorMsg._tag = tag;
                        reject(errorMsg);
                    },
                };
                connection
                    .send(msg, options)
                    .catch(function (err) {
                    requestsMap[requestId].error({ err: err });
                });
            });
        }
        function sendFireAndForget(msg) {
            msg.request_id = msg.request_id ? msg.request_id : getNextRequestId();
            msg.domain = msg.domain || domain;
            msg.peer_id = connection.peerId;
            return connection.send(msg);
        }
        return {
            join: join,
            leave: leave,
            onJoined: onJoined,
            onLeft: onLeft,
            send: send,
            sendFireAndForget: sendFireAndForget,
            on: function (type, callback) {
                connection.on(type, function (msg) {
                    if (msg.domain !== domain) {
                        return;
                    }
                    try {
                        callback(msg);
                    }
                    catch (e) {
                        logger.error("Callback  failed: ".concat(e, " \n ").concat(e.stack, " \n msg was: ").concat(JSON.stringify(msg)), e);
                    }
                });
            },
            loggedIn: function (callback) { return connection.loggedIn(callback); },
            connected: function (callback) { return connection.connected(callback); },
            disconnected: function (callback) { return connection.disconnected(callback); },
            get peerId() {
                return connection.peerId;
            },
            get domain() {
                return domain;
            },
        };
    }

    var GW3ProtocolImpl = (function () {
        function GW3ProtocolImpl(connection, settings, logger) {
            var _this = this;
            this.connection = connection;
            this.settings = settings;
            this.logger = logger;
            this.protocolVersion = 3;
            this.datePrefix = "#T42_DATE#";
            this.datePrefixLen = this.datePrefix.length;
            this.dateMinLen = this.datePrefixLen + 1;
            this.datePrefixFirstChar = this.datePrefix[0];
            this.registry = lib$1();
            this._isLoggedIn = false;
            this.shouldTryLogin = true;
            this.initialLogin = true;
            this.initialLoginAttempts = 3;
            this.sessions = [];
            connection.disconnected(function () {
                _this.handleDisconnected();
            });
            this.ping();
        }
        Object.defineProperty(GW3ProtocolImpl.prototype, "isLoggedIn", {
            get: function () {
                return this._isLoggedIn;
            },
            enumerable: false,
            configurable: true
        });
        GW3ProtocolImpl.prototype.processStringMessage = function (message) {
            var _this = this;
            var msg = JSON.parse(message, function (key, value) {
                if (typeof value !== "string") {
                    return value;
                }
                if (value.length < _this.dateMinLen) {
                    return value;
                }
                if (value[0] !== _this.datePrefixFirstChar) {
                    return value;
                }
                if (value.substring(0, _this.datePrefixLen) !== _this.datePrefix) {
                    return value;
                }
                try {
                    var milliseconds = parseInt(value.substring(_this.datePrefixLen, value.length), 10);
                    if (isNaN(milliseconds)) {
                        return value;
                    }
                    return new Date(milliseconds);
                }
                catch (ex) {
                    return value;
                }
            });
            return {
                msg: msg,
                msgType: msg.type,
            };
        };
        GW3ProtocolImpl.prototype.createStringMessage = function (message) {
            var oldToJson = Date.prototype.toJSON;
            try {
                var datePrefix_1 = this.datePrefix;
                Date.prototype.toJSON = function () {
                    return datePrefix_1 + this.getTime();
                };
                var result = JSON.stringify(message);
                return result;
            }
            finally {
                Date.prototype.toJSON = oldToJson;
            }
        };
        GW3ProtocolImpl.prototype.processObjectMessage = function (message) {
            if (!message.type) {
                throw new Error("Object should have type property");
            }
            return {
                msg: message,
                msgType: message.type,
            };
        };
        GW3ProtocolImpl.prototype.createObjectMessage = function (message) {
            return message;
        };
        GW3ProtocolImpl.prototype.login = function (config, reconnect) {
            return __awaiter(this, void 0, void 0, function () {
                var authentication, token, e_1, _a, helloMsg, sendOptions, welcomeMsg, msg, token, _b, err_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.logger.debug("logging in...");
                            this.loginConfig = config;
                            if (!this.loginConfig) {
                                this.loginConfig = { username: "", password: "" };
                            }
                            this.shouldTryLogin = true;
                            authentication = {};
                            this.connection.gatewayToken = config.gatewayToken;
                            if (!config.gatewayToken) return [3, 5];
                            if (!reconnect) return [3, 4];
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4, this.getNewGWToken()];
                        case 2:
                            token = _c.sent();
                            config.gatewayToken = token;
                            return [3, 4];
                        case 3:
                            e_1 = _c.sent();
                            this.logger.warn("failed to get GW token when reconnecting ".concat((e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || e_1));
                            return [3, 4];
                        case 4:
                            authentication.method = "gateway-token";
                            authentication.token = config.gatewayToken;
                            this.connection.gatewayToken = config.gatewayToken;
                            return [3, 10];
                        case 5:
                            if (!(config.flowName === "sspi")) return [3, 9];
                            authentication.provider = "win";
                            authentication.method = "access-token";
                            if (!(config.flowCallback && config.sessionId)) return [3, 7];
                            _a = authentication;
                            return [4, config.flowCallback(config.sessionId, null)];
                        case 6:
                            _a.token =
                                (_c.sent())
                                    .data
                                    .toString("base64");
                            return [3, 8];
                        case 7: throw new Error("Invalid SSPI config");
                        case 8: return [3, 10];
                        case 9:
                            if (config.token) {
                                authentication.method = "access-token";
                                authentication.token = config.token;
                            }
                            else if (config.username) {
                                authentication.method = "secret";
                                authentication.login = config.username;
                                authentication.secret = config.password;
                            }
                            else if (config.provider) {
                                authentication.provider = config.provider;
                                authentication.providerContext = config.providerContext;
                            }
                            else {
                                throw new Error("invalid auth message" + JSON.stringify(config));
                            }
                            _c.label = 10;
                        case 10:
                            helloMsg = {
                                type: "hello",
                                identity: this.settings.identity,
                                authentication: authentication
                            };
                            if (config.sessionId) {
                                helloMsg.request_id = config.sessionId;
                            }
                            this.globalDomain = domainSession("global", this.connection, this.logger.subLogger("global-domain"), [
                                "welcome",
                                "token",
                                "authentication-request"
                            ]);
                            sendOptions = { skipPeerId: true };
                            if (this.initialLogin) {
                                sendOptions.retryInterval = this.settings.reconnectInterval;
                                sendOptions.maxRetries = this.settings.reconnectAttempts;
                            }
                            _c.label = 11;
                        case 11:
                            _c.trys.push([11, 19, 20, 21]);
                            welcomeMsg = void 0;
                            _c.label = 12;
                        case 12:
                            return [4, this.globalDomain.send(helloMsg, undefined, sendOptions)];
                        case 13:
                            msg = _c.sent();
                            if (!(msg.type === "authentication-request")) return [3, 16];
                            token = Buffer.from(msg.authentication.token, "base64");
                            if (!(config.flowCallback && config.sessionId)) return [3, 15];
                            _b = helloMsg.authentication;
                            return [4, config.flowCallback(config.sessionId, token)];
                        case 14:
                            _b.token =
                                (_c.sent())
                                    .data
                                    .toString("base64");
                            _c.label = 15;
                        case 15:
                            helloMsg.request_id = config.sessionId;
                            return [3, 12];
                        case 16:
                            if (msg.type === "welcome") {
                                welcomeMsg = msg;
                                return [3, 18];
                            }
                            else if (msg.type === "error") {
                                throw new Error("Authentication failed: " + msg.reason);
                            }
                            else {
                                throw new Error("Unexpected message type during authentication: " + msg.type);
                            }
                        case 17: return [3, 12];
                        case 18:
                            this.initialLogin = false;
                            this.logger.debug("login successful with peerId " + welcomeMsg.peer_id);
                            this.connection.peerId = welcomeMsg.peer_id;
                            this.connection.resolvedIdentity = welcomeMsg.resolved_identity;
                            this.connection.availableDomains = welcomeMsg.available_domains;
                            if (welcomeMsg.options) {
                                this.connection.token = welcomeMsg.options.access_token;
                                this.connection.info = welcomeMsg.options.info;
                            }
                            this.setLoggedIn(true);
                            return [2, welcomeMsg.resolved_identity];
                        case 19:
                            err_1 = _c.sent();
                            this.logger.error("error sending hello message - " + (err_1.message || err_1.msg || err_1.reason || err_1), err_1);
                            throw err_1;
                        case 20:
                            if (config && config.flowCallback && config.sessionId) {
                                config.flowCallback(config.sessionId, null);
                            }
                            return [7];
                        case 21: return [2];
                    }
                });
            });
        };
        GW3ProtocolImpl.prototype.logout = function () {
            return __awaiter(this, void 0, void 0, function () {
                var promises;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.debug("logging out...");
                            this.shouldTryLogin = false;
                            if (this.pingTimer) {
                                clearTimeout(this.pingTimer);
                            }
                            promises = this.sessions.map(function (session) {
                                session.leave();
                            });
                            return [4, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        GW3ProtocolImpl.prototype.loggedIn = function (callback) {
            if (this._isLoggedIn) {
                callback();
            }
            return this.registry.add("onLoggedIn", callback);
        };
        GW3ProtocolImpl.prototype.domain = function (domainName, domainLogger, successMessages, errorMessages) {
            var session = this.sessions.filter(function (s) { return s.domain === domainName; })[0];
            if (!session) {
                session = domainSession(domainName, this.connection, domainLogger, successMessages, errorMessages);
                this.sessions.push(session);
            }
            return session;
        };
        GW3ProtocolImpl.prototype.handleDisconnected = function () {
            var _this = this;
            this.setLoggedIn(false);
            var tryToLogin = this.shouldTryLogin;
            if (tryToLogin && this.initialLogin) {
                if (this.initialLoginAttempts <= 0) {
                    return;
                }
                this.initialLoginAttempts--;
            }
            this.logger.debug("disconnected - will try new login?" + this.shouldTryLogin);
            if (this.shouldTryLogin) {
                if (!this.loginConfig) {
                    throw new Error("no login info");
                }
                this.connection.login(this.loginConfig, true)
                    .catch(function () {
                    setTimeout(_this.handleDisconnected.bind(_this), _this.settings.reconnectInterval || 1000);
                });
            }
        };
        GW3ProtocolImpl.prototype.setLoggedIn = function (value) {
            this._isLoggedIn = value;
            if (this._isLoggedIn) {
                this.registry.execute("onLoggedIn");
            }
        };
        GW3ProtocolImpl.prototype.ping = function () {
            var _this = this;
            if (!this.shouldTryLogin) {
                return;
            }
            if (this._isLoggedIn) {
                this.connection.send({ type: "ping" });
            }
            this.pingTimer = setTimeout(function () {
                _this.ping();
            }, 30 * 1000);
        };
        GW3ProtocolImpl.prototype.authToken = function () {
            var createTokenReq = {
                type: "create-token"
            };
            if (!this.globalDomain) {
                return Promise.reject(new Error("no global domain session"));
            }
            return this.globalDomain.send(createTokenReq)
                .then(function (res) {
                return res.token;
            });
        };
        GW3ProtocolImpl.prototype.getNewGWToken = function () {
            if (typeof window !== undefined) {
                var glue42gd = window.glue42gd;
                if (glue42gd) {
                    return glue42gd.getGWToken();
                }
            }
            return Promise.reject(new Error("not running in GD"));
        };
        return GW3ProtocolImpl;
    }());

    var MessageReplayerImpl = (function () {
        function MessageReplayerImpl(specs) {
            this.specsNames = [];
            this.messages = {};
            this.subs = {};
            this.subsRefCount = {};
            this.specs = {};
            for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
                var spec = specs_1[_i];
                this.specs[spec.name] = spec;
                this.specsNames.push(spec.name);
            }
        }
        MessageReplayerImpl.prototype.init = function (connection) {
            var _this = this;
            this.connection = connection;
            for (var _i = 0, _a = this.specsNames; _i < _a.length; _i++) {
                var name_1 = _a[_i];
                var _loop_1 = function (type) {
                    var refCount = this_1.subsRefCount[type];
                    if (!refCount) {
                        refCount = 0;
                    }
                    refCount += 1;
                    this_1.subsRefCount[type] = refCount;
                    if (refCount > 1) {
                        return "continue";
                    }
                    var sub = connection.on(type, function (msg) { return _this.processMessage(type, msg); });
                    this_1.subs[type] = sub;
                };
                var this_1 = this;
                for (var _b = 0, _c = this.specs[name_1].types; _b < _c.length; _b++) {
                    var type = _c[_b];
                    _loop_1(type);
                }
            }
        };
        MessageReplayerImpl.prototype.processMessage = function (type, msg) {
            if (this.isDone || !msg) {
                return;
            }
            for (var _i = 0, _a = this.specsNames; _i < _a.length; _i++) {
                var name_2 = _a[_i];
                if (this.specs[name_2].types.indexOf(type) !== -1) {
                    var messages = this.messages[name_2] || [];
                    this.messages[name_2] = messages;
                    messages.push(msg);
                }
            }
        };
        MessageReplayerImpl.prototype.drain = function (name, callback) {
            var _a;
            if (callback) {
                (this.messages[name] || []).forEach(callback);
            }
            delete this.messages[name];
            for (var _i = 0, _b = this.specs[name].types; _i < _b.length; _i++) {
                var type = _b[_i];
                this.subsRefCount[type] -= 1;
                if (this.subsRefCount[type] <= 0) {
                    (_a = this.connection) === null || _a === void 0 ? void 0 : _a.off(this.subs[type]);
                    delete this.subs[type];
                    delete this.subsRefCount[type];
                }
            }
            delete this.specs[name];
            if (!this.specs.length) {
                this.isDone = true;
            }
        };
        return MessageReplayerImpl;
    }());

    var PromisePlus$1 = function (executor, timeoutMilliseconds, timeoutMessage) {
        return new Promise(function (resolve, reject) {
            var timeout = setTimeout(function () {
                var message = timeoutMessage || "Promise timeout hit: ".concat(timeoutMilliseconds);
                reject(message);
            }, timeoutMilliseconds);
            var providedPromise = new Promise(executor);
            providedPromise
                .then(function (result) {
                clearTimeout(timeout);
                resolve(result);
            })
                .catch(function (error) {
                clearTimeout(timeout);
                reject(error);
            });
        });
    };

    var WebPlatformTransport = (function () {
        function WebPlatformTransport(settings, logger, identity) {
            this.settings = settings;
            this.logger = logger;
            this.identity = identity;
            this.iAmConnected = false;
            this.parentReady = false;
            this.rejected = false;
            this.children = [];
            this.extContentAvailable = false;
            this.extContentConnecting = false;
            this.extContentConnected = false;
            this.parentInExtMode = false;
            this.webNamespace = "g42_core_web";
            this.parentPingTimeout = 5000;
            this.connectionRequestTimeout = 7000;
            this.defaultTargetString = "*";
            this.registry = lib$1();
            this.messages = {
                connectionAccepted: { name: "connectionAccepted", handle: this.handleConnectionAccepted.bind(this) },
                connectionRejected: { name: "connectionRejected", handle: this.handleConnectionRejected.bind(this) },
                connectionRequest: { name: "connectionRequest", handle: this.handleConnectionRequest.bind(this) },
                parentReady: { name: "parentReady", handle: this.handleParentReady.bind(this) },
                parentPing: { name: "parentPing", handle: this.handleParentPing.bind(this) },
                platformPing: { name: "platformPing", handle: this.handlePlatformPing.bind(this) },
                platformReady: { name: "platformReady", handle: this.handlePlatformReady.bind(this) },
                clientUnload: { name: "clientUnload", handle: this.handleClientUnload.bind(this) },
                manualUnload: { name: "manualUnload", handle: this.handleManualUnload.bind(this) },
                extConnectionResponse: { name: "extConnectionResponse", handle: this.handleExtConnectionResponse.bind(this) },
                extSetupRequest: { name: "extSetupRequest", handle: this.handleExtSetupRequest.bind(this) },
                gatewayDisconnect: { name: "gatewayDisconnect", handle: this.handleGatewayDisconnect.bind(this) },
                gatewayInternalConnect: { name: "gatewayInternalConnect", handle: this.handleGatewayInternalConnect.bind(this) }
            };
            this.extContentAvailable = !!window.glue42ext;
            this.setUpMessageListener();
            this.setUpUnload();
            this.setupPlatformUnloadListener();
            if (!this.settings.port) {
                this.parent = window.opener || window.top;
                this.parentType = window.opener ? "opener" :
                    window.name.indexOf("#wsp") !== -1 ? "workspace" : "top";
            }
        }
        WebPlatformTransport.prototype.manualSetReadyState = function () {
            this.iAmConnected = true;
            this.parentReady = true;
        };
        Object.defineProperty(WebPlatformTransport.prototype, "transportWindowId", {
            get: function () {
                return this.publicWindowId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WebPlatformTransport.prototype, "communicationId", {
            get: function () {
                return this._communicationId;
            },
            enumerable: false,
            configurable: true
        });
        WebPlatformTransport.prototype.sendObject = function (msg) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.extContentConnected) {
                        return [2, window.postMessage({ glue42ExtOut: msg }, this.defaultTargetString)];
                    }
                    if (!this.port) {
                        throw new Error("Cannot send message, because the port was not opened yet");
                    }
                    this.port.postMessage(msg);
                    return [2];
                });
            });
        };
        Object.defineProperty(WebPlatformTransport.prototype, "isObjectBasedTransport", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        WebPlatformTransport.prototype.onMessage = function (callback) {
            return this.registry.add("onMessage", callback);
        };
        WebPlatformTransport.prototype.send = function () {
            return Promise.reject("not supported");
        };
        WebPlatformTransport.prototype.onConnectedChanged = function (callback) {
            return this.registry.add("onConnectedChanged", callback);
        };
        WebPlatformTransport.prototype.open = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.debug("opening a connection to the web platform gateway.");
                            return [4, this.connect()];
                        case 1:
                            _a.sent();
                            this.notifyStatusChanged(true);
                            return [2];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.close = function () {
            var _a, _b;
            var message = {
                glue42core: {
                    type: this.messages.gatewayDisconnect.name,
                    data: {
                        clientId: this.myClientId,
                        ownWindowId: (_a = this.identity) === null || _a === void 0 ? void 0 : _a.windowId
                    }
                }
            };
            (_b = this.port) === null || _b === void 0 ? void 0 : _b.postMessage(message);
            this.parentReady = false;
            this.notifyStatusChanged(false, "manual reconnection");
            return Promise.resolve();
        };
        WebPlatformTransport.prototype.name = function () {
            return "web-platform";
        };
        WebPlatformTransport.prototype.reconnect = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.close()];
                        case 1:
                            _a.sent();
                            return [2, Promise.resolve()];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.connect = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.settings.port) return [3, 2];
                            return [4, this.initiateInternalConnection()];
                        case 1:
                            _a.sent();
                            this.logger.debug("internal web platform connection completed");
                            return [2];
                        case 2:
                            if (!this.parentType || !this.parent) {
                                throw new Error("Cannot initiate a connection, because there is no opener, no top and no port.");
                            }
                            this.logger.debug("opening a ".concat(this.parentType === "opener" ? "child" : "grandchild", " client web platform connection"));
                            return [4, this.waitParent(this.parent, this.parentType)];
                        case 3:
                            _a.sent();
                            if (!this.parentInExtMode) return [3, 5];
                            return [4, this.requestConnectionPermissionFromExt()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5: return [4, this.initiateRemoteConnection(this.parent, this.parentType)];
                        case 6:
                            _a.sent();
                            this.logger.debug("the ".concat(this.parentType === "opener" ? "child" : "grandchild", " client is connected"));
                            return [2];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.initiateInternalConnection = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.logger.debug("opening an internal web platform connection");
                _this.port = _this.settings.port;
                if (_this.iAmConnected) {
                    _this.logger.warn("cannot open a new connection, because this client is currently connected");
                    return;
                }
                _this.port.onmessage = function (event) {
                    var _a, _b;
                    if (_this.iAmConnected && !((_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core)) {
                        _this.registry.execute("onMessage", event.data);
                        return;
                    }
                    var data = (_b = event.data) === null || _b === void 0 ? void 0 : _b.glue42core;
                    if (!data) {
                        return;
                    }
                    if (data.type === _this.messages.gatewayInternalConnect.name && data.success) {
                        _this.publicWindowId = _this.settings.windowId;
                        if (_this.identity && _this.publicWindowId) {
                            _this.identity.windowId = _this.publicWindowId;
                            _this.identity.instance = _this.publicWindowId;
                        }
                        resolve();
                    }
                    if (data.type === _this.messages.gatewayInternalConnect.name && data.error) {
                        reject(data.error);
                    }
                };
                _this.port.postMessage({
                    glue42core: {
                        type: _this.messages.gatewayInternalConnect.name
                    }
                });
            });
        };
        WebPlatformTransport.prototype.initiateRemoteConnection = function (target, parentType) {
            var _this = this;
            return PromisePlus$1(function (resolve, reject) {
                var _a;
                _this.connectionResolve = resolve;
                _this.connectionReject = reject;
                _this.myClientId = (_a = _this.myClientId) !== null && _a !== void 0 ? _a : shortid();
                var bridgeInstanceId = _this.parentType === "workspace" ? window.name.substring(0, window.name.indexOf("#wsp")) : window.name;
                var request = {
                    glue42core: {
                        type: _this.messages.connectionRequest.name,
                        clientId: _this.myClientId,
                        clientType: parentType === "top" || parentType === "workspace" ? "grandChild" : "child",
                        bridgeInstanceId: bridgeInstanceId
                    }
                };
                _this.logger.debug("sending connection request to ".concat(parentType));
                if (_this.extContentConnecting) {
                    request.glue42core.clientType = "child";
                    request.glue42core.bridgeInstanceId = _this.myClientId;
                    request.glue42core.parentWindowId = _this.parentWindowId;
                    return window.postMessage(request, _this.defaultTargetString);
                }
                target.postMessage(request, _this.defaultTargetString);
            }, this.connectionRequestTimeout, "The connection to the opener/top window timed out");
        };
        WebPlatformTransport.prototype.waitParent = function (target, parentType) {
            return __awaiter(this, void 0, void 0, function () {
                var connectionNotPossibleMsg, defaultParentCheck, extensionCheck, _a, directParentCheck, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            connectionNotPossibleMsg = "Cannot initiate glue, because this window was not opened or created by a glue client";
                            this.logger.debug("Checking the default parent");
                            return [4, this.isParentCheckSuccess(this.tryFindProxy(target, parentType))];
                        case 1:
                            defaultParentCheck = _c.sent();
                            if (defaultParentCheck.success) {
                                this.logger.debug("The default parent was found!");
                                return [2];
                            }
                            this.logger.debug("the default parent check failed, trying to find a g42x");
                            if (!this.extContentAvailable) return [3, 3];
                            return [4, this.isParentCheckSuccess(this.requestConnectionPermissionFromExt())];
                        case 2:
                            _a = _c.sent();
                            return [3, 4];
                        case 3:
                            _a = { success: false };
                            _c.label = 4;
                        case 4:
                            extensionCheck = _a;
                            if (extensionCheck.success) {
                                this.logger.debug("G42X was found!");
                                return [2];
                            }
                            if (parentType === "opener") {
                                throw new Error(connectionNotPossibleMsg);
                            }
                            this.logger.debug("the default and g42x parent checks failed, trying the direct parent, if it is different than the top");
                            if (!(window.top !== window.parent)) return [3, 6];
                            return [4, this.isParentCheckSuccess(this.tryFindProxy(window.parent, parentType))];
                        case 5:
                            _b = _c.sent();
                            return [3, 7];
                        case 6:
                            _b = { success: false };
                            _c.label = 7;
                        case 7:
                            directParentCheck = _b;
                            if (directParentCheck.success) {
                                this.logger.debug("The direct parent was found!");
                                this.parent = window.parent;
                                return [2];
                            }
                            throw new Error(connectionNotPossibleMsg);
                    }
                });
            });
        };
        WebPlatformTransport.prototype.isParentCheckSuccess = function (parentCheck) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, parentCheck];
                        case 1:
                            _a.sent();
                            return [2, { success: true }];
                        case 2:
                            _a.sent();
                            return [2, { success: false }];
                        case 3: return [2];
                    }
                });
            });
        };
        WebPlatformTransport.prototype.tryFindProxy = function (target, parentType) {
            var _this = this;
            var connectionNotPossibleMsg = "Cannot initiate glue, because this window was not opened or created by a glue client";
            var parentCheck = PromisePlus$1(function (resolve, reject) {
                var iAmTop = window.self === window.top;
                if (parentType === "top" && iAmTop) {
                    return reject(connectionNotPossibleMsg);
                }
                _this.parentPingResolve = resolve;
                var message = {
                    glue42core: {
                        type: parentType === "opener" ? _this.messages.platformPing.name : _this.messages.parentPing.name
                    }
                };
                _this.logger.debug("checking for ".concat(parentType, " window availability"));
                _this.parentPingInterval = setInterval(function () {
                    target.postMessage(message, _this.defaultTargetString);
                }, 1000);
            }, this.parentPingTimeout, connectionNotPossibleMsg);
            parentCheck.catch(function () {
                if (_this.parentPingInterval) {
                    clearInterval(_this.parentPingInterval);
                    delete _this.parentPingInterval;
                }
            });
            return parentCheck;
        };
        WebPlatformTransport.prototype.setUpMessageListener = function () {
            var _this = this;
            if (this.settings.port) {
                this.logger.debug("skipping generic message listener, because this is an internal client");
                return;
            }
            window.addEventListener("message", function (event) {
                var _a;
                var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
                if (!data || _this.rejected) {
                    return;
                }
                if (!_this.checkMessageTypeValid(data.type)) {
                    _this.logger.error("cannot handle the incoming glue42 core message, because the type is invalid: ".concat(data.type));
                    return;
                }
                var messageType = data.type;
                _this.logger.debug("received valid glue42core message of type: ".concat(messageType));
                _this.messages[messageType].handle(event);
            });
        };
        WebPlatformTransport.prototype.setUpUnload = function () {
            var _this = this;
            if (this.settings.port) {
                this.logger.debug("skipping unload event listener, because this is an internal client");
                return;
            }
            window.addEventListener("beforeunload", function () {
                var _a, _b;
                if (_this.extContentConnected) {
                    return;
                }
                var message = {
                    glue42core: {
                        type: _this.messages.clientUnload.name,
                        data: {
                            clientId: _this.myClientId,
                            ownWindowId: (_a = _this.identity) === null || _a === void 0 ? void 0 : _a.windowId
                        }
                    }
                };
                if (_this.parent) {
                    _this.parent.postMessage(message, _this.defaultTargetString);
                }
                (_b = _this.port) === null || _b === void 0 ? void 0 : _b.postMessage(message);
            });
        };
        WebPlatformTransport.prototype.handleParentReady = function (event) {
            var _a;
            this.logger.debug("handling the ready signal from the parent, by resoling the pending promise.");
            this.parentReady = true;
            var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
            if (data && data.extMode) {
                this.logger.debug("my parent is connected to its content script, fetching windowId and proceeding with content script connection");
                this.parentWindowId = data.extMode.windowId;
                this.parentInExtMode = true;
            }
            if (this.parentPingResolve) {
                this.parentPingResolve();
                delete this.parentPingResolve;
            }
            if (this.parentPingInterval) {
                clearInterval(this.parentPingInterval);
                delete this.parentPingInterval;
            }
        };
        WebPlatformTransport.prototype.handlePlatformReady = function () {
            this.logger.debug("the web platform gave the ready signal");
            this.parentReady = true;
            if (this.parentPingResolve) {
                this.parentPingResolve();
                delete this.parentPingResolve;
            }
            if (this.parentPingInterval) {
                clearInterval(this.parentPingInterval);
                delete this.parentPingInterval;
            }
        };
        WebPlatformTransport.prototype.handleConnectionAccepted = function (event) {
            var _a;
            var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
            if (this.myClientId === data.clientId) {
                return this.handleAcceptanceOfMyRequest(data);
            }
            return this.handleAcceptanceOfGrandChildRequest(data, event);
        };
        WebPlatformTransport.prototype.handleAcceptanceOfMyRequest = function (data) {
            var _this = this;
            var _a, _b, _c;
            this.logger.debug("handling a connection accepted signal targeted at me.");
            this.isPreferredActivated = data.isPreferredActivated;
            if (this.extContentConnecting) {
                return this.processExtContentConnection(data);
            }
            if (!data.port) {
                this.logger.error("cannot set up my connection, because I was not provided with a port");
                return;
            }
            this.publicWindowId = this.parentType === "opener" ? window.name :
                this.parentType === "top" ? data.parentWindowId :
                    window.name.substring(0, window.name.indexOf("#wsp"));
            if (this.identity && this.parentType !== "top") {
                this.identity.windowId = (_a = this.identity.windowId) !== null && _a !== void 0 ? _a : this.publicWindowId;
                this.identity.instance = (_b = this.identity.instance) !== null && _b !== void 0 ? _b : this.publicWindowId;
            }
            if (this.identity && this.parentType === "top") {
                this.identity.instance = (_c = this.identity.instance) !== null && _c !== void 0 ? _c : shortid();
            }
            if (this.identity && data.appName) {
                this.identity.application = data.appName;
                this.identity.applicationName = data.appName;
            }
            this._communicationId = data.communicationId;
            this.port = data.port;
            this.port.onmessage = function (e) { return _this.registry.execute("onMessage", e.data); };
            if (this.connectionResolve) {
                this.logger.debug("my connection is set up, calling the connection resolve.");
                this.connectionResolve();
                delete this.connectionResolve;
                return;
            }
            this.logger.error("unable to call the connection resolve, because no connection promise was found");
        };
        WebPlatformTransport.prototype.processExtContentConnection = function (data) {
            var _this = this;
            this.logger.debug("handling a connection accepted signal targeted at me for extension content connection.");
            this.extContentConnecting = false;
            this.extContentConnected = true;
            this.publicWindowId = this.parentWindowId || this.myClientId;
            if (this.extContentConnecting && this.identity) {
                this.identity.windowId = this.publicWindowId;
            }
            if (this.identity && data.appName) {
                this.identity.application = data.appName;
                this.identity.applicationName = data.appName;
            }
            window.addEventListener("message", function (event) {
                var _a;
                var extData = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42ExtInc;
                if (!extData) {
                    return;
                }
                _this.registry.execute("onMessage", extData);
            });
            if (this.connectionResolve) {
                this.logger.debug("my connection is set up, calling the connection resolve.");
                this.connectionResolve();
                delete this.connectionResolve;
                return;
            }
        };
        WebPlatformTransport.prototype.handleAcceptanceOfGrandChildRequest = function (data, event) {
            if (this.extContentConnecting || this.extContentConnected) {
                this.logger.debug("cannot process acceptance of a grandchild, because I am connected to a content script");
                return;
            }
            this.logger.debug("handling a connection accepted signal targeted at a grandchild: ".concat(data.clientId));
            var child = this.children.find(function (c) { return c.grandChildId === data.clientId; });
            if (!child) {
                this.logger.error("cannot handle connection accepted for grandchild: ".concat(data.clientId, ", because there is no grandchild with this id"));
                return;
            }
            child.connected = true;
            this.logger.debug("the grandchild connection for ".concat(data.clientId, " is set up, forwarding the success message and the gateway port"));
            data.parentWindowId = this.publicWindowId;
            child.source.postMessage(event.data, child.origin, [data.port]);
            return;
        };
        WebPlatformTransport.prototype.handleConnectionRejected = function () {
            this.logger.debug("handling a connection rejection. Most likely the reason is that this window was not created by a glue API call");
            if (this.connectionReject) {
                this.connectionReject("The platform connection was rejected. Most likely because this window was not created by a glue API call");
                delete this.connectionReject;
            }
        };
        WebPlatformTransport.prototype.handleConnectionRequest = function (event) {
            if (this.extContentConnecting) {
                this.logger.debug("This connection request event is targeted at the extension content");
                return;
            }
            var source = event.source;
            var data = event.data.glue42core;
            if (!data.clientType || data.clientType !== "grandChild") {
                return this.rejectConnectionRequest(source, event.origin, "rejecting a connection request, because the source was not opened by a glue API call");
            }
            if (!data.clientId) {
                return this.rejectConnectionRequest(source, event.origin, "rejecting a connection request, because the source did not provide a valid id");
            }
            if (this.parentType !== "opener" || !this.parent) {
                return this.rejectConnectionRequest(source, event.origin, "Cannot forward the connection request, because no direct connection to the platform was found");
            }
            this.logger.debug("handling a connection request for a grandchild: ".concat(data.clientId));
            this.children.push({ grandChildId: data.clientId, source: source, connected: false, origin: event.origin });
            this.logger.debug("grandchild: ".concat(data.clientId, " is prepared, forwarding connection request to the platform"));
            this.parent.postMessage(event.data, this.defaultTargetString);
        };
        WebPlatformTransport.prototype.handleParentPing = function (event) {
            if (!this.parentReady) {
                this.logger.debug("my parent is not ready, I am ignoring the parent ping");
                return;
            }
            if (!this.iAmConnected) {
                this.logger.debug("i am not fully connected yet, I am ignoring the parent ping");
                return;
            }
            var message = {
                glue42core: {
                    type: this.messages.parentReady.name
                }
            };
            if (this.extContentConnected) {
                message.glue42core.extMode = { windowId: this.myClientId };
            }
            var source = event.source;
            this.logger.debug("responding to a parent ping with a ready message");
            source.postMessage(message, event.origin);
        };
        WebPlatformTransport.prototype.setupPlatformUnloadListener = function () {
            var _this = this;
            this.onMessage(function (msg) {
                if (msg.type === "platformUnload") {
                    _this.logger.debug("detected a web platform unload");
                    _this.parentReady = false;
                    _this.notifyStatusChanged(false, "Gateway unloaded");
                }
            });
        };
        WebPlatformTransport.prototype.handleManualUnload = function () {
            var _a, _b;
            var message = {
                glue42core: {
                    type: this.messages.clientUnload.name,
                    data: {
                        clientId: this.myClientId,
                        ownWindowId: (_a = this.identity) === null || _a === void 0 ? void 0 : _a.windowId
                    }
                }
            };
            if (this.extContentConnected) {
                return window.postMessage({ glue42ExtOut: message }, this.defaultTargetString);
            }
            (_b = this.port) === null || _b === void 0 ? void 0 : _b.postMessage(message);
        };
        WebPlatformTransport.prototype.handleClientUnload = function (event) {
            var data = event.data.glue42core;
            var clientId = data === null || data === void 0 ? void 0 : data.data.clientId;
            if (!clientId) {
                this.logger.warn("cannot process grand child unload, because the provided id was not valid");
                return;
            }
            var foundChild = this.children.find(function (child) { return child.grandChildId === clientId; });
            if (!foundChild) {
                this.logger.warn("cannot process grand child unload, because this client is unaware of this grandchild");
                return;
            }
            this.logger.debug("handling grandchild unload for id: ".concat(clientId));
            this.children = this.children.filter(function (child) { return child.grandChildId !== clientId; });
        };
        WebPlatformTransport.prototype.handlePlatformPing = function () {
            this.logger.error("cannot handle platform ping, because this is not a platform calls handling component");
        };
        WebPlatformTransport.prototype.notifyStatusChanged = function (status, reason) {
            this.iAmConnected = status;
            this.registry.execute("onConnectedChanged", status, reason);
        };
        WebPlatformTransport.prototype.checkMessageTypeValid = function (typeToValidate) {
            return typeof typeToValidate === "string" && !!this.messages[typeToValidate];
        };
        WebPlatformTransport.prototype.rejectConnectionRequest = function (source, origin, reason) {
            this.rejected = true;
            this.logger.error(reason);
            var rejection = {
                glue42core: {
                    type: this.messages.connectionRejected.name
                }
            };
            source.postMessage(rejection, origin);
        };
        WebPlatformTransport.prototype.requestConnectionPermissionFromExt = function () {
            var _this = this;
            return this.waitForContentScript()
                .then(function () { return PromisePlus$1(function (resolve, reject) {
                _this.extConnectionResolve = resolve;
                _this.extConnectionReject = reject;
                var message = {
                    glue42core: {
                        type: "extSetupRequest"
                    }
                };
                _this.logger.debug("permission request to the extension content script was sent");
                window.postMessage(message, _this.defaultTargetString);
            }, _this.parentPingTimeout, "Cannot initialize glue, because this app was not opened or created by a Glue Client and the request for extension connection timed out"); });
        };
        WebPlatformTransport.prototype.handleExtConnectionResponse = function (event) {
            var _a;
            var data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
            if (!data.approved && this.extConnectionReject) {
                return this.extConnectionReject("Cannot initialize glue, because this app was not opened or created by a Glue Client and the request for extension connection was rejected");
            }
            if (this.extConnectionResolve) {
                this.extContentConnecting = true;
                this.logger.debug("The extension connection was approved, proceeding.");
                this.extConnectionResolve();
                delete this.extConnectionResolve;
            }
        };
        WebPlatformTransport.prototype.handleExtSetupRequest = function () {
            return;
        };
        WebPlatformTransport.prototype.handleGatewayDisconnect = function () {
            return;
        };
        WebPlatformTransport.prototype.handleGatewayInternalConnect = function () {
            return;
        };
        WebPlatformTransport.prototype.waitForContentScript = function () {
            var _a;
            var contentReady = !!((_a = window.glue42ext) === null || _a === void 0 ? void 0 : _a.content);
            if (contentReady) {
                return Promise.resolve();
            }
            return PromisePlus$1(function (resolve) {
                window.addEventListener("Glue42EXTReady", function () {
                    resolve();
                });
            }, this.connectionRequestTimeout, "The content script was available, but was never heard to be ready");
        };
        return WebPlatformTransport;
    }());

    var waitForInvocations = function (invocations, callback) {
        var left = invocations;
        return function () {
            left--;
            if (left === 0) {
                callback();
            }
        };
    };

    var AsyncSequelizer$1 = (function () {
        function AsyncSequelizer(minSequenceInterval) {
            if (minSequenceInterval === void 0) { minSequenceInterval = 0; }
            this.minSequenceInterval = minSequenceInterval;
            this.queue = [];
            this.isExecutingQueue = false;
        }
        AsyncSequelizer.prototype.enqueue = function (action) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.queue.push({ action: action, resolve: resolve, reject: reject });
                _this.executeQueue();
            });
        };
        AsyncSequelizer.prototype.executeQueue = function () {
            return __awaiter(this, void 0, void 0, function () {
                var operation, actionResult, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.isExecutingQueue) {
                                return [2];
                            }
                            this.isExecutingQueue = true;
                            _a.label = 1;
                        case 1:
                            if (!this.queue.length) return [3, 7];
                            operation = this.queue.shift();
                            if (!operation) {
                                this.isExecutingQueue = false;
                                return [2];
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, operation.action()];
                        case 3:
                            actionResult = _a.sent();
                            operation.resolve(actionResult);
                            return [3, 5];
                        case 4:
                            error_1 = _a.sent();
                            operation.reject(error_1);
                            return [3, 5];
                        case 5: return [4, this.intervalBreak()];
                        case 6:
                            _a.sent();
                            return [3, 1];
                        case 7:
                            this.isExecutingQueue = false;
                            return [2];
                    }
                });
            });
        };
        AsyncSequelizer.prototype.intervalBreak = function () {
            var _this = this;
            return new Promise(function (res) { return setTimeout(res, _this.minSequenceInterval); });
        };
        return AsyncSequelizer;
    }());

    var Connection = (function () {
        function Connection(settings, logger) {
            this.settings = settings;
            this.logger = logger;
            this.messageHandlers = {};
            this.ids = 1;
            this.registry = lib$1();
            this._connected = false;
            this.isTrace = false;
            this._swapTransport = false;
            this._switchInProgress = false;
            this._transportSubscriptions = [];
            this._sequelizer = new AsyncSequelizer$1();
            settings = settings || {};
            settings.reconnectAttempts = settings.reconnectAttempts || 10;
            settings.reconnectInterval = settings.reconnectInterval || 1000;
            if (settings.inproc) {
                this.transport = new InProcTransport(settings.inproc, logger.subLogger("inMemory"));
            }
            else if (settings.sharedWorker) {
                this.transport = new SharedWorkerTransport(settings.sharedWorker, logger.subLogger("shared-worker"));
            }
            else if (settings.webPlatform) {
                this.transport = new WebPlatformTransport(settings.webPlatform, logger.subLogger("web-platform"), settings.identity);
            }
            else if (settings.ws !== undefined) {
                this.transport = new WS(settings, logger.subLogger("ws"));
            }
            else {
                throw new Error("No connection information specified");
            }
            this.isTrace = logger.canPublish("trace");
            logger.debug("starting with ".concat(this.transport.name(), " transport"));
            this.protocol = new GW3ProtocolImpl(this, settings, logger.subLogger("protocol"));
            var unsubConnectionChanged = this.transport.onConnectedChanged(this.handleConnectionChanged.bind(this));
            var unsubOnMessage = this.transport.onMessage(this.handleTransportMessage.bind(this));
            this._transportSubscriptions.push(unsubConnectionChanged);
            this._transportSubscriptions.push(unsubOnMessage);
            this._defaultTransport = this.transport;
        }
        Object.defineProperty(Connection.prototype, "protocolVersion", {
            get: function () {
                var _a;
                return (_a = this.protocol) === null || _a === void 0 ? void 0 : _a.protocolVersion;
            },
            enumerable: false,
            configurable: true
        });
        Connection.prototype.switchTransport = function (settings) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, this._sequelizer.enqueue(function () { return __awaiter(_this, void 0, void 0, function () {
                            var switchTargetTransport, verifyPromise, isSwitchSuccess;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!settings || typeof settings !== "object") {
                                            throw new Error("Cannot switch transports, because the settings are missing or invalid.");
                                        }
                                        if (typeof settings.type === "undefined") {
                                            throw new Error("Cannot switch the transport, because the type is not defined");
                                        }
                                        this.logger.trace("Starting transport switch with settings: ".concat(JSON.stringify(settings)));
                                        switchTargetTransport = settings.type === "secondary" ? this.getNewSecondaryTransport(settings) : this._defaultTransport;
                                        this._targetTransport = switchTargetTransport;
                                        this._targetAuth = settings.type === "secondary" ? this.getNewSecondaryAuth(settings) : this._defaultAuth;
                                        verifyPromise = this.verifyConnection();
                                        this._swapTransport = true;
                                        this._switchInProgress = true;
                                        this.logger.trace("The new transport has been set, closing the current transport");
                                        return [4, this.transport.close()];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        _a.trys.push([2, 4, , 5]);
                                        return [4, verifyPromise];
                                    case 3:
                                        _a.sent();
                                        isSwitchSuccess = this.transport === switchTargetTransport;
                                        this.logger.info("The reconnection after the switch was completed. Was the switch a success: ".concat(isSwitchSuccess));
                                        this._switchInProgress = false;
                                        return [2, { success: isSwitchSuccess }];
                                    case 4:
                                        _a.sent();
                                        this.logger.info("The reconnection after the switch timed out, reverting back to the default transport.");
                                        this.switchTransport({ type: "default" });
                                        this._switchInProgress = false;
                                        return [2, { success: false }];
                                    case 5: return [2];
                                }
                            });
                        }); })];
                });
            });
        };
        Connection.prototype.onLibReAnnounced = function (callback) {
            return this.registry.add("libReAnnounced", callback);
        };
        Connection.prototype.setLibReAnnounced = function (lib) {
            this.registry.execute("libReAnnounced", lib);
        };
        Connection.prototype.send = function (message, options) {
            if (this.transport.sendObject &&
                this.transport.isObjectBasedTransport) {
                var msg = this.protocol.createObjectMessage(message);
                if (this.isTrace) {
                    this.logger.trace(">> ".concat(JSON.stringify(msg)));
                }
                return this.transport.sendObject(msg, options);
            }
            else {
                var strMessage = this.protocol.createStringMessage(message);
                if (this.isTrace) {
                    this.logger.trace(">> ".concat(strMessage));
                }
                return this.transport.send(strMessage, options);
            }
        };
        Connection.prototype.on = function (type, messageHandler) {
            type = type.toLowerCase();
            if (this.messageHandlers[type] === undefined) {
                this.messageHandlers[type] = {};
            }
            var id = this.ids++;
            this.messageHandlers[type][id] = messageHandler;
            return {
                type: type,
                id: id,
            };
        };
        Connection.prototype.off = function (info) {
            delete this.messageHandlers[info.type.toLowerCase()][info.id];
        };
        Object.defineProperty(Connection.prototype, "isConnected", {
            get: function () {
                return this.protocol.isLoggedIn;
            },
            enumerable: false,
            configurable: true
        });
        Connection.prototype.connected = function (callback) {
            var _this = this;
            return this.protocol.loggedIn(function () {
                var currentServer = _this.transport.name();
                callback(currentServer);
            });
        };
        Connection.prototype.disconnected = function (callback) {
            return this.registry.add("disconnected", callback);
        };
        Connection.prototype.login = function (authRequest, reconnect) {
            return __awaiter(this, void 0, void 0, function () {
                var newAuth, identity, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._defaultAuth) {
                                this._defaultAuth = authRequest;
                            }
                            if (this._swapTransport) {
                                this.logger.trace("Detected a transport swap, swapping transports");
                                newAuth = this.transportSwap();
                                authRequest = newAuth !== null && newAuth !== void 0 ? newAuth : authRequest;
                            }
                            this.logger.trace("Starting login for transport: ".concat(this.transport.name(), " and auth ").concat(JSON.stringify(authRequest)));
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4, this.transport.open()];
                        case 2:
                            _a.sent();
                            this.logger.trace("Transport: ".concat(this.transport.name(), " opened, logging in"));
                            timer("connection").mark("transport-opened");
                            return [4, this.protocol.login(authRequest, reconnect)];
                        case 3:
                            identity = _a.sent();
                            this.logger.trace("Logged in with identity: ".concat(JSON.stringify(identity)));
                            timer("connection").mark("protocol-logged-in");
                            return [2, identity];
                        case 4:
                            error_2 = _a.sent();
                            if (this._switchInProgress) {
                                this.logger.trace("An error while logging in after a transport swap, preparing a default swap.");
                                this.prepareDefaultSwap();
                            }
                            throw new Error(error_2);
                        case 5: return [2];
                    }
                });
            });
        };
        Connection.prototype.logout = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.protocol.logout()];
                        case 1:
                            _a.sent();
                            return [4, this.transport.close()];
                        case 2:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Connection.prototype.loggedIn = function (callback) {
            return this.protocol.loggedIn(callback);
        };
        Connection.prototype.domain = function (domain, successMessages, errorMessages) {
            return this.protocol.domain(domain, this.logger.subLogger("domain=".concat(domain)), successMessages, errorMessages);
        };
        Connection.prototype.authToken = function () {
            return this.protocol.authToken();
        };
        Connection.prototype.reconnect = function () {
            return this.transport.reconnect();
        };
        Connection.prototype.distributeMessage = function (message, type) {
            var _this = this;
            var handlers = this.messageHandlers[type.toLowerCase()];
            if (handlers !== undefined) {
                Object.keys(handlers).forEach(function (handlerId) {
                    var handler = handlers[handlerId];
                    if (handler !== undefined) {
                        try {
                            handler(message);
                        }
                        catch (error) {
                            try {
                                _this.logger.error("Message handler failed with ".concat(error.stack), error);
                            }
                            catch (loggerError) {
                                console.log("Message handler failed", error);
                            }
                        }
                    }
                });
            }
        };
        Connection.prototype.handleConnectionChanged = function (connected) {
            if (this._connected === connected) {
                return;
            }
            this._connected = connected;
            if (connected) {
                if (this.settings.replaySpecs && this.settings.replaySpecs.length) {
                    this.replayer = new MessageReplayerImpl(this.settings.replaySpecs);
                    this.replayer.init(this);
                }
                this.registry.execute("connected");
            }
            else {
                this.registry.execute("disconnected");
            }
        };
        Connection.prototype.handleTransportMessage = function (msg) {
            var msgObj;
            if (typeof msg === "string") {
                msgObj = this.protocol.processStringMessage(msg);
            }
            else {
                msgObj = this.protocol.processObjectMessage(msg);
            }
            if (this.isTrace) {
                this.logger.trace("<< ".concat(JSON.stringify(msgObj)));
            }
            this.distributeMessage(msgObj.msg, msgObj.msgType);
        };
        Connection.prototype.verifyConnection = function () {
            var _this = this;
            return PromisePlus$1(function (resolve) {
                var unsub;
                var ready = waitForInvocations(2, function () {
                    if (unsub) {
                        unsub();
                    }
                    resolve();
                });
                unsub = _this.onLibReAnnounced(function (lib) {
                    if (lib.name === "interop") {
                        return ready();
                    }
                    if (lib.name === "contexts") {
                        return ready();
                    }
                });
            }, 10000, "Transport switch timed out waiting for all libraries to be re-announced");
        };
        Connection.prototype.getNewSecondaryTransport = function (settings) {
            var _a;
            if (!((_a = settings.transportConfig) === null || _a === void 0 ? void 0 : _a.url)) {
                throw new Error("Missing secondary transport URL.");
            }
            return new WS(Object.assign({}, this.settings, { ws: settings.transportConfig.url, reconnectAttempts: 1 }), this.logger.subLogger("ws-secondary"));
        };
        Connection.prototype.getNewSecondaryAuth = function (settings) {
            var _a;
            if (!((_a = settings.transportConfig) === null || _a === void 0 ? void 0 : _a.auth)) {
                throw new Error("Missing secondary transport auth information.");
            }
            return settings.transportConfig.auth;
        };
        Connection.prototype.transportSwap = function () {
            this._swapTransport = false;
            if (!this._targetTransport || !this._targetAuth) {
                this.logger.warn("Error while switching transports - either the target transport or auth is not defined: transport defined -> ".concat(!!this._defaultTransport, ", auth defined -> ").concat(!!this._targetAuth, ". Staying on the current one."));
                return;
            }
            this._transportSubscriptions.forEach(function (unsub) { return unsub(); });
            this._transportSubscriptions = [];
            this.transport = this._targetTransport;
            var unsubConnectionChanged = this.transport.onConnectedChanged(this.handleConnectionChanged.bind(this));
            var unsubOnMessage = this.transport.onMessage(this.handleTransportMessage.bind(this));
            this._transportSubscriptions.push(unsubConnectionChanged);
            this._transportSubscriptions.push(unsubOnMessage);
            return this._targetAuth;
        };
        Connection.prototype.prepareDefaultSwap = function () {
            var _this = this;
            this._transportSubscriptions.forEach(function (unsub) { return unsub(); });
            this._transportSubscriptions = [];
            this.transport.close().catch(function (error) { return _this.logger.warn("Error closing the ".concat(_this.transport.name(), " transport after a failed connection attempt: ").concat(JSON.stringify(error))); });
            this._targetTransport = this._defaultTransport;
            this._targetAuth = this._defaultAuth;
            this._swapTransport = true;
        };
        return Connection;
    }());

    var order = ["trace", "debug", "info", "warn", "error", "off"];
    var Logger = (function () {
        function Logger(name, parent, logFn) {
            this.name = name;
            this.parent = parent;
            this.subLoggers = [];
            this.logFn = console;
            this.customLogFn = false;
            this.name = name;
            if (parent) {
                this.path = "".concat(parent.path, ".").concat(name);
            }
            else {
                this.path = name;
            }
            this.loggerFullName = "[".concat(this.path, "]");
            this.includeTimeAndLevel = !logFn;
            if (logFn) {
                this.logFn = logFn;
                this.customLogFn = true;
            }
        }
        Logger.prototype.subLogger = function (name) {
            var existingSub = this.subLoggers.filter(function (subLogger) {
                return subLogger.name === name;
            })[0];
            if (existingSub !== undefined) {
                return existingSub;
            }
            Object.keys(this).forEach(function (key) {
                if (key === name) {
                    throw new Error("This sub logger name is not allowed.");
                }
            });
            var sub = new Logger(name, this, this.customLogFn ? this.logFn : undefined);
            this.subLoggers.push(sub);
            return sub;
        };
        Logger.prototype.publishLevel = function (level) {
            var _a;
            if (level) {
                this._publishLevel = level;
            }
            return this._publishLevel || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.publishLevel());
        };
        Logger.prototype.consoleLevel = function (level) {
            var _a;
            if (level) {
                this._consoleLevel = level;
            }
            return this._consoleLevel || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.consoleLevel());
        };
        Logger.prototype.log = function (message, level, error) {
            this.publishMessage(level || "info", message, error);
        };
        Logger.prototype.trace = function (message) {
            this.log(message, "trace");
        };
        Logger.prototype.debug = function (message) {
            this.log(message, "debug");
        };
        Logger.prototype.info = function (message) {
            this.log(message, "info");
        };
        Logger.prototype.warn = function (message) {
            this.log(message, "warn");
        };
        Logger.prototype.error = function (message, err) {
            this.log(message, "error");
        };
        Logger.prototype.canPublish = function (level, compareWith) {
            var levelIdx = order.indexOf(level);
            var restrictionIdx = order.indexOf(compareWith || this.consoleLevel() || "trace");
            return levelIdx >= restrictionIdx;
        };
        Logger.prototype.publishMessage = function (level, message, error) {
            var loggerName = this.loggerFullName;
            if (level === "error" && !error) {
                var e = new Error();
                if (e.stack) {
                    message =
                        message +
                            "\n" +
                            e.stack
                                .split("\n")
                                .slice(3)
                                .join("\n");
                }
            }
            if (this.canPublish(level, this.publishLevel())) {
                var interop = Logger.Interop;
                if (interop) {
                    try {
                        if (interop.methods({ name: Logger.InteropMethodName }).length > 0) {
                            interop.invoke(Logger.InteropMethodName, {
                                msg: "".concat(message),
                                logger: loggerName,
                                level: level
                            });
                        }
                    }
                    catch (_a) {
                    }
                }
            }
            if (this.canPublish(level)) {
                var prefix = "";
                if (this.includeTimeAndLevel) {
                    var date = new Date();
                    var time = "".concat(date.getHours(), ":").concat(date.getMinutes(), ":").concat(date.getSeconds(), ":").concat(date.getMilliseconds());
                    prefix = "[".concat(time, "] [").concat(level, "] ");
                }
                var toPrint = "".concat(prefix).concat(loggerName, ": ").concat(message);
                switch (level) {
                    case "trace":
                        this.logFn.debug(toPrint);
                        break;
                    case "debug":
                        if (this.logFn.debug) {
                            this.logFn.debug(toPrint);
                        }
                        else {
                            this.logFn.log(toPrint);
                        }
                        break;
                    case "info":
                        this.logFn.info(toPrint);
                        break;
                    case "warn":
                        this.logFn.warn(toPrint);
                        break;
                    case "error":
                        this.logFn.error(toPrint, error);
                        break;
                }
            }
        };
        Logger.InteropMethodName = "T42.AppLogger.Log";
        return Logger;
    }());

    var GW_MESSAGE_CREATE_CONTEXT = "create-context";
    var GW_MESSAGE_ACTIVITY_CREATED = "created";
    var GW_MESSAGE_ACTIVITY_DESTROYED = "destroyed";
    var GW_MESSAGE_CONTEXT_CREATED = "context-created";
    var GW_MESSAGE_CONTEXT_ADDED = "context-added";
    var GW_MESSAGE_SUBSCRIBE_CONTEXT = "subscribe-context";
    var GW_MESSAGE_SUBSCRIBED_CONTEXT = "subscribed-context";
    var GW_MESSAGE_UNSUBSCRIBE_CONTEXT = "unsubscribe-context";
    var GW_MESSAGE_DESTROY_CONTEXT = "destroy-context";
    var GW_MESSAGE_CONTEXT_DESTROYED = "context-destroyed";
    var GW_MESSAGE_UPDATE_CONTEXT = "update-context";
    var GW_MESSAGE_CONTEXT_UPDATED = "context-updated";
    var GW_MESSAGE_JOINED_ACTIVITY = "joined";

    var ContextMessageReplaySpec = {
        get name() {
            return "context";
        },
        get types() {
            return [
                GW_MESSAGE_CREATE_CONTEXT,
                GW_MESSAGE_ACTIVITY_CREATED,
                GW_MESSAGE_ACTIVITY_DESTROYED,
                GW_MESSAGE_CONTEXT_CREATED,
                GW_MESSAGE_CONTEXT_ADDED,
                GW_MESSAGE_SUBSCRIBE_CONTEXT,
                GW_MESSAGE_SUBSCRIBED_CONTEXT,
                GW_MESSAGE_UNSUBSCRIBE_CONTEXT,
                GW_MESSAGE_DESTROY_CONTEXT,
                GW_MESSAGE_CONTEXT_DESTROYED,
                GW_MESSAGE_UPDATE_CONTEXT,
                GW_MESSAGE_CONTEXT_UPDATED,
                GW_MESSAGE_JOINED_ACTIVITY
            ];
        }
    };

    var version$2 = "5.9.0";

    function prepareConfig (configuration, ext, glue42gd) {
        var _a, _b, _c, _d;
        var nodeStartingContext;
        if (Utils.isNode()) {
            var startingContextString = process.env._GD_STARTING_CONTEXT_;
            if (startingContextString) {
                try {
                    nodeStartingContext = JSON.parse(startingContextString);
                }
                catch (_e) {
                }
            }
        }
        function getConnection() {
            var _a, _b, _c, _d, _e, _f;
            var gwConfig = configuration.gateway;
            var protocolVersion = (_a = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.protocolVersion) !== null && _a !== void 0 ? _a : 3;
            var reconnectInterval = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.reconnectInterval;
            var reconnectAttempts = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.reconnectAttempts;
            var defaultWs = "ws://localhost:8385";
            var ws = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.ws;
            var sharedWorker = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.sharedWorker;
            var inproc = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.inproc;
            var webPlatform = (_b = gwConfig === null || gwConfig === void 0 ? void 0 : gwConfig.webPlatform) !== null && _b !== void 0 ? _b : undefined;
            if (glue42gd) {
                ws = glue42gd.gwURL;
            }
            if (Utils.isNode() && nodeStartingContext && nodeStartingContext.gwURL) {
                ws = nodeStartingContext.gwURL;
            }
            if (!ws && !sharedWorker && !inproc) {
                ws = defaultWs;
            }
            var instanceId;
            var windowId;
            var pid;
            var environment;
            var region;
            var appName = getApplication();
            var uniqueAppName = appName;
            if (typeof glue42gd !== "undefined") {
                windowId = glue42gd.windowId;
                pid = glue42gd.pid;
                if (glue42gd.env) {
                    environment = glue42gd.env.env;
                    region = glue42gd.env.region;
                }
                uniqueAppName = (_c = glue42gd.application) !== null && _c !== void 0 ? _c : "glue-app";
                instanceId = glue42gd.appInstanceId;
            }
            else if (Utils.isNode()) {
                pid = process.pid;
                if (nodeStartingContext) {
                    environment = nodeStartingContext.env;
                    region = nodeStartingContext.region;
                    instanceId = nodeStartingContext.instanceId;
                }
            }
            else if (typeof (window === null || window === void 0 ? void 0 : window.glue42electron) !== "undefined") {
                windowId = window === null || window === void 0 ? void 0 : window.glue42electron.instanceId;
                pid = window === null || window === void 0 ? void 0 : window.glue42electron.pid;
                environment = window === null || window === void 0 ? void 0 : window.glue42electron.env;
                region = window === null || window === void 0 ? void 0 : window.glue42electron.region;
                uniqueAppName = (_d = window === null || window === void 0 ? void 0 : window.glue42electron.application) !== null && _d !== void 0 ? _d : "glue-app";
                instanceId = window === null || window === void 0 ? void 0 : window.glue42electron.instanceId;
            }
            else ;
            var replaySpecs = (_f = (_e = configuration.gateway) === null || _e === void 0 ? void 0 : _e.replaySpecs) !== null && _f !== void 0 ? _f : [];
            replaySpecs.push(ContextMessageReplaySpec);
            var identity = {
                application: uniqueAppName,
                applicationName: appName,
                windowId: windowId,
                instance: instanceId,
                process: pid,
                region: region,
                environment: environment,
                api: ext.version || version$2
            };
            if (configuration.identity) {
                identity = Object.assign(identity, configuration.identity);
            }
            return {
                identity: identity,
                reconnectInterval: reconnectInterval,
                ws: ws,
                sharedWorker: sharedWorker,
                webPlatform: webPlatform,
                inproc: inproc,
                protocolVersion: protocolVersion,
                reconnectAttempts: reconnectAttempts,
                replaySpecs: replaySpecs,
            };
        }
        function getContexts() {
            if (typeof configuration.contexts === "undefined") {
                return { reAnnounceKnownContexts: true };
            }
            if (typeof configuration.contexts === "boolean" && configuration.contexts) {
                return { reAnnounceKnownContexts: true };
            }
            if (typeof configuration.contexts === "object") {
                return Object.assign({}, { reAnnounceKnownContexts: true }, configuration.contexts);
            }
            return false;
        }
        function getApplication() {
            if (configuration.application) {
                return configuration.application;
            }
            if (glue42gd) {
                return glue42gd.applicationName;
            }
            if (typeof window !== "undefined" && typeof window.glue42electron !== "undefined") {
                return window.glue42electron.application;
            }
            var uid = shortid();
            if (Utils.isNode()) {
                if (nodeStartingContext) {
                    return nodeStartingContext.applicationConfig.name;
                }
                return "NodeJS" + uid;
            }
            if (typeof window !== "undefined" && typeof document !== "undefined") {
                return document.title + " (".concat(uid, ")");
            }
            return uid;
        }
        function getAuth() {
            var _a, _b, _c;
            if (typeof configuration.auth === "string") {
                return {
                    token: configuration.auth
                };
            }
            if (configuration.auth) {
                return configuration.auth;
            }
            if (Utils.isNode() && nodeStartingContext && nodeStartingContext.gwToken) {
                return {
                    gatewayToken: nodeStartingContext.gwToken
                };
            }
            if (((_a = configuration.gateway) === null || _a === void 0 ? void 0 : _a.webPlatform) || ((_b = configuration.gateway) === null || _b === void 0 ? void 0 : _b.inproc) || ((_c = configuration.gateway) === null || _c === void 0 ? void 0 : _c.sharedWorker)) {
                return {
                    username: "glue42", password: "glue42"
                };
            }
        }
        function getLogger() {
            var _a, _b;
            var config = configuration.logger;
            var defaultLevel = "warn";
            if (!config) {
                config = defaultLevel;
            }
            var gdConsoleLevel;
            if (glue42gd) {
                gdConsoleLevel = glue42gd.consoleLogLevel;
            }
            if (typeof config === "string") {
                return { console: gdConsoleLevel !== null && gdConsoleLevel !== void 0 ? gdConsoleLevel : config, publish: defaultLevel };
            }
            return {
                console: (_a = gdConsoleLevel !== null && gdConsoleLevel !== void 0 ? gdConsoleLevel : config.console) !== null && _a !== void 0 ? _a : defaultLevel,
                publish: (_b = config.publish) !== null && _b !== void 0 ? _b : defaultLevel
            };
        }
        var connection = getConnection();
        var application = getApplication();
        if (typeof window !== "undefined") {
            var windowAsAny = window;
            var containerApplication = windowAsAny.htmlContainer ?
                "".concat(windowAsAny.htmlContainer.containerName, ".").concat(windowAsAny.htmlContainer.application) :
                (_a = windowAsAny === null || windowAsAny === void 0 ? void 0 : windowAsAny.glue42gd) === null || _a === void 0 ? void 0 : _a.application;
            if (containerApplication) {
                application = containerApplication;
            }
        }
        return {
            bus: (_b = configuration.bus) !== null && _b !== void 0 ? _b : false,
            application: application,
            auth: getAuth(),
            logger: getLogger(),
            connection: connection,
            metrics: (_c = configuration.metrics) !== null && _c !== void 0 ? _c : true,
            contexts: getContexts(),
            version: ext.version || version$2,
            libs: (_d = ext.libs) !== null && _d !== void 0 ? _d : [],
            customLogger: configuration.customLogger
        };
    }

    var GW3ContextData = (function () {
        function GW3ContextData(contextId, name, isAnnounced, activityId) {
            this.updateCallbacks = {};
            this.contextId = contextId;
            this.name = name;
            this.isAnnounced = isAnnounced;
            this.activityId = activityId;
            this.context = {};
        }
        GW3ContextData.prototype.hasCallbacks = function () {
            return Object.keys(this.updateCallbacks).length > 0;
        };
        GW3ContextData.prototype.getState = function () {
            if (this.isAnnounced && this.hasCallbacks()) {
                return 3;
            }
            if (this.isAnnounced) {
                return 2;
            }
            if (this.hasCallbacks()) {
                return 1;
            }
            return 0;
        };
        return GW3ContextData;
    }());

    function applyContextDelta(context, delta, logger) {
        try {
            if (logger === null || logger === void 0 ? void 0 : logger.canPublish("trace")) {
                logger === null || logger === void 0 ? void 0 : logger.trace("applying context delta ".concat(JSON.stringify(delta), " on context ").concat(JSON.stringify(context)));
            }
            if (!delta) {
                return context;
            }
            if (delta.reset) {
                context = __assign({}, delta.reset);
                return context;
            }
            context = deepClone(context, undefined);
            if (delta.commands) {
                for (var _i = 0, _a = delta.commands; _i < _a.length; _i++) {
                    var command = _a[_i];
                    if (command.type === "remove") {
                        deletePath(context, command.path);
                    }
                    else if (command.type === "set") {
                        setValueToPath(context, command.value, command.path);
                    }
                }
                return context;
            }
            var added_1 = delta.added;
            var updated_1 = delta.updated;
            var removed = delta.removed;
            if (added_1) {
                Object.keys(added_1).forEach(function (key) {
                    context[key] = added_1[key];
                });
            }
            if (updated_1) {
                Object.keys(updated_1).forEach(function (key) {
                    mergeObjectsProperties(key, context, updated_1);
                });
            }
            if (removed) {
                removed.forEach(function (key) {
                    delete context[key];
                });
            }
            return context;
        }
        catch (e) {
            logger === null || logger === void 0 ? void 0 : logger.error("error applying context delta ".concat(JSON.stringify(delta), " on context ").concat(JSON.stringify(context)), e);
            return context;
        }
    }
    function deepClone(obj, hash) {
        hash = hash || new WeakMap();
        if (Object(obj) !== obj) {
            return obj;
        }
        if (obj instanceof Set) {
            return new Set(obj);
        }
        if (hash.has(obj)) {
            return hash.get(obj);
        }
        var result = obj instanceof Date ? new Date(obj)
            : obj instanceof RegExp ? new RegExp(obj.source, obj.flags)
                : obj.constructor ? new obj.constructor()
                    : Object.create(null);
        hash.set(obj, result);
        if (obj instanceof Map) {
            Array.from(obj, function (_a) {
                var key = _a[0], val = _a[1];
                return result.set(key, deepClone(val, hash));
            });
        }
        return Object.assign.apply(Object, __spreadArray([result], Object.keys(obj).map(function (key) {
            var _a;
            return (_a = {}, _a[key] = deepClone(obj[key], hash), _a);
        }), false));
    }
    var mergeObjectsProperties = function (key, what, withWhat) {
        var right = withWhat[key];
        if (right === undefined) {
            return what;
        }
        var left = what[key];
        if (!left || !right) {
            what[key] = right;
            return what;
        }
        if (typeof left === "string" ||
            typeof left === "number" ||
            typeof left === "boolean" ||
            typeof right === "string" ||
            typeof right === "number" ||
            typeof right === "boolean" ||
            Array.isArray(left) ||
            Array.isArray(right)) {
            what[key] = right;
            return what;
        }
        what[key] = Object.assign({}, left, right);
        return what;
    };
    function deepEqual$1(x, y) {
        if (x === y) {
            return true;
        }
        if (!(x instanceof Object) || !(y instanceof Object)) {
            return false;
        }
        if (x.constructor !== y.constructor) {
            return false;
        }
        for (var p in x) {
            if (!x.hasOwnProperty(p)) {
                continue;
            }
            if (!y.hasOwnProperty(p)) {
                return false;
            }
            if (x[p] === y[p]) {
                continue;
            }
            if (typeof (x[p]) !== "object") {
                return false;
            }
            if (!deepEqual$1(x[p], y[p])) {
                return false;
            }
        }
        for (var p in y) {
            if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) {
                return false;
            }
        }
        return true;
    }
    function setValueToPath(obj, value, path) {
        var pathArr = path.split(".");
        var i;
        for (i = 0; i < pathArr.length - 1; i++) {
            if (!obj[pathArr[i]]) {
                obj[pathArr[i]] = {};
            }
            if (typeof obj[pathArr[i]] !== "object") {
                obj[pathArr[i]] = {};
            }
            obj = obj[pathArr[i]];
        }
        obj[pathArr[i]] = value;
    }
    function isSubset(superObj, subObj) {
        return Object.keys(subObj).every(function (ele) {
            if (typeof subObj[ele] === "object") {
                return isSubset((superObj === null || superObj === void 0 ? void 0 : superObj[ele]) || {}, subObj[ele] || {});
            }
            return subObj[ele] === (superObj === null || superObj === void 0 ? void 0 : superObj[ele]);
        });
    }
    function deletePath(obj, path) {
        var pathArr = path.split(".");
        var i;
        for (i = 0; i < pathArr.length - 1; i++) {
            if (!obj[pathArr[i]]) {
                return;
            }
            obj = obj[pathArr[i]];
        }
        delete obj[pathArr[i]];
    }

    var GW3Bridge = (function () {
        function GW3Bridge(config) {
            var _this = this;
            var _a;
            this._contextNameToData = {};
            this._gw3Subscriptions = [];
            this._nextCallbackSubscriptionNumber = 0;
            this._contextNameToId = {};
            this._contextIdToName = {};
            this._protocolVersion = undefined;
            this._contextsTempCache = {};
            this._contextsSubscriptionsCache = [];
            this._connection = config.connection;
            this._logger = config.logger;
            this._trackAllContexts = config.trackAllContexts;
            this._reAnnounceKnownContexts = config.reAnnounceKnownContexts;
            this._gw3Session = this._connection.domain("global", [
                GW_MESSAGE_CONTEXT_CREATED,
                GW_MESSAGE_SUBSCRIBED_CONTEXT,
                GW_MESSAGE_CONTEXT_DESTROYED,
                GW_MESSAGE_CONTEXT_UPDATED,
            ]);
            this._gw3Session.disconnected(this.resetState.bind(this));
            this._gw3Session.onJoined(function (wasReconnect) {
                if (!wasReconnect) {
                    return;
                }
                if (!_this._reAnnounceKnownContexts) {
                    return _this._connection.setLibReAnnounced({ name: "contexts" });
                }
                _this.reInitiateState().then(function () { return _this._connection.setLibReAnnounced({ name: "contexts" }); });
            });
            this.subscribeToContextCreatedMessages();
            this.subscribeToContextUpdatedMessages();
            this.subscribeToContextDestroyedMessages();
            (_a = this._connection.replayer) === null || _a === void 0 ? void 0 : _a.drain(ContextMessageReplaySpec.name, function (message) {
                var type = message.type;
                if (!type) {
                    return;
                }
                if (type === GW_MESSAGE_CONTEXT_CREATED ||
                    type === GW_MESSAGE_CONTEXT_ADDED ||
                    type === GW_MESSAGE_ACTIVITY_CREATED) {
                    _this.handleContextCreatedMessage(message);
                }
                else if (type === GW_MESSAGE_SUBSCRIBED_CONTEXT ||
                    type === GW_MESSAGE_CONTEXT_UPDATED ||
                    type === GW_MESSAGE_JOINED_ACTIVITY) {
                    _this.handleContextUpdatedMessage(message);
                }
                else if (type === GW_MESSAGE_CONTEXT_DESTROYED ||
                    type === GW_MESSAGE_ACTIVITY_DESTROYED) {
                    _this.handleContextDestroyedMessage(message);
                }
            });
        }
        Object.defineProperty(GW3Bridge.prototype, "protocolVersion", {
            get: function () {
                var _a;
                if (!this._protocolVersion) {
                    var contextsDomainInfo = this._connection.availableDomains.find(function (d) { return d.uri === "context"; });
                    this._protocolVersion = (_a = contextsDomainInfo === null || contextsDomainInfo === void 0 ? void 0 : contextsDomainInfo.version) !== null && _a !== void 0 ? _a : 1;
                }
                return this._protocolVersion;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GW3Bridge.prototype, "setPathSupported", {
            get: function () {
                return this.protocolVersion >= 2;
            },
            enumerable: false,
            configurable: true
        });
        GW3Bridge.prototype.dispose = function () {
            for (var _i = 0, _a = this._gw3Subscriptions; _i < _a.length; _i++) {
                var sub = _a[_i];
                this._connection.off(sub);
            }
            this._gw3Subscriptions.length = 0;
            for (var contextName in this._contextNameToData) {
                if (this._contextNameToId.hasOwnProperty(contextName)) {
                    delete this._contextNameToData[contextName];
                }
            }
        };
        GW3Bridge.prototype.createContext = function (name, data) {
            var _this = this;
            return this._gw3Session
                .send({
                type: GW_MESSAGE_CREATE_CONTEXT,
                domain: "global",
                name: name,
                data: data,
                lifetime: "retained",
            })
                .then(function (createContextMsg) {
                _this._contextNameToId[name] = createContextMsg.context_id;
                _this._contextIdToName[createContextMsg.context_id] = name;
                var contextData = _this._contextNameToData[name] || new GW3ContextData(createContextMsg.context_id, name, true, undefined);
                contextData.isAnnounced = true;
                contextData.name = name;
                contextData.contextId = createContextMsg.context_id;
                contextData.context = createContextMsg.data || data;
                contextData.hasReceivedSnapshot = true;
                _this._contextNameToData[name] = contextData;
                return createContextMsg.context_id;
            });
        };
        GW3Bridge.prototype.all = function () {
            var _this = this;
            return Object.keys(this._contextNameToData)
                .filter(function (name) { return _this._contextNameToData[name].isAnnounced; });
        };
        GW3Bridge.prototype.update = function (name, delta) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var contextData, currentContext, calculatedDelta;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            contextData = this._contextNameToData[name];
                            if (!contextData || !contextData.isAnnounced) {
                                return [2, this.createContext(name, delta)];
                            }
                            currentContext = contextData.context;
                            if (!!contextData.hasCallbacks()) return [3, 2];
                            return [4, this.get(contextData.name)];
                        case 1:
                            currentContext = _b.sent();
                            _b.label = 2;
                        case 2:
                            calculatedDelta = this.protocolVersion === 2 ?
                                this.calculateContextDeltaV2(currentContext, delta) :
                                this.calculateContextDeltaV1(currentContext, delta);
                            if (!Object.keys(calculatedDelta.added).length
                                && !Object.keys(calculatedDelta.updated).length
                                && !calculatedDelta.removed.length
                                && !((_a = calculatedDelta.commands) === null || _a === void 0 ? void 0 : _a.length)) {
                                return [2, Promise.resolve()];
                            }
                            return [2, this._gw3Session
                                    .send({
                                    type: GW_MESSAGE_UPDATE_CONTEXT,
                                    domain: "global",
                                    context_id: contextData.contextId,
                                    delta: calculatedDelta,
                                }, {}, { skipPeerId: false })
                                    .then(function (gwResponse) {
                                    _this.handleUpdated(contextData, calculatedDelta, {
                                        updaterId: gwResponse.peer_id
                                    });
                                })];
                    }
                });
            });
        };
        GW3Bridge.prototype.set = function (name, data) {
            var _this = this;
            var contextData = this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                return this.createContext(name, data);
            }
            return this._gw3Session
                .send({
                type: GW_MESSAGE_UPDATE_CONTEXT,
                domain: "global",
                context_id: contextData.contextId,
                delta: { reset: data },
            }, {}, { skipPeerId: false })
                .then(function (gwResponse) {
                _this.handleUpdated(contextData, { reset: data, added: {}, removed: [], updated: {} }, { updaterId: gwResponse.peer_id });
            });
        };
        GW3Bridge.prototype.setPath = function (name, path, value) {
            if (!this.setPathSupported) {
                return Promise.reject("glue.contexts.setPath operation is not supported, use Glue42 3.10 or later");
            }
            return this.setPaths(name, [{ path: path, value: value }]);
        };
        GW3Bridge.prototype.setPaths = function (name, pathValues) {
            var _this = this;
            if (!this.setPathSupported) {
                return Promise.reject("glue.contexts.setPaths operation is not supported, use Glue42 3.10 or later");
            }
            var contextData = this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                var obj = {};
                for (var _i = 0, pathValues_1 = pathValues; _i < pathValues_1.length; _i++) {
                    var pathValue = pathValues_1[_i];
                    setValueToPath(obj, pathValue.value, pathValue.path);
                }
                return this.createContext(name, obj);
            }
            var commands = [];
            for (var _a = 0, pathValues_2 = pathValues; _a < pathValues_2.length; _a++) {
                var pathValue = pathValues_2[_a];
                if (pathValue.value === null) {
                    commands.push({ type: "remove", path: pathValue.path });
                }
                else {
                    commands.push({ type: "set", path: pathValue.path, value: pathValue.value });
                }
            }
            return this._gw3Session
                .send({
                type: GW_MESSAGE_UPDATE_CONTEXT,
                domain: "global",
                context_id: contextData.contextId,
                delta: { commands: commands }
            }, {}, { skipPeerId: false })
                .then(function (gwResponse) {
                _this.handleUpdated(contextData, { added: {}, removed: [], updated: {}, commands: commands }, { updaterId: gwResponse.peer_id });
            });
        };
        GW3Bridge.prototype.get = function (name) {
            var _this = this;
            var _a;
            var contextData = this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                return Promise.resolve({});
            }
            if (contextData && (!contextData.hasCallbacks() || !contextData.hasReceivedSnapshot)) {
                return new Promise(function (resolve) {
                    _this.subscribe(name, function (data, _d, _r, un) {
                        _this.unsubscribe(un);
                        resolve(data);
                    });
                });
            }
            var context = (_a = contextData === null || contextData === void 0 ? void 0 : contextData.context) !== null && _a !== void 0 ? _a : {};
            return Promise.resolve(context);
        };
        GW3Bridge.prototype.subscribe = function (name, callback, subscriptionKey) {
            var _this = this;
            var thisCallbackSubscriptionNumber = typeof subscriptionKey === "undefined" ? this._nextCallbackSubscriptionNumber : subscriptionKey;
            if (typeof subscriptionKey === "undefined") {
                this._nextCallbackSubscriptionNumber += 1;
            }
            if (this._contextsSubscriptionsCache.every(function (subscription) { return subscription.subKey !== _this._nextCallbackSubscriptionNumber; })) {
                this._contextsSubscriptionsCache.push({ contextName: name, subKey: thisCallbackSubscriptionNumber, callback: callback });
            }
            var contextData = this._contextNameToData[name];
            if (!contextData ||
                !contextData.isAnnounced) {
                contextData = contextData || new GW3ContextData(undefined, name, false, undefined);
                this._contextNameToData[name] = contextData;
                contextData.updateCallbacks[thisCallbackSubscriptionNumber] = callback;
                return Promise.resolve(thisCallbackSubscriptionNumber);
            }
            var hadCallbacks = contextData.hasCallbacks();
            contextData.updateCallbacks[thisCallbackSubscriptionNumber] = callback;
            if (!hadCallbacks) {
                if (!contextData.joinedActivity) {
                    if (contextData.context && contextData.sentExplicitSubscription) {
                        if (contextData.hasReceivedSnapshot) {
                            var clone = deepClone(contextData.context);
                            callback(clone, clone, [], thisCallbackSubscriptionNumber);
                        }
                        return Promise.resolve(thisCallbackSubscriptionNumber);
                    }
                    return this.sendSubscribe(contextData)
                        .then(function () { return thisCallbackSubscriptionNumber; });
                }
                else {
                    if (contextData.hasReceivedSnapshot) {
                        var clone = deepClone(contextData.context);
                        callback(clone, clone, [], thisCallbackSubscriptionNumber);
                    }
                    return Promise.resolve(thisCallbackSubscriptionNumber);
                }
            }
            else {
                if (contextData.hasReceivedSnapshot) {
                    var clone = deepClone(contextData.context);
                    callback(clone, clone, [], thisCallbackSubscriptionNumber);
                }
                return Promise.resolve(thisCallbackSubscriptionNumber);
            }
        };
        GW3Bridge.prototype.unsubscribe = function (subscriptionKey) {
            this._contextsSubscriptionsCache = this._contextsSubscriptionsCache.filter(function (subscription) { return subscription.subKey !== subscriptionKey; });
            for (var _i = 0, _a = Object.keys(this._contextNameToData); _i < _a.length; _i++) {
                var name_1 = _a[_i];
                var contextData = this._contextNameToData[name_1];
                if (!contextData) {
                    return;
                }
                var hadCallbacks = contextData.hasCallbacks();
                delete contextData.updateCallbacks[subscriptionKey];
                if (contextData.isAnnounced &&
                    hadCallbacks &&
                    !contextData.hasCallbacks() &&
                    contextData.sentExplicitSubscription) {
                    this.sendUnsubscribe(contextData);
                }
                if (!contextData.isAnnounced &&
                    !contextData.hasCallbacks()) {
                    delete this._contextNameToData[name_1];
                }
            }
        };
        GW3Bridge.prototype.destroy = function (name) {
            var contextData = this._contextNameToData[name];
            if (!contextData) {
                return Promise.reject("context with ".concat(name, " does not exist"));
            }
            return this._gw3Session
                .send({
                type: GW_MESSAGE_DESTROY_CONTEXT,
                domain: "global",
                context_id: contextData.contextId,
            }).then(function (_) { return undefined; });
        };
        GW3Bridge.prototype.handleUpdated = function (contextData, delta, extraData) {
            var oldContext = contextData.context;
            contextData.context = applyContextDelta(contextData.context, delta, this._logger);
            contextData.hasReceivedSnapshot = true;
            if (this._contextNameToData[contextData.name] === contextData &&
                !deepEqual$1(oldContext, contextData.context)) {
                this.invokeUpdateCallbacks(contextData, delta, extraData);
            }
        };
        GW3Bridge.prototype.subscribeToContextCreatedMessages = function () {
            var createdMessageTypes = [
                GW_MESSAGE_CONTEXT_ADDED,
                GW_MESSAGE_CONTEXT_CREATED,
                GW_MESSAGE_ACTIVITY_CREATED,
            ];
            for (var _i = 0, createdMessageTypes_1 = createdMessageTypes; _i < createdMessageTypes_1.length; _i++) {
                var createdMessageType = createdMessageTypes_1[_i];
                var sub = this._connection.on(createdMessageType, this.handleContextCreatedMessage.bind(this));
                this._gw3Subscriptions.push(sub);
            }
        };
        GW3Bridge.prototype.handleContextCreatedMessage = function (contextCreatedMsg) {
            var _this = this;
            var createdMessageType = contextCreatedMsg.type;
            if (createdMessageType === GW_MESSAGE_ACTIVITY_CREATED) {
                this._contextNameToId[contextCreatedMsg.activity_id] = contextCreatedMsg.context_id;
                this._contextIdToName[contextCreatedMsg.context_id] = contextCreatedMsg.activity_id;
            }
            else if (createdMessageType === GW_MESSAGE_CONTEXT_ADDED) {
                this._contextNameToId[contextCreatedMsg.name] = contextCreatedMsg.context_id;
                this._contextIdToName[contextCreatedMsg.context_id] = contextCreatedMsg.name;
            }
            else ;
            var name = this._contextIdToName[contextCreatedMsg.context_id];
            if (!name) {
                throw new Error("Received created event for context with unknown name: " + contextCreatedMsg.context_id);
            }
            if (!this._contextNameToId[name]) {
                throw new Error("Received created event for context with unknown id: " + contextCreatedMsg.context_id);
            }
            var contextData = this._contextNameToData[name];
            if (contextData) {
                if (contextData.isAnnounced) {
                    return;
                }
                else {
                    if (!contextData.hasCallbacks()) {
                        throw new Error("Assertion failure: contextData.hasCallbacks()");
                    }
                    contextData.isAnnounced = true;
                    contextData.contextId = contextCreatedMsg.context_id;
                    contextData.activityId = contextCreatedMsg.activity_id;
                    if (!contextData.sentExplicitSubscription) {
                        this.sendSubscribe(contextData);
                    }
                }
            }
            else {
                this._contextNameToData[name] = contextData =
                    new GW3ContextData(contextCreatedMsg.context_id, name, true, contextCreatedMsg.activity_id);
                if (this._trackAllContexts) {
                    this.subscribe(name, function () { }).then(function (subKey) { return _this._systemContextsSubKey = subKey; });
                }
            }
        };
        GW3Bridge.prototype.subscribeToContextUpdatedMessages = function () {
            var updatedMessageTypes = [
                GW_MESSAGE_CONTEXT_UPDATED,
                GW_MESSAGE_SUBSCRIBED_CONTEXT,
                GW_MESSAGE_JOINED_ACTIVITY,
            ];
            for (var _i = 0, updatedMessageTypes_1 = updatedMessageTypes; _i < updatedMessageTypes_1.length; _i++) {
                var updatedMessageType = updatedMessageTypes_1[_i];
                var sub = this._connection.on(updatedMessageType, this.handleContextUpdatedMessage.bind(this));
                this._gw3Subscriptions.push(sub);
            }
        };
        GW3Bridge.prototype.handleContextUpdatedMessage = function (contextUpdatedMsg) {
            var updatedMessageType = contextUpdatedMsg.type;
            var contextId = contextUpdatedMsg.context_id;
            var contextData = this._contextNameToData[this._contextIdToName[contextId]];
            var justSeen = !contextData || !contextData.isAnnounced;
            if (updatedMessageType === GW_MESSAGE_JOINED_ACTIVITY) {
                if (!contextData) {
                    contextData = new GW3ContextData(contextId, contextUpdatedMsg.activity_id, true, contextUpdatedMsg.activity_id);
                    this._contextNameToData[contextUpdatedMsg.activity_id] = contextData;
                    this._contextIdToName[contextId] = contextUpdatedMsg.activity_id;
                    this._contextNameToId[contextUpdatedMsg.activity_id] = contextId;
                }
                else {
                    contextData.contextId = contextId;
                    contextData.isAnnounced = true;
                    contextData.activityId = contextUpdatedMsg.activity_id;
                }
                contextData.joinedActivity = true;
            }
            else {
                if (!contextData || !contextData.isAnnounced) {
                    if (updatedMessageType === GW_MESSAGE_SUBSCRIBED_CONTEXT) {
                        contextData = contextData || new GW3ContextData(contextId, contextUpdatedMsg.name, true, undefined);
                        contextData.sentExplicitSubscription = true;
                        this._contextNameToData[contextUpdatedMsg.name] = contextData;
                        this._contextIdToName[contextId] = contextUpdatedMsg.name;
                        this._contextNameToId[contextUpdatedMsg.name] = contextId;
                    }
                    else {
                        this._logger.error("Received 'update' for unknown context: ".concat(contextId));
                    }
                    return;
                }
            }
            var oldContext = contextData.context;
            contextData.hasReceivedSnapshot = true;
            if (updatedMessageType === GW_MESSAGE_SUBSCRIBED_CONTEXT) {
                contextData.context = contextUpdatedMsg.data || {};
            }
            else if (updatedMessageType === GW_MESSAGE_JOINED_ACTIVITY) {
                contextData.context = contextUpdatedMsg.context_snapshot || {};
            }
            else if (updatedMessageType === GW_MESSAGE_CONTEXT_UPDATED) {
                contextData.context = applyContextDelta(contextData.context, contextUpdatedMsg.delta, this._logger);
            }
            else {
                throw new Error("Unrecognized context update message " + updatedMessageType);
            }
            if (justSeen ||
                !deepEqual$1(contextData.context, oldContext) ||
                updatedMessageType === GW_MESSAGE_SUBSCRIBED_CONTEXT) {
                this.invokeUpdateCallbacks(contextData, contextUpdatedMsg.delta, { updaterId: contextUpdatedMsg.updater_id });
            }
        };
        GW3Bridge.prototype.invokeUpdateCallbacks = function (contextData, delta, extraData) {
            delta = delta || { added: {}, updated: {}, reset: {}, removed: [] };
            if (delta.commands) {
                delta.added = delta.updated = delta.reset = {};
                delta.removed = [];
                for (var _i = 0, _a = delta.commands; _i < _a.length; _i++) {
                    var command = _a[_i];
                    if (command.type === "remove") {
                        if (command.path.indexOf(".") === -1) {
                            delta.removed.push(command.path);
                        }
                        setValueToPath(delta.updated, null, command.path);
                    }
                    else if (command.type === "set") {
                        setValueToPath(delta.updated, command.value, command.path);
                    }
                }
            }
            for (var updateCallbackIndex in contextData.updateCallbacks) {
                if (contextData.updateCallbacks.hasOwnProperty(updateCallbackIndex)) {
                    try {
                        var updateCallback = contextData.updateCallbacks[updateCallbackIndex];
                        updateCallback(deepClone(contextData.context), Object.assign({}, delta.added || {}, delta.updated || {}, delta.reset || {}), delta.removed, parseInt(updateCallbackIndex, 10), extraData);
                    }
                    catch (err) {
                        this._logger.debug("callback error: " + JSON.stringify(err));
                    }
                }
            }
        };
        GW3Bridge.prototype.subscribeToContextDestroyedMessages = function () {
            var destroyedMessageTypes = [
                GW_MESSAGE_CONTEXT_DESTROYED,
                GW_MESSAGE_ACTIVITY_DESTROYED,
            ];
            for (var _i = 0, destroyedMessageTypes_1 = destroyedMessageTypes; _i < destroyedMessageTypes_1.length; _i++) {
                var destroyedMessageType = destroyedMessageTypes_1[_i];
                var sub = this._connection.on(destroyedMessageType, this.handleContextDestroyedMessage.bind(this));
                this._gw3Subscriptions.push(sub);
            }
        };
        GW3Bridge.prototype.handleContextDestroyedMessage = function (destroyedMsg) {
            var destroyedMessageType = destroyedMsg.type;
            var contextId;
            var name;
            if (destroyedMessageType === GW_MESSAGE_ACTIVITY_DESTROYED) {
                name = destroyedMsg.activity_id;
                contextId = this._contextNameToId[name];
                if (!contextId) {
                    this._logger.error("Received 'destroyed' for unknown activity: ".concat(destroyedMsg.activity_id));
                    return;
                }
            }
            else {
                contextId = destroyedMsg.context_id;
                name = this._contextIdToName[contextId];
                if (!name) {
                    this._logger.error("Received 'destroyed' for unknown context: ".concat(destroyedMsg.context_id));
                    return;
                }
            }
            delete this._contextIdToName[contextId];
            delete this._contextNameToId[name];
            var contextData = this._contextNameToData[name];
            delete this._contextNameToData[name];
            if (!contextData || !contextData.isAnnounced) {
                this._logger.error("Received 'destroyed' for unknown context: ".concat(contextId));
                return;
            }
        };
        GW3Bridge.prototype.sendSubscribe = function (contextData) {
            contextData.sentExplicitSubscription = true;
            return this._gw3Session
                .send({
                type: GW_MESSAGE_SUBSCRIBE_CONTEXT,
                domain: "global",
                context_id: contextData.contextId,
            }).then(function (_) { return undefined; });
        };
        GW3Bridge.prototype.sendUnsubscribe = function (contextData) {
            contextData.sentExplicitSubscription = false;
            return this._gw3Session
                .send({
                type: GW_MESSAGE_UNSUBSCRIBE_CONTEXT,
                domain: "global",
                context_id: contextData.contextId,
            }).then(function (_) { return undefined; });
        };
        GW3Bridge.prototype.calculateContextDeltaV1 = function (from, to) {
            var delta = { added: {}, updated: {}, removed: [], reset: undefined };
            if (from) {
                for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {
                    var x = _a[_i];
                    if (Object.keys(to).indexOf(x) !== -1
                        && to[x] !== null
                        && !deepEqual$1(from[x], to[x])) {
                        delta.updated[x] = to[x];
                    }
                }
            }
            for (var _b = 0, _c = Object.keys(to); _b < _c.length; _b++) {
                var x = _c[_b];
                if (!from || (Object.keys(from).indexOf(x) === -1)) {
                    if (to[x] !== null) {
                        delta.added[x] = to[x];
                    }
                }
                else if (to[x] === null) {
                    delta.removed.push(x);
                }
            }
            return delta;
        };
        GW3Bridge.prototype.calculateContextDeltaV2 = function (from, to) {
            var _a, _b;
            var delta = { added: {}, updated: {}, removed: [], reset: undefined, commands: [] };
            for (var _i = 0, _c = Object.keys(to); _i < _c.length; _i++) {
                var x = _c[_i];
                if (to[x] !== null) {
                    var fromX = from ? from[x] : null;
                    if (!deepEqual$1(fromX, to[x])) {
                        (_a = delta.commands) === null || _a === void 0 ? void 0 : _a.push({ type: "set", path: x, value: to[x] });
                    }
                }
                else {
                    (_b = delta.commands) === null || _b === void 0 ? void 0 : _b.push({ type: "remove", path: x });
                }
            }
            return delta;
        };
        GW3Bridge.prototype.resetState = function () {
            var _this = this;
            for (var _i = 0, _a = this._gw3Subscriptions; _i < _a.length; _i++) {
                var sub = _a[_i];
                this._connection.off(sub);
            }
            if (this._systemContextsSubKey) {
                this.unsubscribe(this._systemContextsSubKey);
                delete this._systemContextsSubKey;
            }
            this._gw3Subscriptions = [];
            this._contextNameToId = {};
            this._contextIdToName = {};
            delete this._protocolVersion;
            this._contextsTempCache = Object.keys(this._contextNameToData).reduce(function (cacheSoFar, ctxName) {
                cacheSoFar[ctxName] = _this._contextNameToData[ctxName].context;
                return cacheSoFar;
            }, {});
            this._contextNameToData = {};
        };
        GW3Bridge.prototype.reInitiateState = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _b, _c, _e, _i, ctxName, lastKnownData;
                var _this = this;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            this.subscribeToContextCreatedMessages();
                            this.subscribeToContextUpdatedMessages();
                            this.subscribeToContextDestroyedMessages();
                            (_a = this._connection.replayer) === null || _a === void 0 ? void 0 : _a.drain(ContextMessageReplaySpec.name, function (message) {
                                var type = message.type;
                                if (!type) {
                                    return;
                                }
                                if (type === GW_MESSAGE_CONTEXT_CREATED ||
                                    type === GW_MESSAGE_CONTEXT_ADDED ||
                                    type === GW_MESSAGE_ACTIVITY_CREATED) {
                                    _this.handleContextCreatedMessage(message);
                                }
                                else if (type === GW_MESSAGE_SUBSCRIBED_CONTEXT ||
                                    type === GW_MESSAGE_CONTEXT_UPDATED ||
                                    type === GW_MESSAGE_JOINED_ACTIVITY) {
                                    _this.handleContextUpdatedMessage(message);
                                }
                                else if (type === GW_MESSAGE_CONTEXT_DESTROYED ||
                                    type === GW_MESSAGE_ACTIVITY_DESTROYED) {
                                    _this.handleContextDestroyedMessage(message);
                                }
                            });
                            return [4, Promise.all(this._contextsSubscriptionsCache.map(function (subscription) { return _this.subscribe(subscription.contextName, subscription.callback, subscription.subKey); }))];
                        case 1:
                            _f.sent();
                            return [4, this.flushQueue()];
                        case 2:
                            _f.sent();
                            _b = this._contextsTempCache;
                            _c = [];
                            for (_e in _b)
                                _c.push(_e);
                            _i = 0;
                            _f.label = 3;
                        case 3:
                            if (!(_i < _c.length)) return [3, 7];
                            _e = _c[_i];
                            if (!(_e in _b)) return [3, 6];
                            ctxName = _e;
                            if (typeof this._contextsTempCache[ctxName] !== "object" || Object.keys(this._contextsTempCache[ctxName]).length === 0) {
                                return [3, 6];
                            }
                            lastKnownData = this._contextsTempCache[ctxName];
                            this._logger.info("Re-announcing known context: ".concat(ctxName));
                            return [4, this.flushQueue()];
                        case 4:
                            _f.sent();
                            return [4, this.update(ctxName, lastKnownData)];
                        case 5:
                            _f.sent();
                            _f.label = 6;
                        case 6:
                            _i++;
                            return [3, 3];
                        case 7:
                            this._contextsTempCache = {};
                            this._logger.info("Contexts are re-announced");
                            return [2];
                    }
                });
            });
        };
        GW3Bridge.prototype.flushQueue = function () {
            return new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, 0); });
        };
        return GW3Bridge;
    }());

    var ContextsModule = (function () {
        function ContextsModule(config) {
            this._bridge = new GW3Bridge(config);
        }
        ContextsModule.prototype.all = function () {
            return this._bridge.all();
        };
        ContextsModule.prototype.update = function (name, data) {
            this.checkName(name);
            this.checkData(data);
            return this._bridge.update(name, data);
        };
        ContextsModule.prototype.set = function (name, data) {
            this.checkName(name);
            this.checkData(data);
            return this._bridge.set(name, data);
        };
        ContextsModule.prototype.setPath = function (name, path, data) {
            this.checkName(name);
            this.checkPath(path);
            var isTopLevelPath = path === "";
            if (isTopLevelPath) {
                this.checkData(data);
                return this.set(name, data);
            }
            return this._bridge.setPath(name, path, data);
        };
        ContextsModule.prototype.setPaths = function (name, paths) {
            this.checkName(name);
            if (!Array.isArray(paths)) {
                throw new Error("Please provide the paths as an array of PathValues!");
            }
            for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
                var _a = paths_1[_i], path = _a.path, value = _a.value;
                this.checkPath(path);
                var isTopLevelPath = path === "";
                if (isTopLevelPath) {
                    this.checkData(value);
                }
            }
            return this._bridge.setPaths(name, paths);
        };
        ContextsModule.prototype.subscribe = function (name, callback) {
            var _this = this;
            this.checkName(name);
            if (typeof callback !== "function") {
                throw new Error("Please provide the callback as a function!");
            }
            return this._bridge
                .subscribe(name, function (data, delta, removed, key, extraData) { return callback(data, delta, removed, function () { return _this._bridge.unsubscribe(key); }, extraData); })
                .then(function (key) {
                return function () {
                    _this._bridge.unsubscribe(key);
                };
            });
        };
        ContextsModule.prototype.get = function (name) {
            this.checkName(name);
            return this._bridge.get(name);
        };
        ContextsModule.prototype.ready = function () {
            return Promise.resolve(this);
        };
        ContextsModule.prototype.destroy = function (name) {
            this.checkName(name);
            return this._bridge.destroy(name);
        };
        Object.defineProperty(ContextsModule.prototype, "setPathSupported", {
            get: function () {
                return this._bridge.setPathSupported;
            },
            enumerable: false,
            configurable: true
        });
        ContextsModule.prototype.checkName = function (name) {
            if (typeof name !== "string" || name === "") {
                throw new Error("Please provide the name as a non-empty string!");
            }
        };
        ContextsModule.prototype.checkPath = function (path) {
            if (typeof path !== "string") {
                throw new Error("Please provide the path as a dot delimited string!");
            }
        };
        ContextsModule.prototype.checkData = function (data) {
            if (typeof data !== "object") {
                throw new Error("Please provide the data as an object!");
            }
        };
        return ContextsModule;
    }());

    function promisify (promise, successCallback, errorCallback) {
        if (typeof successCallback !== "function" && typeof errorCallback !== "function") {
            return promise;
        }
        if (typeof successCallback !== "function") {
            successCallback = function () { };
        }
        else if (typeof errorCallback !== "function") {
            errorCallback = function () { };
        }
        return promise.then(successCallback, errorCallback);
    }

    function rejectAfter(ms, promise, error) {
        if (ms === void 0) { ms = 0; }
        var timeout;
        var clearTimeoutIfThere = function () {
            if (timeout) {
                clearTimeout(timeout);
            }
        };
        promise
            .then(function () {
            clearTimeoutIfThere();
        })
            .catch(function () {
            clearTimeoutIfThere();
        });
        return new Promise(function (resolve, reject) {
            timeout = setTimeout(function () { return reject(error); }, ms);
        });
    }

    var InvokeStatus;
    (function (InvokeStatus) {
        InvokeStatus[InvokeStatus["Success"] = 0] = "Success";
        InvokeStatus[InvokeStatus["Error"] = 1] = "Error";
    })(InvokeStatus || (InvokeStatus = {}));
    var Client = (function () {
        function Client(protocol, repo, instance, configuration) {
            this.protocol = protocol;
            this.repo = repo;
            this.instance = instance;
            this.configuration = configuration;
        }
        Client.prototype.subscribe = function (method, options, successCallback, errorCallback, existingSub) {
            var _this = this;
            var callProtocolSubscribe = function (targetServers, stream, successProxy, errorProxy) {
                var _a;
                options.methodResponseTimeout = (_a = options.methodResponseTimeout) !== null && _a !== void 0 ? _a : options.waitTimeoutMs;
                _this.protocol.client.subscribe(stream, options, targetServers, successProxy, errorProxy, existingSub);
            };
            var promise = new Promise(function (resolve, reject) {
                var successProxy = function (sub) {
                    resolve(sub);
                };
                var errorProxy = function (err) {
                    reject(err);
                };
                if (!method) {
                    reject("Method definition is required. Please, provide either a unique string for a method name or a \u201CmethodDefinition\u201D object with a required \u201Cname\u201D property.");
                    return;
                }
                var methodDef;
                if (typeof method === "string") {
                    methodDef = { name: method };
                }
                else {
                    methodDef = method;
                }
                if (!methodDef.name) {
                    reject("Method definition is required. Please, provide either a unique string for a method name or a \u201CmethodDefinition\u201D object with a required \u201Cname\u201D property.");
                    return;
                }
                if (options === undefined) {
                    options = {};
                }
                var target = options.target;
                if (target === undefined) {
                    target = "best";
                }
                if (typeof target === "string" && target !== "all" && target !== "best") {
                    reject(new Error("\"".concat(target, "\" is not a valid target. Valid targets are \"all\", \"best\", or an instance.")));
                    return;
                }
                if (options.methodResponseTimeout === undefined) {
                    options.methodResponseTimeout = options.method_response_timeout;
                    if (options.methodResponseTimeout === undefined) {
                        options.methodResponseTimeout = _this.configuration.methodResponseTimeout;
                    }
                }
                if (options.waitTimeoutMs === undefined) {
                    options.waitTimeoutMs = options.wait_for_method_timeout;
                    if (options.waitTimeoutMs === undefined) {
                        options.waitTimeoutMs = _this.configuration.waitTimeoutMs;
                    }
                }
                var delayStep = 500;
                var delayTillNow = 0;
                var currentServers = _this.getServerMethodsByFilterAndTarget(methodDef, target);
                if (currentServers.length > 0) {
                    callProtocolSubscribe(currentServers, currentServers[0].methods[0], successProxy, errorProxy);
                }
                else {
                    var retry_1 = function () {
                        if (!target || !(options.waitTimeoutMs)) {
                            return;
                        }
                        delayTillNow += delayStep;
                        currentServers = _this.getServerMethodsByFilterAndTarget(methodDef, target);
                        if (currentServers.length > 0) {
                            var streamInfo = currentServers[0].methods[0];
                            callProtocolSubscribe(currentServers, streamInfo, successProxy, errorProxy);
                        }
                        else if (delayTillNow >= options.waitTimeoutMs) {
                            var def = typeof method === "string" ? { name: method } : method;
                            callProtocolSubscribe(currentServers, def, successProxy, errorProxy);
                        }
                        else {
                            setTimeout(retry_1, delayStep);
                        }
                    };
                    setTimeout(retry_1, delayStep);
                }
            });
            return promisify(promise, successCallback, errorCallback);
        };
        Client.prototype.servers = function (methodFilter) {
            var filterCopy = methodFilter === undefined
                ? undefined
                : __assign({}, methodFilter);
            return this.getServers(filterCopy).map(function (serverMethodMap) {
                return serverMethodMap.server.instance;
            });
        };
        Client.prototype.methods = function (methodFilter) {
            if (typeof methodFilter === "string") {
                methodFilter = { name: methodFilter };
            }
            else {
                methodFilter = __assign({}, methodFilter);
            }
            return this.getMethods(methodFilter);
        };
        Client.prototype.methodsForInstance = function (instance) {
            return this.getMethodsForInstance(instance);
        };
        Client.prototype.methodAdded = function (callback) {
            return this.repo.onMethodAdded(callback);
        };
        Client.prototype.methodRemoved = function (callback) {
            return this.repo.onMethodRemoved(callback);
        };
        Client.prototype.serverAdded = function (callback) {
            return this.repo.onServerAdded(callback);
        };
        Client.prototype.serverRemoved = function (callback) {
            return this.repo.onServerRemoved(function (server, reason) {
                callback(server, reason);
            });
        };
        Client.prototype.serverMethodAdded = function (callback) {
            return this.repo.onServerMethodAdded(function (server, method) {
                callback({ server: server, method: method });
            });
        };
        Client.prototype.serverMethodRemoved = function (callback) {
            return this.repo.onServerMethodRemoved(function (server, method) {
                callback({ server: server, method: method });
            });
        };
        Client.prototype.invoke = function (methodFilter, argumentObj, target, additionalOptions, success, error) {
            return __awaiter(this, void 0, void 0, function () {
                var getInvokePromise;
                var _this = this;
                return __generator(this, function (_a) {
                    getInvokePromise = function () { return __awaiter(_this, void 0, void 0, function () {
                        var methodDefinition, serversMethodMap, method, errorObj, timeout, additionalOptionsCopy, invokePromises, invocationMessages, results, allRejected;
                        var _this = this;
                        var _a, _b, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    if (typeof methodFilter === "string") {
                                        methodDefinition = { name: methodFilter };
                                    }
                                    else {
                                        methodDefinition = __assign({}, methodFilter);
                                    }
                                    if (!methodDefinition.name) {
                                        return [2, Promise.reject("Method definition is required. Please, provide either a unique string for a method name or a \u201CmethodDefinition\u201D object with a required \u201Cname\u201D property.")];
                                    }
                                    if (!argumentObj) {
                                        argumentObj = {};
                                    }
                                    if (!target) {
                                        target = "best";
                                    }
                                    if (typeof target === "string" && target !== "all" && target !== "best" && target !== "skipMine") {
                                        return [2, Promise.reject(new Error("\"".concat(target, "\" is not a valid target. Valid targets are \"all\" and \"best\".")))];
                                    }
                                    if (!additionalOptions) {
                                        additionalOptions = {};
                                    }
                                    if (additionalOptions.methodResponseTimeoutMs === undefined) {
                                        additionalOptions.methodResponseTimeoutMs = additionalOptions.method_response_timeout;
                                        if (additionalOptions.methodResponseTimeoutMs === undefined) {
                                            additionalOptions.methodResponseTimeoutMs = this.configuration.methodResponseTimeout;
                                        }
                                    }
                                    if (additionalOptions.waitTimeoutMs === undefined) {
                                        additionalOptions.waitTimeoutMs = additionalOptions.wait_for_method_timeout;
                                        if (additionalOptions.waitTimeoutMs === undefined) {
                                            additionalOptions.waitTimeoutMs = this.configuration.waitTimeoutMs;
                                        }
                                    }
                                    if (additionalOptions.waitTimeoutMs !== undefined && typeof additionalOptions.waitTimeoutMs !== "number") {
                                        return [2, Promise.reject(new Error("\"".concat(additionalOptions.waitTimeoutMs, "\" is not a valid number for \"waitTimeoutMs\" ")))];
                                    }
                                    if (typeof argumentObj !== "object") {
                                        return [2, Promise.reject(new Error("The method arguments must be an object. method: ".concat(methodDefinition.name)))];
                                    }
                                    serversMethodMap = this.getServerMethodsByFilterAndTarget(methodDefinition, target);
                                    if (!(serversMethodMap.length === 0)) return [3, 4];
                                    _d.label = 1;
                                case 1:
                                    _d.trys.push([1, 3, , 4]);
                                    return [4, this.tryToAwaitForMethods(methodDefinition, target, additionalOptions)];
                                case 2:
                                    serversMethodMap = _d.sent();
                                    return [3, 4];
                                case 3:
                                    _d.sent();
                                    method = __assign(__assign({}, methodDefinition), { getServers: function () { return []; }, supportsStreaming: false, objectTypes: (_a = methodDefinition.objectTypes) !== null && _a !== void 0 ? _a : [], flags: (_c = (_b = methodDefinition.flags) === null || _b === void 0 ? void 0 : _b.metadata) !== null && _c !== void 0 ? _c : {} });
                                    errorObj = {
                                        method: method,
                                        called_with: argumentObj,
                                        message: "Can not find a method matching ".concat(JSON.stringify(methodFilter), " with server filter ").concat(JSON.stringify(target)),
                                        executed_by: undefined,
                                        returned: undefined,
                                        status: undefined,
                                    };
                                    return [2, Promise.reject(errorObj)];
                                case 4:
                                    timeout = additionalOptions.methodResponseTimeoutMs;
                                    additionalOptionsCopy = additionalOptions;
                                    invokePromises = serversMethodMap.map(function (serversMethodPair) {
                                        var invId = shortid();
                                        var method = serversMethodPair.methods[0];
                                        var server = serversMethodPair.server;
                                        var invokePromise = _this.protocol.client.invoke(invId, method, argumentObj, server, additionalOptionsCopy);
                                        return Promise.race([
                                            invokePromise,
                                            rejectAfter(timeout, invokePromise, {
                                                invocationId: invId,
                                                message: "Invocation timeout (".concat(timeout, " ms) reached for method name: ").concat(method === null || method === void 0 ? void 0 : method.name, ", target instance: ").concat(JSON.stringify(server.instance), ", options: ").concat(JSON.stringify(additionalOptionsCopy)),
                                                status: InvokeStatus.Error,
                                            })
                                        ]);
                                    });
                                    return [4, Promise.all(invokePromises)];
                                case 5:
                                    invocationMessages = _d.sent();
                                    results = this.getInvocationResultObj(invocationMessages, methodDefinition, argumentObj);
                                    allRejected = invocationMessages.every(function (result) { return result.status === InvokeStatus.Error; });
                                    if (allRejected) {
                                        return [2, Promise.reject(results)];
                                    }
                                    return [2, results];
                            }
                        });
                    }); };
                    return [2, promisify(getInvokePromise(), success, error)];
                });
            });
        };
        Client.prototype.getInvocationResultObj = function (invocationResults, method, calledWith) {
            var all_return_values = invocationResults
                .filter(function (invokeMessage) { return invokeMessage.status === InvokeStatus.Success; })
                .reduce(function (allValues, currentValue) {
                allValues = __spreadArray(__spreadArray([], allValues, true), [
                    {
                        executed_by: currentValue.instance,
                        returned: currentValue.result,
                        called_with: calledWith,
                        method: method,
                        message: currentValue.message,
                        status: currentValue.status,
                    }
                ], false);
                return allValues;
            }, []);
            var all_errors = invocationResults
                .filter(function (invokeMessage) { return invokeMessage.status === InvokeStatus.Error; })
                .reduce(function (allErrors, currError) {
                allErrors = __spreadArray(__spreadArray([], allErrors, true), [
                    {
                        executed_by: currError.instance,
                        called_with: calledWith,
                        name: method.name,
                        message: currError.message,
                    }
                ], false);
                return allErrors;
            }, []);
            var invResult = invocationResults[0];
            var result = {
                method: method,
                called_with: calledWith,
                returned: invResult.result,
                executed_by: invResult.instance,
                all_return_values: all_return_values,
                all_errors: all_errors,
                message: invResult.message,
                status: invResult.status
            };
            return result;
        };
        Client.prototype.tryToAwaitForMethods = function (methodDefinition, target, additionalOptions) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (additionalOptions.waitTimeoutMs === 0) {
                    reject();
                    return;
                }
                var delayStep = 500;
                var delayTillNow = 0;
                var retry = function () {
                    delayTillNow += delayStep;
                    var serversMethodMap = _this.getServerMethodsByFilterAndTarget(methodDefinition, target);
                    if (serversMethodMap.length > 0) {
                        clearInterval(interval);
                        resolve(serversMethodMap);
                    }
                    else if (delayTillNow >= (additionalOptions.waitTimeoutMs || 10000)) {
                        clearInterval(interval);
                        reject();
                        return;
                    }
                };
                var interval = setInterval(retry, delayStep);
            });
        };
        Client.prototype.filterByTarget = function (target, serverMethodMap) {
            var _this = this;
            if (typeof target === "string") {
                if (target === "all") {
                    return __spreadArray([], serverMethodMap, true);
                }
                else if (target === "best") {
                    var localMachine = serverMethodMap
                        .find(function (s) { return s.server.instance.isLocal; });
                    if (localMachine) {
                        return [localMachine];
                    }
                    if (serverMethodMap[0] !== undefined) {
                        return [serverMethodMap[0]];
                    }
                }
                else if (target === "skipMine") {
                    return serverMethodMap.filter(function (_a) {
                        var server = _a.server;
                        return server.instance.peerId !== _this.instance.peerId;
                    });
                }
            }
            else {
                var targetArray = void 0;
                if (!Array.isArray(target)) {
                    targetArray = [target];
                }
                else {
                    targetArray = target;
                }
                var allServersMatching = targetArray.reduce(function (matches, filter) {
                    var myMatches = serverMethodMap.filter(function (serverMethodPair) {
                        return _this.instanceMatch(filter, serverMethodPair.server.instance);
                    });
                    return matches.concat(myMatches);
                }, []);
                return allServersMatching;
            }
            return [];
        };
        Client.prototype.instanceMatch = function (instanceFilter, instanceDefinition) {
            return this.containsProps(instanceFilter, instanceDefinition);
        };
        Client.prototype.methodMatch = function (methodFilter, methodDefinition) {
            return this.containsProps(methodFilter, methodDefinition);
        };
        Client.prototype.containsProps = function (filter, repoMethod) {
            var filterProps = Object.keys(filter)
                .filter(function (prop) {
                return filter[prop] !== undefined
                    && filter[prop] !== null
                    && typeof filter[prop] !== "function"
                    && prop !== "object_types"
                    && prop !== "display_name"
                    && prop !== "id"
                    && prop !== "gatewayId"
                    && prop !== "identifier"
                    && prop[0] !== "_";
            });
            return filterProps.every(function (prop) {
                var isMatch;
                var filterValue = filter[prop];
                var repoMethodValue = repoMethod[prop];
                switch (prop) {
                    case "objectTypes":
                        isMatch = (filterValue || []).every(function (filterValueEl) {
                            return (repoMethodValue || []).includes(filterValueEl);
                        });
                        break;
                    case "flags":
                        isMatch = isSubset(repoMethodValue || {}, filterValue || {});
                        break;
                    default:
                        isMatch = String(filterValue).toLowerCase() === String(repoMethodValue).toLowerCase();
                }
                return isMatch;
            });
        };
        Client.prototype.getMethods = function (methodFilter) {
            var _this = this;
            if (methodFilter === undefined) {
                return this.repo.getMethods();
            }
            var methods = this.repo.getMethods().filter(function (method) {
                return _this.methodMatch(methodFilter, method);
            });
            return methods;
        };
        Client.prototype.getMethodsForInstance = function (instanceFilter) {
            var _this = this;
            var allServers = this.repo.getServers();
            var matchingServers = allServers.filter(function (server) {
                return _this.instanceMatch(instanceFilter, server.instance);
            });
            if (matchingServers.length === 0) {
                return [];
            }
            var resultMethodsObject = {};
            if (matchingServers.length === 1) {
                resultMethodsObject = matchingServers[0].methods;
            }
            else {
                matchingServers.forEach(function (server) {
                    Object.keys(server.methods).forEach(function (methodKey) {
                        var method = server.methods[methodKey];
                        resultMethodsObject[method.identifier] = method;
                    });
                });
            }
            return Object.keys(resultMethodsObject)
                .map(function (key) {
                return resultMethodsObject[key];
            });
        };
        Client.prototype.getServers = function (methodFilter) {
            var _this = this;
            var servers = this.repo.getServers();
            if (methodFilter === undefined) {
                return servers.map(function (server) {
                    return { server: server, methods: [] };
                });
            }
            return servers.reduce(function (prev, current) {
                var methodsForServer = Object.values(current.methods);
                var matchingMethods = methodsForServer.filter(function (method) {
                    return _this.methodMatch(methodFilter, method);
                });
                if (matchingMethods.length > 0) {
                    prev.push({ server: current, methods: matchingMethods });
                }
                return prev;
            }, []);
        };
        Client.prototype.getServerMethodsByFilterAndTarget = function (methodFilter, target) {
            var serversMethodMap = this.getServers(methodFilter);
            return this.filterByTarget(target, serversMethodMap);
        };
        return Client;
    }());

    var ServerSubscription = (function () {
        function ServerSubscription(protocol, repoMethod, subscription) {
            this.protocol = protocol;
            this.repoMethod = repoMethod;
            this.subscription = subscription;
        }
        Object.defineProperty(ServerSubscription.prototype, "stream", {
            get: function () {
                if (!this.repoMethod.stream) {
                    throw new Error("no stream");
                }
                return this.repoMethod.stream;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ServerSubscription.prototype, "arguments", {
            get: function () { return this.subscription.arguments || {}; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ServerSubscription.prototype, "branchKey", {
            get: function () { return this.subscription.branchKey; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ServerSubscription.prototype, "instance", {
            get: function () {
                if (!this.subscription.instance) {
                    throw new Error("no instance");
                }
                return this.subscription.instance;
            },
            enumerable: false,
            configurable: true
        });
        ServerSubscription.prototype.close = function () {
            this.protocol.server.closeSingleSubscription(this.repoMethod, this.subscription);
        };
        ServerSubscription.prototype.push = function (data) {
            this.protocol.server.pushDataToSingle(this.repoMethod, this.subscription, data);
        };
        return ServerSubscription;
    }());

    var Request$1 = (function () {
        function Request(protocol, repoMethod, requestContext) {
            this.protocol = protocol;
            this.repoMethod = repoMethod;
            this.requestContext = requestContext;
            this.arguments = requestContext.arguments;
            this.instance = requestContext.instance;
        }
        Request.prototype.accept = function () {
            this.protocol.server.acceptRequestOnBranch(this.requestContext, this.repoMethod, "");
        };
        Request.prototype.acceptOnBranch = function (branch) {
            this.protocol.server.acceptRequestOnBranch(this.requestContext, this.repoMethod, branch);
        };
        Request.prototype.reject = function (reason) {
            this.protocol.server.rejectRequest(this.requestContext, this.repoMethod, reason);
        };
        return Request;
    }());

    var ServerStreaming$1 = (function () {
        function ServerStreaming(protocol, server) {
            var _this = this;
            this.protocol = protocol;
            this.server = server;
            protocol.server.onSubRequest(function (rc, rm) { return _this.handleSubRequest(rc, rm); });
            protocol.server.onSubAdded(function (sub, rm) { return _this.handleSubAdded(sub, rm); });
            protocol.server.onSubRemoved(function (sub, rm) { return _this.handleSubRemoved(sub, rm); });
        }
        ServerStreaming.prototype.handleSubRequest = function (requestContext, repoMethod) {
            if (!(repoMethod &&
                repoMethod.streamCallbacks &&
                typeof repoMethod.streamCallbacks.subscriptionRequestHandler === "function")) {
                return;
            }
            var request = new Request$1(this.protocol, repoMethod, requestContext);
            repoMethod.streamCallbacks.subscriptionRequestHandler(request);
        };
        ServerStreaming.prototype.handleSubAdded = function (subscription, repoMethod) {
            if (!(repoMethod &&
                repoMethod.streamCallbacks &&
                typeof repoMethod.streamCallbacks.subscriptionAddedHandler === "function")) {
                return;
            }
            var sub = new ServerSubscription(this.protocol, repoMethod, subscription);
            repoMethod.streamCallbacks.subscriptionAddedHandler(sub);
        };
        ServerStreaming.prototype.handleSubRemoved = function (subscription, repoMethod) {
            if (!(repoMethod &&
                repoMethod.streamCallbacks &&
                typeof repoMethod.streamCallbacks.subscriptionRemovedHandler === "function")) {
                return;
            }
            var sub = new ServerSubscription(this.protocol, repoMethod, subscription);
            repoMethod.streamCallbacks.subscriptionRemovedHandler(sub);
        };
        return ServerStreaming;
    }());

    var ServerBranch = (function () {
        function ServerBranch(key, protocol, repoMethod) {
            this.key = key;
            this.protocol = protocol;
            this.repoMethod = repoMethod;
        }
        ServerBranch.prototype.subscriptions = function () {
            var _this = this;
            var subList = this.protocol.server.getSubscriptionList(this.repoMethod, this.key);
            return subList.map(function (sub) {
                return new ServerSubscription(_this.protocol, _this.repoMethod, sub);
            });
        };
        ServerBranch.prototype.close = function () {
            this.protocol.server.closeAllSubscriptions(this.repoMethod, this.key);
        };
        ServerBranch.prototype.push = function (data) {
            this.protocol.server.pushData(this.repoMethod, data, [this.key]);
        };
        return ServerBranch;
    }());

    var ServerStream = (function () {
        function ServerStream(_protocol, _repoMethod, _server) {
            this._protocol = _protocol;
            this._repoMethod = _repoMethod;
            this._server = _server;
            this.name = this._repoMethod.definition.name;
        }
        ServerStream.prototype.branches = function (key) {
            var _this = this;
            var bList = this._protocol.server.getBranchList(this._repoMethod);
            if (key) {
                if (bList.indexOf(key) > -1) {
                    return new ServerBranch(key, this._protocol, this._repoMethod);
                }
                return undefined;
            }
            else {
                return bList.map(function (branchKey) {
                    return new ServerBranch(branchKey, _this._protocol, _this._repoMethod);
                });
            }
        };
        ServerStream.prototype.branch = function (key) {
            return this.branches(key);
        };
        ServerStream.prototype.subscriptions = function () {
            var _this = this;
            var subList = this._protocol.server.getSubscriptionList(this._repoMethod);
            return subList.map(function (sub) {
                return new ServerSubscription(_this._protocol, _this._repoMethod, sub);
            });
        };
        Object.defineProperty(ServerStream.prototype, "definition", {
            get: function () {
                var _a;
                var def2 = this._repoMethod.definition;
                return {
                    accepts: def2.accepts,
                    description: def2.description,
                    displayName: def2.displayName,
                    name: def2.name,
                    objectTypes: def2.objectTypes,
                    returns: def2.returns,
                    supportsStreaming: def2.supportsStreaming,
                    flags: (_a = def2.flags) === null || _a === void 0 ? void 0 : _a.metadata,
                };
            },
            enumerable: false,
            configurable: true
        });
        ServerStream.prototype.close = function () {
            this._protocol.server.closeAllSubscriptions(this._repoMethod);
            this._server.unregister(this._repoMethod.definition, true);
        };
        ServerStream.prototype.push = function (data, branches) {
            if (typeof branches !== "string" && !Array.isArray(branches) && branches !== undefined) {
                throw new Error("invalid branches should be string or string array");
            }
            if (typeof data !== "object") {
                throw new Error("Invalid arguments. Data must be an object.");
            }
            this._protocol.server.pushData(this._repoMethod, data, branches);
        };
        ServerStream.prototype.updateRepoMethod = function (repoMethod) {
            this._repoMethod = repoMethod;
        };
        return ServerStream;
    }());

    var Server = (function () {
        function Server(protocol, serverRepository) {
            this.protocol = protocol;
            this.serverRepository = serverRepository;
            this.invocations = 0;
            this.currentlyUnregistering = {};
            this.streaming = new ServerStreaming$1(protocol, this);
            this.protocol.server.onInvoked(this.onMethodInvoked.bind(this));
        }
        Server.prototype.createStream = function (streamDef, callbacks, successCallback, errorCallback, existingStream) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                if (!streamDef) {
                    reject("The stream name must be unique! Please, provide either a unique string for a stream name to “glue.interop.createStream()” or a “methodDefinition” object with a unique “name” property for the stream.");
                    return;
                }
                var streamMethodDefinition;
                if (typeof streamDef === "string") {
                    streamMethodDefinition = { name: "" + streamDef };
                }
                else {
                    streamMethodDefinition = __assign({}, streamDef);
                }
                if (!streamMethodDefinition.name) {
                    return reject("The \u201Cname\u201D property is required for the \u201CstreamDefinition\u201D object and must be unique. Stream definition: ".concat(JSON.stringify(streamMethodDefinition)));
                }
                var nameAlreadyExists = _this.serverRepository.getList()
                    .some(function (serverMethod) { return serverMethod.definition.name === streamMethodDefinition.name; });
                if (nameAlreadyExists) {
                    return reject("A stream with the name \"".concat(streamMethodDefinition.name, "\" already exists! Please, provide a unique name for the stream."));
                }
                streamMethodDefinition.supportsStreaming = true;
                if (!callbacks) {
                    callbacks = {};
                }
                if (typeof callbacks.subscriptionRequestHandler !== "function") {
                    callbacks.subscriptionRequestHandler = function (request) {
                        request.accept();
                    };
                }
                var repoMethod = _this.serverRepository.add({
                    definition: streamMethodDefinition,
                    streamCallbacks: callbacks,
                    protocolState: {},
                });
                _this.protocol.server.createStream(repoMethod)
                    .then(function () {
                    var streamUserObject;
                    if (existingStream) {
                        streamUserObject = existingStream;
                        existingStream.updateRepoMethod(repoMethod);
                    }
                    else {
                        streamUserObject = new ServerStream(_this.protocol, repoMethod, _this);
                    }
                    repoMethod.stream = streamUserObject;
                    resolve(streamUserObject);
                })
                    .catch(function (err) {
                    if (repoMethod.repoId) {
                        _this.serverRepository.remove(repoMethod.repoId);
                    }
                    reject(err);
                });
            });
            return promisify(promise, successCallback, errorCallback);
        };
        Server.prototype.register = function (methodDefinition, callback) {
            var _this = this;
            if (!methodDefinition) {
                return Promise.reject("Method definition is required. Please, provide either a unique string for a method name or a “methodDefinition” object with a required “name” property.");
            }
            if (typeof callback !== "function") {
                return Promise.reject("The second parameter must be a callback function. Method: ".concat(typeof methodDefinition === "string" ? methodDefinition : methodDefinition.name));
            }
            var wrappedCallbackFunction = function (context, resultCallback) { return __awaiter(_this, void 0, void 0, function () {
                var result, resultValue, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            result = callback(context.args, context.instance);
                            if (!(result && typeof result.then === "function")) return [3, 2];
                            return [4, result];
                        case 1:
                            resultValue = _a.sent();
                            resultCallback(undefined, resultValue);
                            return [3, 3];
                        case 2:
                            resultCallback(undefined, result);
                            _a.label = 3;
                        case 3: return [3, 5];
                        case 4:
                            e_1 = _a.sent();
                            resultCallback(e_1 !== null && e_1 !== void 0 ? e_1 : "", e_1 !== null && e_1 !== void 0 ? e_1 : "");
                            return [3, 5];
                        case 5: return [2];
                    }
                });
            }); };
            wrappedCallbackFunction.userCallback = callback;
            return this.registerCore(methodDefinition, wrappedCallbackFunction);
        };
        Server.prototype.registerAsync = function (methodDefinition, callback) {
            if (!methodDefinition) {
                return Promise.reject("Method definition is required. Please, provide either a unique string for a method name or a “methodDefinition” object with a required “name” property.");
            }
            if (typeof callback !== "function") {
                return Promise.reject("The second parameter must be a callback function. Method: ".concat(typeof methodDefinition === "string" ? methodDefinition : methodDefinition.name));
            }
            var wrappedCallback = function (context, resultCallback) {
                try {
                    var resultCalled_1 = false;
                    var success = function (result) {
                        if (!resultCalled_1) {
                            resultCallback(undefined, result);
                        }
                        resultCalled_1 = true;
                    };
                    var error = function (e) {
                        if (!resultCalled_1) {
                            if (!e) {
                                e = "";
                            }
                            resultCallback(e, e);
                        }
                        resultCalled_1 = true;
                    };
                    var methodResult = callback(context.args, context.instance, success, error);
                    if (methodResult && typeof methodResult.then === "function") {
                        methodResult
                            .then(success)
                            .catch(error);
                    }
                }
                catch (e) {
                    resultCallback(e, undefined);
                }
            };
            wrappedCallback.userCallbackAsync = callback;
            return this.registerCore(methodDefinition, wrappedCallback);
        };
        Server.prototype.unregister = function (methodFilter, forStream) {
            if (forStream === void 0) { forStream = false; }
            return __awaiter(this, void 0, void 0, function () {
                var methodDefinition, methodToBeRemoved;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (methodFilter === undefined) {
                                return [2, Promise.reject("Please, provide either a unique string for a name or an object containing a “name” property.")];
                            }
                            if (!(typeof methodFilter === "function")) return [3, 2];
                            return [4, this.unregisterWithPredicate(methodFilter, forStream)];
                        case 1:
                            _a.sent();
                            return [2];
                        case 2:
                            if (typeof methodFilter === "string") {
                                methodDefinition = { name: methodFilter };
                            }
                            else {
                                methodDefinition = methodFilter;
                            }
                            if (methodDefinition.name === undefined) {
                                return [2, Promise.reject("Method name is required. Cannot find a method if the method name is undefined!")];
                            }
                            methodToBeRemoved = this.serverRepository.getList().find(function (serverMethod) {
                                return serverMethod.definition.name === methodDefinition.name
                                    && (serverMethod.definition.supportsStreaming || false) === forStream;
                            });
                            if (!methodToBeRemoved) {
                                return [2, Promise.reject("Method with a name \"".concat(methodDefinition.name, "\" does not exist or is not registered by your application!"))];
                            }
                            return [4, this.removeMethodsOrStreams([methodToBeRemoved])];
                        case 3:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Server.prototype.unregisterWithPredicate = function (filterPredicate, forStream) {
            return __awaiter(this, void 0, void 0, function () {
                var methodsOrStreamsToRemove;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            methodsOrStreamsToRemove = this.serverRepository.getList()
                                .filter(function (sm) { return filterPredicate(sm.definition); })
                                .filter(function (serverMethod) {
                                return (serverMethod.definition.supportsStreaming || false) === forStream;
                            });
                            if (!methodsOrStreamsToRemove || methodsOrStreamsToRemove.length === 0) {
                                return [2, Promise.reject("Could not find a ".concat(forStream ? "stream" : "method", " matching the specified condition!"))];
                            }
                            return [4, this.removeMethodsOrStreams(methodsOrStreamsToRemove)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Server.prototype.removeMethodsOrStreams = function (methodsToRemove) {
            var _this = this;
            var methodUnregPromises = [];
            methodsToRemove.forEach(function (method) {
                var promise = _this.protocol.server.unregister(method)
                    .then(function () {
                    if (method.repoId) {
                        _this.serverRepository.remove(method.repoId);
                    }
                });
                methodUnregPromises.push(promise);
                _this.addAsCurrentlyUnregistering(method.definition.name, promise);
            });
            return Promise.all(methodUnregPromises);
        };
        Server.prototype.addAsCurrentlyUnregistering = function (methodName, promise) {
            return __awaiter(this, void 0, void 0, function () {
                var timeout;
                var _this = this;
                return __generator(this, function (_a) {
                    timeout = new Promise(function (resolve) { return setTimeout(resolve, 5000); });
                    this.currentlyUnregistering[methodName] = Promise.race([promise, timeout]).then(function () {
                        delete _this.currentlyUnregistering[methodName];
                    });
                    return [2];
                });
            });
        };
        Server.prototype.registerCore = function (method, theFunction) {
            return __awaiter(this, void 0, void 0, function () {
                var methodDefinition, unregisterInProgress, nameAlreadyExists, repoMethod;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (typeof method === "string") {
                                methodDefinition = { name: "" + method };
                            }
                            else {
                                methodDefinition = __assign({}, method);
                            }
                            if (!methodDefinition.name) {
                                return [2, Promise.reject("Please, provide a (unique) string value for the \u201Cname\u201D property in the \u201CmethodDefinition\u201D object: ".concat(JSON.stringify(method)))];
                            }
                            unregisterInProgress = this.currentlyUnregistering[methodDefinition.name];
                            if (!unregisterInProgress) return [3, 2];
                            return [4, unregisterInProgress];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            nameAlreadyExists = this.serverRepository.getList()
                                .some(function (serverMethod) { return serverMethod.definition.name === methodDefinition.name; });
                            if (nameAlreadyExists) {
                                return [2, Promise.reject("A method with the name \"".concat(methodDefinition.name, "\" already exists! Please, provide a unique name for the method."))];
                            }
                            if (methodDefinition.supportsStreaming) {
                                return [2, Promise.reject("When you create methods with \u201Cglue.interop.register()\u201D or \u201Cglue.interop.registerAsync()\u201D the property \u201CsupportsStreaming\u201D cannot be \u201Ctrue\u201D. If you want \u201C".concat(methodDefinition.name, "\u201D to be a stream, please use the \u201Cglue.interop.createStream()\u201D method."))];
                            }
                            repoMethod = this.serverRepository.add({
                                definition: methodDefinition,
                                theFunction: theFunction,
                                protocolState: {},
                            });
                            return [2, this.protocol.server.register(repoMethod)
                                    .catch(function (err) {
                                    if (repoMethod === null || repoMethod === void 0 ? void 0 : repoMethod.repoId) {
                                        _this.serverRepository.remove(repoMethod.repoId);
                                    }
                                    throw err;
                                })];
                    }
                });
            });
        };
        Server.prototype.onMethodInvoked = function (methodToExecute, invocationId, invocationArgs) {
            var _this = this;
            if (!methodToExecute || !methodToExecute.theFunction) {
                return;
            }
            methodToExecute.theFunction(invocationArgs, function (err, result) {
                if (err !== undefined && err !== null) {
                    if (err.message && typeof err.message === "string") {
                        err = err.message;
                    }
                    else if (typeof err !== "string") {
                        try {
                            err = JSON.stringify(err);
                        }
                        catch (unStrException) {
                            err = "un-stringifyable error in onMethodInvoked! Top level prop names: ".concat(Object.keys(err));
                        }
                    }
                }
                if (!result) {
                    result = {};
                }
                else if (typeof result !== "object" || Array.isArray(result)) {
                    result = { _value: result };
                }
                _this.protocol.server.methodInvocationResult(methodToExecute, invocationId, err, result);
            });
        };
        return Server;
    }());

    var InstanceWrapper = (function () {
        function InstanceWrapper(API, instance, connection) {
            var _this = this;
            this.wrapped = {};
            this.wrapped.getMethods = function () {
                return API.methodsForInstance(this);
            };
            this.wrapped.getStreams = function () {
                return API.methodsForInstance(this).filter(function (m) { return m.supportsStreaming; });
            };
            if (instance) {
                this.refreshWrappedObject(instance);
            }
            if (connection) {
                connection.loggedIn(function () {
                    _this.refresh(connection);
                });
                this.refresh(connection);
            }
        }
        InstanceWrapper.prototype.unwrap = function () {
            return this.wrapped;
        };
        InstanceWrapper.prototype.refresh = function (connection) {
            if (!connection) {
                return;
            }
            var resolvedIdentity = connection === null || connection === void 0 ? void 0 : connection.resolvedIdentity;
            var instance = Object.assign({}, resolvedIdentity !== null && resolvedIdentity !== void 0 ? resolvedIdentity : {}, { peerId: connection === null || connection === void 0 ? void 0 : connection.peerId });
            this.refreshWrappedObject(instance);
        };
        InstanceWrapper.prototype.refreshWrappedObject = function (resolvedIdentity) {
            var _this = this;
            var _a, _b, _c, _d;
            Object.keys(resolvedIdentity).forEach(function (key) {
                _this.wrapped[key] = resolvedIdentity[key];
            });
            this.wrapped.user = resolvedIdentity.user;
            this.wrapped.instance = resolvedIdentity.instance;
            this.wrapped.application = (_a = resolvedIdentity.application) !== null && _a !== void 0 ? _a : shortid();
            this.wrapped.applicationName = resolvedIdentity.applicationName;
            this.wrapped.pid = (_c = (_b = resolvedIdentity.pid) !== null && _b !== void 0 ? _b : resolvedIdentity.process) !== null && _c !== void 0 ? _c : Math.floor(Math.random() * 10000000000);
            this.wrapped.machine = resolvedIdentity.machine;
            this.wrapped.environment = resolvedIdentity.environment;
            this.wrapped.region = resolvedIdentity.region;
            this.wrapped.windowId = resolvedIdentity.windowId;
            this.wrapped.isLocal = (_d = resolvedIdentity.isLocal) !== null && _d !== void 0 ? _d : true;
            this.wrapped.api = resolvedIdentity.api;
            this.wrapped.service = resolvedIdentity.service;
            this.wrapped.peerId = resolvedIdentity.peerId;
        };
        return InstanceWrapper;
    }());

    var hideMethodSystemFlags = function (method) {
        return __assign(__assign({}, method), { flags: method.flags.metadata || {} });
    };
    var ClientRepository = (function () {
        function ClientRepository(logger, API) {
            this.logger = logger;
            this.API = API;
            this.servers = {};
            this.methodsCount = {};
            this.callbacks = lib$1();
            var peerId = this.API.instance.peerId;
            this.myServer = {
                id: peerId,
                methods: {},
                instance: this.API.instance,
                wrapper: this.API.unwrappedInstance,
            };
            this.servers[peerId] = this.myServer;
        }
        ClientRepository.prototype.addServer = function (info, serverId) {
            this.logger.debug("adding server ".concat(serverId));
            var current = this.servers[serverId];
            if (current) {
                return current.id;
            }
            var wrapper = new InstanceWrapper(this.API, info);
            var serverEntry = {
                id: serverId,
                methods: {},
                instance: wrapper.unwrap(),
                wrapper: wrapper,
            };
            this.servers[serverId] = serverEntry;
            this.callbacks.execute("onServerAdded", serverEntry.instance);
            return serverId;
        };
        ClientRepository.prototype.removeServerById = function (id, reason) {
            var _this = this;
            var server = this.servers[id];
            if (!server) {
                this.logger.warn("not aware of server ".concat(id, ", my state ").concat(JSON.stringify(Object.keys(this.servers))));
                return;
            }
            else {
                this.logger.debug("removing server ".concat(id));
            }
            Object.keys(server.methods).forEach(function (methodId) {
                _this.removeServerMethod(id, methodId);
            });
            delete this.servers[id];
            this.callbacks.execute("onServerRemoved", server.instance, reason);
        };
        ClientRepository.prototype.addServerMethod = function (serverId, method) {
            var _a;
            var server = this.servers[serverId];
            if (!server) {
                throw new Error("server does not exists");
            }
            if (server.methods[method.id]) {
                return;
            }
            var identifier = this.createMethodIdentifier(method);
            var that = this;
            var methodDefinition = {
                identifier: identifier,
                gatewayId: method.id,
                name: method.name,
                displayName: method.display_name,
                description: method.description,
                version: method.version,
                objectTypes: method.object_types || [],
                accepts: method.input_signature,
                returns: method.result_signature,
                supportsStreaming: typeof method.flags !== "undefined" ? method.flags.streaming : false,
                flags: (_a = method.flags) !== null && _a !== void 0 ? _a : {},
                getServers: function () {
                    return that.getServersByMethod(identifier);
                }
            };
            methodDefinition.object_types = methodDefinition.objectTypes;
            methodDefinition.display_name = methodDefinition.displayName;
            methodDefinition.version = methodDefinition.version;
            server.methods[method.id] = methodDefinition;
            var clientMethodDefinition = hideMethodSystemFlags(methodDefinition);
            if (!this.methodsCount[identifier]) {
                this.methodsCount[identifier] = 0;
                this.callbacks.execute("onMethodAdded", clientMethodDefinition);
            }
            this.methodsCount[identifier] = this.methodsCount[identifier] + 1;
            this.callbacks.execute("onServerMethodAdded", server.instance, clientMethodDefinition);
            return methodDefinition;
        };
        ClientRepository.prototype.removeServerMethod = function (serverId, methodId) {
            var server = this.servers[serverId];
            if (!server) {
                throw new Error("server does not exists");
            }
            var method = server.methods[methodId];
            delete server.methods[methodId];
            var clientMethodDefinition = hideMethodSystemFlags(method);
            this.methodsCount[method.identifier] = this.methodsCount[method.identifier] - 1;
            if (this.methodsCount[method.identifier] === 0) {
                this.callbacks.execute("onMethodRemoved", clientMethodDefinition);
            }
            this.callbacks.execute("onServerMethodRemoved", server.instance, clientMethodDefinition);
        };
        ClientRepository.prototype.getMethods = function () {
            return this.extractMethodsFromServers(Object.values(this.servers)).map(hideMethodSystemFlags);
        };
        ClientRepository.prototype.getServers = function () {
            return Object.values(this.servers).map(this.hideServerMethodSystemFlags);
        };
        ClientRepository.prototype.onServerAdded = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerAdded", callback);
            var serversWithMethodsToReplay = this.getServers().map(function (s) { return s.instance; });
            return this.returnUnsubWithDelayedReplay(unsubscribeFunc, serversWithMethodsToReplay, callback);
        };
        ClientRepository.prototype.onMethodAdded = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onMethodAdded", callback);
            var methodsToReplay = this.getMethods();
            return this.returnUnsubWithDelayedReplay(unsubscribeFunc, methodsToReplay, callback);
        };
        ClientRepository.prototype.onServerMethodAdded = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerMethodAdded", callback);
            var unsubCalled = false;
            var servers = this.getServers();
            setTimeout(function () {
                servers.forEach(function (server) {
                    var methods = server.methods;
                    Object.keys(methods).forEach(function (methodId) {
                        if (!unsubCalled) {
                            callback(server.instance, methods[methodId]);
                        }
                    });
                });
            }, 0);
            return function () {
                unsubCalled = true;
                unsubscribeFunc();
            };
        };
        ClientRepository.prototype.onMethodRemoved = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onMethodRemoved", callback);
            return unsubscribeFunc;
        };
        ClientRepository.prototype.onServerRemoved = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerRemoved", callback);
            return unsubscribeFunc;
        };
        ClientRepository.prototype.onServerMethodRemoved = function (callback) {
            var unsubscribeFunc = this.callbacks.add("onServerMethodRemoved", callback);
            return unsubscribeFunc;
        };
        ClientRepository.prototype.getServerById = function (id) {
            return this.hideServerMethodSystemFlags(this.servers[id]);
        };
        ClientRepository.prototype.reset = function () {
            var _a;
            var _this = this;
            Object.keys(this.servers).forEach(function (key) {
                _this.removeServerById(key, "reset");
            });
            this.servers = (_a = {},
                _a[this.myServer.id] = this.myServer,
                _a);
            this.methodsCount = {};
        };
        ClientRepository.prototype.createMethodIdentifier = function (methodInfo) {
            var _a, _b;
            var accepts = (_a = methodInfo.input_signature) !== null && _a !== void 0 ? _a : "";
            var returns = (_b = methodInfo.result_signature) !== null && _b !== void 0 ? _b : "";
            return (methodInfo.name + accepts + returns).toLowerCase();
        };
        ClientRepository.prototype.getServersByMethod = function (identifier) {
            var allServers = [];
            Object.values(this.servers).forEach(function (server) {
                Object.values(server.methods).forEach(function (method) {
                    if (method.identifier === identifier) {
                        allServers.push(server.instance);
                    }
                });
            });
            return allServers;
        };
        ClientRepository.prototype.returnUnsubWithDelayedReplay = function (unsubscribeFunc, collectionToReplay, callback) {
            var unsubCalled = false;
            setTimeout(function () {
                collectionToReplay.forEach(function (item) {
                    if (!unsubCalled) {
                        callback(item);
                    }
                });
            }, 0);
            return function () {
                unsubCalled = true;
                unsubscribeFunc();
            };
        };
        ClientRepository.prototype.hideServerMethodSystemFlags = function (server) {
            var clientMethods = {};
            Object.entries(server.methods).forEach(function (_a) {
                var name = _a[0], method = _a[1];
                clientMethods[name] = hideMethodSystemFlags(method);
            });
            return __assign(__assign({}, server), { methods: clientMethods });
        };
        ClientRepository.prototype.extractMethodsFromServers = function (servers) {
            var methods = Object.values(servers).reduce(function (clientMethods, server) {
                return __spreadArray(__spreadArray([], clientMethods, true), Object.values(server.methods), true);
            }, []);
            return methods;
        };
        return ClientRepository;
    }());

    var ServerRepository = (function () {
        function ServerRepository() {
            this.nextId = 0;
            this.methods = [];
        }
        ServerRepository.prototype.add = function (method) {
            method.repoId = String(this.nextId);
            this.nextId += 1;
            this.methods.push(method);
            return method;
        };
        ServerRepository.prototype.remove = function (repoId) {
            if (typeof repoId !== "string") {
                return new TypeError("Expecting a string");
            }
            this.methods = this.methods.filter(function (m) {
                return m.repoId !== repoId;
            });
        };
        ServerRepository.prototype.getById = function (id) {
            if (typeof id !== "string") {
                return undefined;
            }
            return this.methods.find(function (m) {
                return m.repoId === id;
            });
        };
        ServerRepository.prototype.getList = function () {
            return this.methods.map(function (m) { return m; });
        };
        ServerRepository.prototype.length = function () {
            return this.methods.length;
        };
        ServerRepository.prototype.reset = function () {
            this.methods = [];
        };
        return ServerRepository;
    }());

    var SUBSCRIPTION_REQUEST = "onSubscriptionRequest";
    var SUBSCRIPTION_ADDED = "onSubscriptionAdded";
    var SUBSCRIPTION_REMOVED = "onSubscriptionRemoved";
    var ServerStreaming = (function () {
        function ServerStreaming(session, repository, serverRepository) {
            var _this = this;
            this.session = session;
            this.repository = repository;
            this.serverRepository = serverRepository;
            this.ERR_URI_SUBSCRIPTION_FAILED = "com.tick42.agm.errors.subscription.failure";
            this.callbacks = lib$1();
            this.nextStreamId = 0;
            session.on("add-interest", function (msg) {
                _this.handleAddInterest(msg);
            });
            session.on("remove-interest", function (msg) {
                _this.handleRemoveInterest(msg);
            });
        }
        ServerStreaming.prototype.acceptRequestOnBranch = function (requestContext, streamingMethod, branch) {
            if (typeof branch !== "string") {
                branch = "";
            }
            if (typeof streamingMethod.protocolState.subscriptionsMap !== "object") {
                throw new TypeError("The streaming method is missing its subscriptions.");
            }
            if (!Array.isArray(streamingMethod.protocolState.branchKeyToStreamIdMap)) {
                throw new TypeError("The streaming method is missing its branches.");
            }
            var streamId = this.getStreamId(streamingMethod, branch);
            var key = requestContext.msg.subscription_id;
            var subscription = {
                id: key,
                arguments: requestContext.arguments,
                instance: requestContext.instance,
                branchKey: branch,
                streamId: streamId,
                subscribeMsg: requestContext.msg,
            };
            streamingMethod.protocolState.subscriptionsMap[key] = subscription;
            this.session.sendFireAndForget({
                type: "accepted",
                subscription_id: key,
                stream_id: streamId,
            });
            this.callbacks.execute(SUBSCRIPTION_ADDED, subscription, streamingMethod);
        };
        ServerStreaming.prototype.rejectRequest = function (requestContext, streamingMethod, reason) {
            if (typeof reason !== "string") {
                reason = "";
            }
            this.sendSubscriptionFailed("Subscription rejected by user. " + reason, requestContext.msg.subscription_id);
        };
        ServerStreaming.prototype.pushData = function (streamingMethod, data, branches) {
            var _this = this;
            if (typeof streamingMethod !== "object" || !Array.isArray(streamingMethod.protocolState.branchKeyToStreamIdMap)) {
                return;
            }
            if (typeof data !== "object") {
                throw new Error("Invalid arguments. Data must be an object.");
            }
            if (typeof branches === "string") {
                branches = [branches];
            }
            else if (!Array.isArray(branches) || branches.length <= 0) {
                branches = [];
            }
            var streamIdList = streamingMethod.protocolState.branchKeyToStreamIdMap
                .filter(function (br) {
                if (!branches || branches.length === 0) {
                    return true;
                }
                return branches.indexOf(br.key) >= 0;
            }).map(function (br) {
                return br.streamId;
            });
            streamIdList.forEach(function (streamId) {
                var publishMessage = {
                    type: "publish",
                    stream_id: streamId,
                    data: data,
                };
                _this.session.sendFireAndForget(publishMessage);
            });
        };
        ServerStreaming.prototype.pushDataToSingle = function (method, subscription, data) {
            if (typeof data !== "object") {
                throw new Error("Invalid arguments. Data must be an object.");
            }
            var postMessage = {
                type: "post",
                subscription_id: subscription.id,
                data: data,
            };
            this.session.sendFireAndForget(postMessage);
        };
        ServerStreaming.prototype.closeSingleSubscription = function (streamingMethod, subscription) {
            if (streamingMethod.protocolState.subscriptionsMap) {
                delete streamingMethod.protocolState.subscriptionsMap[subscription.id];
            }
            var dropSubscriptionMessage = {
                type: "drop-subscription",
                subscription_id: subscription.id,
                reason: "Server dropping a single subscription",
            };
            this.session.sendFireAndForget(dropSubscriptionMessage);
            subscription.instance;
            this.callbacks.execute(SUBSCRIPTION_REMOVED, subscription, streamingMethod);
        };
        ServerStreaming.prototype.closeMultipleSubscriptions = function (streamingMethod, branchKey) {
            var _this = this;
            if (typeof streamingMethod !== "object" || typeof streamingMethod.protocolState.subscriptionsMap !== "object") {
                return;
            }
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return;
            }
            var subscriptionsMap = streamingMethod.protocolState.subscriptionsMap;
            var subscriptionsToClose = Object.keys(subscriptionsMap)
                .map(function (key) {
                return subscriptionsMap[key];
            });
            if (typeof branchKey === "string") {
                subscriptionsToClose = subscriptionsToClose.filter(function (sub) {
                    return sub.branchKey === branchKey;
                });
            }
            subscriptionsToClose.forEach(function (subscription) {
                delete subscriptionsMap[subscription.id];
                var drop = {
                    type: "drop-subscription",
                    subscription_id: subscription.id,
                    reason: "Server dropping all subscriptions on stream_id: " + subscription.streamId,
                };
                _this.session.sendFireAndForget(drop);
            });
        };
        ServerStreaming.prototype.getSubscriptionList = function (streamingMethod, branchKey) {
            if (typeof streamingMethod !== "object") {
                return [];
            }
            var subscriptions = [];
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return [];
            }
            var subscriptionsMap = streamingMethod.protocolState.subscriptionsMap;
            var allSubscriptions = Object.keys(subscriptionsMap)
                .map(function (key) {
                return subscriptionsMap[key];
            });
            if (typeof branchKey !== "string") {
                subscriptions = allSubscriptions;
            }
            else {
                subscriptions = allSubscriptions.filter(function (sub) {
                    return sub.branchKey === branchKey;
                });
            }
            return subscriptions;
        };
        ServerStreaming.prototype.getBranchList = function (streamingMethod) {
            if (typeof streamingMethod !== "object") {
                return [];
            }
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return [];
            }
            var subscriptionsMap = streamingMethod.protocolState.subscriptionsMap;
            var allSubscriptions = Object.keys(subscriptionsMap)
                .map(function (key) {
                return subscriptionsMap[key];
            });
            var result = [];
            allSubscriptions.forEach(function (sub) {
                var branch = "";
                if (typeof sub === "object" && typeof sub.branchKey === "string") {
                    branch = sub.branchKey;
                }
                if (result.indexOf(branch) === -1) {
                    result.push(branch);
                }
            });
            return result;
        };
        ServerStreaming.prototype.onSubAdded = function (callback) {
            this.onSubscriptionLifetimeEvent(SUBSCRIPTION_ADDED, callback);
        };
        ServerStreaming.prototype.onSubRequest = function (callback) {
            this.onSubscriptionLifetimeEvent(SUBSCRIPTION_REQUEST, callback);
        };
        ServerStreaming.prototype.onSubRemoved = function (callback) {
            this.onSubscriptionLifetimeEvent(SUBSCRIPTION_REMOVED, callback);
        };
        ServerStreaming.prototype.handleRemoveInterest = function (msg) {
            var streamingMethod = this.serverRepository.getById(msg.method_id);
            if (typeof msg.subscription_id !== "string" ||
                typeof streamingMethod !== "object") {
                return;
            }
            if (!streamingMethod.protocolState.subscriptionsMap) {
                return;
            }
            if (typeof streamingMethod.protocolState.subscriptionsMap[msg.subscription_id] !== "object") {
                return;
            }
            var subscription = streamingMethod.protocolState.subscriptionsMap[msg.subscription_id];
            delete streamingMethod.protocolState.subscriptionsMap[msg.subscription_id];
            this.callbacks.execute(SUBSCRIPTION_REMOVED, subscription, streamingMethod);
        };
        ServerStreaming.prototype.onSubscriptionLifetimeEvent = function (eventName, handlerFunc) {
            this.callbacks.add(eventName, handlerFunc);
        };
        ServerStreaming.prototype.getNextStreamId = function () {
            return this.nextStreamId++ + "";
        };
        ServerStreaming.prototype.handleAddInterest = function (msg) {
            var caller = this.repository.getServerById(msg.caller_id);
            var instance = caller.instance;
            var requestContext = {
                msg: msg,
                arguments: msg.arguments_kv || {},
                instance: instance,
            };
            var streamingMethod = this.serverRepository.getById(msg.method_id);
            if (streamingMethod === undefined) {
                var errorMsg = "No method with id " + msg.method_id + " on this server.";
                this.sendSubscriptionFailed(errorMsg, msg.subscription_id);
                return;
            }
            if (streamingMethod.protocolState.subscriptionsMap &&
                streamingMethod.protocolState.subscriptionsMap[msg.subscription_id]) {
                this.sendSubscriptionFailed("A subscription with id " + msg.subscription_id + " already exists.", msg.subscription_id);
                return;
            }
            this.callbacks.execute(SUBSCRIPTION_REQUEST, requestContext, streamingMethod);
        };
        ServerStreaming.prototype.sendSubscriptionFailed = function (reason, subscriptionId) {
            var errorMessage = {
                type: "error",
                reason_uri: this.ERR_URI_SUBSCRIPTION_FAILED,
                reason: reason,
                request_id: subscriptionId,
            };
            this.session.sendFireAndForget(errorMessage);
        };
        ServerStreaming.prototype.getStreamId = function (streamingMethod, branchKey) {
            if (typeof branchKey !== "string") {
                branchKey = "";
            }
            if (!streamingMethod.protocolState.branchKeyToStreamIdMap) {
                throw new Error("streaming ".concat(streamingMethod.definition.name, " method without protocol state"));
            }
            var needleBranch = streamingMethod.protocolState.branchKeyToStreamIdMap.filter(function (branch) {
                return branch.key === branchKey;
            })[0];
            var streamId = (needleBranch ? needleBranch.streamId : undefined);
            if (typeof streamId !== "string" || streamId === "") {
                streamId = this.getNextStreamId();
                streamingMethod.protocolState.branchKeyToStreamIdMap.push({ key: branchKey, streamId: streamId });
            }
            return streamId;
        };
        return ServerStreaming;
    }());

    var ServerProtocol = (function () {
        function ServerProtocol(session, clientRepository, serverRepository, logger) {
            var _this = this;
            this.session = session;
            this.clientRepository = clientRepository;
            this.serverRepository = serverRepository;
            this.logger = logger;
            this.callbacks = lib$1();
            this.streaming = new ServerStreaming(session, clientRepository, serverRepository);
            this.session.on("invoke", function (msg) { return _this.handleInvokeMessage(msg); });
        }
        ServerProtocol.prototype.createStream = function (repoMethod) {
            repoMethod.protocolState.subscriptionsMap = {};
            repoMethod.protocolState.branchKeyToStreamIdMap = [];
            return this.register(repoMethod, true);
        };
        ServerProtocol.prototype.register = function (repoMethod, isStreaming) {
            var _this = this;
            var _a;
            var methodDef = repoMethod.definition;
            var flags = Object.assign({}, { metadata: (_a = methodDef.flags) !== null && _a !== void 0 ? _a : {} }, { streaming: isStreaming || false });
            var registerMsg = {
                type: "register",
                methods: [{
                        id: repoMethod.repoId,
                        name: methodDef.name,
                        display_name: methodDef.displayName,
                        description: methodDef.description,
                        version: methodDef.version,
                        flags: flags,
                        object_types: methodDef.objectTypes || methodDef.object_types,
                        input_signature: methodDef.accepts,
                        result_signature: methodDef.returns,
                        restrictions: undefined,
                    }],
            };
            return this.session.send(registerMsg, { methodId: repoMethod.repoId })
                .then(function () {
                _this.logger.debug("registered method " + repoMethod.definition.name + " with id " + repoMethod.repoId);
            })
                .catch(function (msg) {
                _this.logger.warn("failed to register method ".concat(repoMethod.definition.name, " with id ").concat(repoMethod.repoId, " - ").concat(JSON.stringify(msg)));
                throw msg;
            });
        };
        ServerProtocol.prototype.onInvoked = function (callback) {
            this.callbacks.add("onInvoked", callback);
        };
        ServerProtocol.prototype.methodInvocationResult = function (method, invocationId, err, result) {
            var msg;
            if (err || err === "") {
                msg = {
                    type: "error",
                    request_id: invocationId,
                    reason_uri: "agm.errors.client_error",
                    reason: err,
                    context: result,
                    peer_id: undefined,
                };
            }
            else {
                msg = {
                    type: "yield",
                    invocation_id: invocationId,
                    peer_id: this.session.peerId,
                    result: result,
                    request_id: undefined,
                };
            }
            this.session.sendFireAndForget(msg);
        };
        ServerProtocol.prototype.unregister = function (method) {
            return __awaiter(this, void 0, void 0, function () {
                var msg;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            msg = {
                                type: "unregister",
                                methods: [method.repoId],
                            };
                            return [4, this.session.send(msg)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ServerProtocol.prototype.getBranchList = function (method) {
            return this.streaming.getBranchList(method);
        };
        ServerProtocol.prototype.getSubscriptionList = function (method, branchKey) {
            return this.streaming.getSubscriptionList(method, branchKey);
        };
        ServerProtocol.prototype.closeAllSubscriptions = function (method, branchKey) {
            this.streaming.closeMultipleSubscriptions(method, branchKey);
        };
        ServerProtocol.prototype.pushData = function (method, data, branches) {
            this.streaming.pushData(method, data, branches);
        };
        ServerProtocol.prototype.pushDataToSingle = function (method, subscription, data) {
            this.streaming.pushDataToSingle(method, subscription, data);
        };
        ServerProtocol.prototype.closeSingleSubscription = function (method, subscription) {
            this.streaming.closeSingleSubscription(method, subscription);
        };
        ServerProtocol.prototype.acceptRequestOnBranch = function (requestContext, method, branch) {
            this.streaming.acceptRequestOnBranch(requestContext, method, branch);
        };
        ServerProtocol.prototype.rejectRequest = function (requestContext, method, reason) {
            this.streaming.rejectRequest(requestContext, method, reason);
        };
        ServerProtocol.prototype.onSubRequest = function (callback) {
            this.streaming.onSubRequest(callback);
        };
        ServerProtocol.prototype.onSubAdded = function (callback) {
            this.streaming.onSubAdded(callback);
        };
        ServerProtocol.prototype.onSubRemoved = function (callback) {
            this.streaming.onSubRemoved(callback);
        };
        ServerProtocol.prototype.handleInvokeMessage = function (msg) {
            var invocationId = msg.invocation_id;
            var callerId = msg.caller_id;
            var methodId = msg.method_id;
            var args = msg.arguments_kv;
            var methodList = this.serverRepository.getList();
            var method = methodList.filter(function (m) {
                return m.repoId === methodId;
            })[0];
            if (method === undefined) {
                return;
            }
            var client = this.clientRepository.getServerById(callerId).instance;
            var invocationArgs = { args: args, instance: client };
            this.callbacks.execute("onInvoked", method, invocationId, invocationArgs);
        };
        return ServerProtocol;
    }());

    var UserSubscription = (function () {
        function UserSubscription(repository, subscriptionData) {
            this.repository = repository;
            this.subscriptionData = subscriptionData;
        }
        Object.defineProperty(UserSubscription.prototype, "requestArguments", {
            get: function () {
                return this.subscriptionData.params.arguments || {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserSubscription.prototype, "servers", {
            get: function () {
                var _this = this;
                return this.subscriptionData.trackedServers
                    .filter(function (pair) { return pair.subscriptionId; })
                    .map(function (pair) { return _this.repository.getServerById(pair.serverId).instance; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserSubscription.prototype, "serverInstance", {
            get: function () {
                return this.servers[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserSubscription.prototype, "stream", {
            get: function () {
                return this.subscriptionData.method;
            },
            enumerable: false,
            configurable: true
        });
        UserSubscription.prototype.onData = function (dataCallback) {
            if (typeof dataCallback !== "function") {
                throw new TypeError("The data callback must be a function.");
            }
            this.subscriptionData.handlers.onData.push(dataCallback);
            if (this.subscriptionData.handlers.onData.length === 1 && this.subscriptionData.queued.data.length > 0) {
                this.subscriptionData.queued.data.forEach(function (dataItem) {
                    dataCallback(dataItem);
                });
            }
        };
        UserSubscription.prototype.onClosed = function (closedCallback) {
            if (typeof closedCallback !== "function") {
                throw new TypeError("The callback must be a function.");
            }
            this.subscriptionData.handlers.onClosed.push(closedCallback);
        };
        UserSubscription.prototype.onFailed = function (callback) {
        };
        UserSubscription.prototype.onConnected = function (callback) {
            if (typeof callback !== "function") {
                throw new TypeError("The callback must be a function.");
            }
            this.subscriptionData.handlers.onConnected.push(callback);
        };
        UserSubscription.prototype.close = function () {
            this.subscriptionData.close();
        };
        UserSubscription.prototype.setNewSubscription = function (newSub) {
            this.subscriptionData = newSub;
        };
        return UserSubscription;
    }());

    var TimedCache = (function () {
        function TimedCache(config) {
            this.config = config;
            this.cache = [];
            this.timeoutIds = [];
        }
        TimedCache.prototype.add = function (element) {
            var _this = this;
            var id = shortid();
            this.cache.push({ id: id, element: element });
            var timeoutId = setTimeout(function () {
                var elementIdx = _this.cache.findIndex(function (entry) { return entry.id === id; });
                if (elementIdx < 0) {
                    return;
                }
                _this.cache.splice(elementIdx, 1);
            }, this.config.ELEMENT_TTL_MS);
            this.timeoutIds.push(timeoutId);
        };
        TimedCache.prototype.flush = function () {
            var elements = this.cache.map(function (entry) { return entry.element; });
            this.timeoutIds.forEach(function (id) { return clearInterval(id); });
            this.cache = [];
            this.timeoutIds = [];
            return elements;
        };
        return TimedCache;
    }());

    var STATUS_AWAITING_ACCEPT = "awaitingAccept";
    var STATUS_SUBSCRIBED = "subscribed";
    var ERR_MSG_SUB_FAILED = "Subscription failed.";
    var ERR_MSG_SUB_REJECTED = "Subscription rejected.";
    var ON_CLOSE_MSG_SERVER_INIT = "ServerInitiated";
    var ON_CLOSE_MSG_CLIENT_INIT = "ClientInitiated";
    var ClientStreaming = (function () {
        function ClientStreaming(session, repository, logger) {
            var _this = this;
            this.session = session;
            this.repository = repository;
            this.logger = logger;
            this.subscriptionsList = {};
            this.timedCache = new TimedCache({ ELEMENT_TTL_MS: 10000 });
            this.subscriptionIdToLocalKeyMap = {};
            this.nextSubLocalKey = 0;
            this.handleErrorSubscribing = function (errorResponse) {
                var tag = errorResponse._tag;
                var subLocalKey = tag.subLocalKey;
                var pendingSub = _this.subscriptionsList[subLocalKey];
                if (typeof pendingSub !== "object") {
                    return;
                }
                pendingSub.trackedServers = pendingSub.trackedServers.filter(function (server) {
                    return server.serverId !== tag.serverId;
                });
                if (pendingSub.trackedServers.length <= 0) {
                    clearTimeout(pendingSub.timeoutId);
                    if (pendingSub.status === STATUS_AWAITING_ACCEPT) {
                        var reason = (typeof errorResponse.reason === "string" && errorResponse.reason !== "") ?
                            ' Publisher said "' + errorResponse.reason + '".' :
                            " No reason given.";
                        var callArgs = typeof pendingSub.params.arguments === "object" ?
                            JSON.stringify(pendingSub.params.arguments) :
                            "{}";
                        pendingSub.error({
                            message: ERR_MSG_SUB_REJECTED + reason + " Called with:" + callArgs,
                            called_with: pendingSub.params.arguments,
                            method: pendingSub.method,
                        });
                    }
                    else if (pendingSub.status === STATUS_SUBSCRIBED) {
                        _this.callOnClosedHandlers(pendingSub);
                    }
                    delete _this.subscriptionsList[subLocalKey];
                }
            };
            this.handleSubscribed = function (msg) {
                var subLocalKey = msg._tag.subLocalKey;
                var pendingSub = _this.subscriptionsList[subLocalKey];
                if (typeof pendingSub !== "object") {
                    return;
                }
                var serverId = msg._tag.serverId;
                var acceptingServer = pendingSub.trackedServers
                    .filter(function (server) {
                    return server.serverId === serverId;
                })[0];
                if (typeof acceptingServer !== "object") {
                    return;
                }
                acceptingServer.subscriptionId = msg.subscription_id;
                _this.subscriptionIdToLocalKeyMap[msg.subscription_id] = subLocalKey;
                var isFirstResponse = (pendingSub.status === STATUS_AWAITING_ACCEPT);
                pendingSub.status = STATUS_SUBSCRIBED;
                if (isFirstResponse) {
                    var reconnect = false;
                    var sub = pendingSub.subscription;
                    if (sub) {
                        sub.setNewSubscription(pendingSub);
                        pendingSub.success(sub);
                        reconnect = true;
                    }
                    else {
                        sub = new UserSubscription(_this.repository, pendingSub);
                        pendingSub.subscription = sub;
                        pendingSub.success(sub);
                    }
                    for (var _i = 0, _a = pendingSub.handlers.onConnected; _i < _a.length; _i++) {
                        var handler = _a[_i];
                        try {
                            handler(sub.serverInstance, reconnect);
                        }
                        catch (e) {
                        }
                    }
                }
            };
            this.handleEventData = function (msg) {
                var subLocalKey = _this.subscriptionIdToLocalKeyMap[msg.subscription_id];
                if (typeof subLocalKey === "undefined") {
                    return;
                }
                var subscription = _this.subscriptionsList[subLocalKey];
                if (typeof subscription !== "object") {
                    return;
                }
                var trackedServersFound = subscription.trackedServers.filter(function (server) {
                    return server.subscriptionId === msg.subscription_id;
                });
                if (trackedServersFound.length !== 1) {
                    return;
                }
                var isPrivateData = msg.oob;
                var sendingServerId = trackedServersFound[0].serverId;
                var receivedStreamData = function () {
                    return {
                        data: msg.data,
                        server: _this.repository.getServerById(sendingServerId).instance,
                        requestArguments: subscription.params.arguments,
                        message: undefined,
                        private: isPrivateData,
                    };
                };
                var onDataHandlers = subscription.handlers.onData;
                var queuedData = subscription.queued.data;
                if (onDataHandlers.length > 0) {
                    onDataHandlers.forEach(function (callback) {
                        if (typeof callback === "function") {
                            callback(receivedStreamData());
                        }
                    });
                }
                else {
                    queuedData.push(receivedStreamData());
                }
            };
            this.handleSubscriptionCancelled = function (msg) {
                var subLocalKey = _this.subscriptionIdToLocalKeyMap[msg.subscription_id];
                if (typeof subLocalKey === "undefined") {
                    return;
                }
                var subscription = _this.subscriptionsList[subLocalKey];
                if (typeof subscription !== "object") {
                    return;
                }
                var expectedNewLength = subscription.trackedServers.length - 1;
                subscription.trackedServers = subscription.trackedServers.filter(function (server) {
                    if (server.subscriptionId === msg.subscription_id) {
                        subscription.queued.closers.push(server.serverId);
                        return false;
                    }
                    else {
                        return true;
                    }
                });
                if (subscription.trackedServers.length !== expectedNewLength) {
                    return;
                }
                if (subscription.trackedServers.length <= 0) {
                    _this.timedCache.add(subscription);
                    clearTimeout(subscription.timeoutId);
                    _this.callOnClosedHandlers(subscription);
                    delete _this.subscriptionsList[subLocalKey];
                }
                delete _this.subscriptionIdToLocalKeyMap[msg.subscription_id];
            };
            session.on("subscribed", this.handleSubscribed);
            session.on("event", this.handleEventData);
            session.on("subscription-cancelled", this.handleSubscriptionCancelled);
        }
        ClientStreaming.prototype.subscribe = function (streamingMethod, params, targetServers, success, error, existingSub) {
            var _this = this;
            if (targetServers.length === 0) {
                error({
                    method: streamingMethod,
                    called_with: params.arguments,
                    message: ERR_MSG_SUB_FAILED + " No available servers matched the target params.",
                });
                return;
            }
            var subLocalKey = this.getNextSubscriptionLocalKey();
            var pendingSub = this.registerSubscription(subLocalKey, streamingMethod, params, success, error, params.methodResponseTimeout || 10000, existingSub);
            if (typeof pendingSub !== "object") {
                error({
                    method: streamingMethod,
                    called_with: params.arguments,
                    message: ERR_MSG_SUB_FAILED + " Unable to register the user callbacks.",
                });
                return;
            }
            targetServers.forEach(function (target) {
                var serverId = target.server.id;
                var method = target.methods.find(function (m) { return m.name === streamingMethod.name; });
                if (!method) {
                    _this.logger.error("can not find method ".concat(streamingMethod.name, " for target ").concat(target.server.id));
                    return;
                }
                pendingSub.trackedServers.push({
                    serverId: serverId,
                    subscriptionId: undefined,
                });
                var msg = {
                    type: "subscribe",
                    server_id: serverId,
                    method_id: method.gatewayId,
                    arguments_kv: params.arguments,
                };
                _this.session.send(msg, { serverId: serverId, subLocalKey: subLocalKey })
                    .then(function (m) { return _this.handleSubscribed(m); })
                    .catch(function (err) { return _this.handleErrorSubscribing(err); });
            });
        };
        ClientStreaming.prototype.drainSubscriptions = function () {
            var existing = Object.values(this.subscriptionsList);
            this.subscriptionsList = {};
            this.subscriptionIdToLocalKeyMap = {};
            return existing;
        };
        ClientStreaming.prototype.drainSubscriptionsCache = function () {
            return this.timedCache.flush();
        };
        ClientStreaming.prototype.getNextSubscriptionLocalKey = function () {
            var current = this.nextSubLocalKey;
            this.nextSubLocalKey += 1;
            return current;
        };
        ClientStreaming.prototype.registerSubscription = function (subLocalKey, method, params, success, error, timeout, existingSub) {
            var _this = this;
            var subsInfo = {
                localKey: subLocalKey,
                status: STATUS_AWAITING_ACCEPT,
                method: method,
                params: params,
                success: success,
                error: error,
                trackedServers: [],
                handlers: {
                    onData: (existingSub === null || existingSub === void 0 ? void 0 : existingSub.handlers.onData) || [],
                    onClosed: (existingSub === null || existingSub === void 0 ? void 0 : existingSub.handlers.onClosed) || [],
                    onConnected: (existingSub === null || existingSub === void 0 ? void 0 : existingSub.handlers.onConnected) || [],
                },
                queued: {
                    data: [],
                    closers: [],
                },
                timeoutId: undefined,
                close: function () { return _this.closeSubscription(subLocalKey); },
                subscription: existingSub === null || existingSub === void 0 ? void 0 : existingSub.subscription
            };
            if (!existingSub) {
                if (params.onData) {
                    subsInfo.handlers.onData.push(params.onData);
                }
                if (params.onClosed) {
                    subsInfo.handlers.onClosed.push(params.onClosed);
                }
                if (params.onConnected) {
                    subsInfo.handlers.onConnected.push(params.onConnected);
                }
            }
            this.subscriptionsList[subLocalKey] = subsInfo;
            subsInfo.timeoutId = setTimeout(function () {
                if (_this.subscriptionsList[subLocalKey] === undefined) {
                    return;
                }
                var pendingSub = _this.subscriptionsList[subLocalKey];
                if (pendingSub.status === STATUS_AWAITING_ACCEPT) {
                    error({
                        method: method,
                        called_with: params.arguments,
                        message: ERR_MSG_SUB_FAILED + " Subscription attempt timed out after " + timeout + " ms.",
                    });
                    delete _this.subscriptionsList[subLocalKey];
                }
                else if (pendingSub.status === STATUS_SUBSCRIBED && pendingSub.trackedServers.length > 0) {
                    pendingSub.trackedServers = pendingSub.trackedServers.filter(function (server) {
                        return (typeof server.subscriptionId !== "undefined");
                    });
                    delete pendingSub.timeoutId;
                    if (pendingSub.trackedServers.length <= 0) {
                        _this.callOnClosedHandlers(pendingSub);
                        delete _this.subscriptionsList[subLocalKey];
                    }
                }
            }, timeout);
            return subsInfo;
        };
        ClientStreaming.prototype.callOnClosedHandlers = function (subscription, reason) {
            var closersCount = subscription.queued.closers.length;
            var closingServerId = (closersCount > 0) ? subscription.queued.closers[closersCount - 1] : null;
            var closingServer;
            if (closingServerId !== undefined && typeof closingServerId === "string") {
                closingServer = this.repository.getServerById(closingServerId).instance;
            }
            subscription.handlers.onClosed.forEach(function (callback) {
                if (typeof callback !== "function") {
                    return;
                }
                callback({
                    message: reason || ON_CLOSE_MSG_SERVER_INIT,
                    requestArguments: subscription.params.arguments || {},
                    server: closingServer,
                    stream: subscription.method,
                });
            });
        };
        ClientStreaming.prototype.closeSubscription = function (subLocalKey) {
            var _this = this;
            var subscription = this.subscriptionsList[subLocalKey];
            if (typeof subscription !== "object") {
                return;
            }
            subscription.trackedServers.forEach(function (server) {
                if (typeof server.subscriptionId === "undefined") {
                    return;
                }
                subscription.queued.closers.push(server.serverId);
                _this.session.sendFireAndForget({
                    type: "unsubscribe",
                    subscription_id: server.subscriptionId,
                    reason_uri: "",
                    reason: ON_CLOSE_MSG_CLIENT_INIT,
                });
                delete _this.subscriptionIdToLocalKeyMap[server.subscriptionId];
            });
            subscription.trackedServers = [];
            this.callOnClosedHandlers(subscription, ON_CLOSE_MSG_CLIENT_INIT);
            delete this.subscriptionsList[subLocalKey];
        };
        return ClientStreaming;
    }());

    var ClientProtocol = (function () {
        function ClientProtocol(session, repository, logger) {
            var _this = this;
            this.session = session;
            this.repository = repository;
            this.logger = logger;
            session.on("peer-added", function (msg) { return _this.handlePeerAdded(msg); });
            session.on("peer-removed", function (msg) { return _this.handlePeerRemoved(msg); });
            session.on("methods-added", function (msg) { return _this.handleMethodsAddedMessage(msg); });
            session.on("methods-removed", function (msg) { return _this.handleMethodsRemovedMessage(msg); });
            this.streaming = new ClientStreaming(session, repository, logger);
        }
        ClientProtocol.prototype.subscribe = function (stream, options, targetServers, success, error, existingSub) {
            this.streaming.subscribe(stream, options, targetServers, success, error, existingSub);
        };
        ClientProtocol.prototype.invoke = function (id, method, args, target) {
            var _this = this;
            var serverId = target.id;
            var methodId = method.gatewayId;
            var msg = {
                type: "call",
                server_id: serverId,
                method_id: methodId,
                arguments_kv: args,
            };
            return this.session.send(msg, { invocationId: id, serverId: serverId })
                .then(function (m) { return _this.handleResultMessage(m); })
                .catch(function (err) { return _this.handleInvocationError(err); });
        };
        ClientProtocol.prototype.drainSubscriptions = function () {
            return this.streaming.drainSubscriptions();
        };
        ClientProtocol.prototype.drainSubscriptionsCache = function () {
            return this.streaming.drainSubscriptionsCache();
        };
        ClientProtocol.prototype.handlePeerAdded = function (msg) {
            var newPeerId = msg.new_peer_id;
            var remoteId = msg.identity;
            var isLocal = msg.meta ? msg.meta.local : true;
            var pid = Number(remoteId.process);
            var serverInfo = {
                machine: remoteId.machine,
                pid: isNaN(pid) ? remoteId.process : pid,
                instance: remoteId.instance,
                application: remoteId.application,
                applicationName: remoteId.applicationName,
                environment: remoteId.environment,
                region: remoteId.region,
                user: remoteId.user,
                windowId: remoteId.windowId,
                peerId: newPeerId,
                api: remoteId.api,
                isLocal: isLocal
            };
            this.repository.addServer(serverInfo, newPeerId);
        };
        ClientProtocol.prototype.handlePeerRemoved = function (msg) {
            var removedPeerId = msg.removed_id;
            var reason = msg.reason;
            this.repository.removeServerById(removedPeerId, reason);
        };
        ClientProtocol.prototype.handleMethodsAddedMessage = function (msg) {
            var _this = this;
            var serverId = msg.server_id;
            var methods = msg.methods;
            methods.forEach(function (method) {
                _this.repository.addServerMethod(serverId, method);
            });
        };
        ClientProtocol.prototype.handleMethodsRemovedMessage = function (msg) {
            var _this = this;
            var serverId = msg.server_id;
            var methodIdList = msg.methods;
            var server = this.repository.getServerById(serverId);
            var serverMethodKeys = Object.keys(server.methods);
            serverMethodKeys.forEach(function (methodKey) {
                var method = server.methods[methodKey];
                if (methodIdList.indexOf(method.gatewayId) > -1) {
                    _this.repository.removeServerMethod(serverId, methodKey);
                }
            });
        };
        ClientProtocol.prototype.handleResultMessage = function (msg) {
            var invocationId = msg._tag.invocationId;
            var result = msg.result;
            var serverId = msg._tag.serverId;
            var server = this.repository.getServerById(serverId);
            return {
                invocationId: invocationId,
                result: result,
                instance: server.instance,
                status: InvokeStatus.Success,
                message: ""
            };
        };
        ClientProtocol.prototype.handleInvocationError = function (msg) {
            this.logger.debug("handle invocation error ".concat(JSON.stringify(msg)));
            if ("_tag" in msg) {
                var invocationId = msg._tag.invocationId;
                var serverId = msg._tag.serverId;
                var server = this.repository.getServerById(serverId);
                var message = msg.reason;
                var context_1 = msg.context;
                return {
                    invocationId: invocationId,
                    result: context_1,
                    instance: server.instance,
                    status: InvokeStatus.Error,
                    message: message
                };
            }
            else {
                return {
                    invocationId: "",
                    message: msg.message,
                    status: InvokeStatus.Error,
                    error: msg
                };
            }
        };
        return ClientProtocol;
    }());

    function gW3ProtocolFactory (instance, connection, clientRepository, serverRepository, libConfig, interop) {
        var logger = libConfig.logger.subLogger("gw3-protocol");
        var resolveReadyPromise;
        var readyPromise = new Promise(function (resolve) {
            resolveReadyPromise = resolve;
        });
        var session = connection.domain("agm", ["subscribed"]);
        var server = new ServerProtocol(session, clientRepository, serverRepository, logger.subLogger("server"));
        var client = new ClientProtocol(session, clientRepository, logger.subLogger("client"));
        function handleReconnect() {
            return __awaiter(this, void 0, void 0, function () {
                var reconnectionPromises, existingSubscriptions, _loop_1, _i, existingSubscriptions_1, sub, registeredMethods, _loop_2, _a, registeredMethods_1, method;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logger.info("reconnected - will replay registered methods and subscriptions");
                            client.drainSubscriptionsCache().forEach(function (sub) {
                                var methodInfo = sub.method;
                                var params = Object.assign({}, sub.params);
                                logger.info("trying to soft-re-subscribe to method ".concat(methodInfo.name, ", with params: ").concat(JSON.stringify(params)));
                                interop.client.subscribe(methodInfo, params, undefined, undefined, sub).then(function () { return logger.info("soft-subscribing to method ".concat(methodInfo.name, " DONE")); }).catch(function (error) { return logger.warn("subscribing to method ".concat(methodInfo.name, " failed: ").concat(JSON.stringify(error), "}")); });
                            });
                            reconnectionPromises = [];
                            existingSubscriptions = client.drainSubscriptions();
                            _loop_1 = function (sub) {
                                var methodInfo = sub.method;
                                var params = Object.assign({}, sub.params);
                                logger.info("trying to re-subscribe to method ".concat(methodInfo.name, ", with params: ").concat(JSON.stringify(params)));
                                reconnectionPromises.push(interop.client.subscribe(methodInfo, params, undefined, undefined, sub).then(function () { return logger.info("subscribing to method ".concat(methodInfo.name, " DONE")); }));
                            };
                            for (_i = 0, existingSubscriptions_1 = existingSubscriptions; _i < existingSubscriptions_1.length; _i++) {
                                sub = existingSubscriptions_1[_i];
                                _loop_1(sub);
                            }
                            registeredMethods = serverRepository.getList();
                            serverRepository.reset();
                            _loop_2 = function (method) {
                                var def = method.definition;
                                logger.info("re-publishing method ".concat(def.name));
                                if (method.stream) {
                                    reconnectionPromises.push(interop.server.createStream(def, method.streamCallbacks, undefined, undefined, method.stream).then(function () { return logger.info("subscribing to method ".concat(def.name, " DONE")); }));
                                }
                                else if (method.theFunction && method.theFunction.userCallback) {
                                    reconnectionPromises.push(interop.register(def, method.theFunction.userCallback).then(function () { return logger.info("subscribing to method ".concat(def.name, " DONE")); }));
                                }
                                else if (method.theFunction && method.theFunction.userCallbackAsync) {
                                    reconnectionPromises.push(interop.registerAsync(def, method.theFunction.userCallbackAsync).then(function () { return logger.info("subscribing to method ".concat(def.name, " DONE")); }));
                                }
                                logger.info("re-publishing method ".concat(def.name, " DONE"));
                            };
                            for (_a = 0, registeredMethods_1 = registeredMethods; _a < registeredMethods_1.length; _a++) {
                                method = registeredMethods_1[_a];
                                _loop_2(method);
                            }
                            return [4, Promise.all(reconnectionPromises)];
                        case 1:
                            _b.sent();
                            logger.info("Interop is re-announced");
                            return [2];
                    }
                });
            });
        }
        function handleInitialJoin() {
            if (resolveReadyPromise) {
                resolveReadyPromise({
                    client: client,
                    server: server,
                });
                resolveReadyPromise = undefined;
            }
        }
        session.onJoined(function (reconnect) {
            clientRepository.addServer(instance, connection.peerId);
            if (reconnect) {
                handleReconnect().then(function () { return connection.setLibReAnnounced({ name: "interop" }); }).catch(function (error) { return logger.warn("Error while re-announcing interop: ".concat(JSON.stringify(error))); });
            }
            else {
                handleInitialJoin();
            }
        });
        session.onLeft(function () {
            clientRepository.reset();
        });
        session.join();
        return readyPromise;
    }

    var Interop = (function () {
        function Interop(configuration) {
            var _this = this;
            if (typeof configuration === "undefined") {
                throw new Error("configuration is required");
            }
            if (typeof configuration.connection === "undefined") {
                throw new Error("configuration.connections is required");
            }
            var connection = configuration.connection;
            if (typeof configuration.methodResponseTimeout !== "number") {
                configuration.methodResponseTimeout = 30 * 1000;
            }
            if (typeof configuration.waitTimeoutMs !== "number") {
                configuration.waitTimeoutMs = 30 * 1000;
            }
            this.unwrappedInstance = new InstanceWrapper(this, undefined, connection);
            this.instance = this.unwrappedInstance.unwrap();
            this.clientRepository = new ClientRepository(configuration.logger.subLogger("cRep"), this);
            this.serverRepository = new ServerRepository();
            var protocolPromise;
            if (connection.protocolVersion === 3) {
                protocolPromise = gW3ProtocolFactory(this.instance, connection, this.clientRepository, this.serverRepository, configuration, this);
            }
            else {
                throw new Error("protocol ".concat(connection.protocolVersion, " not supported"));
            }
            this.readyPromise = protocolPromise.then(function (protocol) {
                _this.protocol = protocol;
                _this.client = new Client(_this.protocol, _this.clientRepository, _this.instance, configuration);
                _this.server = new Server(_this.protocol, _this.serverRepository);
                return _this;
            });
        }
        Interop.prototype.ready = function () {
            return this.readyPromise;
        };
        Interop.prototype.serverRemoved = function (callback) {
            return this.client.serverRemoved(callback);
        };
        Interop.prototype.serverAdded = function (callback) {
            return this.client.serverAdded(callback);
        };
        Interop.prototype.serverMethodRemoved = function (callback) {
            return this.client.serverMethodRemoved(callback);
        };
        Interop.prototype.serverMethodAdded = function (callback) {
            return this.client.serverMethodAdded(callback);
        };
        Interop.prototype.methodRemoved = function (callback) {
            return this.client.methodRemoved(callback);
        };
        Interop.prototype.methodAdded = function (callback) {
            return this.client.methodAdded(callback);
        };
        Interop.prototype.methodsForInstance = function (instance) {
            return this.client.methodsForInstance(instance);
        };
        Interop.prototype.methods = function (methodFilter) {
            return this.client.methods(methodFilter);
        };
        Interop.prototype.servers = function (methodFilter) {
            return this.client.servers(methodFilter);
        };
        Interop.prototype.subscribe = function (method, options, successCallback, errorCallback) {
            return this.client.subscribe(method, options, successCallback, errorCallback);
        };
        Interop.prototype.createStream = function (streamDef, callbacks, successCallback, errorCallback) {
            return this.server.createStream(streamDef, callbacks, successCallback, errorCallback);
        };
        Interop.prototype.unregister = function (methodFilter) {
            return this.server.unregister(methodFilter);
        };
        Interop.prototype.registerAsync = function (methodDefinition, callback) {
            return this.server.registerAsync(methodDefinition, callback);
        };
        Interop.prototype.register = function (methodDefinition, callback) {
            return this.server.register(methodDefinition, callback);
        };
        Interop.prototype.invoke = function (methodFilter, argumentObj, target, additionalOptions, success, error) {
            return this.client.invoke(methodFilter, argumentObj, target, additionalOptions, success, error);
        };
        Interop.prototype.waitForMethod = function (name) {
            var pw = new PromiseWrapper();
            var unsubscribe = this.client.methodAdded(function (m) {
                if (m.name === name) {
                    unsubscribe();
                    pw.resolve(m);
                }
            });
            return pw.promise;
        };
        return Interop;
    }());

    var successMessages = ["subscribed", "success"];
    var MessageBus = (function () {
        function MessageBus(connection, logger) {
            var _this = this;
            this.publish = function (topic, data, options) {
                var _a = options || {}, routingKey = _a.routingKey, target = _a.target;
                var args = _this.removeEmptyValues({
                    type: "publish",
                    topic: topic,
                    data: data,
                    peer_id: _this.peerId,
                    routing_key: routingKey,
                    target_identity: target
                });
                _this.session.send(args);
            };
            this.subscribe = function (topic, callback, options) {
                return new Promise(function (resolve, reject) {
                    var _a = options || {}, routingKey = _a.routingKey, target = _a.target;
                    var args = _this.removeEmptyValues({
                        type: "subscribe",
                        topic: topic,
                        peer_id: _this.peerId,
                        routing_key: routingKey,
                        source: target
                    });
                    _this.session.send(args)
                        .then(function (response) {
                        var subscription_id = response.subscription_id;
                        _this.subscriptions.push({ subscription_id: subscription_id, topic: topic, callback: callback, source: target });
                        resolve({
                            unsubscribe: function () {
                                _this.session.send({ type: "unsubscribe", subscription_id: subscription_id, peer_id: _this.peerId });
                                _this.subscriptions = _this.subscriptions.filter(function (s) { return s.subscription_id !== subscription_id; });
                                return Promise.resolve();
                            }
                        });
                    })
                        .catch(function (error) { return reject(error); });
                });
            };
            this.watchOnEvent = function () {
                _this.session.on("event", function (args) {
                    var data = args.data, subscription_id = args.subscription_id;
                    var source = args["publisher-identity"];
                    var subscription = _this.subscriptions.find(function (s) { return s.subscription_id === subscription_id; });
                    if (subscription) {
                        if (!subscription.source) {
                            subscription.callback(data, subscription.topic, source);
                        }
                        else {
                            if (_this.keysMatch(subscription.source, source)) {
                                subscription.callback(data, subscription.topic, source);
                            }
                        }
                    }
                });
            };
            this.connection = connection;
            this.logger = logger;
            this.peerId = connection.peerId;
            this.subscriptions = [];
            this.session = connection.domain("bus", successMessages);
            this.readyPromise = this.session.join();
            this.readyPromise.then(function () {
                _this.watchOnEvent();
            });
        }
        MessageBus.prototype.ready = function () {
            return this.readyPromise;
        };
        MessageBus.prototype.removeEmptyValues = function (obj) {
            var cleaned = {};
            Object.keys(obj).forEach(function (key) {
                if (obj[key] !== undefined && obj[key] !== null) {
                    cleaned[key] = obj[key];
                }
            });
            return cleaned;
        };
        MessageBus.prototype.keysMatch = function (obj1, obj2) {
            var keysObj1 = Object.keys(obj1);
            var allMatch = true;
            keysObj1.forEach(function (key) {
                if (obj1[key] !== obj2[key]) {
                    allMatch = false;
                }
            });
            return allMatch;
        };
        return MessageBus;
    }());

    var GlueCore = function (userConfig, ext) {
        var gdVersion = Utils.getGDMajorVersion();
        var glue42gd;
        var preloadPromise = Promise.resolve();
        if (gdVersion) {
            if (gdVersion < 3) {
                throw new Error("GD v2 is not supported. Use v4 of the API to run in that context.");
            }
            else if (gdVersion >= 3) {
                glue42gd = window.glue42gd;
                preloadPromise = window.gdPreloadPromise || preloadPromise;
            }
        }
        var glueInitTimer = timer("glue");
        userConfig = userConfig || {};
        ext = ext || {};
        var internalConfig = prepareConfig(userConfig, ext, glue42gd);
        var _connection;
        var _interop;
        var _logger;
        var _metrics;
        var _contexts;
        var _bus;
        var _allowTrace;
        var libs = {};
        function registerLib(name, inner, t) {
            _allowTrace = _logger.canPublish("trace");
            if (_allowTrace) {
                _logger.trace("registering ".concat(name, " module"));
            }
            var done = function () {
                inner.initTime = t.stop();
                inner.initEndTime = t.endTime;
                inner.marks = t.marks;
                if (_allowTrace) {
                    _logger.trace("".concat(name, " is ready - ").concat(t.endTime - t.startTime));
                }
            };
            inner.initStartTime = t.startTime;
            if (inner.ready) {
                inner.ready().then(function () {
                    done();
                });
            }
            else {
                done();
            }
            if (!Array.isArray(name)) {
                name = [name];
            }
            name.forEach(function (n) {
                libs[n] = inner;
                GlueCore[n] = inner;
            });
        }
        function setupConnection() {
            var initTimer = timer("connection");
            _connection = new Connection(internalConfig.connection, _logger.subLogger("connection"));
            var authPromise = Promise.resolve(internalConfig.auth);
            if (internalConfig.connection && !internalConfig.auth) {
                if (glue42gd) {
                    authPromise = glue42gd.getGWToken()
                        .then(function (token) {
                        return {
                            gatewayToken: token
                        };
                    });
                }
                else if (typeof window !== "undefined" && (window === null || window === void 0 ? void 0 : window.glue42electron)) {
                    if (typeof window.glue42electron.gwToken === "string") {
                        authPromise = Promise.resolve({
                            gatewayToken: window.glue42electron.gwToken
                        });
                    }
                }
                else {
                    authPromise = Promise.reject("You need to provide auth information");
                }
            }
            return authPromise
                .then(function (authConfig) {
                initTimer.mark("auth-promise-resolved");
                var authRequest;
                if (Object.prototype.toString.call(authConfig) === "[object Object]") {
                    authRequest = authConfig;
                }
                else {
                    throw new Error("Invalid auth object - " + JSON.stringify(authConfig));
                }
                return _connection.login(authRequest);
            })
                .then(function () {
                registerLib("connection", _connection, initTimer);
                return internalConfig;
            })
                .catch(function (e) {
                if (_connection) {
                    _connection.logout();
                }
                throw e;
            });
        }
        function setupLogger() {
            var _a;
            var initTimer = timer("logger");
            _logger = new Logger("".concat((_a = internalConfig.connection.identity) === null || _a === void 0 ? void 0 : _a.application), undefined, internalConfig.customLogger);
            _logger.consoleLevel(internalConfig.logger.console);
            _logger.publishLevel(internalConfig.logger.publish);
            if (_logger.canPublish("debug")) {
                _logger.debug("initializing glue...");
            }
            registerLib("logger", _logger, initTimer);
            return Promise.resolve(undefined);
        }
        function setupMetrics() {
            var _a, _b, _c, _d, _e;
            var initTimer = timer("metrics");
            var config = internalConfig.metrics;
            var metricsPublishingEnabledFunc = glue42gd === null || glue42gd === void 0 ? void 0 : glue42gd.getMetricsPublishingEnabled;
            var identity = internalConfig.connection.identity;
            var canUpdateMetric = metricsPublishingEnabledFunc ? metricsPublishingEnabledFunc : function () { return true; };
            var disableAutoAppSystem = (_a = (typeof config !== "boolean" && config.disableAutoAppSystem)) !== null && _a !== void 0 ? _a : false;
            _metrics = metrics({
                connection: config ? _connection : undefined,
                logger: _logger.subLogger("metrics"),
                canUpdateMetric: canUpdateMetric,
                system: "Glue42",
                service: (_c = (_b = identity === null || identity === void 0 ? void 0 : identity.service) !== null && _b !== void 0 ? _b : glue42gd === null || glue42gd === void 0 ? void 0 : glue42gd.applicationName) !== null && _c !== void 0 ? _c : internalConfig.application,
                instance: (_e = (_d = identity === null || identity === void 0 ? void 0 : identity.instance) !== null && _d !== void 0 ? _d : identity === null || identity === void 0 ? void 0 : identity.windowId) !== null && _e !== void 0 ? _e : shortid(),
                disableAutoAppSystem: disableAutoAppSystem,
                pagePerformanceMetrics: typeof config !== "boolean" ? config === null || config === void 0 ? void 0 : config.pagePerformanceMetrics : undefined
            });
            registerLib("metrics", _metrics, initTimer);
            return Promise.resolve();
        }
        function setupInterop() {
            var initTimer = timer("interop");
            var agmConfig = {
                connection: _connection,
                logger: _logger.subLogger("interop"),
            };
            _interop = new Interop(agmConfig);
            Logger.Interop = _interop;
            registerLib(["interop", "agm"], _interop, initTimer);
            return Promise.resolve();
        }
        function setupContexts() {
            var hasActivities = (internalConfig.activities && _connection.protocolVersion === 3);
            var needsContexts = internalConfig.contexts || hasActivities;
            if (needsContexts) {
                var initTimer = timer("contexts");
                _contexts = new ContextsModule({
                    connection: _connection,
                    logger: _logger.subLogger("contexts"),
                    trackAllContexts: typeof internalConfig.contexts === "object" ? internalConfig.contexts.trackAllContexts : false,
                    reAnnounceKnownContexts: typeof internalConfig.contexts === "object" ? internalConfig.contexts.reAnnounceKnownContexts : false
                });
                registerLib("contexts", _contexts, initTimer);
                return _contexts;
            }
            else {
                var replayer = _connection.replayer;
                if (replayer) {
                    replayer.drain(ContextMessageReplaySpec.name);
                }
            }
        }
        function setupBus() {
            return __awaiter(this, void 0, void 0, function () {
                var initTimer;
                return __generator(this, function (_a) {
                    if (!internalConfig.bus) {
                        return [2, Promise.resolve()];
                    }
                    initTimer = timer("bus");
                    _bus = new MessageBus(_connection, _logger.subLogger("bus"));
                    registerLib("bus", _bus, initTimer);
                    return [2, Promise.resolve()];
                });
            });
        }
        function setupExternalLibs(externalLibs) {
            try {
                externalLibs.forEach(function (lib) {
                    setupExternalLib(lib.name, lib.create);
                });
                return Promise.resolve();
            }
            catch (e) {
                return Promise.reject(e);
            }
        }
        function setupExternalLib(name, createCallback) {
            var initTimer = timer(name);
            var lib = createCallback(libs);
            if (lib) {
                registerLib(name, lib, initTimer);
            }
        }
        function waitForLibs() {
            var libsReadyPromises = Object.keys(libs).map(function (key) {
                var lib = libs[key];
                return lib.ready ?
                    lib.ready() : Promise.resolve();
            });
            return Promise.all(libsReadyPromises);
        }
        function constructGlueObject() {
            var feedbackFunc = function (feedbackInfo) {
                if (!_interop) {
                    return;
                }
                _interop.invoke("T42.ACS.Feedback", feedbackInfo, "best");
            };
            var info = {
                coreVersion: version$2,
                version: internalConfig.version
            };
            glueInitTimer.stop();
            var glue = {
                feedback: feedbackFunc,
                info: info,
                logger: _logger,
                interop: _interop,
                agm: _interop,
                connection: _connection,
                metrics: _metrics,
                contexts: _contexts,
                bus: _bus,
                version: internalConfig.version,
                userConfig: userConfig,
                done: function () {
                    _logger === null || _logger === void 0 ? void 0 : _logger.info("done called by user...");
                    return _connection.logout();
                }
            };
            glue.performance = {
                get glueVer() {
                    return internalConfig.version;
                },
                get glueConfig() {
                    return JSON.stringify(userConfig);
                },
                get browser() {
                    return window.performance.timing.toJSON();
                },
                get memory() {
                    return window.performance.memory;
                },
                get initTimes() {
                    var all = getAllTimers();
                    return Object.keys(all).map(function (key) {
                        var t = all[key];
                        return {
                            name: key,
                            duration: t.endTime - t.startTime,
                            marks: t.marks,
                            startTime: t.startTime,
                            endTime: t.endTime
                        };
                    });
                }
            };
            Object.keys(libs).forEach(function (key) {
                var lib = libs[key];
                glue[key] = lib;
            });
            glue.config = {};
            Object.keys(internalConfig).forEach(function (k) {
                glue.config[k] = internalConfig[k];
            });
            if (ext && ext.extOptions) {
                Object.keys(ext.extOptions).forEach(function (k) {
                    glue.config[k] = ext === null || ext === void 0 ? void 0 : ext.extOptions[k];
                });
            }
            if (ext === null || ext === void 0 ? void 0 : ext.enrichGlue) {
                ext.enrichGlue(glue);
            }
            if (glue42gd && glue42gd.updatePerfData) {
                glue42gd.updatePerfData(glue.performance);
            }
            if (glue.agm) {
                var deprecatedDecorator = function (fn, wrong, proper) {
                    return function () {
                        glue.logger.warn("glue.js - 'glue.agm.".concat(wrong, "' method is deprecated, use 'glue.interop.").concat(proper, "' instead."));
                        return fn.apply(glue.agm, arguments);
                    };
                };
                var agmAny = glue.agm;
                agmAny.method_added = deprecatedDecorator(glue.agm.methodAdded, "method_added", "methodAdded");
                agmAny.method_removed = deprecatedDecorator(glue.agm.methodRemoved, "method_removed", "methodRemoved");
                agmAny.server_added = deprecatedDecorator(glue.agm.serverAdded, "server_added", "serverAdded");
                agmAny.server_method_aded = deprecatedDecorator(glue.agm.serverMethodAdded, "server_method_aded", "serverMethodAdded");
                agmAny.server_method_removed = deprecatedDecorator(glue.agm.serverMethodRemoved, "server_method_removed", "serverMethodRemoved");
            }
            return glue;
        }
        function registerInstanceIfNeeded() {
            return __awaiter(this, void 0, void 0, function () {
                var RegisterInstanceMethodName, isMethodAvailable, error_1, typedError;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            RegisterInstanceMethodName = "T42.ACS.RegisterInstance";
                            if (!(Utils.isNode() && typeof process.env._GD_STARTING_CONTEXT_ === "undefined" && typeof (userConfig === null || userConfig === void 0 ? void 0 : userConfig.application) !== "undefined")) return [3, 4];
                            isMethodAvailable = _interop.methods({ name: RegisterInstanceMethodName }).length > 0;
                            if (!isMethodAvailable) return [3, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, _interop.invoke(RegisterInstanceMethodName, { appName: userConfig === null || userConfig === void 0 ? void 0 : userConfig.application, pid: process.pid })];
                        case 2:
                            _a.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _a.sent();
                            typedError = error_1;
                            _logger.error("Cannot register as an instance: ".concat(JSON.stringify(typedError.message)));
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            });
        }
        return preloadPromise
            .then(setupLogger)
            .then(setupConnection)
            .then(function () { return Promise.all([setupMetrics(), setupInterop(), setupContexts(), setupBus()]); })
            .then(function () { return _interop.readyPromise; })
            .then(function () { return registerInstanceIfNeeded(); })
            .then(function () {
            return setupExternalLibs(internalConfig.libs || []);
        })
            .then(waitForLibs)
            .then(constructGlueObject)
            .catch(function (err) {
            return Promise.reject({
                err: err,
                libs: libs
            });
        });
    };
    if (typeof window !== "undefined") {
        window.GlueCore = GlueCore;
    }
    GlueCore.version = version$2;
    GlueCore.default = GlueCore;

    const PromiseWrap = (promise, timeoutMilliseconds, timeoutMessage) => {
        return new Promise((resolve, reject) => {
            let promiseActive = true;
            const timeout = setTimeout(() => {
                if (!promiseActive) {
                    return;
                }
                promiseActive = false;
                const message = timeoutMessage || `Promise timeout hit: ${timeoutMilliseconds}`;
                reject(message);
            }, timeoutMilliseconds);
            promise()
                .then((result) => {
                if (!promiseActive) {
                    return;
                }
                promiseActive = false;
                clearTimeout(timeout);
                resolve(result);
            })
                .catch((error) => {
                if (!promiseActive) {
                    return;
                }
                promiseActive = false;
                clearTimeout(timeout);
                reject(error);
            });
        });
    };
    const PromisePlus = (executor, timeoutMilliseconds, timeoutMessage) => {
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                const message = timeoutMessage || `Promise timeout hit: ${timeoutMilliseconds}`;
                reject(message);
            }, timeoutMilliseconds);
            const providedPromise = new Promise(executor);
            providedPromise
                .then((result) => {
                clearTimeout(timeout);
                resolve(result);
            })
                .catch((error) => {
                clearTimeout(timeout);
                reject(error);
            });
        });
    };

    var toStr$9 = Object.prototype.toString;

    var isArguments$3 = function isArguments(value) {
    	var str = toStr$9.call(value);
    	var isArgs = str === '[object Arguments]';
    	if (!isArgs) {
    		isArgs = str !== '[object Array]' &&
    			value !== null &&
    			typeof value === 'object' &&
    			typeof value.length === 'number' &&
    			value.length >= 0 &&
    			toStr$9.call(value.callee) === '[object Function]';
    	}
    	return isArgs;
    };

    var implementation$b;
    var hasRequiredImplementation;

    function requireImplementation () {
    	if (hasRequiredImplementation) return implementation$b;
    	hasRequiredImplementation = 1;

    	var keysShim;
    	if (!Object.keys) {
    		// modified from https://github.com/es-shims/es5-shim
    		var has = Object.prototype.hasOwnProperty;
    		var toStr = Object.prototype.toString;
    		var isArgs = isArguments$3; // eslint-disable-line global-require
    		var isEnumerable = Object.prototype.propertyIsEnumerable;
    		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
    		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
    		var dontEnums = [
    			'toString',
    			'toLocaleString',
    			'valueOf',
    			'hasOwnProperty',
    			'isPrototypeOf',
    			'propertyIsEnumerable',
    			'constructor'
    		];
    		var equalsConstructorPrototype = function (o) {
    			var ctor = o.constructor;
    			return ctor && ctor.prototype === o;
    		};
    		var excludedKeys = {
    			$applicationCache: true,
    			$console: true,
    			$external: true,
    			$frame: true,
    			$frameElement: true,
    			$frames: true,
    			$innerHeight: true,
    			$innerWidth: true,
    			$onmozfullscreenchange: true,
    			$onmozfullscreenerror: true,
    			$outerHeight: true,
    			$outerWidth: true,
    			$pageXOffset: true,
    			$pageYOffset: true,
    			$parent: true,
    			$scrollLeft: true,
    			$scrollTop: true,
    			$scrollX: true,
    			$scrollY: true,
    			$self: true,
    			$webkitIndexedDB: true,
    			$webkitStorageInfo: true,
    			$window: true
    		};
    		var hasAutomationEqualityBug = (function () {
    			/* global window */
    			if (typeof window === 'undefined') { return false; }
    			for (var k in window) {
    				try {
    					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
    						try {
    							equalsConstructorPrototype(window[k]);
    						} catch (e) {
    							return true;
    						}
    					}
    				} catch (e) {
    					return true;
    				}
    			}
    			return false;
    		}());
    		var equalsConstructorPrototypeIfNotBuggy = function (o) {
    			/* global window */
    			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
    				return equalsConstructorPrototype(o);
    			}
    			try {
    				return equalsConstructorPrototype(o);
    			} catch (e) {
    				return false;
    			}
    		};

    		keysShim = function keys(object) {
    			var isObject = object !== null && typeof object === 'object';
    			var isFunction = toStr.call(object) === '[object Function]';
    			var isArguments = isArgs(object);
    			var isString = isObject && toStr.call(object) === '[object String]';
    			var theKeys = [];

    			if (!isObject && !isFunction && !isArguments) {
    				throw new TypeError('Object.keys called on a non-object');
    			}

    			var skipProto = hasProtoEnumBug && isFunction;
    			if (isString && object.length > 0 && !has.call(object, 0)) {
    				for (var i = 0; i < object.length; ++i) {
    					theKeys.push(String(i));
    				}
    			}

    			if (isArguments && object.length > 0) {
    				for (var j = 0; j < object.length; ++j) {
    					theKeys.push(String(j));
    				}
    			} else {
    				for (var name in object) {
    					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
    						theKeys.push(String(name));
    					}
    				}
    			}

    			if (hasDontEnumBug) {
    				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

    				for (var k = 0; k < dontEnums.length; ++k) {
    					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
    						theKeys.push(dontEnums[k]);
    					}
    				}
    			}
    			return theKeys;
    		};
    	}
    	implementation$b = keysShim;
    	return implementation$b;
    }

    var slice$1 = Array.prototype.slice;
    var isArgs = isArguments$3;

    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) { return origKeys(o); } : requireImplementation();

    var originalKeys = Object.keys;

    keysShim.shim = function shimObjectKeys() {
    	if (Object.keys) {
    		var keysWorksWithArguments = (function () {
    			// Safari 5.0 bug
    			var args = Object.keys(arguments);
    			return args && args.length === arguments.length;
    		}(1, 2));
    		if (!keysWorksWithArguments) {
    			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
    				if (isArgs(object)) {
    					return originalKeys(slice$1.call(object));
    				}
    				return originalKeys(object);
    			};
    		}
    	} else {
    		Object.keys = keysShim;
    	}
    	return Object.keys || keysShim;
    };

    var objectKeys$2 = keysShim;

    var shams$1;
    var hasRequiredShams;

    function requireShams () {
    	if (hasRequiredShams) return shams$1;
    	hasRequiredShams = 1;

    	/* eslint complexity: [2, 18], max-statements: [2, 33] */
    	shams$1 = function hasSymbols() {
    		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
    		if (typeof Symbol.iterator === 'symbol') { return true; }

    		var obj = {};
    		var sym = Symbol('test');
    		var symObj = Object(sym);
    		if (typeof sym === 'string') { return false; }

    		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
    		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

    		// temp disabled per https://github.com/ljharb/object.assign/issues/17
    		// if (sym instanceof Symbol) { return false; }
    		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    		// if (!(symObj instanceof Symbol)) { return false; }

    		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
    		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    		var symVal = 42;
    		obj[sym] = symVal;
    		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

    		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

    		var syms = Object.getOwnPropertySymbols(obj);
    		if (syms.length !== 1 || syms[0] !== sym) { return false; }

    		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

    		if (typeof Object.getOwnPropertyDescriptor === 'function') {
    			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
    		}

    		return true;
    	};
    	return shams$1;
    }

    var origSymbol = typeof Symbol !== 'undefined' && Symbol;
    var hasSymbolSham = requireShams();

    var hasSymbols$5 = function hasNativeSymbols() {
    	if (typeof origSymbol !== 'function') { return false; }
    	if (typeof Symbol !== 'function') { return false; }
    	if (typeof origSymbol('foo') !== 'symbol') { return false; }
    	if (typeof Symbol('bar') !== 'symbol') { return false; }

    	return hasSymbolSham();
    };

    /* eslint no-invalid-this: 1 */

    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice = Array.prototype.slice;
    var toStr$8 = Object.prototype.toString;
    var funcType = '[object Function]';

    var implementation$a = function bind(that) {
        var target = this;
        if (typeof target !== 'function' || toStr$8.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);

        var bound;
        var binder = function () {
            if (this instanceof bound) {
                var result = target.apply(
                    this,
                    args.concat(slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;
            } else {
                return target.apply(
                    that,
                    args.concat(slice.call(arguments))
                );
            }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

        if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }

        return bound;
    };

    var implementation$9 = implementation$a;

    var functionBind = Function.prototype.bind || implementation$9;

    var bind$1 = functionBind;

    var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

    var undefined$1;

    var $SyntaxError$1 = SyntaxError;
    var $Function = Function;
    var $TypeError$2 = TypeError;

    // eslint-disable-next-line consistent-return
    var getEvalledConstructor = function (expressionSyntax) {
    	try {
    		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    	} catch (e) {}
    };

    var $gOPD$2 = Object.getOwnPropertyDescriptor;
    if ($gOPD$2) {
    	try {
    		$gOPD$2({}, '');
    	} catch (e) {
    		$gOPD$2 = null; // this is IE 8, which has a broken gOPD
    	}
    }

    var throwTypeError = function () {
    	throw new $TypeError$2();
    };
    var ThrowTypeError = $gOPD$2
    	? (function () {
    		try {
    			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    			arguments.callee; // IE 8 does not throw here
    			return throwTypeError;
    		} catch (calleeThrows) {
    			try {
    				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
    				return $gOPD$2(arguments, 'callee').get;
    			} catch (gOPDthrows) {
    				return throwTypeError;
    			}
    		}
    	}())
    	: throwTypeError;

    var hasSymbols$4 = hasSymbols$5();

    var getProto$1 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

    var needsEval = {};

    var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);

    var INTRINSICS = {
    	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
    	'%Array%': Array,
    	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    	'%ArrayIteratorPrototype%': hasSymbols$4 ? getProto$1([][Symbol.iterator]()) : undefined$1,
    	'%AsyncFromSyncIteratorPrototype%': undefined$1,
    	'%AsyncFunction%': needsEval,
    	'%AsyncGenerator%': needsEval,
    	'%AsyncGeneratorFunction%': needsEval,
    	'%AsyncIteratorPrototype%': needsEval,
    	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
    	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
    	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
    	'%Boolean%': Boolean,
    	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    	'%Date%': Date,
    	'%decodeURI%': decodeURI,
    	'%decodeURIComponent%': decodeURIComponent,
    	'%encodeURI%': encodeURI,
    	'%encodeURIComponent%': encodeURIComponent,
    	'%Error%': Error,
    	'%eval%': eval, // eslint-disable-line no-eval
    	'%EvalError%': EvalError,
    	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
    	'%Function%': $Function,
    	'%GeneratorFunction%': needsEval,
    	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    	'%isFinite%': isFinite,
    	'%isNaN%': isNaN,
    	'%IteratorPrototype%': hasSymbols$4 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
    	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
    	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$4 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
    	'%Math%': Math,
    	'%Number%': Number,
    	'%Object%': Object,
    	'%parseFloat%': parseFloat,
    	'%parseInt%': parseInt,
    	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    	'%RangeError%': RangeError,
    	'%ReferenceError%': ReferenceError,
    	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    	'%RegExp%': RegExp,
    	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$4 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
    	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    	'%String%': String,
    	'%StringIteratorPrototype%': hasSymbols$4 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
    	'%Symbol%': hasSymbols$4 ? Symbol : undefined$1,
    	'%SyntaxError%': $SyntaxError$1,
    	'%ThrowTypeError%': ThrowTypeError,
    	'%TypedArray%': TypedArray,
    	'%TypeError%': $TypeError$2,
    	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    	'%URIError%': URIError,
    	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
    	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
    };

    try {
    	null.error; // eslint-disable-line no-unused-expressions
    } catch (e) {
    	// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    	var errorProto = getProto$1(getProto$1(e));
    	INTRINSICS['%Error.prototype%'] = errorProto;
    }

    var doEval = function doEval(name) {
    	var value;
    	if (name === '%AsyncFunction%') {
    		value = getEvalledConstructor('async function () {}');
    	} else if (name === '%GeneratorFunction%') {
    		value = getEvalledConstructor('function* () {}');
    	} else if (name === '%AsyncGeneratorFunction%') {
    		value = getEvalledConstructor('async function* () {}');
    	} else if (name === '%AsyncGenerator%') {
    		var fn = doEval('%AsyncGeneratorFunction%');
    		if (fn) {
    			value = fn.prototype;
    		}
    	} else if (name === '%AsyncIteratorPrototype%') {
    		var gen = doEval('%AsyncGenerator%');
    		if (gen) {
    			value = getProto$1(gen.prototype);
    		}
    	}

    	INTRINSICS[name] = value;

    	return value;
    };

    var LEGACY_ALIASES = {
    	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    	'%ArrayPrototype%': ['Array', 'prototype'],
    	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
    	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    	'%BooleanPrototype%': ['Boolean', 'prototype'],
    	'%DataViewPrototype%': ['DataView', 'prototype'],
    	'%DatePrototype%': ['Date', 'prototype'],
    	'%ErrorPrototype%': ['Error', 'prototype'],
    	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
    	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    	'%FunctionPrototype%': ['Function', 'prototype'],
    	'%Generator%': ['GeneratorFunction', 'prototype'],
    	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    	'%JSONParse%': ['JSON', 'parse'],
    	'%JSONStringify%': ['JSON', 'stringify'],
    	'%MapPrototype%': ['Map', 'prototype'],
    	'%NumberPrototype%': ['Number', 'prototype'],
    	'%ObjectPrototype%': ['Object', 'prototype'],
    	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    	'%PromisePrototype%': ['Promise', 'prototype'],
    	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    	'%Promise_all%': ['Promise', 'all'],
    	'%Promise_reject%': ['Promise', 'reject'],
    	'%Promise_resolve%': ['Promise', 'resolve'],
    	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
    	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    	'%RegExpPrototype%': ['RegExp', 'prototype'],
    	'%SetPrototype%': ['Set', 'prototype'],
    	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    	'%StringPrototype%': ['String', 'prototype'],
    	'%SymbolPrototype%': ['Symbol', 'prototype'],
    	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
    	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    	'%URIErrorPrototype%': ['URIError', 'prototype'],
    	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
    	'%WeakSetPrototype%': ['WeakSet', 'prototype']
    };

    var bind = functionBind;
    var hasOwn$1 = src;
    var $concat$1 = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace$1 = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec$1 = bind.call(Function.call, RegExp.prototype.exec);

    /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
    var stringToPath = function stringToPath(string) {
    	var first = $strSlice(string, 0, 1);
    	var last = $strSlice(string, -1);
    	if (first === '%' && last !== '%') {
    		throw new $SyntaxError$1('invalid intrinsic syntax, expected closing `%`');
    	} else if (last === '%' && first !== '%') {
    		throw new $SyntaxError$1('invalid intrinsic syntax, expected opening `%`');
    	}
    	var result = [];
    	$replace$1(string, rePropName, function (match, number, quote, subString) {
    		result[result.length] = quote ? $replace$1(subString, reEscapeChar, '$1') : number || match;
    	});
    	return result;
    };
    /* end adaptation */

    var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    	var intrinsicName = name;
    	var alias;
    	if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
    		alias = LEGACY_ALIASES[intrinsicName];
    		intrinsicName = '%' + alias[0] + '%';
    	}

    	if (hasOwn$1(INTRINSICS, intrinsicName)) {
    		var value = INTRINSICS[intrinsicName];
    		if (value === needsEval) {
    			value = doEval(intrinsicName);
    		}
    		if (typeof value === 'undefined' && !allowMissing) {
    			throw new $TypeError$2('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    		}

    		return {
    			alias: alias,
    			name: intrinsicName,
    			value: value
    		};
    	}

    	throw new $SyntaxError$1('intrinsic ' + name + ' does not exist!');
    };

    var getIntrinsic = function GetIntrinsic(name, allowMissing) {
    	if (typeof name !== 'string' || name.length === 0) {
    		throw new $TypeError$2('intrinsic name must be a non-empty string');
    	}
    	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    		throw new $TypeError$2('"allowMissing" argument must be a boolean');
    	}

    	if ($exec$1(/^%?[^%]*%?$/, name) === null) {
    		throw new $SyntaxError$1('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
    	}
    	var parts = stringToPath(name);
    	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

    	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    	var intrinsicRealName = intrinsic.name;
    	var value = intrinsic.value;
    	var skipFurtherCaching = false;

    	var alias = intrinsic.alias;
    	if (alias) {
    		intrinsicBaseName = alias[0];
    		$spliceApply(parts, $concat$1([0, 1], alias));
    	}

    	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    		var part = parts[i];
    		var first = $strSlice(part, 0, 1);
    		var last = $strSlice(part, -1);
    		if (
    			(
    				(first === '"' || first === "'" || first === '`')
    				|| (last === '"' || last === "'" || last === '`')
    			)
    			&& first !== last
    		) {
    			throw new $SyntaxError$1('property names with quotes must have matching quotes');
    		}
    		if (part === 'constructor' || !isOwn) {
    			skipFurtherCaching = true;
    		}

    		intrinsicBaseName += '.' + part;
    		intrinsicRealName = '%' + intrinsicBaseName + '%';

    		if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
    			value = INTRINSICS[intrinsicRealName];
    		} else if (value != null) {
    			if (!(part in value)) {
    				if (!allowMissing) {
    					throw new $TypeError$2('base intrinsic for ' + name + ' exists, but the property is not available.');
    				}
    				return void undefined$1;
    			}
    			if ($gOPD$2 && (i + 1) >= parts.length) {
    				var desc = $gOPD$2(value, part);
    				isOwn = !!desc;

    				// By convention, when a data property is converted to an accessor
    				// property to emulate a data property that does not suffer from
    				// the override mistake, that accessor's getter is marked with
    				// an `originalValue` property. Here, when we detect this, we
    				// uphold the illusion by pretending to see that original data
    				// property, i.e., returning the value rather than the getter
    				// itself.
    				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
    					value = desc.get;
    				} else {
    					value = value[part];
    				}
    			} else {
    				isOwn = hasOwn$1(value, part);
    				value = value[part];
    			}

    			if (isOwn && !skipFurtherCaching) {
    				INTRINSICS[intrinsicRealName] = value;
    			}
    		}
    	}
    	return value;
    };

    var GetIntrinsic$8 = getIntrinsic;

    var $defineProperty = GetIntrinsic$8('%Object.defineProperty%', true);

    var hasPropertyDescriptors$1 = function hasPropertyDescriptors() {
    	if ($defineProperty) {
    		try {
    			$defineProperty({}, 'a', { value: 1 });
    			return true;
    		} catch (e) {
    			// IE 8 has a broken defineProperty
    			return false;
    		}
    	}
    	return false;
    };

    hasPropertyDescriptors$1.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    	// node v0.6 has a bug where array lengths can be Set but not Defined
    	if (!hasPropertyDescriptors$1()) {
    		return null;
    	}
    	try {
    		return $defineProperty([], 'length', { value: 1 }).length !== 1;
    	} catch (e) {
    		// In Firefox 4-22, defining length on an array throws an exception.
    		return true;
    	}
    };

    var hasPropertyDescriptors_1 = hasPropertyDescriptors$1;

    var keys = objectKeys$2;
    var hasSymbols$3 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

    var toStr$7 = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;

    var isFunction = function (fn) {
    	return typeof fn === 'function' && toStr$7.call(fn) === '[object Function]';
    };

    var hasPropertyDescriptors = hasPropertyDescriptors_1();

    var supportsDescriptors$2 = origDefineProperty && hasPropertyDescriptors;

    var defineProperty$1 = function (object, name, value, predicate) {
    	if (name in object && (!isFunction(predicate) || !predicate())) {
    		return;
    	}
    	if (supportsDescriptors$2) {
    		origDefineProperty(object, name, {
    			configurable: true,
    			enumerable: false,
    			value: value,
    			writable: true
    		});
    	} else {
    		object[name] = value; // eslint-disable-line no-param-reassign
    	}
    };

    var defineProperties$1 = function (object, map) {
    	var predicates = arguments.length > 2 ? arguments[2] : {};
    	var props = keys(map);
    	if (hasSymbols$3) {
    		props = concat.call(props, Object.getOwnPropertySymbols(map));
    	}
    	for (var i = 0; i < props.length; i += 1) {
    		defineProperty$1(object, props[i], map[props[i]], predicates[props[i]]);
    	}
    };

    defineProperties$1.supportsDescriptors = !!supportsDescriptors$2;

    var defineProperties_1 = defineProperties$1;

    var callBindExports = {};
    var callBind$5 = {
      get exports(){ return callBindExports; },
      set exports(v){ callBindExports = v; },
    };

    (function (module) {

    	var bind = functionBind;
    	var GetIntrinsic = getIntrinsic;

    	var $apply = GetIntrinsic('%Function.prototype.apply%');
    	var $call = GetIntrinsic('%Function.prototype.call%');
    	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

    	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
    	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
    	var $max = GetIntrinsic('%Math.max%');

    	if ($defineProperty) {
    		try {
    			$defineProperty({}, 'a', { value: 1 });
    		} catch (e) {
    			// IE 8 has a broken defineProperty
    			$defineProperty = null;
    		}
    	}

    	module.exports = function callBind(originalFunction) {
    		var func = $reflectApply(bind, $call, arguments);
    		if ($gOPD && $defineProperty) {
    			var desc = $gOPD(func, 'length');
    			if (desc.configurable) {
    				// original length, plus the receiver, minus any additional arguments (after the receiver)
    				$defineProperty(
    					func,
    					'length',
    					{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
    				);
    			}
    		}
    		return func;
    	};

    	var applyBind = function applyBind() {
    		return $reflectApply(bind, $apply, arguments);
    	};

    	if ($defineProperty) {
    		$defineProperty(module.exports, 'apply', { value: applyBind });
    	} else {
    		module.exports.apply = applyBind;
    	}
    } (callBind$5));

    var GetIntrinsic$7 = getIntrinsic;

    var callBind$4 = callBindExports;

    var $indexOf$1 = callBind$4(GetIntrinsic$7('String.prototype.indexOf'));

    var callBound$c = function callBoundIntrinsic(name, allowMissing) {
    	var intrinsic = GetIntrinsic$7(name, !!allowMissing);
    	if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
    		return callBind$4(intrinsic);
    	}
    	return intrinsic;
    };

    // modified from https://github.com/es-shims/es6-shim
    var objectKeys$1 = objectKeys$2;
    var hasSymbols$2 = requireShams()();
    var callBound$b = callBound$c;
    var toObject = Object;
    var $push = callBound$b('Array.prototype.push');
    var $propIsEnumerable = callBound$b('Object.prototype.propertyIsEnumerable');
    var originalGetSymbols = hasSymbols$2 ? Object.getOwnPropertySymbols : null;

    // eslint-disable-next-line no-unused-vars
    var implementation$8 = function assign(target, source1) {
    	if (target == null) { throw new TypeError('target must be an object'); }
    	var to = toObject(target); // step 1
    	if (arguments.length === 1) {
    		return to; // step 2
    	}
    	for (var s = 1; s < arguments.length; ++s) {
    		var from = toObject(arguments[s]); // step 3.a.i

    		// step 3.a.ii:
    		var keys = objectKeys$1(from);
    		var getSymbols = hasSymbols$2 && (Object.getOwnPropertySymbols || originalGetSymbols);
    		if (getSymbols) {
    			var syms = getSymbols(from);
    			for (var j = 0; j < syms.length; ++j) {
    				var key = syms[j];
    				if ($propIsEnumerable(from, key)) {
    					$push(keys, key);
    				}
    			}
    		}

    		// step 3.a.iii:
    		for (var i = 0; i < keys.length; ++i) {
    			var nextKey = keys[i];
    			if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
    				var propValue = from[nextKey]; // step 3.a.iii.2.a
    				to[nextKey] = propValue; // step 3.a.iii.2.b
    			}
    		}
    	}

    	return to; // step 4
    };

    var implementation$7 = implementation$8;

    var lacksProperEnumerationOrder = function () {
    	if (!Object.assign) {
    		return false;
    	}
    	/*
    	 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
    	 * note: this does not detect the bug unless there's 20 characters
    	 */
    	var str = 'abcdefghijklmnopqrst';
    	var letters = str.split('');
    	var map = {};
    	for (var i = 0; i < letters.length; ++i) {
    		map[letters[i]] = letters[i];
    	}
    	var obj = Object.assign({}, map);
    	var actual = '';
    	for (var k in obj) {
    		actual += k;
    	}
    	return str !== actual;
    };

    var assignHasPendingExceptions = function () {
    	if (!Object.assign || !Object.preventExtensions) {
    		return false;
    	}
    	/*
    	 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
    	 * which is 72% slower than our shim, and Firefox 40's native implementation.
    	 */
    	var thrower = Object.preventExtensions({ 1: 2 });
    	try {
    		Object.assign(thrower, 'xy');
    	} catch (e) {
    		return thrower[1] === 'y';
    	}
    	return false;
    };

    var polyfill$4 = function getPolyfill() {
    	if (!Object.assign) {
    		return implementation$7;
    	}
    	if (lacksProperEnumerationOrder()) {
    		return implementation$7;
    	}
    	if (assignHasPendingExceptions()) {
    		return implementation$7;
    	}
    	return Object.assign;
    };

    var define$3 = defineProperties_1;
    var getPolyfill$5 = polyfill$4;

    var shim$5 = function shimAssign() {
    	var polyfill = getPolyfill$5();
    	define$3(
    		Object,
    		{ assign: polyfill },
    		{ assign: function () { return Object.assign !== polyfill; } }
    	);
    	return polyfill;
    };

    var defineProperties = defineProperties_1;
    var callBind$3 = callBindExports;

    var implementation$6 = implementation$8;
    var getPolyfill$4 = polyfill$4;
    var shim$4 = shim$5;

    var polyfill$3 = callBind$3.apply(getPolyfill$4());
    // eslint-disable-next-line no-unused-vars
    var bound = function assign(target, source1) {
    	return polyfill$3(Object, arguments);
    };

    defineProperties(bound, {
    	getPolyfill: getPolyfill$4,
    	implementation: implementation$6,
    	shim: shim$4
    });

    var object_assign = bound;

    var implementationExports = {};
    var implementation$5 = {
      get exports(){ return implementationExports; },
      set exports(v){ implementationExports = v; },
    };

    var functionsHaveNames = function functionsHaveNames() {
    	return typeof function f() {}.name === 'string';
    };

    var gOPD$4 = Object.getOwnPropertyDescriptor;
    if (gOPD$4) {
    	try {
    		gOPD$4([], 'length');
    	} catch (e) {
    		// IE 8 has a broken gOPD
    		gOPD$4 = null;
    	}
    }

    functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
    	if (!functionsHaveNames() || !gOPD$4) {
    		return false;
    	}
    	var desc = gOPD$4(function () {}, 'name');
    	return !!desc && !!desc.configurable;
    };

    var $bind = Function.prototype.bind;

    functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
    	return functionsHaveNames() && typeof $bind === 'function' && function f() {}.bind().name !== '';
    };

    var functionsHaveNames_1 = functionsHaveNames;

    (function (module) {

    	var functionsHaveConfigurableNames = functionsHaveNames_1.functionsHaveConfigurableNames();

    	var $Object = Object;
    	var $TypeError = TypeError;

    	module.exports = function flags() {
    		if (this != null && this !== $Object(this)) {
    			throw new $TypeError('RegExp.prototype.flags getter called on non-object');
    		}
    		var result = '';
    		if (this.hasIndices) {
    			result += 'd';
    		}
    		if (this.global) {
    			result += 'g';
    		}
    		if (this.ignoreCase) {
    			result += 'i';
    		}
    		if (this.multiline) {
    			result += 'm';
    		}
    		if (this.dotAll) {
    			result += 's';
    		}
    		if (this.unicode) {
    			result += 'u';
    		}
    		if (this.sticky) {
    			result += 'y';
    		}
    		return result;
    	};

    	if (functionsHaveConfigurableNames && Object.defineProperty) {
    		Object.defineProperty(module.exports, 'name', { value: 'get flags' });
    	}
    } (implementation$5));

    var implementation$4 = implementationExports;

    var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
    var $gOPD$1 = Object.getOwnPropertyDescriptor;

    var polyfill$2 = function getPolyfill() {
    	if (supportsDescriptors$1 && (/a/mig).flags === 'gim') {
    		var descriptor = $gOPD$1(RegExp.prototype, 'flags');
    		if (
    			descriptor
    			&& typeof descriptor.get === 'function'
    			&& typeof RegExp.prototype.dotAll === 'boolean'
    			&& typeof RegExp.prototype.hasIndices === 'boolean'
    		) {
    			/* eslint getter-return: 0 */
    			var calls = '';
    			var o = {};
    			Object.defineProperty(o, 'hasIndices', {
    				get: function () {
    					calls += 'd';
    				}
    			});
    			Object.defineProperty(o, 'sticky', {
    				get: function () {
    					calls += 'y';
    				}
    			});
    			if (calls === 'dy') {
    				return descriptor.get;
    			}
    		}
    	}
    	return implementation$4;
    };

    var supportsDescriptors = defineProperties_1.supportsDescriptors;
    var getPolyfill$3 = polyfill$2;
    var gOPD$3 = Object.getOwnPropertyDescriptor;
    var defineProperty = Object.defineProperty;
    var TypeErr = TypeError;
    var getProto = Object.getPrototypeOf;
    var regex = /a/;

    var shim$3 = function shimFlags() {
    	if (!supportsDescriptors || !getProto) {
    		throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
    	}
    	var polyfill = getPolyfill$3();
    	var proto = getProto(regex);
    	var descriptor = gOPD$3(proto, 'flags');
    	if (!descriptor || descriptor.get !== polyfill) {
    		defineProperty(proto, 'flags', {
    			configurable: true,
    			enumerable: false,
    			get: polyfill
    		});
    	}
    	return polyfill;
    };

    var define$2 = defineProperties_1;
    var callBind$2 = callBindExports;

    var implementation$3 = implementationExports;
    var getPolyfill$2 = polyfill$2;
    var shim$2 = shim$3;

    var flagsBound = callBind$2(getPolyfill$2());

    define$2(flagsBound, {
    	getPolyfill: getPolyfill$2,
    	implementation: implementation$3,
    	shim: shim$2
    });

    var regexp_prototype_flags = flagsBound;

    var esGetIteratorExports = {};
    var esGetIterator = {
      get exports(){ return esGetIteratorExports; },
      set exports(v){ esGetIteratorExports = v; },
    };

    var hasSymbols$1 = requireShams();

    var shams = function hasToStringTagShams() {
    	return hasSymbols$1() && !!Symbol.toStringTag;
    };

    var hasToStringTag$8 = shams();
    var callBound$a = callBound$c;

    var $toString$4 = callBound$a('Object.prototype.toString');

    var isStandardArguments = function isArguments(value) {
    	if (hasToStringTag$8 && value && typeof value === 'object' && Symbol.toStringTag in value) {
    		return false;
    	}
    	return $toString$4(value) === '[object Arguments]';
    };

    var isLegacyArguments = function isArguments(value) {
    	if (isStandardArguments(value)) {
    		return true;
    	}
    	return value !== null &&
    		typeof value === 'object' &&
    		typeof value.length === 'number' &&
    		value.length >= 0 &&
    		$toString$4(value) !== '[object Array]' &&
    		$toString$4(value.callee) === '[object Function]';
    };

    var supportsStandardArguments = (function () {
    	return isStandardArguments(arguments);
    }());

    isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

    var isArguments$2 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        default: _nodeResolve_empty
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    var hasMap = typeof Map === 'function' && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === 'function' && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice$2 = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf$1 = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
    // ie, `has-tostringtag/shams
    var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
        ? Symbol.toStringTag
        : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;

    var gPO$1 = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
        [].__proto__ === Array.prototype // eslint-disable-line no-proto
            ? function (O) {
                return O.__proto__; // eslint-disable-line no-proto
            }
            : null
    );

    function addNumericSeparator(num, str) {
        if (
            num === Infinity
            || num === -Infinity
            || num !== num
            || (num && num > -1000 && num < 1000)
            || $test.call(/e/, str)
        ) {
            return str;
        }
        var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
        if (typeof num === 'number') {
            var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
            if (int !== num) {
                var intStr = String(int);
                var dec = $slice$2.call(str, intStr.length + 1);
                return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
            }
        }
        return $replace.call(str, sepRegex, '$&_');
    }

    var utilInspect = require$$0;
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol$2(inspectCustom) ? inspectCustom : null;

    var objectInspect = function inspect_(obj, options, depth, seen) {
        var opts = options || {};

        if (has$2(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
            throw new TypeError('option "quoteStyle" must be "single" or "double"');
        }
        if (
            has$2(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
                ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
                : opts.maxStringLength !== null
            )
        ) {
            throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
        }
        var customInspect = has$2(opts, 'customInspect') ? opts.customInspect : true;
        if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
            throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
        }

        if (
            has$2(opts, 'indent')
            && opts.indent !== null
            && opts.indent !== '\t'
            && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
        ) {
            throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
        }
        if (has$2(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
            throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
        }
        var numericSeparator = opts.numericSeparator;

        if (typeof obj === 'undefined') {
            return 'undefined';
        }
        if (obj === null) {
            return 'null';
        }
        if (typeof obj === 'boolean') {
            return obj ? 'true' : 'false';
        }

        if (typeof obj === 'string') {
            return inspectString(obj, opts);
        }
        if (typeof obj === 'number') {
            if (obj === 0) {
                return Infinity / obj > 0 ? '0' : '-0';
            }
            var str = String(obj);
            return numericSeparator ? addNumericSeparator(obj, str) : str;
        }
        if (typeof obj === 'bigint') {
            var bigIntStr = String(obj) + 'n';
            return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
        }

        var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
        if (typeof depth === 'undefined') { depth = 0; }
        if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
            return isArray$2(obj) ? '[Array]' : '[Object]';
        }

        var indent = getIndent(opts, depth);

        if (typeof seen === 'undefined') {
            seen = [];
        } else if (indexOf(seen, obj) >= 0) {
            return '[Circular]';
        }

        function inspect(value, from, noIndent) {
            if (from) {
                seen = $arrSlice.call(seen);
                seen.push(from);
            }
            if (noIndent) {
                var newOpts = {
                    depth: opts.depth
                };
                if (has$2(opts, 'quoteStyle')) {
                    newOpts.quoteStyle = opts.quoteStyle;
                }
                return inspect_(value, newOpts, depth + 1, seen);
            }
            return inspect_(value, opts, depth + 1, seen);
        }

        if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
            var name = nameOf(obj);
            var keys = arrObjKeys(obj, inspect);
            return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
        }
        if (isSymbol$2(obj)) {
            var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
            return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
        }
        if (isElement(obj)) {
            var s = '<' + $toLowerCase.call(String(obj.nodeName));
            var attrs = obj.attributes || [];
            for (var i = 0; i < attrs.length; i++) {
                s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
            }
            s += '>';
            if (obj.childNodes && obj.childNodes.length) { s += '...'; }
            s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
            return s;
        }
        if (isArray$2(obj)) {
            if (obj.length === 0) { return '[]'; }
            var xs = arrObjKeys(obj, inspect);
            if (indent && !singleLineValues(xs)) {
                return '[' + indentedJoin(xs, indent) + ']';
            }
            return '[ ' + $join.call(xs, ', ') + ' ]';
        }
        if (isError(obj)) {
            var parts = arrObjKeys(obj, inspect);
            if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
                return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
            }
            if (parts.length === 0) { return '[' + String(obj) + ']'; }
            return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
        }
        if (typeof obj === 'object' && customInspect) {
            if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
                return utilInspect(obj, { depth: maxDepth - depth });
            } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
                return obj.inspect();
            }
        }
        if (isMap$3(obj)) {
            var mapParts = [];
            if (mapForEach) {
                mapForEach.call(obj, function (value, key) {
                    mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
                });
            }
            return collectionOf('Map', mapSize.call(obj), mapParts, indent);
        }
        if (isSet$3(obj)) {
            var setParts = [];
            if (setForEach) {
                setForEach.call(obj, function (value) {
                    setParts.push(inspect(value, obj));
                });
            }
            return collectionOf('Set', setSize.call(obj), setParts, indent);
        }
        if (isWeakMap$1(obj)) {
            return weakCollectionOf('WeakMap');
        }
        if (isWeakSet$1(obj)) {
            return weakCollectionOf('WeakSet');
        }
        if (isWeakRef(obj)) {
            return weakCollectionOf('WeakRef');
        }
        if (isNumber$1(obj)) {
            return markBoxed(inspect(Number(obj)));
        }
        if (isBigInt$1(obj)) {
            return markBoxed(inspect(bigIntValueOf$1.call(obj)));
        }
        if (isBoolean$1(obj)) {
            return markBoxed(booleanValueOf.call(obj));
        }
        if (isString$3(obj)) {
            return markBoxed(inspect(String(obj)));
        }
        if (!isDate$1(obj) && !isRegExp(obj)) {
            var ys = arrObjKeys(obj, inspect);
            var isPlainObject = gPO$1 ? gPO$1(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
            var protoTag = obj instanceof Object ? '' : 'null prototype';
            var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice$2.call(toStr$6(obj), 8, -1) : protoTag ? 'Object' : '';
            var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
            var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
            if (ys.length === 0) { return tag + '{}'; }
            if (indent) {
                return tag + '{' + indentedJoin(ys, indent) + '}';
            }
            return tag + '{ ' + $join.call(ys, ', ') + ' }';
        }
        return String(obj);
    };

    function wrapQuotes(s, defaultStyle, opts) {
        var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
        return quoteChar + s + quoteChar;
    }

    function quote(s) {
        return $replace.call(String(s), /"/g, '&quot;');
    }

    function isArray$2(obj) { return toStr$6(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isDate$1(obj) { return toStr$6(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isRegExp(obj) { return toStr$6(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isError(obj) { return toStr$6(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isString$3(obj) { return toStr$6(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isNumber$1(obj) { return toStr$6(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isBoolean$1(obj) { return toStr$6(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

    // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
    function isSymbol$2(obj) {
        if (hasShammedSymbols) {
            return obj && typeof obj === 'object' && obj instanceof Symbol;
        }
        if (typeof obj === 'symbol') {
            return true;
        }
        if (!obj || typeof obj !== 'object' || !symToString) {
            return false;
        }
        try {
            symToString.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    function isBigInt$1(obj) {
        if (!obj || typeof obj !== 'object' || !bigIntValueOf$1) {
            return false;
        }
        try {
            bigIntValueOf$1.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
    function has$2(obj, key) {
        return hasOwn.call(obj, key);
    }

    function toStr$6(obj) {
        return objectToString.call(obj);
    }

    function nameOf(f) {
        if (f.name) { return f.name; }
        var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
        if (m) { return m[1]; }
        return null;
    }

    function indexOf(xs, x) {
        if (xs.indexOf) { return xs.indexOf(x); }
        for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) { return i; }
        }
        return -1;
    }

    function isMap$3(x) {
        if (!mapSize || !x || typeof x !== 'object') {
            return false;
        }
        try {
            mapSize.call(x);
            try {
                setSize.call(x);
            } catch (s) {
                return true;
            }
            return x instanceof Map; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakMap$1(x) {
        if (!weakMapHas || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakMapHas.call(x, weakMapHas);
            try {
                weakSetHas.call(x, weakSetHas);
            } catch (s) {
                return true;
            }
            return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakRef(x) {
        if (!weakRefDeref || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakRefDeref.call(x);
            return true;
        } catch (e) {}
        return false;
    }

    function isSet$3(x) {
        if (!setSize || !x || typeof x !== 'object') {
            return false;
        }
        try {
            setSize.call(x);
            try {
                mapSize.call(x);
            } catch (m) {
                return true;
            }
            return x instanceof Set; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakSet$1(x) {
        if (!weakSetHas || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakSetHas.call(x, weakSetHas);
            try {
                weakMapHas.call(x, weakMapHas);
            } catch (s) {
                return true;
            }
            return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isElement(x) {
        if (!x || typeof x !== 'object') { return false; }
        if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
            return true;
        }
        return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
    }

    function inspectString(str, opts) {
        if (str.length > opts.maxStringLength) {
            var remaining = str.length - opts.maxStringLength;
            var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
            return inspectString($slice$2.call(str, 0, opts.maxStringLength), opts) + trailer;
        }
        // eslint-disable-next-line no-control-regex
        var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
        return wrapQuotes(s, 'single', opts);
    }

    function lowbyte(c) {
        var n = c.charCodeAt(0);
        var x = {
            8: 'b',
            9: 't',
            10: 'n',
            12: 'f',
            13: 'r'
        }[n];
        if (x) { return '\\' + x; }
        return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
    }

    function markBoxed(str) {
        return 'Object(' + str + ')';
    }

    function weakCollectionOf(type) {
        return type + ' { ? }';
    }

    function collectionOf(type, size, entries, indent) {
        var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
        return type + ' (' + size + ') {' + joinedEntries + '}';
    }

    function singleLineValues(xs) {
        for (var i = 0; i < xs.length; i++) {
            if (indexOf(xs[i], '\n') >= 0) {
                return false;
            }
        }
        return true;
    }

    function getIndent(opts, depth) {
        var baseIndent;
        if (opts.indent === '\t') {
            baseIndent = '\t';
        } else if (typeof opts.indent === 'number' && opts.indent > 0) {
            baseIndent = $join.call(Array(opts.indent + 1), ' ');
        } else {
            return null;
        }
        return {
            base: baseIndent,
            prev: $join.call(Array(depth + 1), baseIndent)
        };
    }

    function indentedJoin(xs, indent) {
        if (xs.length === 0) { return ''; }
        var lineJoiner = '\n' + indent.prev + indent.base;
        return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
    }

    function arrObjKeys(obj, inspect) {
        var isArr = isArray$2(obj);
        var xs = [];
        if (isArr) {
            xs.length = obj.length;
            for (var i = 0; i < obj.length; i++) {
                xs[i] = has$2(obj, i) ? inspect(obj[i], obj) : '';
            }
        }
        var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
        var symMap;
        if (hasShammedSymbols) {
            symMap = {};
            for (var k = 0; k < syms.length; k++) {
                symMap['$' + syms[k]] = syms[k];
            }
        }

        for (var key in obj) { // eslint-disable-line no-restricted-syntax
            if (!has$2(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
                // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
                continue; // eslint-disable-line no-restricted-syntax, no-continue
            } else if ($test.call(/[^\w$]/, key)) {
                xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
            } else {
                xs.push(key + ': ' + inspect(obj[key], obj));
            }
        }
        if (typeof gOPS === 'function') {
            for (var j = 0; j < syms.length; j++) {
                if (isEnumerable.call(obj, syms[j])) {
                    xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
                }
            }
        }
        return xs;
    }

    var GetIntrinsic$6 = getIntrinsic;
    var callBound$9 = callBound$c;
    var inspect = objectInspect;

    var $TypeError$1 = GetIntrinsic$6('%TypeError%');
    var $WeakMap$1 = GetIntrinsic$6('%WeakMap%', true);
    var $Map$3 = GetIntrinsic$6('%Map%', true);

    var $weakMapGet = callBound$9('WeakMap.prototype.get', true);
    var $weakMapSet = callBound$9('WeakMap.prototype.set', true);
    var $weakMapHas = callBound$9('WeakMap.prototype.has', true);
    var $mapGet$1 = callBound$9('Map.prototype.get', true);
    var $mapSet = callBound$9('Map.prototype.set', true);
    var $mapHas$5 = callBound$9('Map.prototype.has', true);

    /*
     * This function traverses the list returning the node corresponding to the
     * given key.
     *
     * That node is also moved to the head of the list, so that if it's accessed
     * again we don't need to traverse the whole list. By doing so, all the recently
     * used nodes can be accessed relatively quickly.
     */
    var listGetNode = function (list, key) { // eslint-disable-line consistent-return
    	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
    		if (curr.key === key) {
    			prev.next = curr.next;
    			curr.next = list.next;
    			list.next = curr; // eslint-disable-line no-param-reassign
    			return curr;
    		}
    	}
    };

    var listGet = function (objects, key) {
    	var node = listGetNode(objects, key);
    	return node && node.value;
    };
    var listSet = function (objects, key, value) {
    	var node = listGetNode(objects, key);
    	if (node) {
    		node.value = value;
    	} else {
    		// Prepend the new node to the beginning of the list
    		objects.next = { // eslint-disable-line no-param-reassign
    			key: key,
    			next: objects.next,
    			value: value
    		};
    	}
    };
    var listHas = function (objects, key) {
    	return !!listGetNode(objects, key);
    };

    var sideChannel = function getSideChannel() {
    	var $wm;
    	var $m;
    	var $o;
    	var channel = {
    		assert: function (key) {
    			if (!channel.has(key)) {
    				throw new $TypeError$1('Side channel does not contain ' + inspect(key));
    			}
    		},
    		get: function (key) { // eslint-disable-line consistent-return
    			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
    				if ($wm) {
    					return $weakMapGet($wm, key);
    				}
    			} else if ($Map$3) {
    				if ($m) {
    					return $mapGet$1($m, key);
    				}
    			} else {
    				if ($o) { // eslint-disable-line no-lonely-if
    					return listGet($o, key);
    				}
    			}
    		},
    		has: function (key) {
    			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
    				if ($wm) {
    					return $weakMapHas($wm, key);
    				}
    			} else if ($Map$3) {
    				if ($m) {
    					return $mapHas$5($m, key);
    				}
    			} else {
    				if ($o) { // eslint-disable-line no-lonely-if
    					return listHas($o, key);
    				}
    			}
    			return false;
    		},
    		set: function (key, value) {
    			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
    				if (!$wm) {
    					$wm = new $WeakMap$1();
    				}
    				$weakMapSet($wm, key, value);
    			} else if ($Map$3) {
    				if (!$m) {
    					$m = new $Map$3();
    				}
    				$mapSet($m, key, value);
    			} else {
    				if (!$o) {
    					/*
    					 * Initialize the linked list as an empty node, so that we don't have
    					 * to special-case handling of the first node: we can always refer to
    					 * it as (previous node).next, instead of something like (list).head
    					 */
    					$o = { key: {}, next: null };
    				}
    				listSet($o, key, value);
    			}
    		}
    	};
    	return channel;
    };

    var GetIntrinsic$5 = getIntrinsic;
    var has$1 = src;
    var channel = sideChannel();

    var $TypeError = GetIntrinsic$5('%TypeError%');

    var SLOT$1 = {
    	assert: function (O, slot) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError('`slot` must be a string');
    		}
    		channel.assert(O);
    		if (!SLOT$1.has(O, slot)) {
    			throw new $TypeError('`slot` is not present on `O`');
    		}
    	},
    	get: function (O, slot) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError('`slot` must be a string');
    		}
    		var slots = channel.get(O);
    		return slots && slots['$' + slot];
    	},
    	has: function (O, slot) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError('`slot` must be a string');
    		}
    		var slots = channel.get(O);
    		return !!slots && has$1(slots, '$' + slot);
    	},
    	set: function (O, slot, V) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError('`slot` must be a string');
    		}
    		var slots = channel.get(O);
    		if (!slots) {
    			slots = {};
    			channel.set(O, slots);
    		}
    		slots['$' + slot] = V;
    	}
    };

    if (Object.freeze) {
    	Object.freeze(SLOT$1);
    }

    var internalSlot = SLOT$1;

    var SLOT = internalSlot;

    var $SyntaxError = SyntaxError;
    var $StopIteration = typeof StopIteration === 'object' ? StopIteration : null;

    var stopIterationIterator = function getStopIterationIterator(origIterator) {
    	if (!$StopIteration) {
    		throw new $SyntaxError('this environment lacks StopIteration');
    	}

    	SLOT.set(origIterator, '[[Done]]', false);

    	var siIterator = {
    		next: function next() {
    			var iterator = SLOT.get(this, '[[Iterator]]');
    			var done = SLOT.get(iterator, '[[Done]]');
    			try {
    				return {
    					done: done,
    					value: done ? void undefined : iterator.next()
    				};
    			} catch (e) {
    				SLOT.set(iterator, '[[Done]]', true);
    				if (e !== $StopIteration) {
    					throw e;
    				}
    				return {
    					done: true,
    					value: void undefined
    				};
    			}
    		}
    	};

    	SLOT.set(siIterator, '[[Iterator]]', origIterator);

    	return siIterator;
    };

    var toString = {}.toString;

    var isarray = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject(value) {
    	try {
    		strValue.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };
    var toStr$5 = Object.prototype.toString;
    var strClass = '[object String]';
    var hasToStringTag$7 = shams();

    var isString$2 = function isString(value) {
    	if (typeof value === 'string') {
    		return true;
    	}
    	if (typeof value !== 'object') {
    		return false;
    	}
    	return hasToStringTag$7 ? tryStringObject(value) : toStr$5.call(value) === strClass;
    };

    var $Map$2 = typeof Map === 'function' && Map.prototype ? Map : null;
    var $Set$3 = typeof Set === 'function' && Set.prototype ? Set : null;

    var exported$2;

    if (!$Map$2) {
    	// eslint-disable-next-line no-unused-vars
    	exported$2 = function isMap(x) {
    		// `Map` is not present in this environment.
    		return false;
    	};
    }

    var $mapHas$4 = $Map$2 ? Map.prototype.has : null;
    var $setHas$4 = $Set$3 ? Set.prototype.has : null;
    if (!exported$2 && !$mapHas$4) {
    	// eslint-disable-next-line no-unused-vars
    	exported$2 = function isMap(x) {
    		// `Map` does not have a `has` method
    		return false;
    	};
    }

    var isMap$2 = exported$2 || function isMap(x) {
    	if (!x || typeof x !== 'object') {
    		return false;
    	}
    	try {
    		$mapHas$4.call(x);
    		if ($setHas$4) {
    			try {
    				$setHas$4.call(x);
    			} catch (e) {
    				return true;
    			}
    		}
    		return x instanceof $Map$2; // core-js workaround, pre-v2.5.0
    	} catch (e) {}
    	return false;
    };

    var $Map$1 = typeof Map === 'function' && Map.prototype ? Map : null;
    var $Set$2 = typeof Set === 'function' && Set.prototype ? Set : null;

    var exported$1;

    if (!$Set$2) {
    	// eslint-disable-next-line no-unused-vars
    	exported$1 = function isSet(x) {
    		// `Set` is not present in this environment.
    		return false;
    	};
    }

    var $mapHas$3 = $Map$1 ? Map.prototype.has : null;
    var $setHas$3 = $Set$2 ? Set.prototype.has : null;
    if (!exported$1 && !$setHas$3) {
    	// eslint-disable-next-line no-unused-vars
    	exported$1 = function isSet(x) {
    		// `Set` does not have a `has` method
    		return false;
    	};
    }

    var isSet$2 = exported$1 || function isSet(x) {
    	if (!x || typeof x !== 'object') {
    		return false;
    	}
    	try {
    		$setHas$3.call(x);
    		if ($mapHas$3) {
    			try {
    				$mapHas$3.call(x);
    			} catch (e) {
    				return true;
    			}
    		}
    		return x instanceof $Set$2; // core-js workaround, pre-v2.5.0
    	} catch (e) {}
    	return false;
    };

    /* eslint global-require: 0 */
    // the code is structured this way so that bundlers can
    // alias out `has-symbols` to `() => true` or `() => false` if your target
    // environments' Symbol capabilities are known, and then use
    // dead code elimination on the rest of this module.
    //
    // Similarly, `isarray` can be aliased to `Array.isArray` if
    // available in all target environments.

    var isArguments$1 = isArguments$2;
    var getStopIterationIterator = stopIterationIterator;

    if (hasSymbols$5() || requireShams()()) {
    	var $iterator = Symbol.iterator;
    	// Symbol is available natively or shammed
    	// natively:
    	//  - Chrome >= 38
    	//  - Edge 12-14?, Edge >= 15 for sure
    	//  - FF >= 36
    	//  - Safari >= 9
    	//  - node >= 0.12
    	esGetIterator.exports = function getIterator(iterable) {
    		// alternatively, `iterable[$iterator]?.()`
    		if (iterable != null && typeof iterable[$iterator] !== 'undefined') {
    			return iterable[$iterator]();
    		}
    		if (isArguments$1(iterable)) {
    			// arguments objects lack Symbol.iterator
    			// - node 0.12
    			return Array.prototype[$iterator].call(iterable);
    		}
    	};
    } else {
    	// Symbol is not available, native or shammed
    	var isArray$1 = isarray;
    	var isString$1 = isString$2;
    	var GetIntrinsic$4 = getIntrinsic;
    	var $Map = GetIntrinsic$4('%Map%', true);
    	var $Set$1 = GetIntrinsic$4('%Set%', true);
    	var callBound$8 = callBound$c;
    	var $arrayPush = callBound$8('Array.prototype.push');
    	var $charCodeAt = callBound$8('String.prototype.charCodeAt');
    	var $stringSlice = callBound$8('String.prototype.slice');

    	var advanceStringIndex = function advanceStringIndex(S, index) {
    		var length = S.length;
    		if ((index + 1) >= length) {
    			return index + 1;
    		}

    		var first = $charCodeAt(S, index);
    		if (first < 0xD800 || first > 0xDBFF) {
    			return index + 1;
    		}

    		var second = $charCodeAt(S, index + 1);
    		if (second < 0xDC00 || second > 0xDFFF) {
    			return index + 1;
    		}

    		return index + 2;
    	};

    	var getArrayIterator = function getArrayIterator(arraylike) {
    		var i = 0;
    		return {
    			next: function next() {
    				var done = i >= arraylike.length;
    				var value;
    				if (!done) {
    					value = arraylike[i];
    					i += 1;
    				}
    				return {
    					done: done,
    					value: value
    				};
    			}
    		};
    	};

    	var getNonCollectionIterator = function getNonCollectionIterator(iterable, noPrimordialCollections) {
    		if (isArray$1(iterable) || isArguments$1(iterable)) {
    			return getArrayIterator(iterable);
    		}
    		if (isString$1(iterable)) {
    			var i = 0;
    			return {
    				next: function next() {
    					var nextIndex = advanceStringIndex(iterable, i);
    					var value = $stringSlice(iterable, i, nextIndex);
    					i = nextIndex;
    					return {
    						done: nextIndex > iterable.length,
    						value: value
    					};
    				}
    			};
    		}

    		// es6-shim and es-shims' es-map use a string "_es6-shim iterator_" property on different iterables, such as MapIterator.
    		if (noPrimordialCollections && typeof iterable['_es6-shim iterator_'] !== 'undefined') {
    			return iterable['_es6-shim iterator_']();
    		}
    	};

    	if (!$Map && !$Set$1) {
    		// the only language iterables are Array, String, arguments
    		// - Safari <= 6.0
    		// - Chrome < 38
    		// - node < 0.12
    		// - FF < 13
    		// - IE < 11
    		// - Edge < 11

    		esGetIterator.exports = function getIterator(iterable) {
    			if (iterable != null) {
    				return getNonCollectionIterator(iterable, true);
    			}
    		};
    	} else {
    		// either Map or Set are available, but Symbol is not
    		// - es6-shim on an ES5 browser
    		// - Safari 6.2 (maybe 6.1?)
    		// - FF v[13, 36)
    		// - IE 11
    		// - Edge 11
    		// - Safari v[6, 9)

    		var isMap$1 = isMap$2;
    		var isSet$1 = isSet$2;

    		// Firefox >= 27, IE 11, Safari 6.2 - 9, Edge 11, es6-shim in older envs, all have forEach
    		var $mapForEach = callBound$8('Map.prototype.forEach', true);
    		var $setForEach = callBound$8('Set.prototype.forEach', true);
    		if (typeof process === 'undefined' || !process.versions || !process.versions.node) { // "if is not node"

    			// Firefox 17 - 26 has `.iterator()`, whose iterator `.next()` either
    			// returns a value, or throws a StopIteration object. These browsers
    			// do not have any other mechanism for iteration.
    			var $mapIterator = callBound$8('Map.prototype.iterator', true);
    			var $setIterator = callBound$8('Set.prototype.iterator', true);
    		}
    		// Firefox 27-35, and some older es6-shim versions, use a string "@@iterator" property
    		// this returns a proper iterator object, so we should use it instead of forEach.
    		// newer es6-shim versions use a string "_es6-shim iterator_" property.
    		var $mapAtAtIterator = callBound$8('Map.prototype.@@iterator', true) || callBound$8('Map.prototype._es6-shim iterator_', true);
    		var $setAtAtIterator = callBound$8('Set.prototype.@@iterator', true) || callBound$8('Set.prototype._es6-shim iterator_', true);

    		var getCollectionIterator = function getCollectionIterator(iterable) {
    			if (isMap$1(iterable)) {
    				if ($mapIterator) {
    					return getStopIterationIterator($mapIterator(iterable));
    				}
    				if ($mapAtAtIterator) {
    					return $mapAtAtIterator(iterable);
    				}
    				if ($mapForEach) {
    					var entries = [];
    					$mapForEach(iterable, function (v, k) {
    						$arrayPush(entries, [k, v]);
    					});
    					return getArrayIterator(entries);
    				}
    			}
    			if (isSet$1(iterable)) {
    				if ($setIterator) {
    					return getStopIterationIterator($setIterator(iterable));
    				}
    				if ($setAtAtIterator) {
    					return $setAtAtIterator(iterable);
    				}
    				if ($setForEach) {
    					var values = [];
    					$setForEach(iterable, function (v) {
    						$arrayPush(values, v);
    					});
    					return getArrayIterator(values);
    				}
    			}
    		};

    		esGetIterator.exports = function getIterator(iterable) {
    			return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
    		};
    	}
    }

    var numberIsNaN = function (value) {
    	return value !== value;
    };

    var implementation$2 = function is(a, b) {
    	if (a === 0 && b === 0) {
    		return 1 / a === 1 / b;
    	}
    	if (a === b) {
    		return true;
    	}
    	if (numberIsNaN(a) && numberIsNaN(b)) {
    		return true;
    	}
    	return false;
    };

    var implementation$1 = implementation$2;

    var polyfill$1 = function getPolyfill() {
    	return typeof Object.is === 'function' ? Object.is : implementation$1;
    };

    var getPolyfill$1 = polyfill$1;
    var define$1 = defineProperties_1;

    var shim$1 = function shimObjectIs() {
    	var polyfill = getPolyfill$1();
    	define$1(Object, { is: polyfill }, {
    		is: function testObjectIs() {
    			return Object.is !== polyfill;
    		}
    	});
    	return polyfill;
    };

    var define = defineProperties_1;
    var callBind$1 = callBindExports;

    var implementation = implementation$2;
    var getPolyfill = polyfill$1;
    var shim = shim$1;

    var polyfill = callBind$1(getPolyfill(), Object);

    define(polyfill, {
    	getPolyfill: getPolyfill,
    	implementation: implementation,
    	shim: shim
    });

    var objectIs = polyfill;

    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
    	try {
    		badArrayLike = Object.defineProperty({}, 'length', {
    			get: function () {
    				throw isCallableMarker;
    			}
    		});
    		isCallableMarker = {};
    		// eslint-disable-next-line no-throw-literal
    		reflectApply(function () { throw 42; }, null, badArrayLike);
    	} catch (_) {
    		if (_ !== isCallableMarker) {
    			reflectApply = null;
    		}
    	}
    } else {
    	reflectApply = null;
    }

    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
    	try {
    		var fnStr = fnToStr.call(value);
    		return constructorRegex.test(fnStr);
    	} catch (e) {
    		return false; // not a function
    	}
    };

    var tryFunctionObject = function tryFunctionToStr(value) {
    	try {
    		if (isES6ClassFn(value)) { return false; }
    		fnToStr.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };
    var toStr$4 = Object.prototype.toString;
    var objectClass = '[object Object]';
    var fnClass = '[object Function]';
    var genClass = '[object GeneratorFunction]';
    var ddaClass = '[object HTMLAllCollection]'; // IE 11
    var ddaClass2 = '[object HTML document.all class]';
    var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
    var hasToStringTag$6 = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

    var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

    var isDDA = function isDocumentDotAll() { return false; };
    if (typeof document === 'object') {
    	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
    	var all = document.all;
    	if (toStr$4.call(all) === toStr$4.call(document.all)) {
    		isDDA = function isDocumentDotAll(value) {
    			/* globals document: false */
    			// in IE 6-8, typeof document.all is "object" and it's truthy
    			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
    				try {
    					var str = toStr$4.call(value);
    					return (
    						str === ddaClass
    						|| str === ddaClass2
    						|| str === ddaClass3 // opera 12.16
    						|| str === objectClass // IE 6-8
    					) && value('') == null; // eslint-disable-line eqeqeq
    				} catch (e) { /**/ }
    			}
    			return false;
    		};
    	}
    }

    var isCallable$1 = reflectApply
    	? function isCallable(value) {
    		if (isDDA(value)) { return true; }
    		if (!value) { return false; }
    		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    		try {
    			reflectApply(value, null, badArrayLike);
    		} catch (e) {
    			if (e !== isCallableMarker) { return false; }
    		}
    		return !isES6ClassFn(value) && tryFunctionObject(value);
    	}
    	: function isCallable(value) {
    		if (isDDA(value)) { return true; }
    		if (!value) { return false; }
    		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    		if (hasToStringTag$6) { return tryFunctionObject(value); }
    		if (isES6ClassFn(value)) { return false; }
    		var strClass = toStr$4.call(value);
    		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
    		return tryFunctionObject(value);
    	};

    var isCallable = isCallable$1;

    var toStr$3 = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var forEachArray = function forEachArray(array, iterator, receiver) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (hasOwnProperty.call(array, i)) {
                if (receiver == null) {
                    iterator(array[i], i, array);
                } else {
                    iterator.call(receiver, array[i], i, array);
                }
            }
        }
    };

    var forEachString = function forEachString(string, iterator, receiver) {
        for (var i = 0, len = string.length; i < len; i++) {
            // no such thing as a sparse string.
            if (receiver == null) {
                iterator(string.charAt(i), i, string);
            } else {
                iterator.call(receiver, string.charAt(i), i, string);
            }
        }
    };

    var forEachObject = function forEachObject(object, iterator, receiver) {
        for (var k in object) {
            if (hasOwnProperty.call(object, k)) {
                if (receiver == null) {
                    iterator(object[k], k, object);
                } else {
                    iterator.call(receiver, object[k], k, object);
                }
            }
        }
    };

    var forEach$2 = function forEach(list, iterator, thisArg) {
        if (!isCallable(iterator)) {
            throw new TypeError('iterator must be a function');
        }

        var receiver;
        if (arguments.length >= 3) {
            receiver = thisArg;
        }

        if (toStr$3.call(list) === '[object Array]') {
            forEachArray(list, iterator, receiver);
        } else if (typeof list === 'string') {
            forEachString(list, iterator, receiver);
        } else {
            forEachObject(list, iterator, receiver);
        }
    };

    var forEach_1 = forEach$2;

    var possibleNames = [
    	'BigInt64Array',
    	'BigUint64Array',
    	'Float32Array',
    	'Float64Array',
    	'Int16Array',
    	'Int32Array',
    	'Int8Array',
    	'Uint16Array',
    	'Uint32Array',
    	'Uint8Array',
    	'Uint8ClampedArray'
    ];

    var g$2 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;

    var availableTypedArrays$2 = function availableTypedArrays() {
    	var out = [];
    	for (var i = 0; i < possibleNames.length; i++) {
    		if (typeof g$2[possibleNames[i]] === 'function') {
    			out[out.length] = possibleNames[i];
    		}
    	}
    	return out;
    };

    var GetIntrinsic$3 = getIntrinsic;

    var $gOPD = GetIntrinsic$3('%Object.getOwnPropertyDescriptor%', true);

    if ($gOPD) {
    	try {
    		$gOPD([], 'length');
    	} catch (e) {
    		// IE 8 has a broken gOPD
    		$gOPD = null;
    	}
    }

    var gopd = $gOPD;

    var forEach$1 = forEach_1;
    var availableTypedArrays$1 = availableTypedArrays$2;
    var callBound$7 = callBound$c;

    var $toString$3 = callBound$7('Object.prototype.toString');
    var hasToStringTag$5 = shams();
    var gOPD$2 = gopd;

    var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
    var typedArrays$1 = availableTypedArrays$1();

    var $indexOf = callBound$7('Array.prototype.indexOf', true) || function indexOf(array, value) {
    	for (var i = 0; i < array.length; i += 1) {
    		if (array[i] === value) {
    			return i;
    		}
    	}
    	return -1;
    };
    var $slice$1 = callBound$7('String.prototype.slice');
    var toStrTags$1 = {};
    var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');
    if (hasToStringTag$5 && gOPD$2 && getPrototypeOf$1) {
    	forEach$1(typedArrays$1, function (typedArray) {
    		var arr = new g$1[typedArray]();
    		if (Symbol.toStringTag in arr) {
    			var proto = getPrototypeOf$1(arr);
    			var descriptor = gOPD$2(proto, Symbol.toStringTag);
    			if (!descriptor) {
    				var superProto = getPrototypeOf$1(proto);
    				descriptor = gOPD$2(superProto, Symbol.toStringTag);
    			}
    			toStrTags$1[typedArray] = descriptor.get;
    		}
    	});
    }

    var tryTypedArrays$1 = function tryAllTypedArrays(value) {
    	var anyTrue = false;
    	forEach$1(toStrTags$1, function (getter, typedArray) {
    		if (!anyTrue) {
    			try {
    				anyTrue = getter.call(value) === typedArray;
    			} catch (e) { /**/ }
    		}
    	});
    	return anyTrue;
    };

    var isTypedArray$2 = function isTypedArray(value) {
    	if (!value || typeof value !== 'object') { return false; }
    	if (!hasToStringTag$5 || !(Symbol.toStringTag in value)) {
    		var tag = $slice$1($toString$3(value), 8, -1);
    		return $indexOf(typedArrays$1, tag) > -1;
    	}
    	if (!gOPD$2) { return false; }
    	return tryTypedArrays$1(value);
    };

    var callBind = callBindExports;
    var callBound$6 = callBound$c;
    var GetIntrinsic$2 = getIntrinsic;
    var isTypedArray$1 = isTypedArray$2;

    var $ArrayBuffer = GetIntrinsic$2('ArrayBuffer', true);
    var $Float32Array = GetIntrinsic$2('Float32Array', true);
    var $byteLength$1 = callBound$6('ArrayBuffer.prototype.byteLength', true);

    // in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method
    var abSlice = $ArrayBuffer && !$byteLength$1 && new $ArrayBuffer().slice;
    var $abSlice = abSlice && callBind(abSlice);

    var isArrayBuffer$1 = $byteLength$1 || $abSlice
    	? function isArrayBuffer(obj) {
    		if (!obj || typeof obj !== 'object') {
    			return false;
    		}
    		try {
    			if ($byteLength$1) {
    				$byteLength$1(obj);
    			} else {
    				$abSlice(obj, 0);
    			}
    			return true;
    		} catch (e) {
    			return false;
    		}
    	}
    	: $Float32Array
    		// in node 0.8, ArrayBuffers have no prototype or own methods
    		? function IsArrayBuffer(obj) {
    			try {
    				return (new $Float32Array(obj)).buffer === obj && !isTypedArray$1(obj);
    			} catch (e) {
    				return false;
    			}
    		}
    		: function isArrayBuffer(obj) { // eslint-disable-line no-unused-vars
    			return false;
    		};

    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value) {
    	try {
    		getDay.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };

    var toStr$2 = Object.prototype.toString;
    var dateClass = '[object Date]';
    var hasToStringTag$4 = shams();

    var isDateObject = function isDateObject(value) {
    	if (typeof value !== 'object' || value === null) {
    		return false;
    	}
    	return hasToStringTag$4 ? tryDateObject(value) : toStr$2.call(value) === dateClass;
    };

    var callBound$5 = callBound$c;
    var hasToStringTag$3 = shams();
    var has;
    var $exec;
    var isRegexMarker;
    var badStringifier;

    if (hasToStringTag$3) {
    	has = callBound$5('Object.prototype.hasOwnProperty');
    	$exec = callBound$5('RegExp.prototype.exec');
    	isRegexMarker = {};

    	var throwRegexMarker = function () {
    		throw isRegexMarker;
    	};
    	badStringifier = {
    		toString: throwRegexMarker,
    		valueOf: throwRegexMarker
    	};

    	if (typeof Symbol.toPrimitive === 'symbol') {
    		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    	}
    }

    var $toString$2 = callBound$5('Object.prototype.toString');
    var gOPD$1 = Object.getOwnPropertyDescriptor;
    var regexClass = '[object RegExp]';

    var isRegex$1 = hasToStringTag$3
    	// eslint-disable-next-line consistent-return
    	? function isRegex(value) {
    		if (!value || typeof value !== 'object') {
    			return false;
    		}

    		var descriptor = gOPD$1(value, 'lastIndex');
    		var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
    		if (!hasLastIndexDataProperty) {
    			return false;
    		}

    		try {
    			$exec(value, badStringifier);
    		} catch (e) {
    			return e === isRegexMarker;
    		}
    	}
    	: function isRegex(value) {
    		// In older browsers, typeof regex incorrectly returns 'function'
    		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
    			return false;
    		}

    		return $toString$2(value) === regexClass;
    	};

    var callBound$4 = callBound$c;

    var $byteLength = callBound$4('SharedArrayBuffer.prototype.byteLength', true);

    var isSharedArrayBuffer$1 = $byteLength
    	? function isSharedArrayBuffer(obj) {
    		if (!obj || typeof obj !== 'object') {
    			return false;
    		}
    		try {
    			$byteLength(obj);
    			return true;
    		} catch (e) {
    			return false;
    		}
    	}
    	: function isSharedArrayBuffer(obj) { // eslint-disable-line no-unused-vars
    		return false;
    	};

    var numToStr = Number.prototype.toString;
    var tryNumberObject = function tryNumberObject(value) {
    	try {
    		numToStr.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };
    var toStr$1 = Object.prototype.toString;
    var numClass = '[object Number]';
    var hasToStringTag$2 = shams();

    var isNumberObject = function isNumberObject(value) {
    	if (typeof value === 'number') {
    		return true;
    	}
    	if (typeof value !== 'object') {
    		return false;
    	}
    	return hasToStringTag$2 ? tryNumberObject(value) : toStr$1.call(value) === numClass;
    };

    var callBound$3 = callBound$c;
    var $boolToStr = callBound$3('Boolean.prototype.toString');
    var $toString$1 = callBound$3('Object.prototype.toString');

    var tryBooleanObject = function booleanBrandCheck(value) {
    	try {
    		$boolToStr(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };
    var boolClass = '[object Boolean]';
    var hasToStringTag$1 = shams();

    var isBooleanObject = function isBoolean(value) {
    	if (typeof value === 'boolean') {
    		return true;
    	}
    	if (value === null || typeof value !== 'object') {
    		return false;
    	}
    	return hasToStringTag$1 && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString$1(value) === boolClass;
    };

    var isSymbolExports = {};
    var isSymbol$1 = {
      get exports(){ return isSymbolExports; },
      set exports(v){ isSymbolExports = v; },
    };

    var toStr = Object.prototype.toString;
    var hasSymbols = hasSymbols$5();

    if (hasSymbols) {
    	var symToStr = Symbol.prototype.toString;
    	var symStringRegex = /^Symbol\(.*\)$/;
    	var isSymbolObject = function isRealSymbolObject(value) {
    		if (typeof value.valueOf() !== 'symbol') {
    			return false;
    		}
    		return symStringRegex.test(symToStr.call(value));
    	};

    	isSymbol$1.exports = function isSymbol(value) {
    		if (typeof value === 'symbol') {
    			return true;
    		}
    		if (toStr.call(value) !== '[object Symbol]') {
    			return false;
    		}
    		try {
    			return isSymbolObject(value);
    		} catch (e) {
    			return false;
    		}
    	};
    } else {

    	isSymbol$1.exports = function isSymbol(value) {
    		// this environment does not support Symbols.
    		return false ;
    	};
    }

    var isBigintExports = {};
    var isBigint = {
      get exports(){ return isBigintExports; },
      set exports(v){ isBigintExports = v; },
    };

    var $BigInt = typeof BigInt !== 'undefined' && BigInt;

    var hasBigints = function hasNativeBigInts() {
    	return typeof $BigInt === 'function'
    		&& typeof BigInt === 'function'
    		&& typeof $BigInt(42) === 'bigint' // eslint-disable-line no-magic-numbers
    		&& typeof BigInt(42) === 'bigint'; // eslint-disable-line no-magic-numbers
    };

    var hasBigInts = hasBigints();

    if (hasBigInts) {
    	var bigIntValueOf = BigInt.prototype.valueOf;
    	var tryBigInt = function tryBigIntObject(value) {
    		try {
    			bigIntValueOf.call(value);
    			return true;
    		} catch (e) {
    		}
    		return false;
    	};

    	isBigint.exports = function isBigInt(value) {
    		if (
    			value === null
    			|| typeof value === 'undefined'
    			|| typeof value === 'boolean'
    			|| typeof value === 'string'
    			|| typeof value === 'number'
    			|| typeof value === 'symbol'
    			|| typeof value === 'function'
    		) {
    			return false;
    		}
    		if (typeof value === 'bigint') {
    			return true;
    		}

    		return tryBigInt(value);
    	};
    } else {
    	isBigint.exports = function isBigInt(value) {
    		return false ;
    	};
    }

    var isString = isString$2;
    var isNumber = isNumberObject;
    var isBoolean = isBooleanObject;
    var isSymbol = isSymbolExports;
    var isBigInt = isBigintExports;

    // eslint-disable-next-line consistent-return
    var whichBoxedPrimitive$1 = function whichBoxedPrimitive(value) {
    	// eslint-disable-next-line eqeqeq
    	if (value == null || (typeof value !== 'object' && typeof value !== 'function')) {
    		return null;
    	}
    	if (isString(value)) {
    		return 'String';
    	}
    	if (isNumber(value)) {
    		return 'Number';
    	}
    	if (isBoolean(value)) {
    		return 'Boolean';
    	}
    	if (isSymbol(value)) {
    		return 'Symbol';
    	}
    	if (isBigInt(value)) {
    		return 'BigInt';
    	}
    };

    var $WeakMap = typeof WeakMap === 'function' && WeakMap.prototype ? WeakMap : null;
    var $WeakSet$1 = typeof WeakSet === 'function' && WeakSet.prototype ? WeakSet : null;

    var exported;

    if (!$WeakMap) {
    	// eslint-disable-next-line no-unused-vars
    	exported = function isWeakMap(x) {
    		// `WeakMap` is not present in this environment.
    		return false;
    	};
    }

    var $mapHas$2 = $WeakMap ? $WeakMap.prototype.has : null;
    var $setHas$2 = $WeakSet$1 ? $WeakSet$1.prototype.has : null;
    if (!exported && !$mapHas$2) {
    	// eslint-disable-next-line no-unused-vars
    	exported = function isWeakMap(x) {
    		// `WeakMap` does not have a `has` method
    		return false;
    	};
    }

    var isWeakmap = exported || function isWeakMap(x) {
    	if (!x || typeof x !== 'object') {
    		return false;
    	}
    	try {
    		$mapHas$2.call(x, $mapHas$2);
    		if ($setHas$2) {
    			try {
    				$setHas$2.call(x, $setHas$2);
    			} catch (e) {
    				return true;
    			}
    		}
    		return x instanceof $WeakMap; // core-js workaround, pre-v3
    	} catch (e) {}
    	return false;
    };

    var isWeaksetExports = {};
    var isWeakset = {
      get exports(){ return isWeaksetExports; },
      set exports(v){ isWeaksetExports = v; },
    };

    var GetIntrinsic$1 = getIntrinsic;
    var callBound$2 = callBound$c;

    var $WeakSet = GetIntrinsic$1('%WeakSet%', true);

    var $setHas$1 = callBound$2('WeakSet.prototype.has', true);

    if ($setHas$1) {
    	var $mapHas$1 = callBound$2('WeakMap.prototype.has', true);

    	isWeakset.exports = function isWeakSet(x) {
    		if (!x || typeof x !== 'object') {
    			return false;
    		}
    		try {
    			$setHas$1(x, $setHas$1);
    			if ($mapHas$1) {
    				try {
    					$mapHas$1(x, $mapHas$1);
    				} catch (e) {
    					return true;
    				}
    			}
    			return x instanceof $WeakSet; // core-js workaround, pre-v3
    		} catch (e) {}
    		return false;
    	};
    } else {
    	// eslint-disable-next-line no-unused-vars
    	isWeakset.exports = function isWeakSet(x) {
    		// `WeakSet` does not exist, or does not have a `has` method
    		return false;
    	};
    }

    var isMap = isMap$2;
    var isSet = isSet$2;
    var isWeakMap = isWeakmap;
    var isWeakSet = isWeaksetExports;

    var whichCollection$1 = function whichCollection(value) {
    	if (value && typeof value === 'object') {
    		if (isMap(value)) {
    			return 'Map';
    		}
    		if (isSet(value)) {
    			return 'Set';
    		}
    		if (isWeakMap(value)) {
    			return 'WeakMap';
    		}
    		if (isWeakSet(value)) {
    			return 'WeakSet';
    		}
    	}
    	return false;
    };

    var forEach = forEach_1;
    var availableTypedArrays = availableTypedArrays$2;
    var callBound$1 = callBound$c;
    var gOPD = gopd;

    var $toString = callBound$1('Object.prototype.toString');
    var hasToStringTag = shams();

    var g = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
    var typedArrays = availableTypedArrays();

    var $slice = callBound$1('String.prototype.slice');
    var toStrTags = {};
    var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
    if (hasToStringTag && gOPD && getPrototypeOf) {
    	forEach(typedArrays, function (typedArray) {
    		if (typeof g[typedArray] === 'function') {
    			var arr = new g[typedArray]();
    			if (Symbol.toStringTag in arr) {
    				var proto = getPrototypeOf(arr);
    				var descriptor = gOPD(proto, Symbol.toStringTag);
    				if (!descriptor) {
    					var superProto = getPrototypeOf(proto);
    					descriptor = gOPD(superProto, Symbol.toStringTag);
    				}
    				toStrTags[typedArray] = descriptor.get;
    			}
    		}
    	});
    }

    var tryTypedArrays = function tryAllTypedArrays(value) {
    	var foundName = false;
    	forEach(toStrTags, function (getter, typedArray) {
    		if (!foundName) {
    			try {
    				var name = getter.call(value);
    				if (name === typedArray) {
    					foundName = name;
    				}
    			} catch (e) {}
    		}
    	});
    	return foundName;
    };

    var isTypedArray = isTypedArray$2;

    var whichTypedArray$1 = function whichTypedArray(value) {
    	if (!isTypedArray(value)) { return false; }
    	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
    	return tryTypedArrays(value);
    };

    var assign = object_assign;
    var callBound = callBound$c;
    var flags = regexp_prototype_flags;
    var GetIntrinsic = getIntrinsic;
    var getIterator = esGetIteratorExports;
    var getSideChannel = sideChannel;
    var is = objectIs;
    var isArguments = isArguments$2;
    var isArray = isarray;
    var isArrayBuffer = isArrayBuffer$1;
    var isDate = isDateObject;
    var isRegex = isRegex$1;
    var isSharedArrayBuffer = isSharedArrayBuffer$1;
    var objectKeys = objectKeys$2;
    var whichBoxedPrimitive = whichBoxedPrimitive$1;
    var whichCollection = whichCollection$1;
    var whichTypedArray = whichTypedArray$1;

    var byteLength = callBound('ArrayBuffer.prototype.byteLength', true)
    	|| function byteLength(ab) { return ab.byteLength; }; // in node < 0.11, byteLength is an own nonconfigurable property
    var sabByteLength = callBound('SharedArrayBuffer.prototype.byteLength', true);

    var $getTime = callBound('Date.prototype.getTime');
    var gPO = Object.getPrototypeOf;
    var $objToString = callBound('Object.prototype.toString');

    var $Set = GetIntrinsic('%Set%', true);
    var $mapHas = callBound('Map.prototype.has', true);
    var $mapGet = callBound('Map.prototype.get', true);
    var $mapSize = callBound('Map.prototype.size', true);
    var $setAdd = callBound('Set.prototype.add', true);
    var $setDelete = callBound('Set.prototype.delete', true);
    var $setHas = callBound('Set.prototype.has', true);
    var $setSize = callBound('Set.prototype.size', true);

    // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414
    function setHasEqualElement(set, val1, opts, channel) {
      var i = getIterator(set);
      var result;
      while ((result = i.next()) && !result.done) {
        if (internalDeepEqual(val1, result.value, opts, channel)) { // eslint-disable-line no-use-before-define
          // Remove the matching element to make sure we do not check that again.
          $setDelete(set, result.value);
          return true;
        }
      }

      return false;
    }

    // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439
    function findLooseMatchingPrimitives(prim) {
      if (typeof prim === 'undefined') {
        return null;
      }
      if (typeof prim === 'object') { // Only pass in null as object!
        return void 0;
      }
      if (typeof prim === 'symbol') {
        return false;
      }
      if (typeof prim === 'string' || typeof prim === 'number') {
        // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.
        return +prim === +prim; // eslint-disable-line no-implicit-coercion
      }
      return true;
    }

    // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460
    function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = $mapGet(b, altValue);
      var looseOpts = assign({}, opts, { strict: false });
      if (
        (typeof curB === 'undefined' && !$mapHas(b, altValue))
        // eslint-disable-next-line no-use-before-define
        || !internalDeepEqual(item, curB, looseOpts, channel)
      ) {
        return false;
      }
      // eslint-disable-next-line no-use-before-define
      return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
    }

    // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }

      return $setHas(b, altValue) && !$setHas(a, altValue);
    }

    // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533
    function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
      var i = getIterator(set);
      var result;
      var key2;
      while ((result = i.next()) && !result.done) {
        key2 = result.value;
        if (
          // eslint-disable-next-line no-use-before-define
          internalDeepEqual(key1, key2, opts, channel)
          // eslint-disable-next-line no-use-before-define
          && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
        ) {
          $setDelete(set, key2);
          return true;
        }
      }

      return false;
    }

    function internalDeepEqual(actual, expected, options, channel) {
      var opts = options || {};

      // 7.1. All identical values are equivalent, as determined by ===.
      if (opts.strict ? is(actual, expected) : actual === expected) {
        return true;
      }

      var actualBoxed = whichBoxedPrimitive(actual);
      var expectedBoxed = whichBoxedPrimitive(expected);
      if (actualBoxed !== expectedBoxed) {
        return false;
      }

      // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
      if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
        return opts.strict ? is(actual, expected) : actual == expected; // eslint-disable-line eqeqeq
      }

      /*
       * 7.4. For all other Object pairs, including Array objects, equivalence is
       * determined by having the same number of owned properties (as verified
       * with Object.prototype.hasOwnProperty.call), the same set of keys
       * (although not necessarily the same order), equivalent values for every
       * corresponding key, and an identical 'prototype' property. Note: this
       * accounts for both named and indexed properties on Arrays.
       */
      // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration

      var hasActual = channel.has(actual);
      var hasExpected = channel.has(expected);
      var sentinel;
      if (hasActual && hasExpected) {
        if (channel.get(actual) === channel.get(expected)) {
          return true;
        }
      } else {
        sentinel = {};
      }
      if (!hasActual) { channel.set(actual, sentinel); }
      if (!hasExpected) { channel.set(expected, sentinel); }

      // eslint-disable-next-line no-use-before-define
      return objEquiv(actual, expected, opts, channel);
    }

    function isBuffer(x) {
      if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
        return false;
      }
      if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
        return false;
      }
      if (x.length > 0 && typeof x[0] !== 'number') {
        return false;
      }

      return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
    }

    function setEquiv(a, b, opts, channel) {
      if ($setSize(a) !== $setSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      while ((resultA = iA.next()) && !resultA.done) {
        if (resultA.value && typeof resultA.value === 'object') {
          if (!set) { set = new $Set(); }
          $setAdd(set, resultA.value);
        } else if (!$setHas(b, resultA.value)) {
          if (opts.strict) { return false; }
          if (!setMightHaveLoosePrim(a, b, resultA.value)) {
            return false;
          }
          if (!set) { set = new $Set(); }
          $setAdd(set, resultA.value);
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          // We have to check if a primitive value is already matching and only if it's not, go hunting for it.
          if (resultB.value && typeof resultB.value === 'object') {
            if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
              return false;
            }
          } else if (
            !opts.strict
            && !$setHas(a, resultB.value)
            && !setHasEqualElement(set, resultB.value, opts.strict, channel)
          ) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }

    function mapEquiv(a, b, opts, channel) {
      if ($mapSize(a) !== $mapSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      var key;
      var item1;
      var item2;
      while ((resultA = iA.next()) && !resultA.done) {
        key = resultA.value[0];
        item1 = resultA.value[1];
        if (key && typeof key === 'object') {
          if (!set) { set = new $Set(); }
          $setAdd(set, key);
        } else {
          item2 = $mapGet(b, key);
          if ((typeof item2 === 'undefined' && !$mapHas(b, key)) || !internalDeepEqual(item1, item2, opts, channel)) {
            if (opts.strict) {
              return false;
            }
            if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
              return false;
            }
            if (!set) { set = new $Set(); }
            $setAdd(set, key);
          }
        }
      }

      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          key = resultB.value[0];
          item2 = resultB.value[1];
          if (key && typeof key === 'object') {
            if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
              return false;
            }
          } else if (
            !opts.strict
            && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel))
            && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)
          ) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }

    function objEquiv(a, b, opts, channel) {
      /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5], max-lines: [2, 400] */
      var i, key;

      if (typeof a !== typeof b) { return false; }
      if (a == null || b == null) { return false; }

      if ($objToString(a) !== $objToString(b)) { return false; }

      if (isArguments(a) !== isArguments(b)) { return false; }

      var aIsArray = isArray(a);
      var bIsArray = isArray(b);
      if (aIsArray !== bIsArray) { return false; }

      // TODO: replace when a cross-realm brand check is available
      var aIsError = a instanceof Error;
      var bIsError = b instanceof Error;
      if (aIsError !== bIsError) { return false; }
      if (aIsError || bIsError) {
        if (a.name !== b.name || a.message !== b.message) { return false; }
      }

      var aIsRegex = isRegex(a);
      var bIsRegex = isRegex(b);
      if (aIsRegex !== bIsRegex) { return false; }
      if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
        return false;
      }

      var aIsDate = isDate(a);
      var bIsDate = isDate(b);
      if (aIsDate !== bIsDate) { return false; }
      if (aIsDate || bIsDate) { // && would work too, because both are true or both false here
        if ($getTime(a) !== $getTime(b)) { return false; }
      }
      if (opts.strict && gPO && gPO(a) !== gPO(b)) { return false; }

      var aWhich = whichTypedArray(a);
      var bWhich = whichTypedArray(b);
      if ((aWhich || bWhich) && aWhich !== bWhich) {
        return false;
      }

      var aIsBuffer = isBuffer(a);
      var bIsBuffer = isBuffer(b);
      if (aIsBuffer !== bIsBuffer) { return false; }
      if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
        if (a.length !== b.length) { return false; }
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) { return false; }
        }
        return true;
      }

      var aIsArrayBuffer = isArrayBuffer(a);
      var bIsArrayBuffer = isArrayBuffer(b);
      if (aIsArrayBuffer !== bIsArrayBuffer) { return false; }
      if (aIsArrayBuffer || bIsArrayBuffer) { // && would work too, because both are true or both false here
        if (byteLength(a) !== byteLength(b)) { return false; }
        return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }

      var aIsSAB = isSharedArrayBuffer(a);
      var bIsSAB = isSharedArrayBuffer(b);
      if (aIsSAB !== bIsSAB) { return false; }
      if (aIsSAB || bIsSAB) { // && would work too, because both are true or both false here
        if (sabByteLength(a) !== sabByteLength(b)) { return false; }
        return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }

      if (typeof a !== typeof b) { return false; }

      var ka = objectKeys(a);
      var kb = objectKeys(b);
      // having the same number of owned properties (keys incorporates hasOwnProperty)
      if (ka.length !== kb.length) { return false; }

      // the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      // ~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i]) { return false; } // eslint-disable-line eqeqeq
      }

      // equivalent values for every corresponding key, and ~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!internalDeepEqual(a[key], b[key], opts, channel)) { return false; }
      }

      var aCollection = whichCollection(a);
      var bCollection = whichCollection(b);
      if (aCollection !== bCollection) {
        return false;
      }
      if (aCollection === 'Set' || bCollection === 'Set') { // aCollection === bCollection
        return setEquiv(a, b, opts, channel);
      }
      if (aCollection === 'Map') { // aCollection === bCollection
        return mapEquiv(a, b, opts, channel);
      }

      return true;
    }

    var deepEqual = function deepEqual(a, b, opts) {
      return internalDeepEqual(a, b, opts, getSideChannel());
    };

    // do not edit .js files directly - edit src/index.jst



    var fastDeepEqual = function equal(a, b) {
      if (a === b) return true;

      if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;

        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }



        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;

        for (i = length; i-- !== 0;)
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

        for (i = length; i-- !== 0;) {
          var key = keys[i];

          if (!equal(a[key], b[key])) return false;
        }

        return true;
      }

      // true if both NaN, false otherwise
      return a!==a && b!==b;
    };

    const getRelativeBounds = (rect, relativeTo, relativeDirection) => {
        const edgeDistance = 0;
        if (relativeDirection === "bottom") {
            return {
                left: relativeTo.left,
                top: relativeTo.top + relativeTo.height + edgeDistance,
                width: relativeTo.width,
                height: rect.height
            };
        }
        if (relativeDirection === "top") {
            return {
                left: relativeTo.left,
                top: relativeTo.top - rect.height - edgeDistance,
                width: relativeTo.width,
                height: rect.height
            };
        }
        if (relativeDirection === "right") {
            return {
                left: relativeTo.left + relativeTo.width + edgeDistance,
                top: relativeTo.top,
                width: rect.width,
                height: relativeTo.height
            };
        }
        if (relativeDirection === "left") {
            return {
                left: relativeTo.left - rect.width - edgeDistance,
                top: relativeTo.top,
                width: rect.width,
                height: relativeTo.height
            };
        }
        throw new Error("invalid relativeDirection");
    };
    const objEqual = (objOne, objTwo) => deepEqual(objOne, objTwo, { strict: true });
    const objEqualFast = (objOne, objTwo) => fastDeepEqual(objOne, objTwo);
    const waitFor = (invocations, callback) => {
        let left = invocations;
        return () => {
            left--;
            if (left === 0) {
                callback();
            }
        };
    };
    const wait = (ms) => new Promise((resolve) => setTimeout(() => resolve(), ms));

    var version = "1.22.2";

    class GlueController {
        constructor(portsBridge, sessionStorage) {
            this.portsBridge = portsBridge;
            this.sessionStorage = sessionStorage;
        }
        get platformVersion() {
            return version;
        }
        get clientGlue() {
            return this._clientGlue;
        }
        get contextsTrackingGlue() {
            return this._contextsTrackingGlue;
        }
        get systemGlue() {
            return this._systemGlue;
        }
        get platformWindowId() {
            return this._platformClientWindowId.slice();
        }
        start(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                this._config = config;
                const systemSettings = this.sessionStorage.getSystemSettings();
                if (!systemSettings) {
                    throw new Error("Cannot initiate the glue controller, because the system settings are not defined");
                }
                this._systemSettings = systemSettings;
                this._systemGlue = yield this.initSystemGlue(config.glue);
                logger.setLogger(this._systemGlue.logger);
                this._contextsTrackingGlue = yield this.setUpCtxTracking(config);
            });
        }
        initClientGlue(config, factory, isWorkspaceFrame) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const port = yield this.portsBridge.createInternalClient();
                this.registerClientWindow(isWorkspaceFrame);
                const webConfig = {
                    application: "Platform",
                    gateway: { webPlatform: { port, windowId: this.platformWindowId } }
                };
                const c = Object.assign({}, config, webConfig);
                this._clientGlue = factory ? yield factory(c) : yield glueWebFactory(c);
                return this._clientGlue;
            });
        }
        createPlatformSystemMethod(handler) {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield this.createMethodAsync(GlueWebPlatformControlName, handler);
            });
        }
        createPlatformSystemStream() {
            return __awaiter$3(this, void 0, void 0, function* () {
                this._systemStream = yield this.createStream(GlueWebPlatformStreamName);
            });
        }
        createWorkspacesStream() {
            return __awaiter$3(this, void 0, void 0, function* () {
                this._workspacesStream = yield this.createStream(GlueWebPlatformWorkspacesStreamName);
            });
        }
        createWorkspacesEventsReceiver(callback) {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield this._systemGlue.interop.register(GlueWorkspacesEventsReceiverName, (args) => callback(args));
            });
        }
        pushSystemMessage(domain, operation, data) {
            if (!this._systemStream) {
                throw new Error(`Cannot push data to domain: ${domain}, because the system stream is not created`);
            }
            this._systemStream.push({ domain, operation, data });
        }
        pushWorkspacesMessage(data) {
            if (!this._workspacesStream) {
                throw new Error("Cannot push data to domain: workspaces, because the workspaces stream is not created");
            }
            this._workspacesStream.push({ data });
        }
        callFrame(operationDefinition, operationArguments, windowId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const messageData = { operation: operationDefinition.name, operationArguments };
                const baseErrorMessage = `Internal Platform->Frame Communication Error. Attempted calling workspace frame: ${windowId} for operation ${operationDefinition.name} `;
                if (operationDefinition.dataDecoder) {
                    const decodeResult = operationDefinition.dataDecoder.run(messageData.operationArguments);
                    if (!decodeResult.ok) {
                        throw new Error(`${baseErrorMessage} OutBound validation failed: ${JSON.stringify(decodeResult.error)}`);
                    }
                }
                const methodName = GlueWorkspaceFrameClientControlName;
                const result = yield this.transmitMessage(methodName, messageData, baseErrorMessage, { windowId }, { methodResponseTimeoutMs: 30000, waitTimeoutMs: 30000 });
                if (operationDefinition.resultDecoder) {
                    const decodeResult = operationDefinition.resultDecoder.run(result);
                    if (!decodeResult.ok) {
                        throw new Error(`${baseErrorMessage} Result validation failed: ${JSON.stringify(decodeResult.error)}`);
                    }
                }
                return result;
            });
        }
        callWindow(domain, operationDefinition, data, target) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operation = operationDefinition.name;
                const messageData = { domain, operation, data };
                const baseErrorMessage = `Internal Platform-> ${domain} Domain Communication Error. Attempted calling client window: ${JSON.stringify(target)} for operation ${operation}. `;
                if (operationDefinition.dataDecoder) {
                    const decodeResult = operationDefinition.dataDecoder.run(messageData.data);
                    if (!decodeResult.ok) {
                        throw new Error(`${baseErrorMessage} OutBound validation failed: ${JSON.stringify(decodeResult.error)}`);
                    }
                }
                const result = yield this.transmitMessage(GlueClientControlName, messageData, baseErrorMessage, target, { methodResponseTimeoutMs: 30000, waitTimeoutMs: 30000 });
                if (operationDefinition.resultDecoder) {
                    const decodeResult = operationDefinition.resultDecoder.run(result);
                    if (!decodeResult.ok) {
                        throw new Error(`${baseErrorMessage} Result validation failed when calling window: ${JSON.stringify(target)} for operation ${operation}: ${JSON.stringify(decodeResult.error)}`);
                    }
                }
                return result;
            });
        }
        setStartContext(windowId, context, type) {
            return PromisePlus((resolve, reject) => {
                let unsub;
                const ready = waitFor(2, () => {
                    resolve();
                    unsub();
                });
                const key = `___${type}___${windowId}`;
                const waitContextDestroy = this._clientGlue.contexts.all().some((ctx) => ctx === key) ?
                    this.waitContextDestroy(key) :
                    Promise.resolve();
                waitContextDestroy
                    .then(() => this._clientGlue.contexts.subscribe(key, ready))
                    .then((un) => {
                    unsub = un;
                    return this._systemGlue.contexts.set(key, context);
                })
                    .then(ready)
                    .catch(reject);
            }, 10000, `Timed out waiting to set the ${type} context for: ${windowId}`);
        }
        waitContextDestroy(contextName) {
            return new Promise((resolve, reject) => {
                let contextChecks = 0;
                const interval = setInterval(() => {
                    const contextExists = this._clientGlue.contexts.all().some((ctx) => ctx === contextName);
                    ++contextChecks;
                    if (!contextExists) {
                        clearInterval(interval);
                        resolve();
                        return;
                    }
                    if (contextChecks === 50) {
                        clearInterval(interval);
                        reject(`Timed out waiting for context: ${contextName} to disappear`);
                    }
                }, 100);
            });
        }
        clearContext(windowId, type) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const key = `___${type}___${windowId}`;
                const keyExist = this._systemGlue.contexts.all().some((context) => context === key);
                if (keyExist) {
                    yield this._systemGlue.contexts.destroy(key);
                }
            });
        }
        getServers() {
            return this._clientGlue.interop.servers();
        }
        subscribeForServerAdded(callback) {
            return this._clientGlue.interop.serverAdded(callback);
        }
        subscribeForMethodAdded(callback) {
            return this._clientGlue.interop.methodAdded(callback);
        }
        invokeMethod(method, argumentObj, target, options, success, error) {
            return this._clientGlue.interop.invoke(method, argumentObj, target, options, success, error);
        }
        setContext(name, data) {
            return this._systemGlue.contexts.set(name, data);
        }
        switchTransport(config, target) {
            if (target === "contextsTrack") {
                return this._contextsTrackingGlue ?
                    this._contextsTrackingGlue.connection.switchTransport(config) :
                    Promise.resolve({ success: true });
            }
            const glueToSwitch = target === "system" ? this._systemGlue : this._clientGlue;
            return glueToSwitch.connection.switchTransport(config);
        }
        onDisconnected(callback) {
            return this._systemGlue.connection.disconnected(callback);
        }
        getSystemGlueTransportName() {
            return this._systemGlue.connection.transport.name();
        }
        initSystemGlue(config) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                const port = yield this.portsBridge.createInternalClient();
                const logLevel = (_b = (_a = config === null || config === void 0 ? void 0 : config.systemLogger) === null || _a === void 0 ? void 0 : _a.level) !== null && _b !== void 0 ? _b : "warn";
                return yield GlueCore({
                    application: "Platform-System",
                    gateway: { webPlatform: { port } },
                    logger: logLevel,
                    contexts: {
                        reAnnounceKnownContexts: false,
                        trackAllContexts: false
                    },
                    identity: {
                        instance: this._systemSettings.systemInstanceId
                    }
                });
            });
        }
        setUpCtxTracking(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (this._config.connection.preferred) {
                    return yield this.initContextsTrackingGlue({
                        reAnnounceKnownContexts: true,
                        trackAllContexts: true
                    }, config);
                }
            });
        }
        initContextsTrackingGlue(contextsSettings, config) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                const port = yield this.portsBridge.createInternalClient();
                return yield GlueCore({
                    application: "Platform-Contexts-Track",
                    gateway: { webPlatform: { port } },
                    logger: (_c = (_b = (_a = config === null || config === void 0 ? void 0 : config.glue) === null || _a === void 0 ? void 0 : _a.systemLogger) === null || _b === void 0 ? void 0 : _b.level) !== null && _c !== void 0 ? _c : "warn",
                    contexts: contextsSettings,
                    identity: {
                        instance: this._systemSettings.ctxTrackInstanceId
                    }
                });
            });
        }
        registerClientWindow(isWorkspaceFrame) {
            if (isWorkspaceFrame) {
                const platformFrame = this.sessionStorage.getPlatformFrame();
                this._platformClientWindowId = platformFrame ? platformFrame.windowId :
                    window.name ? window.name : `g42-${shortidExports$1.generate()}`;
                if (!platformFrame) {
                    const platformFrameData = { windowId: this.platformWindowId, active: true, isPlatform: true };
                    this.sessionStorage.saveFrameData(platformFrameData);
                }
                window.name = this.platformWindowId;
                return;
            }
            const platformWindowData = this.sessionStorage.getWindowDataByName("Platform");
            this._platformClientWindowId = platformWindowData ? platformWindowData.windowId :
                window.name ? window.name : `g42-${shortidExports$1.generate()}`;
            if (!platformWindowData) {
                this.sessionStorage.saveWindowData({ name: "Platform", windowId: this.platformWindowId });
            }
            window.name = this.platformWindowId;
        }
        createMethodAsync(name, handler) {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield this._systemGlue.interop.registerAsync(name, handler);
            });
        }
        createStream(name) {
            return __awaiter$3(this, void 0, void 0, function* () {
                return this._systemGlue.interop.createStream(name);
            });
        }
        transmitMessage(methodName, messageData, baseErrorMessage, target, options) {
            return __awaiter$3(this, void 0, void 0, function* () {
                let invocationResult;
                try {
                    invocationResult = yield this._systemGlue.interop.invoke(methodName, messageData, target, options);
                    if (!invocationResult) {
                        throw new Error(`${baseErrorMessage} Received unsupported result from the client - empty result`);
                    }
                    if (!Array.isArray(invocationResult.all_return_values) || invocationResult.all_return_values.length === 0) {
                        throw new Error(`${baseErrorMessage} Received unsupported result from the client - empty values collection`);
                    }
                }
                catch (error) {
                    if (error && error.all_errors && error.all_errors.length) {
                        const invocationErrorMessage = error.all_errors[0].message;
                        throw new Error(`${baseErrorMessage} -> Inner message: ${invocationErrorMessage}`);
                    }
                    throw new Error(`${baseErrorMessage} -> Inner message: ${error.message}`);
                }
                return invocationResult.all_return_values[0].returned;
            });
        }
    }

    function createRegistry(options) {
        if (options && options.errorHandling
            && typeof options.errorHandling !== "function"
            && options.errorHandling !== "log"
            && options.errorHandling !== "silent"
            && options.errorHandling !== "throw") {
            throw new Error("Invalid options passed to createRegistry. Prop errorHandling should be [\"log\" | \"silent\" | \"throw\" | (err) => void], but " + typeof options.errorHandling + " was passed");
        }
        var _userErrorHandler = options && typeof options.errorHandling === "function" && options.errorHandling;
        var callbacks = {};
        function add(key, callback, replayArgumentsArr) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                callbacksForKey = [];
                callbacks[key] = callbacksForKey;
            }
            callbacksForKey.push(callback);
            if (replayArgumentsArr) {
                setTimeout(function () {
                    replayArgumentsArr.forEach(function (replayArgument) {
                        var _a;
                        if ((_a = callbacks[key]) === null || _a === void 0 ? void 0 : _a.includes(callback)) {
                            try {
                                if (Array.isArray(replayArgument)) {
                                    callback.apply(undefined, replayArgument);
                                }
                                else {
                                    callback.apply(undefined, [replayArgument]);
                                }
                            }
                            catch (err) {
                                _handleError(err, key);
                            }
                        }
                    });
                }, 0);
            }
            return function () {
                var allForKey = callbacks[key];
                if (!allForKey) {
                    return;
                }
                allForKey = allForKey.reduce(function (acc, element, index) {
                    if (!(element === callback && acc.length === index)) {
                        acc.push(element);
                    }
                    return acc;
                }, []);
                if (allForKey.length === 0) {
                    delete callbacks[key];
                }
                else {
                    callbacks[key] = allForKey;
                }
            };
        }
        function execute(key) {
            var argumentsArr = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                argumentsArr[_i - 1] = arguments[_i];
            }
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey || callbacksForKey.length === 0) {
                return [];
            }
            var results = [];
            callbacksForKey.forEach(function (callback) {
                try {
                    var result = callback.apply(undefined, argumentsArr);
                    results.push(result);
                }
                catch (err) {
                    results.push(undefined);
                    _handleError(err, key);
                }
            });
            return results;
        }
        function _handleError(exceptionArtifact, key) {
            var errParam = exceptionArtifact instanceof Error ? exceptionArtifact : new Error(exceptionArtifact);
            if (_userErrorHandler) {
                _userErrorHandler(errParam);
                return;
            }
            var msg = "[ERROR] callback-registry: User callback for key \"" + key + "\" failed: " + errParam.stack;
            if (options) {
                switch (options.errorHandling) {
                    case "log":
                        return console.error(msg);
                    case "silent":
                        return;
                    case "throw":
                        throw new Error(msg);
                }
            }
            console.error(msg);
        }
        function clear() {
            callbacks = {};
        }
        function clearKey(key) {
            var callbacksForKey = callbacks[key];
            if (!callbacksForKey) {
                return;
            }
            delete callbacks[key];
        }
        return {
            add: add,
            execute: execute,
            clear: clear,
            clearKey: clearKey
        };
    }
    createRegistry.default = createRegistry;
    var lib = createRegistry;

    class PortsBridge {
        constructor(gateway, sessionStorage, ioc) {
            this.gateway = gateway;
            this.sessionStorage = sessionStorage;
            this.ioc = ioc;
            this.registry = lib();
            this.allPorts = {};
            this.allClients = [];
            this.unLoadStarted = false;
            this.isPreferredActivated = false;
            this.transactionsController = this.ioc.transactionsController;
            this.startUpPromise = new Promise((resolve) => {
                this.startupResolve = resolve;
            });
        }
        get logger() {
            return logger.get("ports.bridge.controller");
        }
        configure(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const systemSettings = this.sessionStorage.getSystemSettings();
                if (!systemSettings) {
                    throw new Error("Cannot initiate the platform port bridge, because the system settings are not defined");
                }
                this._communicationId = systemSettings.systemInstanceId;
                yield this.gateway.start(config === null || config === void 0 ? void 0 : config.gateway);
                this.setUpGenericMessageHandler();
                this.setUpUnload();
            });
        }
        start() {
            this.startupResolve();
        }
        createInternalClient() {
            return __awaiter$3(this, void 0, void 0, function* () {
                const channel = this.ioc.createMessageChannel();
                yield this.gateway.setupInternalClient(channel.port1);
                return channel.port2;
            });
        }
        onClientUnloaded(callback) {
            return this.registry.add("client-unloaded", callback);
        }
        handleExtConnectionRequest(clientData, port) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const client = clientData.glue42core;
                const hasImpersonatedWindowId = !!client.parentWindowId;
                if (!hasImpersonatedWindowId) {
                    const id = client.clientId;
                    const windowData = {
                        windowId: id,
                        name: id
                    };
                    yield this.ioc.windowsController.processNewWindow(windowData);
                }
                yield this.gateway.connectExtClient(port, this.removeClient.bind(this));
                const myWindowId = (_a = this.sessionStorage.getWindowDataByName("Platform")) === null || _a === void 0 ? void 0 : _a.windowId;
                const message = {
                    glue42core: {
                        type: Glue42CoreMessageTypes.connectionAccepted.name,
                        parentWindowId: myWindowId,
                        appName: "ext-no-app",
                        clientId: client.clientId,
                        clientType: "child"
                    }
                };
                this.allPorts[client.clientId] = port;
                port.postMessage(message);
            });
        }
        setActivePreferredTransportConfig(transportConfig) {
            if (transportConfig.type === "secondary") {
                this.activePreferredTransportConfig = transportConfig;
                return;
            }
            delete this.activePreferredTransportConfig;
        }
        setPreferredActivated() {
            this.isPreferredActivated = true;
        }
        switchAllClientsTransport(transportConfig) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const transactions = Object.keys(this.allPorts)
                    .map((id) => this.sendClientPortRequest({
                    type: Glue42CoreMessageTypes.transportSwitchRequest.name,
                    timeout: defaultClientPortRequestTimeoutMS,
                    clientId: id,
                    args: { switchSettings: transportConfig }
                }));
                yield Promise.all(transactions);
            });
        }
        checkClientsPreferredLogic() {
            return __awaiter$3(this, void 0, void 0, function* () {
                const transactions = Object.keys(this.allPorts)
                    .map((id) => this.sendClientPortRequest({
                    type: Glue42CoreMessageTypes.checkPreferredLogic.name,
                    timeout: defaultClientPreferredLogicTestTimeoutMS,
                    clientId: id
                }));
                try {
                    yield Promise.all(transactions);
                    return { success: true };
                }
                catch (error) {
                    return { success: false };
                }
            });
        }
        checkClientsPreferredConnection(url) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const transactions = Object.keys(this.allPorts)
                    .map((id) => this.sendClientPortRequest({
                    type: Glue42CoreMessageTypes.checkPreferredConnection.name,
                    args: { url },
                    timeout: defaultClientPortRequestTimeoutMS,
                    clientId: id
                }));
                try {
                    yield Promise.all(transactions);
                    return { success: true };
                }
                catch (error) {
                    return { success: false };
                }
            });
        }
        removeGwClient(windowId) {
            const foundClient = this.allClients.find((client) => client.bridgeInstanceId === windowId);
            if (!foundClient) {
                return;
            }
            this.allClients = this.allClients.filter((client) => client.bridgeInstanceId !== windowId);
            foundClient.client.disconnect();
            if (this.allPorts[foundClient.clientId]) {
                delete this.allPorts[foundClient.clientId];
            }
        }
        setUpUnload() {
            window.addEventListener("unload", () => {
                this.unLoadStarted = true;
                for (const id in this.allPorts) {
                    this.allPorts[id].postMessage({ type: "platformUnload" });
                }
            });
        }
        setUpGenericMessageHandler() {
            window.addEventListener("message", (event) => {
                var _a;
                const data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
                if (!data || this.unLoadStarted) {
                    return;
                }
                if (data.type === Glue42CoreMessageTypes.clientUnload.name) {
                    const client = {
                        windowId: data.data.ownWindowId,
                        win: event.source
                    };
                    return this.registry.execute("client-unloaded", client);
                }
                if (data.type === Glue42CoreMessageTypes.connectionRequest.name) {
                    return this.startUpPromise.then(() => this.handleRemoteConnectionRequest(event.source, event.origin, data.clientId, data.clientType, data.bridgeInstanceId));
                }
                if (data.type === Glue42CoreMessageTypes.platformPing.name) {
                    return this.startUpPromise.then(() => this.handlePlatformPing(event.source, event.origin));
                }
                if (data.type === Glue42CoreMessageTypes.parentPing.name) {
                    return this.startUpPromise.then(() => this.handleParentPing(event.source, event.origin));
                }
            });
        }
        handleRemoteConnectionRequest(source, origin, clientId, clientType, bridgeInstanceId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const channel = this.ioc.createMessageChannel();
                const client = yield this.gateway.connectClient(channel.port1);
                this.setupGwClientPort({ client, clientId, clientPort: channel.port1 });
                this.allClients.push({ client, bridgeInstanceId, clientId });
                const foundData = this.sessionStorage.getBridgeInstanceData(bridgeInstanceId);
                const appName = foundData === null || foundData === void 0 ? void 0 : foundData.appName;
                const myWindowId = (_a = this.sessionStorage.getWindowDataByName("Platform")) === null || _a === void 0 ? void 0 : _a.windowId;
                const message = {
                    glue42core: {
                        type: Glue42CoreMessageTypes.connectionAccepted.name,
                        port: channel.port2,
                        communicationId: this._communicationId,
                        isPreferredActivated: this.isPreferredActivated,
                        parentWindowId: myWindowId,
                        appName, clientId, clientType
                    }
                };
                source.postMessage(message, origin, [channel.port2]);
            });
        }
        handleParentPing(source, origin) {
            const message = {
                glue42core: {
                    type: Glue42CoreMessageTypes.parentReady.name
                }
            };
            source.postMessage(message, origin);
        }
        handlePlatformPing(source, origin) {
            const message = {
                glue42core: {
                    type: Glue42CoreMessageTypes.platformReady.name
                }
            };
            source.postMessage(message, origin);
        }
        removeClient(clientId, announce, preservePort) {
            if (!clientId) {
                return;
            }
            if (this.allPorts[clientId] && !preservePort) {
                delete this.allPorts[clientId];
            }
            if (!announce) {
                return;
            }
            const client = { windowId: clientId };
            this.registry.execute("client-unloaded", client);
        }
        setupGwClientPort(config) {
            if (this.allPorts[config.clientId] && this.allPorts[config.clientId].onmessage) {
                this.allPorts[config.clientId].onmessage = null;
            }
            this.allPorts[config.clientId] = config.clientPort;
            config.clientPort.onmessage = (event) => {
                var _a, _b;
                const data = (_a = event.data) === null || _a === void 0 ? void 0 : _a.glue42core;
                if (data && (data.type === Glue42CoreMessageTypes.clientUnload.name || data.type === Glue42CoreMessageTypes.gatewayDisconnect.name)) {
                    this.removeClient(data.data.clientId, false, data.type === Glue42CoreMessageTypes.gatewayDisconnect.name);
                    if (this.allClients.some((client) => client.clientId === data.data.clientId)) {
                        this.allClients = this.allClients.filter((client) => client.clientId !== data.data.clientId);
                        config.client.disconnect();
                    }
                    return;
                }
                if (data && data.type === Glue42CoreMessageTypes.transportSwitchResponse.name) {
                    const args = data.args;
                    if (args.success) {
                        this.transactionsController.completeTransaction(data.transactionId);
                    }
                    else {
                        this.transactionsController.failTransaction(data.transactionId, `The client: ${config.clientId} could not connect using the provided transport config.`);
                    }
                    return;
                }
                if (data && data.type === Glue42CoreMessageTypes.getCurrentTransport.name) {
                    const transactionId = data.transactionId;
                    config.clientPort.postMessage({
                        type: Glue42CoreMessageTypes.getCurrentTransportResponse.name,
                        args: {
                            transportState: this.getCurrentTransportState(),
                        },
                        transactionId
                    });
                    return;
                }
                if (data && data.type === Glue42CoreMessageTypes.checkPreferredLogicResponse.name) {
                    return this.transactionsController.completeTransaction(data.transactionId);
                }
                if (data && data.type === Glue42CoreMessageTypes.checkPreferredConnectionResponse.name) {
                    const args = data.args;
                    if (args.error) {
                        return this.transactionsController.failTransaction(data.transactionId, args.error);
                    }
                    if (!args.live) {
                        return this.transactionsController.failTransaction(data.transactionId, `Client ${config.clientId} could not connect to the preferred WS.`);
                    }
                    return this.transactionsController.completeTransaction(data.transactionId);
                }
                if (this.allClients.every((client) => client.client !== config.client)) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`Ignoring a protocol message, because the destination client has been disconnected: ${JSON.stringify(event.data)}`);
                    return;
                }
                config.client.send(event.data);
            };
        }
        getCurrentTransportState() {
            var _a;
            const transportName = this.ioc.glueController.getSystemGlueTransportName();
            const transportState = {
                transportName,
                type: transportName === webPlatformTransportName ? "default" : "secondary",
                transportConfig: transportName === webPlatformTransportName ? undefined : (_a = this.activePreferredTransportConfig) === null || _a === void 0 ? void 0 : _a.transportConfig
            };
            return transportState;
        }
        sendClientPortRequest(request) {
            const client = this.allPorts[request.clientId];
            if (!client) {
                throw new Error(`Cannot sent port request: ${request.type} to ${request.clientId}, because there is no such client`);
            }
            const transaction = this.transactionsController.createTransaction(request.type, request.timeout || defaultClientPortRequestTimeoutMS);
            const type = request.type;
            const args = request.args;
            client.postMessage({ type, args, transactionId: transaction.id });
            return transaction.lock;
        }
    }

    const windowOperationDecoder = oneOf(constant("openWindow"), constant("windowHello"), constant("getUrl"), constant("getTitle"), constant("setTitle"), constant("moveResize"), constant("focus"), constant("close"), constant("getBounds"), constant("getFrameBounds"), constant("registerWorkspaceWindow"), constant("unregisterWorkspaceWindow"), constant("operationCheck"), constant("focusChange"));
    const openWindowConfigDecoder = object({
        name: nonEmptyStringDecoder,
        url: nonEmptyStringDecoder,
        options: optional(windowOpenSettingsDecoder)
    });
    object({
        windowId: nonEmptyStringDecoder,
        name: nonEmptyStringDecoder
    });
    const simpleWindowDecoder = object({
        windowId: nonEmptyStringDecoder
    });
    const windowBoundsResultDecoder = object({
        windowId: nonEmptyStringDecoder,
        bounds: windowBoundsDecoder
    });
    const frameWindowBoundsResultDecoder = object({
        bounds: windowBoundsDecoder
    });
    const windowUrlResultDecoder = object({
        windowId: nonEmptyStringDecoder,
        url: nonEmptyStringDecoder
    });
    const windowMoveResizeConfigDecoder = object({
        windowId: nonEmptyStringDecoder,
        top: optional(number()),
        left: optional(number()),
        width: optional(nonNegativeNumberDecoder),
        height: optional(nonNegativeNumberDecoder),
        relative: optional(boolean())
    });
    const windowTitleConfigDecoder = object({
        windowId: nonEmptyStringDecoder,
        title: string()
    });

    const workspacesOperationDecoder = oneOf(constant("isWindowInWorkspace"), constant("createWorkspace"), constant("createFrame"), constant("initFrame"), constant("getAllFramesSummaries"), constant("getFrameSummary"), constant("getAllWorkspacesSummaries"), constant("getWorkspaceSnapshot"), constant("getAllLayoutsSummaries"), constant("openWorkspace"), constant("deleteLayout"), constant("saveLayout"), constant("importLayout"), constant("exportAllLayouts"), constant("restoreItem"), constant("maximizeItem"), constant("focusItem"), constant("closeItem"), constant("resizeItem"), constant("moveFrame"), constant("getFrameSnapshot"), constant("forceLoadWindow"), constant("ejectWindow"), constant("setItemTitle"), constant("moveWindowTo"), constant("addWindow"), constant("addContainer"), constant("bundleWorkspace"), constant("bundleItem"), constant("changeFrameState"), constant("getFrameState"), constant("getFrameBounds"), constant("frameHello"), constant("hibernateWorkspace"), constant("resumeWorkspace"), constant("getWorkspacesConfig"), constant("lockWorkspace"), constant("lockContainer"), constant("lockWindow"), constant("pinWorkspace"), constant("unpinWorkspace"), constant("getWorkspaceIcon"), constant("setWorkspaceIcon"), constant("checkStarted"), constant("getPlatformFrameId"), constant("getWorkspaceWindowsOnLayoutSaveContext"), constant("getWorkspacesLayouts"), constant("setMaximizationBoundary"), constant("operationCheck"), constant("getWorkspaceWindowFrameBounds"), constant("focusChange"));
    const frameHelloDecoder = object({
        windowId: optional(nonEmptyStringDecoder)
    });
    const workspaceWindowDataDecoder = object({
        name: nonEmptyStringDecoder,
        windowId: nonEmptyStringDecoder,
        frameId: nonEmptyStringDecoder,
        appName: optional(nonEmptyStringDecoder),
        context: optional(anyJson()),
        title: optional(nonEmptyStringDecoder)
    });
    const isWindowInSwimlaneResultDecoder = object({
        inWorkspace: boolean()
    });
    const allParentDecoder = oneOf(constant("workspace"), constant("row"), constant("column"), constant("group"));
    const subParentDecoder = oneOf(constant("row"), constant("column"), constant("group"));
    const frameStateDecoder = oneOf(constant("maximized"), constant("minimized"), constant("normal"));
    object({
        saveLayout: optional(boolean())
    });
    const deleteLayoutConfigDecoder = object({
        name: nonEmptyStringDecoder
    });
    const swimlaneWindowDefinitionDecoder = object({
        type: optional(constant("window")),
        appName: optional(nonEmptyStringDecoder),
        windowId: optional(nonEmptyStringDecoder),
        context: optional(anyJson())
    });
    const strictSwimlaneWindowDefinitionDecoder = object({
        type: constant("window"),
        appName: optional(nonEmptyStringDecoder),
        windowId: optional(nonEmptyStringDecoder),
        context: optional(anyJson())
    });
    const parentDefinitionDecoder = object({
        type: optional(subParentDecoder),
        children: optional(lazy(() => array(oneOf(swimlaneWindowDefinitionDecoder, parentDefinitionDecoder)))),
        config: optional(anyJson())
    });
    const groupDefinitionConfigDecoder = object({
        minWidth: optional(number()),
        maxWidth: optional(number()),
        minHeight: optional(number()),
        maxHeight: optional(number()),
        allowExtract: optional(boolean()),
        allowReorder: optional(boolean()),
        allowDrop: optional(boolean()),
        allowDropHeader: optional(boolean()),
        allowDropLeft: optional(boolean()),
        allowDropTop: optional(boolean()),
        allowDropRight: optional(boolean()),
        allowDropBottom: optional(boolean()),
        showMaximizeButton: optional(boolean()),
        showEjectButton: optional(boolean()),
        showAddWindowButton: optional(boolean())
    });
    const rowDefinitionConfigDecoder = object({
        minHeight: optional(number()),
        maxHeight: optional(number()),
        allowDrop: optional(boolean()),
        allowSplitters: optional(boolean()),
        isPinned: optional(boolean()),
        maximizationBoundary: optional(boolean())
    });
    const columnDefinitionConfigDecoder = object({
        minWidth: optional(number()),
        maxWidth: optional(number()),
        allowDrop: optional(boolean()),
        allowSplitters: optional(boolean()),
        isPinned: optional(boolean()),
        maximizationBoundary: optional(boolean())
    });
    const strictColumnDefinitionDecoder = object({
        type: constant("column"),
        children: optional(lazy(() => array(oneOf(strictSwimlaneWindowDefinitionDecoder, strictParentDefinitionDecoder)))),
        config: optional(columnDefinitionConfigDecoder)
    });
    const strictRowDefinitionDecoder = object({
        type: constant("row"),
        children: optional(lazy(() => array(oneOf(strictSwimlaneWindowDefinitionDecoder, strictParentDefinitionDecoder)))),
        config: optional(rowDefinitionConfigDecoder)
    });
    const strictGroupDefinitionDecoder = object({
        type: constant("group"),
        children: optional(lazy(() => array(oneOf(strictSwimlaneWindowDefinitionDecoder, strictParentDefinitionDecoder)))),
        config: optional(groupDefinitionConfigDecoder)
    });
    const strictParentDefinitionDecoder = oneOf(strictGroupDefinitionDecoder, strictColumnDefinitionDecoder, strictRowDefinitionDecoder);
    oneOf(string().where((s) => s.toLowerCase() === "maximized", "Expected a case insensitive variation of 'maximized'"), string().where((s) => s.toLowerCase() === "normal", "Expected a case insensitive variation of 'normal'"));
    const newFrameConfigDecoder = object({
        bounds: optional(object({
            left: optional(number()),
            top: optional(number()),
            width: optional(nonNegativeNumberDecoder),
            height: optional(nonNegativeNumberDecoder)
        })),
        frameId: optional(nonEmptyStringDecoder)
    });
    const loadStrategyDecoder = oneOf(constant("direct"), constant("delayed"), constant("lazy"));
    const restoreWorkspaceConfigDecoder = object({
        app: optional(nonEmptyStringDecoder),
        context: optional(anyJson()),
        loadStrategy: optional(loadStrategyDecoder),
        title: optional(nonEmptyStringDecoder),
        reuseWorkspaceId: optional(nonEmptyStringDecoder),
        frameId: optional(nonEmptyStringDecoder),
        lockdown: optional(boolean()),
        activateFrame: optional(boolean()),
        newFrame: optional(oneOf(newFrameConfigDecoder, boolean())),
        noTabHeader: optional(boolean()),
        inMemoryLayout: optional(boolean()),
        isPinned: optional(boolean()),
        icon: optional(nonEmptyStringDecoder),
        isSelected: optional(boolean()),
        positionIndex: optional(nonNegativeNumberDecoder)
    });
    const openWorkspaceConfigDecoder = object({
        name: nonEmptyStringDecoder,
        restoreOptions: optional(restoreWorkspaceConfigDecoder)
    });
    const workspaceDefinitionDecoder = object({
        children: optional(array(oneOf(swimlaneWindowDefinitionDecoder, parentDefinitionDecoder))),
        context: optional(anyJson()),
        config: optional(object({
            title: optional(nonEmptyStringDecoder),
            position: optional(nonNegativeNumberDecoder),
            isFocused: optional(boolean()),
            loadStrategy: optional(loadStrategyDecoder),
            noTabHeader: optional(boolean()),
            allowDrop: optional(boolean()),
            allowDropLeft: optional(boolean()),
            allowDropTop: optional(boolean()),
            allowDropRight: optional(boolean()),
            allowDropBottom: optional(boolean()),
            allowExtract: optional(boolean()),
            allowWindowReorder: optional(boolean()),
            showSaveButton: optional(boolean()),
            allowWorkspaceTabReorder: optional(boolean()),
            allowWorkspaceTabExtract: optional(boolean()),
            showCloseButton: optional(boolean()),
            allowSplitters: optional(boolean()),
            positionIndex: optional(nonNegativeNumberDecoder)
        })),
        frame: optional(object({
            reuseFrameId: optional(nonEmptyStringDecoder),
            newFrame: optional(oneOf(boolean(), newFrameConfigDecoder))
        }))
    });
    object({
        type: allParentDecoder,
        definition: optional(oneOf(workspaceDefinitionDecoder, parentDefinitionDecoder))
    });
    const workspaceCreateConfigDecoder = intersection(workspaceDefinitionDecoder, object({
        saveConfig: optional(object({
            saveLayout: optional(boolean())
        }))
    }));
    const getFrameSummaryConfigDecoder = object({
        itemId: nonEmptyStringDecoder
    });
    const frameSummaryDecoder = object({
        id: nonEmptyStringDecoder,
        isFocused: optional(boolean()),
        isInitialized: optional(boolean()),
        initializationContext: optional(object({
            context: optional(anyJson())
        }))
    });
    object({
        id: nonEmptyStringDecoder,
        frameId: nonEmptyStringDecoder,
        positionIndex: number(),
        title: nonEmptyStringDecoder,
        focused: boolean(),
        layoutName: optional(nonEmptyStringDecoder),
        isSelected: optional(boolean())
    });
    object({
        type: subParentDecoder,
        id: nonEmptyStringDecoder,
        frameId: nonEmptyStringDecoder,
        workspaceId: nonEmptyStringDecoder,
        positionIndex: number()
    });
    const eventTypeDecoder = oneOf(constant("frame"), constant("workspace"), constant("container"), constant("window"));
    object({
        type: eventTypeDecoder,
        branch: nonEmptyStringDecoder
    });
    oneOf(constant("opened"), constant("closing"), constant("closed"), constant("focus"), constant("added"), constant("loaded"), constant("removed"), constant("childrenUpdate"), constant("containerChange"), constant("maximized"), constant("restored"), constant("minimized"), constant("normal"), constant("selected"));
    const workspaceConfigResultDecoder = object({
        frameId: nonEmptyStringDecoder,
        title: nonEmptyStringDecoder,
        positionIndex: nonNegativeNumberDecoder,
        name: nonEmptyStringDecoder,
        layoutName: optional(nonEmptyStringDecoder),
        isHibernated: boolean(),
        isSelected: boolean(),
        lastActive: number(),
        allowDrop: optional(boolean()),
        allowExtract: optional(boolean()),
        allowWindowReorder: optional(boolean()),
        allowSplitters: optional(boolean()),
        showCloseButton: optional(boolean()),
        showSaveButton: optional(boolean()),
        allowWorkspaceTabReorder: optional(boolean()),
        allowDropLeft: optional(boolean()),
        allowDropTop: optional(boolean()),
        allowDropRight: optional(boolean()),
        allowDropBottom: optional(boolean()),
        showAddWindowButtons: optional(boolean()),
        showEjectButtons: optional(boolean()),
        showWindowCloseButtons: optional(boolean()),
        minWidth: optional(number()),
        maxWidth: optional(number()),
        minHeight: optional(number()),
        maxHeight: optional(number()),
        widthInPx: optional(number()),
        heightInPx: optional(number())
    });
    const baseChildSnapshotConfigDecoder = object({
        frameId: nonEmptyStringDecoder,
        workspaceId: nonEmptyStringDecoder,
        positionIndex: number()
    });
    const parentSnapshotConfigDecoder = anyJson();
    const swimlaneWindowSnapshotConfigDecoder = intersection(baseChildSnapshotConfigDecoder, object({
        windowId: optional(nonEmptyStringDecoder),
        isMaximized: optional(boolean()),
        isFocused: boolean(),
        isSelected: optional(boolean()),
        title: optional(string()),
        appName: optional(nonEmptyStringDecoder),
        context: optional(anyJson())
    }));
    const childSnapshotResultDecoder = object({
        id: optional(nonEmptyStringDecoder),
        config: oneOf(parentSnapshotConfigDecoder, swimlaneWindowSnapshotConfigDecoder),
        children: optional(lazy(() => array(childSnapshotResultDecoder))),
        type: oneOf(constant("window"), constant("row"), constant("column"), constant("group"))
    });
    const workspaceSnapshotResultDecoder = object({
        id: nonEmptyStringDecoder,
        config: workspaceConfigResultDecoder,
        children: array(childSnapshotResultDecoder),
        frameSummary: frameSummaryDecoder,
        context: optional(anyJson())
    });
    const customWorkspaceChildSnapshotDecoder = object({
        id: nonEmptyStringDecoder,
        config: oneOf(parentSnapshotConfigDecoder, swimlaneWindowSnapshotConfigDecoder),
        children: optional(lazy(() => array(customWorkspaceChildSnapshotDecoder))),
        type: oneOf(constant("window"), constant("row"), constant("column"), constant("group"))
    });
    const groupLayoutItemDecoder = object({
        type: constant("group"),
        config: anyJson(),
        children: array(oneOf(windowLayoutItemDecoder))
    });
    const columnLayoutItemDecoder = object({
        type: constant("column"),
        config: anyJson(),
        children: array(oneOf(groupLayoutItemDecoder, windowLayoutItemDecoder, lazy(() => columnLayoutItemDecoder), lazy(() => rowLayoutItemDecoder)))
    });
    const rowLayoutItemDecoder = object({
        type: constant("row"),
        config: anyJson(),
        children: array(oneOf(columnLayoutItemDecoder, groupLayoutItemDecoder, windowLayoutItemDecoder, lazy(() => rowLayoutItemDecoder)))
    });
    const workspaceLayoutDecoder = object({
        name: nonEmptyStringDecoder,
        type: constant("Workspace"),
        metadata: optional(anyJson()),
        components: array(object({
            type: constant("Workspace"),
            application: optional(nonEmptyStringDecoder),
            state: object({
                config: anyJson(),
                context: anyJson(),
                children: array(oneOf(rowLayoutItemDecoder, columnLayoutItemDecoder, groupLayoutItemDecoder, windowLayoutItemDecoder))
            })
        }))
    });
    const workspacesLayoutImportConfigDecoder = object({
        layout: workspaceLayoutDecoder,
        mode: oneOf(constant("replace"), constant("merge"))
    });
    const exportedLayoutsResultDecoder = object({
        layouts: array(workspaceLayoutDecoder)
    });
    const frameSummaryResultDecoder = frameSummaryDecoder;
    const frameSummariesResultDecoder = object({
        summaries: array(frameSummaryResultDecoder)
    });
    const workspaceSummaryResultDecoder = object({
        id: nonEmptyStringDecoder,
        config: workspaceConfigResultDecoder
    });
    const workspaceSummariesResultDecoder = object({
        summaries: array(workspaceSummaryResultDecoder)
    });
    const frameSnapshotResultDecoder = object({
        id: nonEmptyStringDecoder,
        config: anyJson(),
        workspaces: array(workspaceSnapshotResultDecoder)
    });
    const layoutSummaryDecoder = object({
        name: nonEmptyStringDecoder
    });
    const layoutSummariesDecoder = object({
        summaries: array(layoutSummaryDecoder)
    });
    const simpleWindowOperationSuccessResultDecoder = object({
        windowId: nonEmptyStringDecoder
    });
    const voidResultDecoder = anyJson();
    const frameStateResultDecoder = object({
        state: frameStateDecoder
    });
    const frameBoundsDecoder = object({
        top: number(),
        left: number(),
        width: nonNegativeNumberDecoder,
        height: nonNegativeNumberDecoder
    });
    const frameBoundsResultDecoder = object({
        bounds: frameBoundsDecoder
    });
    const resizeConfigDecoder = object({
        width: optional(nonNegativeNumberDecoder),
        height: optional(nonNegativeNumberDecoder),
        relative: optional(boolean())
    });
    const moveConfigDecoder = object({
        top: optional(number()),
        left: optional(number()),
        relative: optional(boolean())
    });
    const simpleItemConfigDecoder = object({
        itemId: nonEmptyStringDecoder
    });
    const frameSnapshotConfigDecoder = object({
        itemId: nonEmptyStringDecoder,
        excludeIds: optional(boolean())
    });
    const frameStateConfigDecoder = object({
        frameId: nonEmptyStringDecoder,
        requestedState: frameStateDecoder
    });
    const setItemTitleConfigDecoder = object({
        itemId: nonEmptyStringDecoder,
        title: nonEmptyStringDecoder
    });
    const moveWindowConfigDecoder = object({
        itemId: nonEmptyStringDecoder,
        containerId: nonEmptyStringDecoder
    });
    const resizeItemConfigDecoder = intersection(simpleItemConfigDecoder, resizeConfigDecoder);
    const moveFrameConfigDecoder = intersection(simpleItemConfigDecoder, moveConfigDecoder);
    object({
        id: nonEmptyStringDecoder,
        type: subParentDecoder
    });
    const addWindowConfigDecoder = object({
        definition: swimlaneWindowDefinitionDecoder,
        parentId: nonEmptyStringDecoder,
        parentType: allParentDecoder
    });
    const addContainerConfigDecoder = object({
        definition: strictParentDefinitionDecoder,
        parentId: nonEmptyStringDecoder,
        parentType: allParentDecoder
    });
    const addItemResultDecoder = object({
        itemId: nonEmptyStringDecoder,
        windowId: optional(nonEmptyStringDecoder)
    });
    object({
        live: boolean()
    });
    const bundleWorkspaceConfigDecoder = object({
        type: oneOf(constant("row"), constant("column")),
        workspaceId: nonEmptyStringDecoder
    });
    const bundleItemConfigDecoder = object({
        type: oneOf(constant("row"), constant("column")),
        itemId: nonEmptyStringDecoder
    });
    const workspaceSelectorDecoder = object({
        workspaceId: nonEmptyStringDecoder
    });
    const containerSummaryResultDecoder = object({
        itemId: nonEmptyStringDecoder,
        config: parentSnapshotConfigDecoder
    });
    object({
        frameSummary: frameSummaryDecoder,
        frameBounds: optional(frameBoundsDecoder)
    });
    object({
        workspaceSummary: workspaceSummaryResultDecoder,
        frameSummary: frameSummaryDecoder,
        frameBounds: optional(frameBoundsDecoder)
    });
    object({
        containerSummary: containerSummaryResultDecoder
    });
    object({
        windowSummary: object({
            itemId: nonEmptyStringDecoder,
            parentId: nonEmptyStringDecoder,
            config: swimlaneWindowSnapshotConfigDecoder
        })
    });
    const workspaceLayoutSaveConfigDecoder = object({
        name: nonEmptyStringDecoder,
        workspaceId: nonEmptyStringDecoder,
        saveContext: optional(boolean())
    });
    const lockWorkspaceDecoder = object({
        workspaceId: nonEmptyStringDecoder,
        config: optional(object({
            allowDrop: optional(boolean()),
            allowDropLeft: optional(boolean()),
            allowDropTop: optional(boolean()),
            allowDropRight: optional(boolean()),
            allowDropBottom: optional(boolean()),
            allowExtract: optional(boolean()),
            allowWindowReorder: optional(boolean()),
            allowSplitters: optional(boolean()),
            showCloseButton: optional(boolean()),
            showSaveButton: optional(boolean()),
            allowWorkspaceTabReorder: optional(boolean()),
            showWindowCloseButtons: optional(boolean()),
            showEjectButtons: optional(boolean()),
            showAddWindowButtons: optional(boolean())
        }))
    });
    const lockWindowDecoder = object({
        windowPlacementId: nonEmptyStringDecoder,
        config: optional(object({
            allowExtract: optional(boolean()),
            allowReorder: optional(boolean()),
            showCloseButton: optional(boolean())
        }))
    });
    const lockRowDecoder = object({
        itemId: nonEmptyStringDecoder,
        type: constant("row"),
        config: optional(object({
            allowDrop: optional(boolean()),
            allowSplitters: optional(boolean()),
        }))
    });
    const lockColumnDecoder = object({
        itemId: nonEmptyStringDecoder,
        type: constant("column"),
        config: optional(object({
            allowDrop: optional(boolean()),
            allowSplitters: optional(boolean()),
        }))
    });
    const lockGroupDecoder = object({
        itemId: nonEmptyStringDecoder,
        type: constant("group"),
        config: optional(object({
            allowExtract: optional(boolean()),
            allowReorder: optional(boolean()),
            allowDrop: optional(boolean()),
            allowDropHeader: optional(boolean()),
            allowDropLeft: optional(boolean()),
            allowDropTop: optional(boolean()),
            allowDropRight: optional(boolean()),
            allowDropBottom: optional(boolean()),
            showMaximizeButton: optional(boolean()),
            showEjectButton: optional(boolean()),
            showAddWindowButton: optional(boolean()),
        }))
    });
    const lockContainerDecoder = oneOf(lockColumnDecoder, lockGroupDecoder, lockRowDecoder);
    const pinWorkspaceDecoder = object({
        workspaceId: nonEmptyStringDecoder,
        icon: optional(nonEmptyStringDecoder)
    });
    const setWorkspaceIconDecoder = object({
        workspaceId: nonEmptyStringDecoder,
        icon: optional(nonEmptyStringDecoder)
    });
    const workspaceIconDecoder = object({
        icon: optional(nonEmptyStringDecoder)
    });
    object({
        applicationName: optional(string()),
        frameConfig: optional(newFrameConfigDecoder),
        context: optional(object()),
        layoutComponentId: optional(nonEmptyStringDecoder)
    });
    const restoreWorkspaceDefinitionDecoder = object({
        name: nonEmptyStringDecoder,
        restoreOptions: optional(restoreWorkspaceConfigDecoder)
    });
    object({
        frameId: nonEmptyStringDecoder,
        workspaces: array(oneOf(workspaceDefinitionDecoder, restoreWorkspaceDefinitionDecoder))
    });
    const getWorkspaceWindowsOnLayoutSaveContextConfigDecoder = object({
        layoutType: oneOf(constant("Global"), constant("Workspace")),
        layoutName: nonEmptyStringDecoder,
        windowIds: array(nonEmptyStringDecoder),
        context: optional(anyJson()),
        instances: optional(array(nonEmptyStringDecoder)),
        ignoreInstances: optional(array(nonEmptyStringDecoder))
    });
    const setMaximizationBoundaryConfigDecoder = object({
        itemId: nonEmptyStringDecoder,
        enabled: boolean()
    });
    const workspaceWindowOnSaveDataDecoder = object({
        windowId: nonEmptyStringDecoder,
        windowContext: optional(anyJson())
    });
    const getWorkspaceWindowsOnLayoutSaveContextResult = object({
        windowsOnSaveData: array(workspaceWindowOnSaveDataDecoder)
    });
    const getWorkspacesLayoutsConfigDecoder = object({
        frameId: nonEmptyStringDecoder,
        layoutName: nonEmptyStringDecoder,
        layoutType: oneOf(constant("Global"), constant("Workspace")),
        context: optional(anyJson())
    });
    const getWorkspacesLayoutsResponseDecoder = object({
        workspaces: array(workspaceSnapshotResultDecoder)
    });

    class WindowsController {
        constructor(glueController, sessionController, stateController, ioc) {
            this.glueController = glueController;
            this.sessionController = sessionController;
            this.stateController = stateController;
            this.ioc = ioc;
            this.started = false;
            this.operations = {
                openWindow: { name: "openWindow", execute: this.openWindow.bind(this), dataDecoder: openWindowConfigDecoder },
                windowHello: { name: "windowHello", execute: this.handleWindowHello.bind(this) },
                getBounds: { name: "getBounds", dataDecoder: simpleWindowDecoder, resultDecoder: windowBoundsResultDecoder, execute: this.handleGetBounds.bind(this) },
                getFrameBounds: { name: "getFrameBounds", dataDecoder: simpleWindowDecoder, resultDecoder: frameWindowBoundsResultDecoder, execute: this.handleGetBounds.bind(this) },
                getUrl: { name: "getUrl", dataDecoder: simpleWindowDecoder, resultDecoder: windowUrlResultDecoder, execute: this.handleGetUrl.bind(this) },
                moveResize: { name: "moveResize", dataDecoder: windowMoveResizeConfigDecoder, execute: this.handleMoveResize.bind(this) },
                focus: { name: "focus", dataDecoder: simpleWindowDecoder, execute: this.handleFocus.bind(this) },
                close: { name: "close", dataDecoder: simpleWindowDecoder, execute: this.handleClose.bind(this) },
                getTitle: { name: "getTitle", dataDecoder: simpleWindowDecoder, resultDecoder: windowTitleConfigDecoder, execute: this.handleGetTitle.bind(this) },
                setTitle: { name: "setTitle", dataDecoder: windowTitleConfigDecoder, execute: this.handleSetTitle.bind(this) },
                registerWorkspaceWindow: { name: "registerWorkspaceWindow", dataDecoder: workspaceWindowDataDecoder, execute: this.registerWorkspaceWindow.bind(this) },
                unregisterWorkspaceWindow: { name: "unregisterWorkspaceWindow", dataDecoder: simpleWindowDecoder, execute: this.handleWorkspaceClientRemoval.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) },
                focusChange: { name: "focusChange", dataDecoder: focusEventDataDecoder, execute: this.handleFocusEvent.bind(this) }
            };
        }
        get logger() {
            return logger.get("windows.controller");
        }
        get moveResizeOperation() {
            return this.operations.moveResize;
        }
        get getFrameBoundsOperation() {
            return this.operations.getFrameBounds;
        }
        get setTitleOperation() {
            return this.operations.setTitle;
        }
        get getBoundsOperation() {
            return this.operations.getBounds;
        }
        start(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                this.clientResponseTimeoutMs = config.windows.windowResponseTimeoutMs;
                this.defaultBounds = config.windows.defaultWindowOpenBounds;
                this.started = true;
                this.stateController.onWindowDisappeared(this.cleanUpWindow.bind(this));
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) ;
                const windowsData = args.data;
                const commandId = args.commandId;
                const operationValidation = windowOperationDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This window request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(windowsData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`Windows request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(windowsData)}`);
                const result = yield this.operations[operationName].execute(windowsData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`Windows request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        getWindowTitle(windowId, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const boundsResult = yield this.handleGetTitle({ windowId }, commandId);
                return boundsResult.title;
            });
        }
        getWindowBounds(windowId, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const boundsResult = yield this.handleGetBounds({ windowId }, commandId);
                return boundsResult.bounds;
            });
        }
        processNewWindow(windowData, context, childWindow) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`processing a new window with id: ${windowData.windowId} and name: ${windowData.name}`);
                this.sessionController.saveWindowData(windowData);
                if (childWindow) {
                    this.stateController.add(childWindow, windowData.windowId);
                }
                if (context) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`setting the context for window ${windowData.windowId}`);
                    yield this.glueController.setStartContext(windowData.windowId, context, "window");
                }
                this.emitStreamData("windowAdded", windowData);
            });
        }
        handleWorkspaceClientRemoval(client) {
            return __awaiter$3(this, void 0, void 0, function* () {
                this.cleanUpWindow(client.windowId);
                this.ioc.portsBridge.removeGwClient(client.windowId);
            });
        }
        handleClientUnloaded(windowId, win) {
            var _a, _b, _c;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`handling unloading of ${windowId}`);
            if (!windowId) {
                return;
            }
            if (!win || win.closed) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`${windowId} detected as closed, processing window cleanup`);
                return this.cleanUpWindow(windowId);
            }
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`${windowId} detected as not closed, adding to state controller`);
            this.stateController.add(win, windowId);
        }
        cleanUpWindow(windowId) {
            this.stateController.remove(windowId);
            const somethingRemoved = this.sessionController.fullWindowClean(windowId);
            if (somethingRemoved) {
                this.glueController.clearContext(windowId, "window").catch(() => { });
                this.emitStreamData("windowRemoved", { windowId });
            }
        }
        registerWorkspaceWindow(data, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling workspace window registration with id: ${data.windowId} and name: ${data.name}`);
                this.sessionController.saveWindowData({ windowId: data.windowId, name: data.name });
                this.sessionController.saveWorkspaceClient({ windowId: data.windowId, frameId: data.frameId, initialTitle: data.title });
                this.sessionController.saveNonGlue({ windowId: data.windowId });
                if (data.context) {
                    yield this.glueController.setStartContext(data.windowId, data.context, "window");
                }
                this.emitStreamData("windowAdded", { windowId: data.windowId, name: data.name });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] workspace window registered successfully with id ${data.windowId} and name ${data.name}`);
            });
        }
        handleFocusEvent(data, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling focus event from window id: ${data.windowId} and hasFocus: ${data.hasFocus}`);
                this.emitStreamData("focusChange", data);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] focus event from window id: ${data.windowId} and hasFocus: ${data.hasFocus} handled`);
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        emitStreamData(operation, data) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`sending notification of event: ${operation} with data: ${JSON.stringify(data)}`);
            this.glueController.pushSystemMessage("windows", operation, data);
        }
        openWindow(config, commandId) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            return __awaiter$3(this, void 0, void 0, function* () {
                const nameExists = this.sessionController.getWindowDataByName(config.name);
                if (nameExists) {
                    throw new Error(`Cannot open a window with name: ${config.name}, because a window with that name already exists.`);
                }
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling open command with a valid name: ${config.name}, url: ${config.url} and options: ${JSON.stringify(config.options)}`);
                const openBounds = yield this.getStartingBounds(config, commandId);
                const windowId = (_c = (_b = config.options) === null || _b === void 0 ? void 0 : _b.windowId) !== null && _c !== void 0 ? _c : `g42-${shortidExports$1.generate()}`;
                const windowData = {
                    name: config.name,
                    windowId,
                    initialBounds: openBounds,
                    initialUrl: config.url,
                    initialContext: (_d = config.options) === null || _d === void 0 ? void 0 : _d.context,
                    layoutComponentId: (_e = config.options) === null || _e === void 0 ? void 0 : _e.layoutComponentId
                };
                const options = `left=${openBounds.left},top=${openBounds.top},width=${openBounds.width},height=${openBounds.height}`;
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace(`[${commandId}] calling native window open with bounds: ${options}`);
                const childWindow = window.open(config.url, windowData.windowId, options);
                if (!childWindow) {
                    throw new Error(`Cannot open window with url: ${config.url} and name: ${config.name}. The most likely reason is that the user has not approved popups or has a blocker.`);
                }
                yield this.processNewWindow(windowData, (_g = config.options) === null || _g === void 0 ? void 0 : _g.context, childWindow);
                (_h = this.logger) === null || _h === void 0 ? void 0 : _h.trace(`[${commandId}] the new window is opened, saved in session, state and announced, responding to the caller`);
                return windowData;
            });
        }
        handleWindowHello(client, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a hello message from a real windowId: ${client.windowId}`);
                if (client.windowId) {
                    this.stateController.remove(client.windowId);
                    this.sessionController.removeNonGlue({ windowId: client.windowId });
                    const workspaceClient = this.sessionController.getWorkspaceClientById(client.windowId);
                    if (workspaceClient && workspaceClient.initialTitle) {
                        const windowId = client.windowId;
                        const title = workspaceClient.initialTitle;
                        PromiseWrap(() => this.glueController.callWindow("windows", this.operations.setTitle, { windowId, title }, { windowId }), this.clientResponseTimeoutMs)
                            .catch((err) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] error while setting the workspace window title: ${err.message}`); });
                    }
                }
                const isWorkspaceFrame = !!(client.windowId && this.sessionController.getFrameData(client.windowId));
                const allWindows = this.sessionController.getAllWindowsData().map((w) => ({ windowId: w.windowId, name: w.name }));
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] a full list of all current windows has been compiled, sending it to the caller`);
                return { windows: allWindows, isWorkspaceFrame };
            });
        }
        handleGetUrl(data, commandId) {
            var _a;
            const windowData = this.sessionController.getWindowDataById(data.windowId);
            if (!windowData) {
                throw new Error(`Cannot get the url of window: ${data.windowId}, because it is does not exist for the platform`);
            }
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a get url request for window ${data.windowId}`);
            const timeoutMessage = `Cannot get the url of window: ${data.windowId}, because it is either a non-glue window or it hasn't initiated it's glue yet`;
            return PromiseWrap(() => this.glueController.callWindow("windows", this.operations.getUrl, data, { windowId: data.windowId }), this.clientResponseTimeoutMs, timeoutMessage);
        }
        handleGetTitle(data, commandId) {
            var _a;
            const windowData = this.sessionController.getWindowDataById(data.windowId);
            if (!windowData) {
                throw new Error(`Cannot get the title of window: ${data.windowId}, because it is does not exist for the platform`);
            }
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a get title request for window ${data.windowId}`);
            const timeoutMessage = `Cannot get the title of window: ${data.windowId}, because it is either a non-glue window or it hasn't initiated it's glue yet`;
            return PromiseWrap(() => this.glueController.callWindow("windows", this.operations.getTitle, data, { windowId: data.windowId }), this.clientResponseTimeoutMs, timeoutMessage);
        }
        handleSetTitle(data, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const windowData = this.sessionController.getWindowDataById(data.windowId);
                if (!windowData) {
                    throw new Error(`Cannot set the title of window: ${data.windowId}, because it is does not exist for the platform`);
                }
                const workspaceClient = this.sessionController.getWorkspaceClientById(data.windowId);
                if (workspaceClient) {
                    yield this.ioc.workspacesController.setItemTitle({ itemId: data.windowId, title: data.title }, commandId);
                }
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a set title request for window ${data.windowId} and title: ${data.title}`);
                const timeoutMessage = `Cannot set the title of window: ${data.windowId}, because it is either a non-glue window or it hasn't initiated it's glue yet`;
                yield PromiseWrap(() => this.glueController.callWindow("windows", this.operations.setTitle, data, { windowId: data.windowId }), this.clientResponseTimeoutMs, timeoutMessage);
            });
        }
        handleMoveResize(data, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const workspaceClient = this.sessionController.getWorkspaceClientById(data.windowId);
                if (workspaceClient) {
                    throw new Error(`Cannot move resize window id ${data.windowId}, because it is in a workspace. Consider using the workspaces API to get more control`);
                }
                const windowData = this.sessionController.getWindowDataById(data.windowId);
                if (!windowData) {
                    throw new Error(`Cannot move resize window: ${data.windowId}, because it is does not exist for the platform`);
                }
                if (windowData.name === "Platform") {
                    throw new Error("Move-resizing the main application is not allowed");
                }
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a move resize request for window ${data.windowId} and data: ${JSON.stringify(data)}`);
                const timeoutMessage = `Cannot move resize window: ${data.windowId}, because it is either a non-glue window or it hasn't initiated it's glue yet`;
                yield PromiseWrap(() => this.glueController.callWindow("windows", this.operations.moveResize, data, { windowId: data.windowId }), this.clientResponseTimeoutMs, timeoutMessage);
                yield this.pause(500);
            });
        }
        handleGetBounds(data, commandId) {
            var _a;
            const workspaceClient = this.sessionController.getWorkspaceClientById(data.windowId);
            if (workspaceClient) {
                throw new Error(`Cannot get bounds of window id ${data.windowId}, because it is in a workspace. Consider using the workspaces API to get more info`);
            }
            const windowData = this.sessionController.getWindowDataById(data.windowId);
            if (!windowData) {
                throw new Error(`Cannot get the bounds of window: ${data.windowId}, because it is does not exist for the platform`);
            }
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a get bounds request for window ${data.windowId}`);
            const timeoutMessage = `Cannot get the bounds of window: ${data.windowId}, because it is either a non-glue window or it hasn't initiated it's glue yet`;
            return PromiseWrap(() => this.glueController.callWindow("windows", this.operations.getBounds, data, { windowId: data.windowId }), this.clientResponseTimeoutMs, timeoutMessage);
        }
        handleFocus(data, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const workspaceClient = this.sessionController.getWorkspaceClientById(data.windowId);
                if (workspaceClient) {
                    throw new Error(`Cannot focus window id ${data.windowId}, because it is in a workspace. Consider using the workspaces API to get more control`);
                }
                const windowData = this.sessionController.getWindowDataById(data.windowId);
                if (!windowData) {
                    throw new Error(`Cannot focus window: ${data.windowId}, because it is not known by the platform`);
                }
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a focus request for window ${data.windowId}`);
                window.open(undefined, windowData.windowId);
            });
        }
        handleClose(data, commandId) {
            var _a, _b, _c, _d, _e;
            return __awaiter$3(this, void 0, void 0, function* () {
                const workspaceClient = this.sessionController.getWorkspaceClientById(data.windowId);
                if (workspaceClient) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] this window is detected as a workspace window, closing via the workspaces controller`);
                    yield this.ioc.workspacesController.closeItem({ itemId: data.windowId }, commandId);
                    return;
                }
                const applicationInstance = this.sessionController.getInstanceData(data.windowId);
                if (applicationInstance) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] this window is detected as an application instance, closing via the appManager controller`);
                    yield this.ioc.applicationsController.handleInstanceStop({ id: data.windowId }, commandId);
                    return;
                }
                const windowData = this.sessionController.getWindowDataById(data.windowId);
                if (!windowData) {
                    throw new Error(`Cannot close window: ${data.windowId}, because it is not known by the platform`);
                }
                if (windowData.name === "Platform") {
                    throw new Error("Closing the main application is not allowed");
                }
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] handling a close request for window ${data.windowId}`);
                (_d = window.open(undefined, windowData.windowId)) === null || _d === void 0 ? void 0 : _d.close();
                this.cleanUpWindow(windowData.windowId);
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`[${commandId}] window ${data.windowId} has been closed, removed from session, state and announced`);
            });
        }
        getStartingBounds(config, commandId) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            return __awaiter$3(this, void 0, void 0, function* () {
                const openBounds = {
                    top: (_b = (_a = config.options) === null || _a === void 0 ? void 0 : _a.top) !== null && _b !== void 0 ? _b : this.defaultBounds.top,
                    left: (_d = (_c = config.options) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : this.defaultBounds.left,
                    height: (_f = (_e = config.options) === null || _e === void 0 ? void 0 : _e.height) !== null && _f !== void 0 ? _f : this.defaultBounds.height,
                    width: (_h = (_g = config.options) === null || _g === void 0 ? void 0 : _g.width) !== null && _h !== void 0 ? _h : this.defaultBounds.width
                };
                if (!((_j = config.options) === null || _j === void 0 ? void 0 : _j.relativeTo)) {
                    return openBounds;
                }
                const relativeWindowId = config.options.relativeTo;
                const windowData = this.sessionController.getWindowDataById(relativeWindowId);
                if (!windowData) {
                    return openBounds;
                }
                try {
                    const boundsResult = yield this.handleGetBounds({ windowId: windowData.windowId }, commandId);
                    const relativeWindowBounds = boundsResult.bounds;
                    const relativeDir = (_k = config.options.relativeDirection) !== null && _k !== void 0 ? _k : "right";
                    const newBounds = getRelativeBounds(openBounds, relativeWindowBounds, relativeDir);
                    return newBounds;
                }
                catch (error) {
                    return openBounds;
                }
            });
        }
        pause(ms) {
            return new Promise((resolve) => setTimeout(resolve, ms));
        }
    }

    class SessionStorageController {
        constructor() {
            this.windowsNamespace = "g42_core_windows";
            this.instancesNamespace = "g42_core_instances";
            this.bridgeInstancesNamespace = "g42_core_bridge";
            this.nonGlueNamespace = "g42_core_nonglue";
            this.workspaceWindowsNamespace = "g42_core_workspace_clients";
            this.workspaceFramesNamespace = "g42_core_workspace_frames";
            this.workspaceHibernationNamespace = "g42_core_workspace_hibernation";
            this.globalLayoutsNamespace = "g42_core_layouts_global";
            this.workspaceLayoutsNamespace = "g42_core_layouts_workspace";
            this.appDefsNamespace = "g42_core_app_definitions";
            this.appDefsInmemoryNamespace = "g42_core_app_definitions_inmemory";
            this.notificationsNamespace = "g42_core_notifications";
            this.systemNamespace = "g42_system";
            this.sessionStorage = window.sessionStorage;
            [
                this.bridgeInstancesNamespace,
                this.windowsNamespace,
                this.instancesNamespace,
                this.nonGlueNamespace,
                this.workspaceWindowsNamespace,
                this.workspaceFramesNamespace,
                this.globalLayoutsNamespace,
                this.workspaceLayoutsNamespace,
                this.appDefsNamespace,
                this.workspaceHibernationNamespace,
                this.appDefsInmemoryNamespace,
                this.notificationsNamespace
            ].forEach((namespace) => {
                const data = this.sessionStorage.getItem(namespace);
                if (!data) {
                    this.sessionStorage.setItem(namespace, JSON.stringify([]));
                }
            });
        }
        get logger() {
            return logger.get("session.storage");
        }
        getSystemSettings() {
            const settingsAsString = this.sessionStorage.getItem(this.systemNamespace);
            if (!settingsAsString) {
                return;
            }
            return JSON.parse(settingsAsString);
        }
        saveSystemSettings(settings) {
            this.sessionStorage.setItem(this.systemNamespace, JSON.stringify(settings));
        }
        getTimeout(workspaceId) {
            var _a;
            const timers = JSON.parse(this.sessionStorage.getItem(this.workspaceHibernationNamespace));
            return (_a = timers.find((timer) => timer.workspaceId === workspaceId)) === null || _a === void 0 ? void 0 : _a.timeout;
        }
        removeTimeout(workspaceId) {
            const timers = JSON.parse(this.sessionStorage.getItem(this.workspaceHibernationNamespace));
            const timer = timers.find((timer) => timer.workspaceId === workspaceId);
            if (timer) {
                this.sessionStorage.setItem(this.workspaceHibernationNamespace, JSON.stringify(timers.filter((timer) => timer.workspaceId !== workspaceId)));
            }
        }
        saveTimeout(workspaceId, timeout) {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceHibernationNamespace));
            if (allData.some((data) => data.workspaceId === workspaceId)) {
                return;
            }
            allData.push({ workspaceId, timeout });
            this.sessionStorage.setItem(this.workspaceHibernationNamespace, JSON.stringify(allData));
        }
        exportClearTimeouts() {
            const timers = JSON.parse(this.sessionStorage.getItem(this.workspaceHibernationNamespace));
            this.sessionStorage.setItem(this.workspaceHibernationNamespace, JSON.stringify([]));
            return timers;
        }
        getAllApps(type) {
            const namespace = type === "remote" ? this.appDefsNamespace : this.appDefsInmemoryNamespace;
            const appsString = JSON.parse(this.sessionStorage.getItem(namespace));
            return appsString;
        }
        overwriteApps(apps, type) {
            const namespace = type === "remote" ? this.appDefsNamespace : this.appDefsInmemoryNamespace;
            this.sessionStorage.setItem(namespace, JSON.stringify(apps));
        }
        removeApp(name, type) {
            const namespace = type === "remote" ? this.appDefsNamespace : this.appDefsInmemoryNamespace;
            const all = this.getAllApps(type);
            const app = all.find((app) => app.name === name);
            if (app) {
                this.sessionStorage.setItem(namespace, JSON.stringify(all.filter((a) => a.name !== name)));
            }
            return app;
        }
        getLayoutSnapshot(type) {
            const namespace = type === "Global" ? this.globalLayoutsNamespace : this.workspaceLayoutsNamespace;
            const snapsString = JSON.parse(this.sessionStorage.getItem(namespace));
            return { layouts: snapsString };
        }
        saveLayoutSnapshot(snapshot, type) {
            const namespace = type === "Global" ? this.globalLayoutsNamespace : this.workspaceLayoutsNamespace;
            this.sessionStorage.setItem(namespace, JSON.stringify(snapshot.layouts));
        }
        saveFrameData(frameData) {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceFramesNamespace));
            if (allData.some((data) => data.windowId === frameData.windowId)) {
                return;
            }
            allData.push(frameData);
            this.sessionStorage.setItem(this.workspaceFramesNamespace, JSON.stringify(allData));
        }
        getPlatformFrame() {
            return this.getAllFrames().find((frame) => frame.isPlatform);
        }
        getAllFrames() {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceFramesNamespace));
            return allData;
        }
        getFrameData(windowId) {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceFramesNamespace));
            return allData.find((data) => data.windowId === windowId);
        }
        setFrameActive(windowId) {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceFramesNamespace));
            const frameData = allData.find((data) => data.windowId === windowId);
            if (!frameData || frameData.active) {
                return;
            }
            frameData.active = true;
            this.sessionStorage.setItem(this.workspaceFramesNamespace, JSON.stringify(allData));
        }
        removeFrameData(windowId) {
            if (!windowId) {
                return false;
            }
            return this.doRemove(windowId, this.workspaceFramesNamespace);
        }
        saveWorkspaceClient(windowData) {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceWindowsNamespace));
            if (allData.some((data) => data.windowId === windowData.windowId)) {
                return;
            }
            allData.push(windowData);
            this.sessionStorage.setItem(this.workspaceWindowsNamespace, JSON.stringify(allData));
        }
        getWorkspaceClientById(windowId) {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceWindowsNamespace));
            return allData.find((data) => data.windowId === windowId);
        }
        pickWorkspaceClients(predicate) {
            const allData = JSON.parse(this.sessionStorage.getItem(this.workspaceWindowsNamespace));
            return allData.filter(predicate);
        }
        removeWorkspaceClient(windowId) {
            if (!windowId) {
                return false;
            }
            return this.doRemove(windowId, this.workspaceWindowsNamespace);
        }
        getAllNonGlue() {
            return JSON.parse(this.sessionStorage.getItem(this.nonGlueNamespace));
        }
        saveNonGlue(data) {
            var _a, _b;
            const allData = JSON.parse(this.sessionStorage.getItem(this.nonGlueNamespace));
            if (allData.some((entry) => entry.windowId === data.windowId)) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`did not save this data: ${JSON.stringify(data)}, because an entry with this id already exists`);
                return false;
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`saving non glue window with id: ${data.windowId}`);
            allData.push(data);
            this.sessionStorage.setItem(this.nonGlueNamespace, JSON.stringify(allData));
            return true;
        }
        removeNonGlue(data) {
            var _a;
            if (!data || !data.windowId) {
                return false;
            }
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`removing non glue window with id: ${data.windowId}`);
            return this.doRemove(data.windowId, this.nonGlueNamespace);
        }
        saveBridgeInstanceData(data) {
            var _a, _b;
            const allData = JSON.parse(this.sessionStorage.getItem(this.bridgeInstancesNamespace));
            if (allData.some((entry) => entry.windowId === data.windowId)) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`did not save this data: ${JSON.stringify(data)}, because an entry with this id already exists`);
                return;
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`saving new instance with id: ${data.windowId} and app name: ${data.appName}`);
            allData.push(data);
            this.sessionStorage.setItem(this.bridgeInstancesNamespace, JSON.stringify(allData));
        }
        getBridgeInstanceData(windowId) {
            const all = JSON.parse(this.sessionStorage.getItem(this.bridgeInstancesNamespace));
            return all.find((e) => e.windowId === windowId);
        }
        removeBridgeInstanceData(windowId) {
            const all = JSON.parse(this.sessionStorage.getItem(this.bridgeInstancesNamespace));
            this.sessionStorage.setItem(this.bridgeInstancesNamespace, JSON.stringify(all.filter((e) => e.windowId !== windowId)));
        }
        saveInstanceData(data) {
            var _a, _b;
            const allData = JSON.parse(this.sessionStorage.getItem(this.instancesNamespace));
            if (allData.some((entry) => entry.id === data.id)) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`did not save this data: ${JSON.stringify(data)}, because an entry with this id already exists`);
                return;
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`saving new instance with id: ${data.id} and app name: ${data.applicationName}`);
            allData.push(data);
            this.sessionStorage.setItem(this.instancesNamespace, JSON.stringify(allData));
        }
        removeInstance(id) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`removing instance with id: ${id}`);
            const all = this.getAllInstancesData();
            this.sessionStorage.setItem(this.instancesNamespace, JSON.stringify(all.filter((e) => e.id !== id)));
            this.removeBridgeInstanceData(id);
        }
        getInstanceData(id) {
            const all = this.getAllInstancesData();
            return all.find((e) => e.id === id);
        }
        getAllInstancesData() {
            return JSON.parse(this.sessionStorage.getItem(this.instancesNamespace));
        }
        removeNotification(id) {
            const allNotifications = JSON.parse(this.sessionStorage.getItem(this.notificationsNamespace));
            const notification = allNotifications.find((notification) => notification.id === id);
            if (notification) {
                this.sessionStorage.setItem(this.notificationsNamespace, JSON.stringify(allNotifications.filter((notification) => notification.id !== id)));
            }
        }
        saveNotification(notification) {
            var _a, _b;
            const allNotifications = JSON.parse(this.sessionStorage.getItem(this.notificationsNamespace));
            if (allNotifications.some((entry) => entry.id === notification.id)) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`did not save this data: ${JSON.stringify(notification)}, because an entry with this id already exists`);
                return;
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`saving notification with id: ${notification.id}`);
            allNotifications.push(notification);
            this.sessionStorage.setItem(this.notificationsNamespace, JSON.stringify(allNotifications));
        }
        getNotification(id) {
            const allNotifications = this.getAllNotifications();
            return allNotifications.find((notification) => notification.id === id);
        }
        getAllNotifications() {
            const allNotifications = JSON.parse(this.sessionStorage.getItem(this.notificationsNamespace));
            return allNotifications;
        }
        saveWindowData(data) {
            var _a, _b;
            const allData = JSON.parse(this.sessionStorage.getItem(this.windowsNamespace));
            if (allData.some((entry) => entry.name === data.name)) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`did not save this data: ${JSON.stringify(data)}, because an entry with this name already exists`);
                return;
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`saving window with id: ${data.windowId} and name: ${data.name}`);
            allData.push(data);
            this.sessionStorage.setItem(this.windowsNamespace, JSON.stringify(allData));
        }
        getAllWindowsData() {
            return JSON.parse(this.sessionStorage.getItem(this.windowsNamespace));
        }
        getWindowDataById(windowId) {
            const all = this.getAllWindowsData();
            return all.find((entry) => entry.windowId === windowId);
        }
        getWindowDataByName(name) {
            const all = this.getAllWindowsData();
            return all.find((entry) => entry.name === name);
        }
        removeWindowData(windowId) {
            var _a;
            if (!windowId) {
                return false;
            }
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`removing window with id: ${windowId}`);
            return this.doRemove(windowId, this.windowsNamespace);
        }
        fullWindowClean(windowId) {
            const windowRemoved = this.removeWindowData(windowId);
            const nonGlueRemoved = this.removeNonGlue({ windowId });
            const workspaceClientRemoved = this.removeWorkspaceClient(windowId);
            return windowRemoved || nonGlueRemoved || workspaceClientRemoved;
        }
        doRemove(id, namespace) {
            const data = JSON.parse(this.sessionStorage.getItem(namespace));
            const result = data.reduce((soFar, entry) => {
                if (entry.windowId === id) {
                    soFar.removed = true;
                }
                else {
                    soFar.newData.push(entry);
                }
                return soFar;
            }, { removed: false, newData: [] });
            this.sessionStorage.setItem(namespace, JSON.stringify(result.newData));
            return result.removed;
        }
    }

    class WindowsStateController {
        constructor(sessionStorage) {
            this.sessionStorage = sessionStorage;
            this.registry = lib();
            this.checkIntervalMs = 500;
            this.childrenToCheck = [];
            this.checkerCancelled = false;
        }
        get logger() {
            return logger.get("state.controller");
        }
        start() {
            const nonGlueWindows = this.sessionStorage.getAllNonGlue();
            nonGlueWindows.forEach((w) => {
                var _a;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`detected non glue window with id ${w.windowId} from previous session, attempting reference refresh`);
                const nativeWindow = window.open(undefined, w.windowId);
                if (nativeWindow) {
                    this.childrenToCheck.push({ window: nativeWindow, windowId: w.windowId });
                }
            });
            this.checkWindows();
        }
        add(child, windowId) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`adding window id: ${windowId} to non glue state checking`);
            const saved = this.sessionStorage.saveNonGlue({ windowId });
            if (saved) {
                this.childrenToCheck.push({ window: child, windowId });
            }
        }
        remove(windowId) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`removing window id: ${windowId} from non glue state checking`);
            this.sessionStorage.removeNonGlue({ windowId });
            this.childrenToCheck = this.childrenToCheck.filter((w) => w.windowId !== windowId);
        }
        cancel() {
            if (this.currentTimeout) {
                clearTimeout(this.currentTimeout);
            }
            this.checkerCancelled = true;
        }
        onWindowDisappeared(cb) {
            return this.registry.add("window-disappear", cb);
        }
        checkWindows() {
            if (this.checkerCancelled) {
                return;
            }
            this.childrenToCheck.forEach((child) => {
                var _a;
                if (!child.window || child.window.closed) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`non glue window ${child.windowId} has disappeared, removing from collections and announcing.`);
                    this.remove(child.windowId);
                    this.registry.execute("window-disappear", child.windowId);
                    return;
                }
            });
            this.currentTimeout = setTimeout(this.checkWindows.bind(this), this.checkIntervalMs);
        }
    }

    const appManagerOperationTypesDecoder = oneOf(constant("appHello"), constant("applicationStart"), constant("instanceStop"), constant("registerWorkspaceApp"), constant("unregisterWorkspaceApp"), constant("export"), constant("import"), constant("remove"), constant("clear"), constant("registerRemoteApps"), constant("operationCheck"));
    const basicInstanceDataDecoder = object({
        id: nonEmptyStringDecoder
    });
    const instanceDataDecoder = object({
        id: nonEmptyStringDecoder,
        applicationName: nonEmptyStringDecoder
    });
    const applicationDataDecoder = object({
        name: nonEmptyStringDecoder,
        type: nonEmptyStringDecoder.where((s) => s === "window", "Expected a value of window"),
        createOptions: applicationDetailsDecoder,
        instances: array(instanceDataDecoder),
        userProperties: optional(anyJson()),
        title: optional(nonEmptyStringDecoder),
        version: optional(nonEmptyStringDecoder),
        icon: optional(nonEmptyStringDecoder),
        caption: optional(nonEmptyStringDecoder)
    });
    object({
        name: nonEmptyStringDecoder,
        type: nonEmptyStringDecoder.where((s) => s === "window", "Expected a value of window"),
        createOptions: applicationDetailsDecoder,
        userProperties: optional(anyJson()),
        title: optional(nonEmptyStringDecoder),
        version: optional(nonEmptyStringDecoder),
        icon: optional(nonEmptyStringDecoder),
        caption: optional(nonEmptyStringDecoder)
    });
    const appHelloSuccessDecoder = object({
        apps: array(applicationDataDecoder)
    });
    const appHelloDecoder = object({
        windowId: optional(nonEmptyStringDecoder)
    });
    const applicationStartConfigDecoder = object({
        name: nonEmptyStringDecoder,
        id: optional(nonEmptyStringDecoder),
        context: optional(anyJson()),
        top: optional(number()),
        left: optional(number()),
        width: optional(nonNegativeNumberDecoder),
        height: optional(nonNegativeNumberDecoder),
        relativeTo: optional(nonEmptyStringDecoder),
        relativeDirection: optional(oneOf(constant("top"), constant("left"), constant("right"), constant("bottom"))),
        waitForAGMReady: optional(boolean()),
        forceChromeTab: optional(boolean()),
        layoutComponentId: optional(nonEmptyStringDecoder)
    });
    const appsImportOperationDecoder = object({
        definitions: array(allApplicationDefinitionsDecoder),
        mode: oneOf(constant("replace"), constant("merge"))
    });
    const appRemoveConfigDecoder = object({
        name: nonEmptyStringDecoder
    });
    const appsExportOperationDecoder = object({
        definitions: array(glueCoreAppDefinitionDecoder)
    });
    const appsRemoteRegistrationDecoder = object({
        definitions: array(allApplicationDefinitionsDecoder)
    });

    class ApplicationsController {
        constructor(glueController, sessionStorage, stateController, appDirectory, ioc) {
            this.glueController = glueController;
            this.sessionStorage = sessionStorage;
            this.stateController = stateController;
            this.appDirectory = appDirectory;
            this.ioc = ioc;
            this.applicationStartTimeoutMs = 15000;
            this.started = false;
            this.locks = {};
            this.operations = {
                appHello: { name: "appHello", dataDecoder: appHelloDecoder, resultDecoder: appHelloSuccessDecoder, execute: this.handleAppHello.bind(this) },
                applicationStart: { name: "applicationStart", dataDecoder: applicationStartConfigDecoder, resultDecoder: instanceDataDecoder, execute: this.handleApplicationStart.bind(this) },
                instanceStop: { name: "instanceStop", dataDecoder: basicInstanceDataDecoder, execute: this.handleInstanceStop.bind(this) },
                registerWorkspaceApp: { name: "registerWorkspaceApp", dataDecoder: workspaceWindowDataDecoder, execute: this.registerWorkspaceApp.bind(this) },
                unregisterWorkspaceApp: { name: "unregisterWorkspaceApp", dataDecoder: simpleWindowDecoder, execute: this.unregisterWorkspaceApp.bind(this) },
                import: { name: "import", dataDecoder: appsImportOperationDecoder, execute: this.handleImport.bind(this) },
                remove: { name: "remove", dataDecoder: appRemoveConfigDecoder, execute: this.handleRemove.bind(this) },
                export: { name: "export", resultDecoder: appsExportOperationDecoder, execute: this.handleExport.bind(this) },
                clear: { name: "clear", execute: this.handleClear.bind(this) },
                registerRemoteApps: { name: "registerRemoteApps", dataDecoder: appsRemoteRegistrationDecoder, execute: this.handleRegisterRemoteApps.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) }
            };
        }
        get logger() {
            return logger.get("applications.controller");
        }
        start(config) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                this.defaultBounds = config.windows.defaultWindowOpenBounds;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("initializing applications");
                this.config = config.applications;
                yield this.appDirectory.start({
                    config: config.applications,
                    appsStateChange: (data) => this.emitStreamData("appDirectoryStateChange", data),
                    sequelizer: this.ioc.createSequelizer()
                });
                this.started = true;
                this.stateController.onWindowDisappeared(this.processInstanceClosed.bind(this));
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("initialization is completed");
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) ;
                const applicationData = args.data;
                const commandId = args.commandId;
                const operationValidation = appManagerOperationTypesDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This appManager request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(applicationData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`AppManager request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(applicationData)}`);
                const result = yield this.operations[operationName].execute(applicationData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`AppManager request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleClientUnloaded(windowId, win) {
            var _a, _b, _c;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`handling unloading of ${windowId}`);
            if (!windowId) {
                return;
            }
            if (!win || win.closed) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`${windowId} detected as closed, processing instance closed`);
                return this.processInstanceClosed(windowId);
            }
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`${windowId} detected as not closed, skipping instance closed procedure`);
        }
        unregisterWorkspaceApp(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                this.processInstanceClosed(config.windowId);
                this.ioc.windowsController.cleanUpWindow(config.windowId);
                this.ioc.portsBridge.removeGwClient(config.windowId);
            });
        }
        handleApplicationStart(config, commandId) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling application start command for application: ${config.name}`);
                const appDefinition = (yield this.appDirectory.getAll()).find((app) => app.name === config.name);
                if (!appDefinition) {
                    throw new Error(`Cannot start an instance of application: ${config.name}, because it is not found.`);
                }
                const id = (_b = config.id) !== null && _b !== void 0 ? _b : `g42-${shortidExports$1.generate()}`;
                const instance = {
                    id,
                    applicationName: config.name
                };
                const openBounds = yield this.getStartingBounds(appDefinition.createOptions, config, commandId);
                const options = config.forceChromeTab ?
                    undefined :
                    `left=${openBounds.left},top=${openBounds.top},width=${openBounds.width},height=${openBounds.height}`;
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] open arguments are valid, opening to bounds: ${options}`);
                const childWindow = window.open(appDefinition.createOptions.url, instance.id, options);
                if (!childWindow) {
                    throw new Error(`Cannot an instance with url: ${appDefinition.createOptions.url} for application: ${config.name}. The most likely reason is that the user has not approved popups or has a blocker.`);
                }
                this.sessionStorage.saveBridgeInstanceData({ windowId: instance.id, appName: instance.applicationName });
                const processConfig = {
                    data: instance,
                    context: config.context
                };
                yield this.processNewInstance(processConfig);
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] the new window has been opened successfully with id: ${instance.id}, checking for AGM ready and notifying windows`);
                if (config.waitForAGMReady) {
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`[${commandId}] wait for AGM is set, configuring the lock`);
                    this.setLock(instance.id);
                }
                yield this.notifyWindows(appDefinition.createOptions.url, instance, openBounds, config.context, childWindow, config.layoutComponentId);
                if (this.locks[instance.id]) {
                    try {
                        yield PromiseWrap(() => { var _a; return (_a = this.locks[instance.id]) === null || _a === void 0 ? void 0 : _a.keyOne; }, this.applicationStartTimeoutMs);
                    }
                    catch (error) {
                        delete this.locks[instance.id];
                        throw new Error(`Application start for ${config.name} timed out waiting for client to initialize Glue`);
                    }
                }
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace(`[${commandId}] the windows controller has been successfully notified`);
                (_g = this.logger) === null || _g === void 0 ? void 0 : _g.trace(`[${commandId}] the new instance with id ${instance.id} has been saved, announced and context set, lifting key two and responding to caller`);
                (_h = this.locks[instance.id]) === null || _h === void 0 ? void 0 : _h.openKeyTwo();
                return instance;
            });
        }
        processInstanceClosed(selfWindowId) {
            if (!selfWindowId) {
                return;
            }
            const instanceData = this.sessionStorage.getInstanceData(selfWindowId);
            if (instanceData) {
                delete this.locks[instanceData.id];
                this.glueController.clearContext(selfWindowId, "instance").catch(() => { });
                this.sessionStorage.removeInstance(instanceData.id);
                this.emitStreamData("instanceStopped", instanceData);
            }
        }
        notifyWindows(url, instance, initialBounds, context, child, layoutComponentId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const windowData = {
                    windowId: instance.id,
                    name: `${instance.applicationName}_${instance.id}`,
                    initialUrl: url,
                    initialContext: context,
                    initialBounds,
                    layoutComponentId
                };
                yield this.ioc.windowsController.processNewWindow(windowData, context, child);
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        handleAppHello(helloMsg, commandId) {
            var _a, _b, _c, _d, _e;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling hello message for id: ${helloMsg.windowId}`);
                if (helloMsg.windowId && this.locks[helloMsg.windowId]) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] found an app lock, unlocking key one and waiting for the second one`);
                    this.locks[helloMsg.windowId].openKeyOne();
                    yield this.locks[helloMsg.windowId].keyTwo;
                    delete this.locks[helloMsg.windowId];
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] the lock is lifted, proceeding`);
                }
                const allInstances = this.sessionStorage.getAllInstancesData();
                const allAppsFull = (yield this.appDirectory.getAll()).map((app) => {
                    const appInstances = allInstances.filter((inst) => inst.applicationName === app.name);
                    return Object.assign({}, app, { instances: appInstances });
                });
                if (helloMsg.windowId) {
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] there is a valid windowId, removing ${helloMsg.windowId} from the state controller`);
                    this.stateController.remove(helloMsg.windowId);
                    const foundApp = allAppsFull.find((app) => app.instances.some((inst) => inst.id === helloMsg.windowId));
                    if (foundApp && foundApp.title) {
                        const windowId = helloMsg.windowId;
                        const title = foundApp.title;
                        PromiseWrap(() => this.glueController.callWindow("windows", this.ioc.windowsController.setTitleOperation, { windowId, title }, { windowId }), 20000)
                            .catch((err) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] error while setting the application instance title: ${err.message}`); });
                    }
                }
                const helloSuccessMessage = { apps: allAppsFull };
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`[${commandId}] compiled a list of all active applications and instances and returning it to the caller`);
                return helloSuccessMessage;
            });
        }
        handleInstanceStop(inst, commandId) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling stop command for instance: ${inst.id}`);
                const workspaceClient = this.sessionStorage.getWorkspaceClientById(inst.id);
                if (workspaceClient) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] this instance is detected as a workspace window, closing via the workspaces controller`);
                    yield this.ioc.workspacesController.closeItem({ itemId: inst.id }, commandId);
                    return;
                }
                const instanceData = this.sessionStorage.getInstanceData(inst.id);
                if (!instanceData) {
                    throw new Error(`Cannot close instance: ${inst.id}, because it is not known by the platform`);
                }
                const windowData = this.sessionStorage.getWindowDataById(inst.id);
                if (!windowData) {
                    throw new Error(`Cannot close instance: ${inst.id}, because it's window is not known by the platform`);
                }
                (_c = window.open(undefined, windowData.windowId)) === null || _c === void 0 ? void 0 : _c.close();
                this.processInstanceClosed(inst.id);
                this.ioc.windowsController.cleanUpWindow(inst.id);
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] instance ${inst.id} has been closed, removed from store, announced stopped and notified windows, responding to caller`);
            });
        }
        handleRegisterRemoteApps(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling remote bypass command`);
                if (this.config.remote) {
                    throw new Error(`[${commandId}] cannot accept remote apps from the protocol, because there is an active remote configuration.`);
                }
                yield this.appDirectory.processAppDefinitions(config.definitions, { mode: "replace", type: "remote" });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] remote bypass command completed`);
                return;
            });
        }
        handleImport(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling import command`);
                yield this.appDirectory.processAppDefinitions(config.definitions, { type: "inmemory", mode: config.mode });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] import command completed`);
                return;
            });
        }
        handleRemove(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling remove command for ${config.name}`);
                const removed = yield this.appDirectory.removeInMemory(config.name);
                if (removed) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`definition ${removed.name} removed successfully`);
                    this.emitStreamData("appDirectoryStateChange", { appsRemoved: [removed], appsAdded: [], appsChanged: [] });
                }
            });
        }
        handleExport(_, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling export command`);
                const definitions = yield this.appDirectory.exportInMemory();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] export command successful`);
                return { definitions };
            });
        }
        handleClear(_, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling clear command`);
                yield this.appDirectory.processAppDefinitions([], { type: "inmemory", mode: "replace" });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] all in-memory apps are cleared`);
            });
        }
        setLock(id) {
            const lock = {};
            const keyOne = new Promise((resolve) => {
                lock.openKeyOne = resolve;
            });
            const keyTwo = new Promise((resolve) => {
                lock.openKeyTwo = resolve;
            });
            lock.keyOne = keyOne;
            lock.keyTwo = keyTwo;
            this.locks[id] = lock;
        }
        registerWorkspaceApp(data, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!data.appName) {
                    throw new Error(`Cannot register application with config: ${JSON.stringify(data)}, because no app name was found`);
                }
                const allAppDefinitions = yield this.appDirectory.getAll();
                if (data.appName === defaultNoAppWindowComponentAppName) {
                    return yield this.ioc.windowsController.registerWorkspaceWindow(data, commandId);
                }
                if (!allAppDefinitions.some((app) => app.name === data.appName)) {
                    throw new Error(`Cannot register application with config: ${JSON.stringify(data)}, because no app with this name name was found`);
                }
                this.sessionStorage.saveBridgeInstanceData({ windowId: data.windowId, appName: data.appName });
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] processing valid workspace application registration with id ${data.windowId}, app name ${data.appName} and frame ${data.frameId}`);
                if (data.context) {
                    yield this.glueController.setStartContext(data.windowId, data.context, "instance");
                }
                const instanceData = { id: data.windowId, applicationName: data.appName };
                this.sessionStorage.saveInstanceData(instanceData);
                this.emitStreamData("instanceStarted", instanceData);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] instance registration is completed and announced, calling windows registration`);
                yield this.ioc.windowsController.registerWorkspaceWindow(data, commandId);
            });
        }
        processNewInstance(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (config.context) {
                    yield this.glueController.setStartContext(config.data.id, config.context, "instance");
                }
                this.sessionStorage.saveInstanceData(config.data);
                this.emitStreamData("instanceStarted", config.data);
            });
        }
        emitStreamData(operation, data) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`sending notification of event: ${operation} with data: ${JSON.stringify(data)}`);
            this.glueController.pushSystemMessage("appManager", operation, data);
        }
        getStartingBounds(appDefOptions, openOptions, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const openBounds = {
                    top: openOptions.top || appDefOptions.top || this.defaultBounds.top,
                    left: openOptions.left || appDefOptions.left || this.defaultBounds.left,
                    width: openOptions.width || appDefOptions.width || this.defaultBounds.width,
                    height: openOptions.height || appDefOptions.height || this.defaultBounds.height
                };
                if (!openOptions.relativeTo) {
                    return openBounds;
                }
                try {
                    const relativeWindowBounds = yield this.ioc.windowsController.getWindowBounds(openOptions.relativeTo, commandId);
                    const relativeDir = (_a = openOptions.relativeDirection) !== null && _a !== void 0 ? _a : "right";
                    const newBounds = getRelativeBounds(openBounds, relativeWindowBounds, relativeDir);
                    return newBounds;
                }
                catch (error) {
                    return openBounds;
                }
            });
        }
    }

    const layoutsOperationTypesDecoder = oneOf(constant("get"), constant("getAll"), constant("export"), constant("import"), constant("remove"), constant("save"), constant("restore"), constant("getRawWindowsLayoutData"), constant("clientSaveRequest"), constant("getGlobalPermissionState"), constant("checkGlobalActivated"), constant("requestGlobalPermission"), constant("operationCheck"));
    const newLayoutOptionsDecoder = object({
        name: nonEmptyStringDecoder,
        context: optional(anyJson()),
        metadata: optional(anyJson()),
        instances: optional(array(nonEmptyStringDecoder)),
        ignoreInstances: optional(array(nonEmptyStringDecoder))
    });
    const restoreOptionsDecoder = object({
        name: nonEmptyStringDecoder,
        context: optional(anyJson()),
        closeRunningInstance: optional(boolean()),
        closeMe: optional(boolean()),
        timeout: optional(nonNegativeNumberDecoder)
    });
    const simpleLayoutConfigDecoder = object({
        name: nonEmptyStringDecoder,
        type: layoutTypeDecoder
    });
    const getAllLayoutsConfigDecoder = object({
        type: layoutTypeDecoder
    });
    const saveLayoutConfigDecoder = object({
        layout: newLayoutOptionsDecoder
    });
    const restoreLayoutConfigDecoder = object({
        layout: restoreOptionsDecoder
    });
    const allLayoutsFullConfigDecoder = object({
        layouts: array(glueLayoutDecoder)
    });
    const importModeDecoder = oneOf(constant("replace"), constant("merge"));
    const layoutsImportConfigDecoder = object({
        layouts: array(glueLayoutDecoder),
        mode: importModeDecoder
    });
    const allLayoutsSummariesResultDecoder = object({
        summaries: array(layoutSummaryDecoder$1)
    });
    object({
        layout: glueLayoutDecoder
    });
    const optionalSimpleLayoutResult = object({
        layout: optional(glueLayoutDecoder)
    });
    const rawWindowsLayoutDataRequestConfigDecoder = object({
        layoutType: oneOf(constant("Global"), constant("Workspace")),
        layoutName: nonEmptyStringDecoder,
        context: optional(anyJson()),
        instances: optional(array(nonEmptyStringDecoder)),
        ignoreInstances: optional(array(nonEmptyStringDecoder))
    });
    const saveRequestClientResponseDecoder = object({
        windowContext: optional(anyJson()),
    });
    const fullSaveRequestResponseDecoder = object({
        bounds: windowBoundsDecoder,
        windowContext: optional(anyJson()),
        url: nonEmptyStringDecoder,
        name: nonEmptyStringDecoder,
        application: nonEmptyStringDecoder,
        windowId: nonEmptyStringDecoder,
        initialContext: optional(anyJson())
    });
    object({
        windowContext: optional(anyJson()),
        windowId: nonEmptyStringDecoder,
        frameId: nonEmptyStringDecoder
    });
    const windowsRawLayoutDataDecoder = object({
        windows: array(fullSaveRequestResponseDecoder)
    });
    const permissionStateResultDecoder = object({
        state: oneOf(constant("prompt"), constant("denied"), constant("granted"))
    });
    const simpleAvailabilityResultDecoder = object({
        isAvailable: boolean()
    });

    class LayoutsController {
        constructor(glueController, idbStore, sessionStore, windowsController) {
            this.glueController = glueController;
            this.idbStore = idbStore;
            this.sessionStore = sessionStore;
            this.windowsController = windowsController;
            this.started = false;
            this.operations = {
                get: { name: "get", dataDecoder: simpleLayoutConfigDecoder, resultDecoder: optionalSimpleLayoutResult, execute: this.handleGetLayout.bind(this) },
                getAll: { name: "getAll", dataDecoder: getAllLayoutsConfigDecoder, resultDecoder: allLayoutsSummariesResultDecoder, execute: this.handleGetAll.bind(this) },
                export: { name: "export", dataDecoder: getAllLayoutsConfigDecoder, resultDecoder: allLayoutsFullConfigDecoder, execute: this.handleExport.bind(this) },
                import: { name: "import", dataDecoder: layoutsImportConfigDecoder, execute: this.handleImport.bind(this) },
                remove: { name: "remove", dataDecoder: simpleLayoutConfigDecoder, execute: this.handleRemove.bind(this) },
                save: { name: "save", dataDecoder: saveLayoutConfigDecoder, execute: this.handleSave.bind(this) },
                restore: { name: "restore", dataDecoder: restoreLayoutConfigDecoder, execute: this.handleRestore.bind(this) },
                getRawWindowsLayoutData: { name: "getRawWindowsLayoutData", dataDecoder: rawWindowsLayoutDataRequestConfigDecoder, resultDecoder: windowsRawLayoutDataDecoder, execute: this.handleGetRawWindowsLayoutData.bind(this) },
                clientSaveRequest: { name: "clientSaveRequest", dataDecoder: rawWindowsLayoutDataRequestConfigDecoder, resultDecoder: saveRequestClientResponseDecoder, execute: () => __awaiter$3(this, void 0, void 0, function* () { }) },
                getGlobalPermissionState: { name: "getGlobalPermissionState", resultDecoder: permissionStateResultDecoder, execute: this.handleGetGlobalPermissionState.bind(this) },
                requestGlobalPermission: { name: "requestGlobalPermission", resultDecoder: simpleAvailabilityResultDecoder, execute: this.handleRequestGlobalPermission.bind(this) },
                checkGlobalActivated: { name: "checkGlobalActivated", resultDecoder: simpleAvailabilityResultDecoder, execute: this.handleCheckGlobalActivated.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) }
            };
        }
        get logger() {
            return logger.get("layouts.controller");
        }
        start(config) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                this.config = config.layouts;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`initializing with mode: ${this.config.mode}`);
                if (this.config.local && this.config.local.length) {
                    const localGlobalLayouts = this.config.local.filter((layout) => layout.type === "Global");
                    const localWorkspaceLayouts = this.config.local.filter((layout) => layout.type === "Workspace");
                    yield Promise.all([
                        this.mergeImport(localGlobalLayouts, "Global"),
                        this.mergeImport(localWorkspaceLayouts, "Workspace")
                    ]);
                }
                this.started = true;
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("initialization is completed");
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) ;
                const layoutsData = args.data;
                const commandId = args.commandId;
                const operationValidation = layoutsOperationTypesDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This layouts request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(layoutsData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`Layouts request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(layoutsData)}`);
                const result = yield this.operations[operationName].execute(layoutsData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`Layouts request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleSave(config, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling save layout with config: ${JSON.stringify(config)}`);
                throw new Error("This Web Platform cannot save Global Layouts.");
            });
        }
        handleRestore(config, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling restore layout with config: ${JSON.stringify(config)}`);
                throw new Error(`This Web Platform cannot restore Global Layouts.`);
            });
        }
        handleGetAll(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling get all layout summaries request for type: ${config.type}`);
                const allLayouts = yield this.getAll(config.type);
                const summaries = allLayouts.map((layout) => {
                    return {
                        name: layout.name,
                        type: layout.type,
                        context: layout.context,
                        metadata: layout.metadata
                    };
                });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] all summaries have been compiled, responding to caller`);
                return { summaries };
            });
        }
        handleExport(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling get all layout full request for type: ${config.type}`);
                const layouts = yield this.getAll(config.type);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] full layouts collection have been compiled, responding to caller`);
                return { layouts };
            });
        }
        handleImport(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling mass import request for layout names: ${config.layouts.map((l) => l.name).join(", ")}`);
                const importExecution = config.mode === "merge" ? this.mergeImport.bind(this) : this.replaceImport.bind(this);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] importing the layouts in ${config.mode} mode`);
                const workspaceLayouts = config.layouts.filter((layout) => layout.type === "Workspace");
                const globalLayouts = config.layouts.filter((layout) => layout.type === "Global");
                yield Promise.all([
                    importExecution(globalLayouts, "Global"),
                    importExecution(workspaceLayouts, "Workspace")
                ]);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] mass import completed, responding to caller`);
            });
        }
        handleRemove(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling remove request for ${JSON.stringify(config)}`);
                const layout = (yield this.getAll(config.type)).find((l) => l.name === config.name && l.type === config.type);
                if (layout) {
                    yield this.delete(config.name, config.type);
                    this.emitStreamData("layoutRemoved", layout);
                }
                const operationMessage = layout ? "has been removed" : "has not been removed, because it does not exist";
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] ${config.name} of type ${config.type} ${operationMessage}`);
            });
        }
        handleGetLayout(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling get layout request for name: ${config.name} and type: ${config.type}`);
                const allLayouts = yield this.getAll(config.type);
                const layout = allLayouts.find((l) => l.name === config.name);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] request completed, responding to the caller`);
                return { layout };
            });
        }
        handleGetRawWindowsLayoutData(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling send save requests for layout: ${config.layoutName} to instances: ${(_b = config.instances) === null || _b === void 0 ? void 0 : _b.join(", ")}`);
                const glueWindowsRawData = yield Promise.all(this.getEligibleGlueWindows(config.instances, config.ignoreInstances).map((glueWindow) => this.buildRawGlueWindowData(glueWindow, config, commandId)));
                const nonGlueWindowsRawData = yield Promise.all(this.getEligibleNonGlueWindows(config.instances, config.ignoreInstances).map((glueWindow) => this.buildRawNonGlueWindowData(glueWindow, config, commandId)));
                const result = {
                    windows: [...glueWindowsRawData, ...nonGlueWindowsRawData]
                };
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] request completed, responding to the caller`);
                return result;
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        buildRawGlueWindowData(windowData, requestConfig, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const timeoutMessage = `Cannot fetch the layout save data from: ${windowData.name} with id: ${windowData.windowId}`;
                if (!windowData.initialUrl) {
                    throw new Error(`Missing URL for client: ${windowData.name}`);
                }
                const saveRequestResponse = yield PromiseWrap(() => __awaiter$3(this, void 0, void 0, function* () {
                    try {
                        const clientResponse = yield this.glueController.callWindow("layouts", this.operations.clientSaveRequest, requestConfig, { windowId: windowData.windowId });
                        return clientResponse;
                    }
                    catch (error) {
                        return {};
                    }
                }), 15000, timeoutMessage);
                const instanceData = this.sessionStore.getAllInstancesData().find((instance) => instance.id === windowData.windowId);
                const windowBounds = yield this.windowsController.getWindowBounds(windowData.windowId, commandId);
                const clientProvidedContext = (_a = saveRequestResponse.windowContext) !== null && _a !== void 0 ? _a : {};
                return {
                    bounds: windowBounds,
                    windowContext: clientProvidedContext,
                    url: windowData.initialUrl,
                    name: windowData.name,
                    application: instanceData ? instanceData.applicationName : defaultNoAppWindowComponentAppName,
                    initialContext: windowData.initialContext,
                    windowId: windowData.windowId,
                    layoutComponentId: windowData.layoutComponentId
                };
            });
        }
        buildRawNonGlueWindowData(windowData, requestConfig, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!windowData.initialUrl) {
                    throw new Error(`Missing URL for client: ${windowData.name}`);
                }
                const instanceData = this.sessionStore.getAllInstancesData().find((instance) => instance.id === windowData.windowId);
                return {
                    bounds: (_a = windowData.initialBounds) !== null && _a !== void 0 ? _a : defaultPlatformConfig.windows.defaultWindowOpenBounds,
                    windowContext: {},
                    url: windowData.initialUrl,
                    name: windowData.name,
                    application: instanceData ? instanceData.applicationName : defaultNoAppWindowComponentAppName,
                    initialContext: windowData.initialContext,
                    windowId: windowData.windowId,
                    layoutComponentId: windowData.layoutComponentId
                };
            });
        }
        handleGetGlobalPermissionState(args, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling Get Global Permission State request`);
                const { state } = yield navigator.permissions.query({ name: "window-placement" });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] request completed with state: ${state}, responding to the caller`);
                return { state };
            });
        }
        handleRequestGlobalPermission(args, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling Request Global Permission command`);
                const { state } = yield navigator.permissions.query({ name: "window-placement" });
                if (state === "granted") {
                    return { isAvailable: true };
                }
                if (state === "denied") {
                    return { isAvailable: false };
                }
                try {
                    yield window.getScreenDetails();
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] request completed, responding to the caller`);
                    return { isAvailable: true };
                }
                catch (error) {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] request completed, responding to the caller`);
                    return { isAvailable: false };
                }
            });
        }
        handleCheckGlobalActivated(args, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling Check Global Activated request`);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] request completed, responding to the caller`);
                return { isAvailable: false };
            });
        }
        emitStreamData(operation, data) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`sending notification of event: ${operation} with data: ${JSON.stringify(data)}`);
            this.glueController.pushSystemMessage("layouts", operation, data);
        }
        mergeImport(layouts, type) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                const currentLayouts = yield this.getAll(type);
                const pendingEvents = [];
                for (const layout of layouts) {
                    const defCurrentIdx = currentLayouts.findIndex((app) => app.name === layout.name);
                    if (defCurrentIdx > -1 && !objEqual(layout, currentLayouts[defCurrentIdx])) {
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`change detected at layout ${layout.name}`);
                        pendingEvents.push({ operation: "layoutChanged", layout });
                        currentLayouts[defCurrentIdx] = layout;
                        continue;
                    }
                    if (defCurrentIdx < 0) {
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`new layout: ${layout.name} detected, adding and announcing`);
                        pendingEvents.push({ operation: "layoutAdded", layout });
                        currentLayouts.push(layout);
                    }
                }
                yield this.cleanSave(currentLayouts, type);
                yield this.announceEvents(pendingEvents);
            });
        }
        replaceImport(layouts, type) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                const currentLayouts = yield this.getAll(type);
                const pendingEvents = [];
                for (const layout of layouts) {
                    const defCurrentIdx = currentLayouts.findIndex((app) => app.name === layout.name);
                    if (defCurrentIdx < 0) {
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`new layout: ${layout.name} detected, adding and announcing`);
                        pendingEvents.push({ operation: "layoutAdded", layout });
                        continue;
                    }
                    if (!objEqual(layout, currentLayouts[defCurrentIdx])) {
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`change detected at layout ${layout.name}`);
                        pendingEvents.push({ operation: "layoutChanged", layout });
                    }
                    currentLayouts.splice(defCurrentIdx, 1);
                }
                currentLayouts.forEach((layout) => {
                    var _a;
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`layout ${layout.name} missing, removing and announcing`);
                    pendingEvents.push({ operation: "layoutRemoved", layout });
                });
                yield this.cleanSave(layouts, type);
                yield this.announceEvents(pendingEvents);
            });
        }
        announceEvents(events) {
            return __awaiter$3(this, void 0, void 0, function* () {
                let batchCount = 0;
                for (const event of events) {
                    ++batchCount;
                    if (batchCount % 10 === 0) {
                        yield this.waitEventFlush();
                    }
                    this.emitStreamData(event.operation, event.layout);
                }
            });
        }
        getAll(type) {
            return __awaiter$3(this, void 0, void 0, function* () {
                let all;
                if (this.config.mode === "idb") {
                    all = yield this.idbStore.getAll(type);
                }
                else {
                    all = this.sessionStore.getLayoutSnapshot(type).layouts;
                }
                return all;
            });
        }
        cleanSave(layouts, type) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (this.config.mode === "idb") {
                    yield this.idbStore.clear(type);
                    for (const layout of layouts) {
                        yield this.idbStore.store(layout, layout.type);
                    }
                    return;
                }
                this.sessionStore.saveLayoutSnapshot({ layouts }, type);
            });
        }
        delete(name, type) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (this.config.mode === "idb") {
                    yield this.idbStore.delete(name, type);
                    return;
                }
                const all = this.sessionStore.getLayoutSnapshot(type).layouts;
                const idxToRemove = all.findIndex((l) => l.name === name && l.type);
                if (idxToRemove > -1) {
                    all.splice(idxToRemove, 1);
                }
                this.sessionStore.saveLayoutSnapshot({ layouts: all }, type);
            });
        }
        getEligibleNonGlueWindows(requestedInstances, ignoreInstances) {
            const allEligibleWindows = this.getAllEligibleWindows(requestedInstances, ignoreInstances);
            const allNonGlueWindows = this.sessionStore.getAllNonGlue();
            const allWorkspaceClients = this.sessionStore.pickWorkspaceClients(() => true);
            return allEligibleWindows
                .filter((eligibleWindow) => allNonGlueWindows.some((nonGlueWebWindow) => nonGlueWebWindow.windowId === eligibleWindow.windowId) &&
                allWorkspaceClients.every((workspaceClient) => workspaceClient.windowId !== eligibleWindow.windowId));
        }
        getEligibleGlueWorkspaceWindows(requestedInstances, ignoreInstances) {
            let allEligibleWindows = this.getAllEligibleWindows(requestedInstances, ignoreInstances);
            const allNonGlueWindows = this.sessionStore.getAllNonGlue();
            allEligibleWindows = allEligibleWindows.filter((eligibleWindow) => allNonGlueWindows.every((nonGlueWebWindow) => nonGlueWebWindow.windowId !== eligibleWindow.windowId));
            const allWorkspaceClients = this.sessionStore.pickWorkspaceClients(() => true);
            const allFrames = this.sessionStore.getAllFrames();
            const platformFrame = allFrames.find((frame) => frame.isPlatform);
            return allEligibleWindows
                .filter((eligibleWindow) => {
                const correspondingWorkspaceWindow = allWorkspaceClients.find((wspClient) => wspClient.windowId === eligibleWindow.windowId);
                if (platformFrame) {
                    return !(correspondingWorkspaceWindow && correspondingWorkspaceWindow.frameId === platformFrame.windowId);
                }
                return !!correspondingWorkspaceWindow;
            });
        }
        getEligibleGlueWindows(requestedInstances, ignoreInstances) {
            const allEligibleWindows = this.getAllEligibleWindows(requestedInstances, ignoreInstances);
            const allNonGlueWindows = this.sessionStore.getAllNonGlue();
            const allWorkspaceClients = this.sessionStore.pickWorkspaceClients(() => true);
            return allEligibleWindows
                .filter((eligibleWindow) => allWorkspaceClients.every((workspaceClient) => workspaceClient.windowId !== eligibleWindow.windowId) &&
                allNonGlueWindows.every((nonGlueWebWindow) => nonGlueWebWindow.windowId !== eligibleWindow.windowId));
        }
        getAllEligibleWindows(requestedInstances, ignoreInstances) {
            let allNonPlatformWindows = this.sessionStore.getAllWindowsData().filter((webWindow) => webWindow.name !== "Platform");
            if (requestedInstances && requestedInstances.length) {
                const requestedServers = this.glueController.getServers().filter((server) => requestedInstances.some((instanceId) => server.instance === instanceId));
                allNonPlatformWindows = allNonPlatformWindows.filter((eligibleWindow) => requestedServers.some((server) => server.windowId === eligibleWindow.windowId));
            }
            if (ignoreInstances && ignoreInstances.length) {
                const ignoredServers = this.glueController.getServers().filter((server) => ignoreInstances.some((instanceId) => server.instance === instanceId));
                allNonPlatformWindows = allNonPlatformWindows.filter((eligibleWindow) => ignoredServers.every((server) => server.windowId !== eligibleWindow.windowId));
            }
            return allNonPlatformWindows;
        }
        waitEventFlush() {
            return new Promise((resolve) => setTimeout(resolve, 10));
        }
    }

    class IdbLayoutsStore {
        constructor(ioc) {
            this.ioc = ioc;
            if (!("indexedDB" in window)) {
                throw new Error("Cannot initialize the local storage, because IndexedDb is not supported");
            }
        }
        get database() {
            return this.ioc.getDatabase();
        }
        getAll(layoutType) {
            return __awaiter$3(this, void 0, void 0, function* () {
                switch (layoutType) {
                    case "Workspace": return (yield this.database).getAll("workspaceLayouts");
                    case "Global": return (yield this.database).getAll("globalLayouts");
                    default: throw new Error(`The provided layout type is not recognized: ${layoutType}`);
                }
            });
        }
        delete(name, layoutType) {
            return __awaiter$3(this, void 0, void 0, function* () {
                switch (layoutType) {
                    case "Workspace": return (yield this.database).delete("workspaceLayouts", name);
                    case "Global": return (yield this.database).delete("globalLayouts", name);
                    default: throw new Error(`The provided layout type is not recognized: ${layoutType}`);
                }
            });
        }
        clear(layoutType) {
            return __awaiter$3(this, void 0, void 0, function* () {
                switch (layoutType) {
                    case "Workspace": return (yield this.database).clear("workspaceLayouts");
                    case "Global": return (yield this.database).clear("globalLayouts");
                    default: throw new Error(`The provided layout type is not recognized: ${layoutType}`);
                }
            });
        }
        get(name, layoutType) {
            return __awaiter$3(this, void 0, void 0, function* () {
                switch (layoutType) {
                    case "Workspace": return (yield this.database).get("workspaceLayouts", name);
                    case "Global": return (yield this.database).get("globalLayouts", name);
                    default: throw new Error(`The provided layout type is not recognized: ${layoutType}`);
                }
            });
        }
        store(layout, layoutType) {
            return __awaiter$3(this, void 0, void 0, function* () {
                glueLayoutDecoder.runWithException(layout);
                layoutTypeDecoder.runWithException(layoutType);
                switch (layoutType) {
                    case "Workspace": return (yield this.database).put("workspaceLayouts", layout, layout.name);
                    case "Global": return (yield this.database).put("globalLayouts", layout, layout.name);
                    default: throw new Error(`The provided layout type is not recognized: ${layoutType}`);
                }
            });
        }
    }

    const defaultLoadingConfig = {
        defaultStrategy: "direct",
        delayed: {
            batch: 1,
            initialOffsetInterval: 1000,
            interval: 5000
        },
        showDelayedIndicator: false
    };

    class WorkspacesController {
        constructor(framesController, glueController, stateController, hibernationWatcher, ioc) {
            this.framesController = framesController;
            this.glueController = glueController;
            this.stateController = stateController;
            this.hibernationWatcher = hibernationWatcher;
            this.ioc = ioc;
            this.started = false;
            this.operations = {
                frameHello: { name: "frameHello", dataDecoder: frameHelloDecoder, execute: this.handleFrameHello.bind(this) },
                isWindowInWorkspace: { name: "isWindowInWorkspace", dataDecoder: simpleItemConfigDecoder, resultDecoder: isWindowInSwimlaneResultDecoder, execute: this.isWindowInWorkspace.bind(this) },
                createWorkspace: { name: "createWorkspace", dataDecoder: workspaceCreateConfigDecoder, resultDecoder: workspaceSnapshotResultDecoder, execute: this.createWorkspace.bind(this) },
                createFrame: { name: "createFrame", resultDecoder: frameSummaryResultDecoder, execute: this.createFrame.bind(this) },
                initFrame: { name: "initFrame", resultDecoder: voidResultDecoder, execute: this.initFrame.bind(this) },
                getAllFramesSummaries: { name: "getAllFramesSummaries", resultDecoder: frameSummariesResultDecoder, execute: this.getAllFramesSummaries.bind(this) },
                getFrameSummary: { name: "getFrameSummary", dataDecoder: getFrameSummaryConfigDecoder, resultDecoder: frameSummaryDecoder, execute: this.getFrameSummary.bind(this) },
                getAllWorkspacesSummaries: { name: "getAllWorkspacesSummaries", resultDecoder: workspaceSummariesResultDecoder, execute: this.getAllWorkspacesSummaries.bind(this) },
                getWorkspaceSnapshot: { name: "getWorkspaceSnapshot", dataDecoder: simpleItemConfigDecoder, resultDecoder: workspaceSnapshotResultDecoder, execute: this.getWorkspaceSnapshot.bind(this) },
                getAllLayoutsSummaries: { name: "getAllLayoutsSummaries", resultDecoder: layoutSummariesDecoder, execute: this.getAllLayoutsSummaries.bind(this) },
                openWorkspace: { name: "openWorkspace", dataDecoder: openWorkspaceConfigDecoder, resultDecoder: workspaceSnapshotResultDecoder, execute: this.openWorkspace.bind(this) },
                deleteLayout: { name: "deleteLayout", dataDecoder: deleteLayoutConfigDecoder, resultDecoder: voidResultDecoder, execute: this.deleteLayout.bind(this) },
                saveLayout: { name: "saveLayout", dataDecoder: workspaceLayoutSaveConfigDecoder, resultDecoder: workspaceLayoutDecoder, execute: this.saveLayout.bind(this) },
                importLayout: { name: "importLayout", dataDecoder: workspacesLayoutImportConfigDecoder, resultDecoder: voidResultDecoder, execute: this.importLayout.bind(this) },
                exportAllLayouts: { name: "exportAllLayouts", resultDecoder: exportedLayoutsResultDecoder, execute: this.exportAllLayouts.bind(this) },
                restoreItem: { name: "restoreItem", dataDecoder: simpleItemConfigDecoder, resultDecoder: voidResultDecoder, execute: this.restoreItem.bind(this) },
                maximizeItem: { name: "maximizeItem", dataDecoder: simpleItemConfigDecoder, resultDecoder: voidResultDecoder, execute: this.maximizeItem.bind(this) },
                focusItem: { name: "focusItem", dataDecoder: simpleItemConfigDecoder, resultDecoder: voidResultDecoder, execute: this.focusItem.bind(this) },
                closeItem: { name: "closeItem", dataDecoder: simpleItemConfigDecoder, resultDecoder: voidResultDecoder, execute: this.closeItem.bind(this) },
                resizeItem: { name: "resizeItem", dataDecoder: resizeItemConfigDecoder, resultDecoder: voidResultDecoder, execute: this.resizeItem.bind(this) },
                changeFrameState: { name: "changeFrameState", dataDecoder: frameStateConfigDecoder, resultDecoder: voidResultDecoder, execute: this.changeFrameState.bind(this) },
                getFrameState: { name: "getFrameState", dataDecoder: simpleItemConfigDecoder, resultDecoder: frameStateResultDecoder, execute: this.getFrameState.bind(this) },
                getFrameBounds: { name: "getFrameBounds", dataDecoder: simpleItemConfigDecoder, resultDecoder: frameBoundsResultDecoder, execute: this.getFrameBounds.bind(this) },
                moveFrame: { name: "moveFrame", dataDecoder: moveFrameConfigDecoder, resultDecoder: voidResultDecoder, execute: this.moveFrame.bind(this) },
                getFrameSnapshot: { name: "getFrameSnapshot", dataDecoder: frameSnapshotConfigDecoder, resultDecoder: frameSnapshotResultDecoder, execute: this.getFrameSnapshot.bind(this) },
                forceLoadWindow: { name: "forceLoadWindow", dataDecoder: simpleItemConfigDecoder, resultDecoder: simpleWindowOperationSuccessResultDecoder, execute: this.forceLoadWindow.bind(this) },
                ejectWindow: { name: "ejectWindow", dataDecoder: simpleItemConfigDecoder, resultDecoder: simpleWindowOperationSuccessResultDecoder, execute: this.ejectWindow.bind(this) },
                setItemTitle: { name: "setItemTitle", dataDecoder: setItemTitleConfigDecoder, resultDecoder: voidResultDecoder, execute: this.setItemTitle.bind(this) },
                moveWindowTo: { name: "moveWindowTo", dataDecoder: moveWindowConfigDecoder, resultDecoder: voidResultDecoder, execute: this.moveWindowTo.bind(this) },
                addWindow: { name: "addWindow", dataDecoder: addWindowConfigDecoder, resultDecoder: addItemResultDecoder, execute: this.addWindow.bind(this) },
                addContainer: { name: "addContainer", dataDecoder: addContainerConfigDecoder, resultDecoder: addItemResultDecoder, execute: this.addContainer.bind(this) },
                bundleWorkspace: { name: "bundleWorkspace", dataDecoder: bundleWorkspaceConfigDecoder, resultDecoder: voidResultDecoder, execute: this.bundleWorkspace.bind(this) },
                bundleItem: { name: "bundleItem", dataDecoder: bundleItemConfigDecoder, resultDecoder: voidResultDecoder, execute: this.bundleItem.bind(this) },
                hibernateWorkspace: { name: "hibernateWorkspace", dataDecoder: workspaceSelectorDecoder, resultDecoder: voidResultDecoder, execute: this.hibernateWorkspace.bind(this) },
                resumeWorkspace: { name: "resumeWorkspace", dataDecoder: workspaceSelectorDecoder, resultDecoder: voidResultDecoder, execute: this.resumeWorkspace.bind(this) },
                getWorkspacesConfig: { name: "getWorkspacesConfig", resultDecoder: workspacesConfigDecoder, execute: this.getWorkspacesConfiguration.bind(this) },
                lockWorkspace: { name: "lockWorkspace", dataDecoder: lockWorkspaceDecoder, resultDecoder: voidResultDecoder, execute: this.lockWorkspace.bind(this) },
                lockWindow: { name: "lockWindow", dataDecoder: lockWindowDecoder, resultDecoder: voidResultDecoder, execute: this.lockWindow.bind(this) },
                lockContainer: { name: "lockContainer", dataDecoder: lockContainerDecoder, resultDecoder: voidResultDecoder, execute: this.lockContainer.bind(this) },
                pinWorkspace: { name: "pinWorkspace", dataDecoder: pinWorkspaceDecoder, resultDecoder: voidResultDecoder, execute: this.pinWorkspace.bind(this) },
                unpinWorkspace: { name: "unpinWorkspace", dataDecoder: workspaceSelectorDecoder, resultDecoder: voidResultDecoder, execute: this.unpinWorkspace.bind(this) },
                getWorkspaceIcon: { name: "getWorkspaceIcon", dataDecoder: workspaceSelectorDecoder, resultDecoder: workspaceIconDecoder, execute: this.getWorkspaceIcon.bind(this) },
                setWorkspaceIcon: { name: "setWorkspaceIcon", dataDecoder: setWorkspaceIconDecoder, resultDecoder: voidResultDecoder, execute: this.setWorkspaceIcon.bind(this) },
                checkStarted: { name: "checkStarted", execute: this.handleCheckStarted.bind(this) },
                getPlatformFrameId: { name: "getPlatformFrameId", execute: this.handleGetPlatformFrameId.bind(this) },
                getWorkspacesLayouts: { name: "getWorkspacesLayouts", dataDecoder: getWorkspacesLayoutsConfigDecoder, resultDecoder: getWorkspacesLayoutsResponseDecoder, execute: this.handleGetWorkspacesLayouts.bind(this) },
                getWorkspaceWindowsOnLayoutSaveContext: { name: "getWorkspaceWindowsOnLayoutSaveContext", dataDecoder: getWorkspaceWindowsOnLayoutSaveContextConfigDecoder, resultDecoder: getWorkspaceWindowsOnLayoutSaveContextResult, execute: this.handleGetWorkspaceWindowsOnLayoutSaveContext.bind(this) },
                setMaximizationBoundary: { name: "setMaximizationBoundary", dataDecoder: setMaximizationBoundaryConfigDecoder, resultDecoder: voidResultDecoder, execute: this.handleSetMaximizationBoundary.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) },
                getWorkspaceWindowFrameBounds: { name: "getWorkspaceWindowFrameBounds", resultDecoder: frameBoundsResultDecoder, dataDecoder: simpleItemConfigDecoder, execute: this.getWorkspaceWindowFrameBounds.bind(this) },
                focusChange: { name: "focusChange", dataDecoder: focusEventDataDecoder, execute: this.handleFocusEvent.bind(this) }
            };
        }
        start(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!config.workspaces) {
                    this.started = false;
                    return;
                }
                this.settings = this.applyDefaults(config.workspaces);
                if (this.settings.hibernation) {
                    this.hibernationWatcher.start(this, this.settings.hibernation);
                }
                yield Promise.all([
                    this.glueController.createWorkspacesStream(),
                    this.glueController.createWorkspacesEventsReceiver(this.bridgeWorkspaceEvent.bind(this))
                ]);
                yield this.framesController.start(config.workspaces, config.windows.defaultWindowOpenBounds, this.operations.getFrameSummary);
                this.stateController.onWindowDisappeared((windowId) => this.framesController.handleFrameDisappeared(windowId));
                this.started = true;
            });
        }
        get logger() {
            return logger.get("workspaces.controller");
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) {
                    throw new Error("Cannot handle this workspaces control message, because the controller has not been started");
                }
                const workspacesData = args.data;
                const commandId = args.commandId;
                const operationValidation = workspacesOperationDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This workspace request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(workspacesData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`Workspace request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(workspacesData)}`);
                const result = yield this.operations[operationName].execute(workspacesData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`Workspace request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleClientUnloaded(windowId, win) {
            var _a, _b;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`handling unloading of ${windowId}`);
            if (!win || win.closed) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`${windowId} detected as closed, checking if frame and processing close`);
                this.framesController.handleFrameDisappeared(windowId);
            }
        }
        bridgeWorkspaceEvent(data) {
            this.glueController.pushWorkspacesMessage(data);
            if (data.action === "closed" && data.type === "workspace") {
                this.glueController.clearContext(data.payload.workspaceSummary.id, "workspace");
            }
            if (this.settings.hibernation) {
                this.hibernationWatcher.notifyEvent(data);
            }
        }
        closeItem(config, commandId) {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling closeItem request with config ${JSON.stringify(config)}`);
                const frameToFocus = this.framesController.getAll().find((frame) => frame.windowId === config.itemId);
                if (frameToFocus) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] this is targeted at a frame, closing the frame`);
                    (_c = window.open(undefined, frameToFocus.windowId)) === null || _c === void 0 ? void 0 : _c.close();
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] the frame window is closed`);
                    return;
                }
                const frame = yield this.framesController.getFrameInstance(config);
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.closeItem, config, frame.windowId);
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        setItemTitle(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling setItemTitle request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.setItemTitle, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        hibernateWorkspace(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling hibernateWorkspace request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.hibernateWorkspace, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        getWorkspacesConfiguration(config, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getWorkspacesConfiguration request`);
                return this.settings;
            });
        }
        getWorkspaceWindowFrameBounds(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getWorkspaceWindowFrameBounds request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.itemId });
                const frameWindowBounds = yield this.glueController.callWindow("windows", this.ioc.windowsController.getFrameBoundsOperation, { windowId: frame.windowId }, { windowId: frame.windowId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] getWorkspaceWindowFrameBounds completed`);
                return { bounds: frameWindowBounds.bounds };
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        handleFrameHello(config, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling handleFrameHello command with config: ${JSON.stringify(config)}`);
                if (config.windowId) {
                    this.framesController.processNewHello(config.windowId);
                }
            });
        }
        isWindowInWorkspace(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling isWindowInWorkspace command with config: ${JSON.stringify(config)}`);
                const allFrames = this.framesController.getAll();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] sending isWindowInWorkspace to all known frames: ${JSON.stringify(allFrames.join(", "))}`);
                const result = yield Promise.all(allFrames.map((frame) => this.glueController.callFrame(this.operations.isWindowInWorkspace, config, frame.windowId)));
                const inWorkspace = result.some((res) => res.inWorkspace);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] all frames responded, returning ${inWorkspace} to the caller`);
                return { inWorkspace };
            });
        }
        createWorkspace(config, commandId) {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling createWorkspace command`);
                const frameInstanceConfig = {
                    frameId: (_b = config.frame) === null || _b === void 0 ? void 0 : _b.reuseFrameId,
                    newFrame: (_c = config.frame) === null || _c === void 0 ? void 0 : _c.newFrame,
                    itemId: (_d = config.config) === null || _d === void 0 ? void 0 : _d.reuseWorkspaceId
                };
                const frame = yield this.framesController.getFrameInstance(frameInstanceConfig);
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`[${commandId}] calling frame: ${frame.windowId}, based on selection config: ${JSON.stringify(frameInstanceConfig)}`);
                const result = yield this.glueController.callFrame(this.operations.createWorkspace, config, frame.windowId);
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace(`[${commandId}] frame ${frame.windowId} responded with a valid snapshot, returning to caller`);
                return result;
            });
        }
        createFrame(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling createFrame command`);
                const frame = yield this.framesController.openFrame(config.frameConfig, config.layoutComponentId);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] calling frame: ${frame.windowId}}`);
                const result = yield this.glueController.callFrame(this.operations.createFrame, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} responded returning to caller`);
                return result;
            });
        }
        initFrame(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling initFrame command`);
                const frameInstanceConfig = {
                    frameId: config.frameId
                };
                const frame = yield this.framesController.getFrameInstance(frameInstanceConfig);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] calling frame: ${frame.windowId}, based on selection config: ${JSON.stringify(frameInstanceConfig)}`);
                yield this.glueController.callFrame(this.operations.initFrame, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} responded returning to caller`);
            });
        }
        getAllFramesSummaries(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getAllFramesSummaries request`);
                const allFrames = yield this.framesController.getAll();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] sending getFrameSummary to all known frames: ${allFrames.join(", ")}`);
                const summaries = yield Promise.all(allFrames.map((frame) => this.glueController.callFrame(this.operations.getFrameSummary, { itemId: frame.windowId }, frame.windowId)));
                const verifiedSummaries = summaries.filter((sum) => sum.id !== "none");
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] all frames responded, returning to caller`);
                return { summaries: verifiedSummaries };
            });
        }
        getFrameSummary(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getFrameSummary request for config: ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] forwarding getFrameSummary to frame ${frame.windowId}`);
                const summary = yield this.glueController.callFrame(this.operations.getFrameSummary, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} responded with a valid summary, returning to caller`);
                return summary;
            });
        }
        getAllWorkspacesSummaries(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getAllWorkspacesSummaries request`);
                const allFrames = this.framesController.getAll();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] sending getAllWorkspacesSummaries to all known frames: ${allFrames.join(", ")}`);
                const results = yield Promise.all(allFrames.map((frame) => this.glueController.callFrame(this.operations.getAllWorkspacesSummaries, {}, frame.windowId)));
                const summaries = results.reduce((soFar, result) => {
                    soFar.push(...result.summaries);
                    return soFar;
                }, []);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] all frames responded, results were aggregated, returning to caller`);
                return { summaries };
            });
        }
        getWorkspaceSnapshot(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getWorkspaceSnapshot for config: ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.getWorkspaceSnapshot, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} responded with a valid snapshot, retuning to caller`);
                return result;
            });
        }
        handleCheckStarted(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling handleCheckStarted request`);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] the controller has been started, responding to caller`);
                return { started: true };
            });
        }
        handleGetPlatformFrameId(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling GetPlatformFrameId request`);
                const platformFrameData = this.framesController.getPlatformFrameSessionData();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] GetPlatformFrameId completed, responding to caller`);
                return { id: platformFrameData === null || platformFrameData === void 0 ? void 0 : platformFrameData.windowId };
            });
        }
        getFrameSessionData(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getFrameSessionData request`);
                const data = this.framesController.getFrameConfig(config.frameId);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] getFrameSessionData completed, responding to caller`);
                return data;
            });
        }
        handleGetWorkspacesLayouts(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling handleGetWorkspacesLayouts request for frame: ${config.frameId} for layout: ${config.layoutName} of type: ${config.layoutType}`);
                const response = yield this.glueController.callFrame(this.operations.getWorkspacesLayouts, config, config.frameId);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] handleGetWorkspacesLayouts request completed for frame: ${config.frameId} for layout: ${config.layoutName} of type: ${config.layoutType}`);
                return response;
            });
        }
        getAllLayoutsSummaries(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getAllLayoutsSummaries command`);
                const all = yield this.ioc.layoutsController.handleGetAll({ type: "Workspace" }, commandId);
                const summaries = all.summaries.map((summary) => ({ name: summary.name }));
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] all layouts retrieved and mapped, returning to caller`);
                return { summaries };
            });
        }
        openWorkspace(config, commandId) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling openWorkspace command for name: ${config.name}`);
                const frameQueryConfig = {
                    frameId: (_b = config.restoreOptions) === null || _b === void 0 ? void 0 : _b.frameId,
                    newFrame: (_c = config.restoreOptions) === null || _c === void 0 ? void 0 : _c.newFrame,
                    itemId: (_d = config.restoreOptions) === null || _d === void 0 ? void 0 : _d.reuseWorkspaceId
                };
                const frame = yield this.framesController.getFrameInstance(frameQueryConfig);
                const result = yield this.glueController.callFrame(this.operations.openWorkspace, config, frame.windowId);
                return result;
            });
        }
        deleteLayout(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling deleteLayout request for name: ${config.name}`);
                yield this.ioc.layoutsController.handleRemove({ name: config.name, type: "Workspace" }, commandId);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] layouts reported this layout as deleted, responding to caller`);
            });
        }
        saveLayout(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling saveLayout request for workspace ${config.workspaceId} and name ${config.name}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] forwarding request to frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.saveLayout, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} responded with a valid layout, returning to caller`);
                return result;
            });
        }
        importLayout(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling importLayout command for layout ${config.layout.name}`);
                yield this.ioc.layoutsController.handleImport({ layouts: [config.layout], mode: config.mode }, commandId);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] the layouts controller successfully imported the layout, responding to caller`);
            });
        }
        exportAllLayouts(config, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling exportAllLayouts request`);
                const result = yield this.ioc.layoutsController.handleExport({ type: "Workspace" }, commandId);
                return result;
            });
        }
        restoreItem(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling restoreItem request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.restoreItem, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        maximizeItem(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling maximizeItem request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.maximizeItem, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        focusItem(config, commandId) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling focusItem request with config ${JSON.stringify(config)}`);
                const frameToFocus = this.framesController.getAll().find((frame) => frame.windowId === config.itemId);
                if (frameToFocus) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] this is targeted at a frame, focusing the frame`);
                    window.open(undefined, frameToFocus.windowId);
                    return;
                }
                const frame = yield this.framesController.getFrameInstance(config);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.focusItem, config, frame.windowId);
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        resizeItem(config, commandId) {
            var _a, _b, _c, _d, _e;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling resizeItem request with config ${JSON.stringify(config)}`);
                const targetedFrame = this.framesController.getAll().find((fr) => fr.windowId === config.itemId);
                if (targetedFrame) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] detected targeted item is frame, building window resize config`);
                    const resizeConfig = {
                        windowId: config.itemId,
                        width: config.width,
                        height: config.height,
                        relative: config.relative
                    };
                    yield this.glueController.callWindow("windows", this.ioc.windowsController.moveResizeOperation, resizeConfig, { windowId: targetedFrame.windowId });
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] window resize responded with success, returning to caller`);
                    return;
                }
                const frame = yield this.framesController.getFrameInstance(config);
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] targeted item is not a frame, it is located in frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.resizeItem, config, frame.windowId);
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        getFrameSnapshot(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getFrameSnapshot request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.getFrameSnapshot, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
                return result;
            });
        }
        forceLoadWindow(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling forceLoadWindow request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.forceLoadWindow, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
                return result;
            });
        }
        ejectWindow(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling ejectWindow request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.ejectWindow, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
                return result;
            });
        }
        moveWindowTo(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling moveWindowTo request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.moveWindowTo, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        addWindow(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling addWindow request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.parentId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.addWindow, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal: ${JSON.stringify(result)}, responding to caller`);
                return result;
            });
        }
        addContainer(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling addContainer request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.parentId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.addContainer, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal: ${JSON.stringify(result)}, responding to caller`);
                return result;
            });
        }
        bundleWorkspace(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling bundleWorkspace request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.bundleWorkspace, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        bundleItem(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling bundleItem request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.itemId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.bundleItem, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        resumeWorkspace(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling resumeWorkspace request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.resumeWorkspace, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        lockWorkspace(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling lockWorkspace request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.lockWorkspace, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        lockContainer(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling lockContainer request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.itemId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.lockContainer, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        lockWindow(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling lockWindow request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.windowPlacementId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.lockWindow, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        pinWorkspace(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling pinWorkspace request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.pinWorkspace, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        unpinWorkspace(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling unpinWorkspace request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.unpinWorkspace, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        getWorkspaceIcon(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getWorkspaceIcon request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                const result = yield this.glueController.callFrame(this.operations.getWorkspaceIcon, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
                return result;
            });
        }
        setWorkspaceIcon(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling setWorkspaceIcon request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ itemId: config.workspaceId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.setWorkspaceIcon, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        handleGetWorkspaceWindowsOnLayoutSaveContext(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling GetWorkspaceWindowsOnLayoutSaveContext request with config: ${JSON.stringify(config)}`);
                const windowsOnSaveData = yield Promise.all(config.windowIds.map((windowId) => __awaiter$3(this, void 0, void 0, function* () {
                    return {
                        windowId,
                        windowContext: yield this.getWorkspaceWindowOnLayoutSaveData(windowId, config)
                    };
                })));
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] operation GetWorkspaceWindowsOnLayoutSaveContext completed responding`);
                return { windowsOnSaveData };
            });
        }
        handleSetMaximizationBoundary(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling setMaximizationBoundary request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance(config);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] targeting frame ${frame.windowId}`);
                yield this.glueController.callFrame(this.operations.setMaximizationBoundary, config, frame.windowId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] frame ${frame.windowId} gave a success signal, responding to caller`);
            });
        }
        changeFrameState(config, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                throw new Error("Frame states are not supported in Glue42 Core");
            });
        }
        getFrameState(config, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                throw new Error("Frame states are not supported in Glue42 Core");
            });
        }
        getFrameBounds(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getFrameBounds request with config ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ frameId: config.itemId });
                const frameWindowBounds = yield this.glueController.callWindow("windows", this.ioc.windowsController.getFrameBoundsOperation, { windowId: frame.windowId }, { windowId: frame.windowId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] getFrameBounds completed`);
                return { bounds: frameWindowBounds.bounds };
            });
        }
        handleFocusEvent(data, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling focus event from frame id: ${data.windowId} and hasFocus: ${data.hasFocus}`);
                try {
                    yield this.framesController.getFrameInstance({ frameId: data.windowId });
                }
                catch (error) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] ignoring focus event for unrecognized frame with id: ${data.windowId}`);
                    return;
                }
                const eventPayload = {
                    type: "frame",
                    action: "focus",
                    payload: {
                        frameSummary: {
                            id: data.windowId,
                            isFocused: data.hasFocus
                        }
                    }
                };
                this.bridgeWorkspaceEvent(eventPayload);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] focus event from frame id: ${data.windowId} and hasFocus: ${data.hasFocus} handled`);
            });
        }
        moveFrame(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling moveFrame command with config: ${JSON.stringify(config)}`);
                const frame = yield this.framesController.getFrameInstance({ frameId: config.itemId });
                const moveConfig = {
                    windowId: config.itemId,
                    top: config.top,
                    left: config.left,
                    relative: config.relative
                };
                yield this.glueController.callWindow("windows", this.ioc.windowsController.moveResizeOperation, moveConfig, { windowId: frame.windowId });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] frame with id ${frame.windowId} was successfully moved, responding to caller`);
            });
        }
        applyDefaults(config) {
            const providedHibernationConfig = (config === null || config === void 0 ? void 0 : config.hibernation) || {};
            const providedLoadingConfig = (config === null || config === void 0 ? void 0 : config.loadingStrategy) || {};
            const loadingConfig = cjs(defaultLoadingConfig, providedLoadingConfig);
            return Object.assign(Object.assign({}, config), { loadingStrategy: loadingConfig, hibernation: providedHibernationConfig });
        }
        getWorkspaceWindowOnLayoutSaveData(windowId, requestConfig) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const nonGlueWindows = this.ioc.sessionController.getAllNonGlue();
                if (nonGlueWindows.some((nonGlueWindow) => nonGlueWindow.windowId === windowId)) {
                    return {};
                }
                const workspaceWindow = this.ioc.sessionController.getWorkspaceClientById(windowId);
                if (!workspaceWindow) {
                    throw new Error(`Cannot ask window: ${windowId} for on layout save request, because it is not a known workspace window`);
                }
                const timeoutMessage = `Cannot fetch the on layout save context from: ${windowId}, because of timeout`;
                const saveRequestResponse = yield PromiseWrap(() => __awaiter$3(this, void 0, void 0, function* () {
                    try {
                        const clientResponse = yield this.glueController.callWindow("layouts", this.ioc.layoutsController.operations.clientSaveRequest, requestConfig, { windowId });
                        return clientResponse;
                    }
                    catch (error) {
                        return {};
                    }
                }), 15000, timeoutMessage);
                return (_a = saveRequestResponse === null || saveRequestResponse === void 0 ? void 0 : saveRequestResponse.windowContext) !== null && _a !== void 0 ? _a : {};
            });
        }
    }

    const intentsOperationTypesDecoder = oneOf(constant("findIntent"), constant("getIntents"), constant("raiseIntent"), constant("raise"), constant("operationCheck"));
    const intentHandlerDecoder = object({
        applicationName: nonEmptyStringDecoder,
        applicationTitle: string(),
        applicationDescription: optional(string()),
        applicationIcon: optional(string()),
        type: oneOf(constant("app"), constant("instance")),
        displayName: optional(string()),
        contextTypes: optional(array(nonEmptyStringDecoder)),
        instanceId: optional(string()),
        instanceTitle: optional(string()),
        resultType: optional(nonEmptyStringDecoder)
    });
    const intentDecoder = object({
        name: nonEmptyStringDecoder,
        handlers: array(intentHandlerDecoder)
    });
    const intentTargetDecoder = oneOf(constant("startNew"), constant("reuse"), object({
        app: optional(nonEmptyStringDecoder),
        instance: optional(nonEmptyStringDecoder)
    }));
    const intentContextDecoder = object({
        type: optional(nonEmptyStringDecoder),
        data: optional(object())
    });
    const intentsDecoder = array(intentDecoder);
    const wrappedIntentsDecoder = object({
        intents: intentsDecoder
    });
    const wrappedIntentFilterDecoder = object({
        filter: optional(object({
            name: optional(nonEmptyStringDecoder),
            contextType: optional(nonEmptyStringDecoder),
            resultType: optional(nonEmptyStringDecoder)
        }))
    });
    object({
        applicationName: nonEmptyStringDecoder,
        applicationIcon: optional(string()),
        instanceId: optional(string()),
    });
    const intentRequestDecoder = object({
        intent: nonEmptyStringDecoder,
        target: optional(intentTargetDecoder),
        context: optional(intentContextDecoder),
        options: optional(windowOpenSettingsDecoder),
        handlers: optional(array(intentHandlerDecoder))
    });
    const intentRequestResolverConfigDecoder = object({
        enabled: optional(boolean()),
        appName: string(),
        waitResponseTimeout: number()
    });
    const raiseIntentRequestDecoder = object({
        intentRequest: intentRequestDecoder,
        resolverConfig: intentRequestResolverConfigDecoder
    });
    const intentResultDecoder = object({
        request: intentRequestDecoder,
        handler: intentHandlerDecoder,
        result: anyJson()
    });
    const intentResolverResponseDecoder = object({
        intent: nonEmptyStringDecoder,
        handler: intentHandlerDecoder
    });

    class IntentsController {
        constructor(glueController, resolverHelper, appDirectory, ioc) {
            this.glueController = glueController;
            this.resolverHelper = resolverHelper;
            this.appDirectory = appDirectory;
            this.ioc = ioc;
            this.operations = {
                getIntents: { name: "getIntents", resultDecoder: wrappedIntentsDecoder, execute: this.getWrappedIntents.bind(this) },
                findIntent: { name: "findIntent", dataDecoder: wrappedIntentFilterDecoder, resultDecoder: wrappedIntentsDecoder, execute: this.findIntent.bind(this) },
                raiseIntent: { name: "raiseIntent", dataDecoder: intentRequestDecoder, resultDecoder: intentResultDecoder, execute: this.raiseIntent.bind(this) },
                raise: { name: "raise", dataDecoder: raiseIntentRequestDecoder, resultDecoder: intentResultDecoder, execute: this.raise.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) }
            };
            this.started = false;
        }
        get logger() {
            return logger.get("intents.controller");
        }
        start() {
            return __awaiter$3(this, void 0, void 0, function* () {
                this.started = true;
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) ;
                const intentsData = args.data;
                const commandId = args.commandId;
                const callerId = args.callerId;
                const operationValidation = intentsOperationTypesDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This intents request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(intentsData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`Intents request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(intentsData)}`);
                const result = yield this.operations[operationName].execute(intentsData, commandId, callerId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`Intents request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        extractAppIntents(apps) {
            const intents = {};
            const appsWithIntents = apps.filter((app) => app.intents.length > 0);
            for (const app of appsWithIntents) {
                for (const intentDef of app.intents) {
                    if (!intents[intentDef.name]) {
                        intents[intentDef.name] = [];
                    }
                    const handler = {
                        applicationName: app.name,
                        applicationTitle: app.title,
                        applicationDescription: app.caption,
                        displayName: intentDef.displayName,
                        contextTypes: intentDef.contexts,
                        applicationIcon: app.icon,
                        type: "app",
                        resultType: intentDef.resultType
                    };
                    intents[intentDef.name].push(handler);
                }
            }
            return intents;
        }
        getInstanceIntents(apps, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const intents = {};
                for (const server of this.glueController.getServers()) {
                    const serverIntentsMethods = (((_a = server.getMethods) === null || _a === void 0 ? void 0 : _a.call(server)) || []).filter((method) => method.name.startsWith(GlueWebIntentsPrefix));
                    yield Promise.all(serverIntentsMethods.map((method) => __awaiter$3(this, void 0, void 0, function* () {
                        const intentName = method.name.replace(GlueWebIntentsPrefix, "");
                        if (!intents[intentName]) {
                            intents[intentName] = [];
                        }
                        const info = method.flags.intent;
                        const app = apps.find((appDef) => appDef.name === server.application);
                        let appIntent;
                        if (app && app.intents) {
                            appIntent = app.intents.find((appDefIntent) => appDefIntent.name === intentName);
                        }
                        let title;
                        if (server.windowId) {
                            title = yield this.ioc.windowsController.getWindowTitle(server.windowId, commandId);
                        }
                        const handler = {
                            instanceId: server.windowId || server.instance,
                            applicationName: server.application || "",
                            applicationIcon: info.icon || (app === null || app === void 0 ? void 0 : app.icon),
                            applicationTitle: (app === null || app === void 0 ? void 0 : app.title) || "",
                            applicationDescription: info.description || (app === null || app === void 0 ? void 0 : app.caption),
                            displayName: info.displayName || (appIntent === null || appIntent === void 0 ? void 0 : appIntent.displayName),
                            contextTypes: info.contextTypes || (appIntent === null || appIntent === void 0 ? void 0 : appIntent.contexts),
                            instanceTitle: title,
                            type: "instance",
                            resultType: (appIntent === null || appIntent === void 0 ? void 0 : appIntent.resultType) || info.resultType
                        };
                        intents[intentName].push(handler);
                    })));
                }
                return intents;
            });
        }
        mergeIntentStores(storeOne, storeTwo) {
            const intents = {};
            for (const name of new Set([...Object.keys(storeOne), ...Object.keys(storeTwo)])) {
                intents[name] = [...(storeOne[name] || []), ...(storeTwo[name] || [])];
            }
            return intents;
        }
        wrapIntents(intents) {
            return {
                intents
            };
        }
        getIntents(commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                const apps = (yield this.appDirectory.getAll()).map((app) => {
                    return {
                        name: app.name,
                        title: app.title || "",
                        icon: app.icon,
                        caption: app.caption,
                        intents: app.userProperties.intents || []
                    };
                });
                const appIntentsStore = this.extractAppIntents(apps);
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] got app intents`);
                const instanceIntentsStore = yield this.getInstanceIntents(apps, commandId);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] got instance intents`);
                const allIntentsStore = this.mergeIntentStores(appIntentsStore, instanceIntentsStore);
                const intents = Object.keys(allIntentsStore).map((name) => ({ name, handlers: allIntentsStore[name] }));
                return intents;
            });
        }
        getWrappedIntents(commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling getIntents command`);
                const intents = yield this.getIntents(commandId);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] getIntents command completed`);
                return this.wrapIntents(intents);
            });
        }
        findIntent(wrappedIntentFilter, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling findIntent command`);
                const intentFilter = wrappedIntentFilter.filter;
                let intents = yield this.getIntents(commandId);
                if (!intentFilter) {
                    return this.wrapIntents(intents);
                }
                if (typeof intentFilter === "string") {
                    return this.wrapIntents(intents.filter((intent) => intent.name === intentFilter));
                }
                if (intentFilter.contextType) {
                    const ctToLower = intentFilter.contextType.toLowerCase();
                    intents = intents.filter((intent) => intent.handlers.some((handler) => { var _a; return (_a = handler.contextTypes) === null || _a === void 0 ? void 0 : _a.some((ct) => ct.toLowerCase() === ctToLower); }));
                }
                if (intentFilter.name) {
                    intents = intents.filter((intent) => intent.name === intentFilter.name);
                }
                if (intentFilter.resultType) {
                    const resultTypeToLower = intentFilter.resultType.toLowerCase();
                    intents = intents.filter((intent) => intent.handlers.some(handler => { var _a; return ((_a = handler.resultType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === resultTypeToLower; }));
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] findIntent command completed`);
                return this.wrapIntents(intents);
            });
        }
        getIntent(intent, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                return (yield this.getIntents(commandId)).find((registeredIntent) => registeredIntent.name === intent);
            });
        }
        startApp(config, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const instance = yield this.ioc.applicationsController.handleApplicationStart(config, commandId);
                return instance.id;
            });
        }
        waitForServer(instanceId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                let unsub;
                const waitTimeoutMs = 30 * 1000;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Waiting ${waitTimeoutMs}ms for server instance with id ${instanceId}`);
                const executor = (resolve) => {
                    unsub = this.glueController.subscribeForServerAdded((server) => {
                        if (server.windowId === instanceId || server.instance === instanceId) {
                            resolve(server);
                        }
                    });
                };
                return PromisePlus(executor, waitTimeoutMs, `Can not find interop server for instance ${instanceId}`).finally(() => unsub());
            });
        }
        waitForMethod(methodName, instanceId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                let unsub;
                const waitTimeoutMs = 10 * 1000;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Waiting ${waitTimeoutMs}ms for server instance with id ${instanceId} to register method ${methodName}`);
                const executor = (resolve) => {
                    unsub = this.glueController.subscribeForMethodAdded((addedMethod) => {
                        if (addedMethod.name === methodName) {
                            resolve(addedMethod);
                        }
                    });
                };
                return PromisePlus(executor, waitTimeoutMs, `Can not find interop method ${methodName} for instance ${instanceId}`).finally(() => unsub());
            });
        }
        instanceIdToInteropInstance(instanceId) {
            var _a;
            const servers = this.glueController.getServers();
            return (_a = servers.find((server) => server.windowId === instanceId || server.instance === instanceId)) === null || _a === void 0 ? void 0 : _a.instance;
        }
        raiseIntent(intentRequest, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling raiseIntent command with intentRequest: ${JSON.stringify(intentRequest)}`);
                const intentName = intentRequest.intent;
                const intentDef = yield this.getIntent(intentName, commandId);
                if (!intentDef) {
                    throw new Error(`Intent ${intentName} not found!`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`Raised intent definition: ${JSON.stringify(intentDef)}`);
                const firstFoundAppHandler = intentRequest.handlers ? this.findHandlerByFilter(intentRequest.handlers, { type: "app" }) : this.findHandlerByFilter(intentDef.handlers, { type: "app" });
                const firstFoundInstanceHandler = intentRequest.handlers ? this.findHandlerByFilter(intentRequest.handlers, { type: "instance" }) : this.findHandlerByFilter(intentDef.handlers, { type: "instance" });
                let handler;
                if (!intentRequest.target || intentRequest.target === "reuse") {
                    handler = firstFoundInstanceHandler || firstFoundAppHandler;
                }
                if (intentRequest.target === "startNew") {
                    handler = firstFoundAppHandler;
                }
                if (typeof intentRequest.target === "object" && intentRequest.target.app) {
                    handler = this.findHandlerByFilter(intentDef.handlers, { app: intentRequest.target.app });
                }
                if (typeof intentRequest.target === "object" && intentRequest.target.instance) {
                    handler = this.findHandlerByFilter(intentDef.handlers, { instance: intentRequest.target.instance, app: intentRequest.target.app });
                }
                if (!handler) {
                    throw new Error(`Can not raise intent for request ${JSON.stringify(intentRequest)} - can not find intent handler!`);
                }
                const result = yield this.raiseIntentToTargetHandler(intentRequest, handler, commandId);
                return result;
            });
        }
        findHandlerByFilter(handlers, filter) {
            if (filter.type) {
                return handlers.find(handler => handler.type === filter.type);
            }
            if (filter.instance) {
                return handlers.find(handler => filter.app
                    ? handler.applicationName === filter.app && handler.instanceId === filter.instance
                    : handler.instanceId === filter.instance);
            }
            if (filter.app) {
                return handlers.find(handler => handler.applicationName === filter.app);
            }
        }
        raiseIntentToTargetHandler(request, handler, commandId) {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Raising intent to target handler:${JSON.stringify(handler)}`);
                const instanceId = handler.instanceId || (yield this.startApp(Object.assign(Object.assign({ name: handler.applicationName }, request.options), { context: request.context }), commandId));
                const methodName = `${GlueWebIntentsPrefix}${request.intent}`;
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`Searching for interop server offering method ${methodName}`);
                let interopServer = this.glueController.getServers().find((server) => server.windowId === handler.instanceId || server.instance === handler.instanceId);
                if (!interopServer) {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`Interop server for method ${methodName} does not exist`);
                    interopServer = yield this.waitForServer(instanceId);
                }
                const method = (_d = interopServer.getMethods) === null || _d === void 0 ? void 0 : _d.call(interopServer).find((registeredMethod) => registeredMethod.name === methodName);
                if (!method) {
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`Server with id ${interopServer.instance} does not offer yet offer method ${methodName}`);
                    yield this.waitForMethod(methodName, instanceId);
                }
                const result = yield this.glueController.invokeMethod(methodName, request.context, { instance: this.instanceIdToInteropInstance(instanceId) });
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace(`[${commandId}] raiseIntent command completed. Returning result: ${JSON.stringify(result)}`);
                return {
                    request,
                    handler: Object.assign(Object.assign({}, handler), { instanceId, type: "instance" }),
                    result: result.returned
                };
            });
        }
        raise(request, commandId, callerId) {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] Receive raise command with config: ${JSON.stringify(request)}`);
                if (!callerId) {
                    throw new Error(`Cannot raise intent - callerId is not defined`);
                }
                const { resolverConfig, intentRequest } = request;
                const intent = (yield this.findIntent({ filter: { name: intentRequest.intent } }, commandId)).intents.find(intent => intent.name === intentRequest.intent);
                if (!intent) {
                    throw new Error(`Intent with name ${intentRequest.intent} not found`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] Intent to be handled: ${JSON.stringify(intent)}`);
                const { open, reason } = this.checkIfResolverShouldBeOpened(intent, intentRequest, resolverConfig);
                if (!open) {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] Intent Resolver UI won't be used. Reason: ${reason}`);
                    return this.raiseIntent(intentRequest, commandId);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] Starting Intent Resolver app for intent request: ${request}`);
                const resolverHandler = yield this.resolverHelper.startResolverApp(request, callerId, commandId);
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace(`Raising intent to target handler: ${JSON.stringify(resolverHandler)}`);
                const result = yield this.raiseIntentToTargetHandler(intentRequest, resolverHandler, commandId);
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace(`Result from raise() method for intent ${JSON.stringify(intentRequest.intent)}: ${JSON.stringify(result)}`);
                return result;
            });
        }
        checkIfIntentHasMoreThanOneHandler(intent, request) {
            if (!request.target) {
                return request.handlers
                    ? request.handlers.length > 1
                    : intent.handlers.length > 1;
            }
            if (request.target === "reuse") {
                return request.handlers
                    ? request.handlers.filter(handler => handler.type === "instance" && handler.instanceId).length > 1 || request.handlers.filter(handler => handler.type === "app").length > 1
                    : intent.handlers.filter(handler => handler.type === "instance" && handler.instanceId).length > 1 || intent.handlers.filter(handler => handler.type === "app").length > 1;
            }
            if (request.target === "startNew") {
                return request.handlers
                    ? request.handlers.filter(handler => handler.type === "app").length > 1
                    : intent.handlers.filter(handler => handler.type === "app").length > 1;
            }
            if (typeof request.target === "object") {
                return false;
            }
            return false;
        }
        checkIfResolverShouldBeOpened(intent, intentRequest, resolverConfig) {
            if (!resolverConfig.enabled) {
                return { open: false, reason: `Intent Resolver is disabled. Raising intent to first found handler` };
            }
            const intentsResolverApp = this.glueController.clientGlue.appManager.application(resolverConfig.appName);
            if (!intentsResolverApp) {
                return { open: false, reason: `Application with name ${resolverConfig.appName} not found` };
            }
            const hasMoreThanOneHandler = this.checkIfIntentHasMoreThanOneHandler(intent, intentRequest);
            if (!hasMoreThanOneHandler) {
                return { open: false, reason: `Raised intent has only one handler` };
            }
            return { open: true };
        }
    }

    const channelOperationDecoder = oneOf(constant("addChannel"), constant("operationCheck"));
    const channelContextDecoder = object({
        name: nonEmptyStringDecoder,
        meta: object({
            color: nonEmptyStringDecoder
        }),
        data: optional(anyJson()),
    });

    class ChannelsController {
        constructor(glueController) {
            this.glueController = glueController;
            this.operations = {
                addChannel: { name: "addChannel", execute: this.addChannel.bind(this), dataDecoder: channelContextDecoder },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) }
            };
        }
        get logger() {
            return logger.get("channels.controller");
        }
        start(config) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                const channelDefinitions = config.channels.definitions;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("initializing channels");
                yield this.setupChannels(channelDefinitions);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("initialization is completed");
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                const channelsData = args.data;
                const commandId = args.commandId;
                const operationValidation = channelOperationDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This channels request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(channelsData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`Channels request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(channelsData)}`);
                const result = yield this.operations[operationName].execute(channelsData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`Channels request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        setupChannels(channels) {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield Promise.all(channels.map((channel) => this.addChannel(channel)));
            });
        }
        addChannel(info, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                this.trace(`[${commandId}] handling addChannel command with a valid name: ${info.name}, color: ${info.meta.color} and data: ${JSON.stringify(info.data)}`, commandId);
                const context = {
                    name: info.name,
                    meta: info.meta,
                    data: info.data || {}
                };
                const contextName = this.createContextName(context.name);
                this.trace(`[${commandId}] setting a new channel context with name: ${contextName}`, commandId);
                yield this.glueController.setContext(contextName, context);
                this.trace(`[${commandId}] channel context with name: ${contextName} created successfully`, commandId);
            });
        }
        createContextName(channelName) {
            return `${ChannelContextPrefix}${channelName}`;
        }
        trace(msg, commandId) {
            var _a;
            if (commandId) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(msg);
            }
        }
    }

    class FramesController {
        constructor(sessionController, glueController, ioc) {
            this.sessionController = sessionController;
            this.glueController = glueController;
            this.ioc = ioc;
            this.locks = {};
            this.defaultFrameHelloTimeoutMs = 15000;
        }
        start(config, defaultBounds, frameSummaryOperation) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                this.config = config;
                this.defaultBounds = defaultBounds;
                this.frameSummaryOperation = frameSummaryOperation;
                if (config.isFrame) {
                    this.myFrameId = (_a = this.sessionController.getAllFrames().find((frame) => frame.isPlatform)) === null || _a === void 0 ? void 0 : _a.windowId;
                    window.addEventListener("unload", () => {
                        if (this.myFrameId) {
                            this.clearAllWorkspaceWindows(this.myFrameId);
                        }
                    });
                }
            });
        }
        openFrame(newFrameConfig, layoutComponentId) {
            var _a, _b, _c, _d, _e;
            return __awaiter$3(this, void 0, void 0, function* () {
                const providedBounds = typeof newFrameConfig === "object" ? (_a = newFrameConfig.bounds) !== null && _a !== void 0 ? _a : {} : {};
                const openBounds = {
                    top: (_b = providedBounds.top) !== null && _b !== void 0 ? _b : this.defaultBounds.top,
                    left: (_c = providedBounds.left) !== null && _c !== void 0 ? _c : this.defaultBounds.left,
                    width: (_d = providedBounds.width) !== null && _d !== void 0 ? _d : this.defaultBounds.width,
                    height: (_e = providedBounds.height) !== null && _e !== void 0 ? _e : this.defaultBounds.height
                };
                const frameWindowId = typeof newFrameConfig === "object" && (newFrameConfig === null || newFrameConfig === void 0 ? void 0 : newFrameConfig.frameId) ? newFrameConfig.frameId : `g42-${shortidExports$1.generate()}`;
                const allExistingFrames = this.sessionController.getAllFrames();
                if (allExistingFrames.some((frame) => frame.windowId === frameWindowId)) {
                    throw new Error(`Cannot open a frame with id: ${frameWindowId}, because a frame with this id already exists`);
                }
                const frameData = {
                    windowId: frameWindowId,
                    active: false,
                    isPlatform: false,
                    layoutComponentId
                };
                const options = `left=${openBounds.left},top=${openBounds.top},width=${openBounds.width},height=${openBounds.height}`;
                const frameSrc = (yield this.getWorkspacesUrls()).workspacesUrl.current;
                const frameUrl = `${frameSrc}?emptyFrame=true`;
                const childWindow = window.open(frameUrl, frameData.windowId, options);
                if (!childWindow) {
                    throw new Error("Cannot open a new workspace frame, because the user has not allowed popups or uses a blocker");
                }
                this.sessionController.saveFrameData(frameData);
                try {
                    yield this.waitHello(frameData.windowId);
                    return { windowId: frameData.windowId };
                }
                catch (error) {
                    delete this.locks[frameData.windowId];
                    throw new Error("Cannot open a new frame, because the workspace frame app did not send a hello in time");
                }
            });
        }
        closeFrame(windowId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const frameData = this.sessionController.getFrameData(windowId);
                if (!frameData) {
                    throw new Error(`Cannot close a frame with id: ${windowId}, because it is not known by the platform`);
                }
                this.handleFrameDisappeared(windowId);
                (_a = window.open(undefined, windowId)) === null || _a === void 0 ? void 0 : _a.close();
            });
        }
        processNewHello(windowId) {
            var _a;
            const frameData = this.sessionController.getFrameData(windowId);
            if (!frameData) {
                return;
            }
            this.sessionController.setFrameActive(windowId);
            (_a = this.locks[windowId]) === null || _a === void 0 ? void 0 : _a.lift();
        }
        handleFrameDisappeared(frameId) {
            const foundFrame = this.sessionController.getFrameData(frameId);
            if (!foundFrame) {
                return;
            }
            this.sessionController.removeFrameData(frameId);
            this.clearAllWorkspaceWindows(frameId);
        }
        getAll() {
            const allFrames = this.sessionController.getAllFrames();
            return allFrames.filter((frame) => frame.active).map((frame) => ({ windowId: frame.windowId }));
        }
        getFrameInstance(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const props = ["frameId", "itemId", "newFrame"];
                if (config) {
                    const definedKeys = props.reduce((soFar, prop) => {
                        if (config[prop]) {
                            soFar.push(prop);
                        }
                        return soFar;
                    }, []);
                    if (definedKeys.length > 1) {
                        throw new Error(`Cannot retrieve the frame, because of over-specification: the provided selection object must have either 1 or none of the possible properties: ${JSON.stringify(config)}`);
                    }
                }
                const allFrames = this.getAll();
                if (config === null || config === void 0 ? void 0 : config.frameId) {
                    const foundFrame = allFrames.find((frame) => frame.windowId === config.frameId);
                    if (!foundFrame) {
                        throw new Error(`Cannot retrieve a frame with Id: ${config.frameId}, because it is not known by the platform`);
                    }
                    return foundFrame;
                }
                if (config === null || config === void 0 ? void 0 : config.itemId) {
                    return this.getFrameByItemId(config.itemId, allFrames);
                }
                if (config === null || config === void 0 ? void 0 : config.newFrame) {
                    return this.openFrame(config.newFrame);
                }
                return allFrames.length ? this.getLastOpenedFrame() : this.openFrame();
            });
        }
        getPlatformFrameSessionData() {
            return this.sessionController.getAllFrames().find((frame) => frame.isPlatform);
        }
        getFrameConfig(frameId) {
            return this.sessionController.getAllFrames().find((frame) => frame.windowId === frameId);
        }
        clearAllWorkspaceWindows(frameId) {
            const workspaceWindows = this.sessionController.pickWorkspaceClients((client) => client.frameId === frameId);
            workspaceWindows.forEach((workspaceWindow) => this.ioc.applicationsController.unregisterWorkspaceApp({ windowId: workspaceWindow.windowId }));
        }
        waitHello(windowId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                return PromisePlus((resolve) => {
                    this.locks[windowId] = { lift: resolve };
                }, this.defaultFrameHelloTimeoutMs, "Frame hello timed out");
            });
        }
        getLastOpenedFrame() {
            const allData = this.sessionController.getAllFrames().filter((frame) => frame.active);
            return allData[allData.length - 1];
        }
        getFrameByItemId(itemId, frames) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!frames.length) {
                    throw new Error(`Cannot get frame by item id for: ${itemId}, because not frames were found`);
                }
                for (const frame of frames) {
                    const queryResult = yield this.glueController.callFrame(this.frameSummaryOperation, { itemId }, frame.windowId);
                    if (queryResult.id !== "none") {
                        return frame;
                    }
                }
                throw new Error(`Cannot find frame for item: ${itemId}`);
            });
        }
        getWorkspacesUrls() {
            const currentProtocol = (new URL(window.location.href)).protocol;
            if (!currentProtocol.includes("extension")) {
                return Promise.resolve({ workspacesUrl: { current: this.config.src, default: this.config.src } });
            }
            return new Promise((resolve) => {
                chrome.storage.local.get("workspacesUrl", (entry) => {
                    resolve(entry);
                });
            });
        }
    }

    class WorkspaceHibernationWatcher {
        constructor(session) {
            this.session = session;
            this.maximumAmountCheckInProgress = false;
        }
        get logger() {
            return logger.get("workspaces.hibernation");
        }
        start(workspacesController, settings) {
            var _a, _b, _c, _d;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`starting the hibernation watcher with following settings: ${JSON.stringify(this.settings)}`);
            this.workspacesController = workspacesController;
            this.settings = settings;
            const allTimeoutData = this.session.exportClearTimeouts();
            if ((_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.idleWorkspaces) === null || _c === void 0 ? void 0 : _c.idleMSThreshold) {
                allTimeoutData.forEach((timeoutData) => this.buildTimer(timeoutData.workspaceId));
            }
            (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace("The hibernation watcher has started successfully");
        }
        notifyEvent(event) {
            if (event.type === "window") {
                this.handleWorkspaceWindowEvent(event);
            }
            if (event.type === "workspace") {
                this.handleWorkspaceEvent(event);
            }
        }
        handleWorkspaceWindowEvent(event) {
            const isWindowOpened = event.action === "opened" || event.action === "added";
            if (!isWindowOpened) {
                return;
            }
            this.checkMaximumAmount();
            this.addTimersForWorkspacesInFrame(event.payload.windowSummary.config.frameId);
        }
        handleWorkspaceEvent(event) {
            const isWorkspaceSelected = event.action === "selected";
            const workspaceData = event.payload;
            if (event.action !== "selected" && event.action !== "opened") {
                return;
            }
            this.checkMaximumAmount();
            if (isWorkspaceSelected) {
                const timeout = this.session.getTimeout(workspaceData.workspaceSummary.id);
                if (timeout) {
                    clearTimeout(timeout);
                    this.session.removeTimeout(workspaceData.workspaceSummary.id);
                }
                this.addTimersForWorkspacesInFrame(workspaceData.frameSummary.id);
            }
        }
        compare(ws1, ws2) {
            if (ws1.config.lastActive > ws2.config.lastActive) {
                return 1;
            }
            if (ws1.config.lastActive < ws2.config.lastActive) {
                return -1;
            }
            return 0;
        }
        checkMaximumAmount() {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (this.maximumAmountCheckInProgress) {
                    return;
                }
                if (!((_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.maximumActiveWorkspaces) === null || _b === void 0 ? void 0 : _b.threshold)) {
                    return;
                }
                this.maximumAmountCheckInProgress = true;
                try {
                    yield this.checkMaximumAmountCore(this.settings.maximumActiveWorkspaces.threshold);
                }
                finally {
                    this.maximumAmountCheckInProgress = false;
                }
            });
        }
        checkMaximumAmountCore(threshold) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Checking for maximum active workspaces rule. The threshold is ${(_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.maximumActiveWorkspaces) === null || _c === void 0 ? void 0 : _c.threshold}`);
                const commandId = shortidExports$1.generate();
                const result = yield this.workspacesController.getAllWorkspacesSummaries({}, commandId);
                const snapshotsPromises = result.summaries.map(s => this.workspacesController.getWorkspaceSnapshot({ itemId: s.id }, commandId));
                const snapshots = yield Promise.all(snapshotsPromises);
                const eligibleForHibernation = snapshots.reduce((eligible, snapshot) => {
                    if (!this.isWorkspaceHibernated(snapshot.config) && !this.isWorkspaceEmpty(snapshot)) {
                        eligible.push(snapshot);
                    }
                    return eligible;
                }, []);
                if (eligibleForHibernation.length <= threshold) {
                    return;
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`Found ${eligibleForHibernation.length} eligible for hibernation workspaces`);
                const hibernationPromises = eligibleForHibernation
                    .sort(this.compare)
                    .slice(0, eligibleForHibernation.length - threshold)
                    .map((w) => this.tryHibernateWorkspace(w.id));
                yield Promise.all(hibernationPromises);
            });
        }
        tryHibernateWorkspace(workspaceId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                try {
                    const snapshot = yield this.workspacesController.getWorkspaceSnapshot({ itemId: workspaceId }, shortidExports$1.generate());
                    if (!this.canBeHibernated(snapshot)) {
                        return;
                    }
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`trying to hibernate workspace ${workspaceId}`);
                    yield this.workspacesController.hibernateWorkspace({ workspaceId }, shortidExports$1.generate());
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`workspace ${workspaceId} was hibernated successfully`);
                }
                catch (error) {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(error);
                }
            });
        }
        canBeHibernated(snapshot) {
            const isWorkspaceHibernated = this.isWorkspaceHibernated(snapshot.config);
            const isWorkspaceSelected = this.isWorkspaceSelected(snapshot.config);
            const isWorkspaceEmpty = this.isWorkspaceEmpty(snapshot);
            return !isWorkspaceHibernated && !isWorkspaceSelected && !isWorkspaceEmpty;
        }
        isWorkspaceHibernated(workspaceSnapshot) {
            return workspaceSnapshot.isHibernated;
        }
        isWorkspaceSelected(workspaceSnapshot) {
            return workspaceSnapshot.isSelected;
        }
        isWorkspaceEmpty(workspaceSnapshot) {
            return !workspaceSnapshot.children.length;
        }
        getWorkspacesInFrame(frameId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const result = yield this.workspacesController.getAllWorkspacesSummaries({}, shortidExports$1.generate());
                const snapshotPromises = result.summaries.reduce((promises, summary) => {
                    if (summary.config.frameId === frameId) {
                        promises.push(this.workspacesController.getWorkspaceSnapshot({ itemId: summary.id }, shortidExports$1.generate()));
                    }
                    return promises;
                }, []);
                return yield Promise.all(snapshotPromises);
            });
        }
        addTimersForWorkspacesInFrame(frameId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!((_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.idleWorkspaces) === null || _b === void 0 ? void 0 : _b.idleMSThreshold)) {
                    return;
                }
                const workspacesInFrame = yield this.getWorkspacesInFrame(frameId);
                workspacesInFrame.map((w) => {
                    var _a, _b, _c;
                    if (!this.canBeHibernated(w) || this.session.getTimeout(w.id)) {
                        return;
                    }
                    this.buildTimer(w.id);
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Starting workspace idle timer ( ${(_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.idleWorkspaces) === null || _c === void 0 ? void 0 : _c.idleMSThreshold}ms ) for workspace ${w.id}`);
                });
            });
        }
        buildTimer(workspaceId) {
            var _a, _b;
            const timeout = window.setTimeout(() => {
                var _a;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Timer triggered will try to hibernated ${workspaceId}`);
                this.tryHibernateWorkspace(workspaceId);
                this.session.removeTimeout(workspaceId);
            }, (_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.idleWorkspaces) === null || _b === void 0 ? void 0 : _b.idleMSThreshold);
            this.session.saveTimeout(workspaceId, timeout);
        }
    }

    class SystemController {
        constructor(session) {
            this.session = session;
            this.base = {};
            this.started = false;
            this.platformOperations = [
                "cleanupClientsOnWorkspaceFrameUnregister"
            ];
            this.operations = {
                getEnvironment: { name: "getEnvironment", resultDecoder: anyDecoder, execute: this.handleGetEnvironment.bind(this) },
                getBase: { name: "getBase", resultDecoder: anyDecoder, execute: this.handleGetBase.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) }
            };
        }
        get logger() {
            return logger.get("applications.controller");
        }
        start(config) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                this.environment = config.environment;
                this.base = {
                    workspaces: {
                        frameCache: config.workspacesFrameCache
                    },
                    workspacesFrameCache: config.workspacesFrameCache,
                    communicationId: (_a = this.session.getSystemSettings()) === null || _a === void 0 ? void 0 : _a.systemInstanceId,
                    platformVersion: version
                };
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) ;
                const applicationData = args.data;
                const commandId = args.commandId;
                const operationValidation = systemOperationTypesDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This system request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(applicationData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`System request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(applicationData)}`);
                const result = yield this.operations[operationName].execute(applicationData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`System request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupportedByController = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                const isSupportedByPlatform = this.platformOperations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported: isSupportedByController || isSupportedByPlatform };
            });
        }
        handleGetEnvironment() {
            return __awaiter$3(this, void 0, void 0, function* () {
                return this.environment;
            });
        }
        handleGetBase() {
            return __awaiter$3(this, void 0, void 0, function* () {
                return this.base;
            });
        }
    }

    class AppDirectory {
        constructor(sessionStorage, remoteWatcher) {
            this.sessionStorage = sessionStorage;
            this.remoteWatcher = remoteWatcher;
            this.maxAllowedApplicationsInStore = 10000;
            this.baseEventFlushDurationMs = 10;
        }
        start(setup) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("Starting the application directory");
                this.appsStateChange = setup.appsStateChange;
                this.sequelizer = setup.sequelizer;
                if (setup.config.local && setup.config.local.length) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("Detected local applications, parsing...");
                    yield this.processAppDefinitions(setup.config.local, { type: "inmemory", mode: "merge" });
                }
                if (setup.config.remote) {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace("Detected remote app store configuration, starting the watcher...");
                    this.remoteWatcher.start(setup.config.remote, (apps) => this.processAppDefinitions(apps, { type: "remote", mode: "replace" }));
                }
            });
        }
        processAppDefinitions(definitions, config) {
            return this.sequelizer.enqueue(() => __awaiter$3(this, void 0, void 0, function* () {
                const parsedDefinitions = definitions.map((def) => this.parseDefinition(def));
                const currentApps = this.sessionStorage.getAllApps(config.type);
                const mergeResult = this[config.mode](currentApps, parsedDefinitions);
                if (mergeResult.readyApps.length > this.maxAllowedApplicationsInStore) {
                    throw new Error("Cannot save the app definitions, because the total number exceeds 10000, which is the limit.");
                }
                this.sessionStorage.overwriteApps(mergeResult.readyApps, config.type);
                yield this.announceApps(mergeResult);
            }));
        }
        getAll() {
            return this.sequelizer.enqueue(() => __awaiter$3(this, void 0, void 0, function* () {
                const inMemory = this.sessionStorage.getAllApps("inmemory");
                const remote = this.sessionStorage.getAllApps("remote");
                return inMemory.concat(remote);
            }));
        }
        exportInMemory() {
            return this.sequelizer.enqueue(() => __awaiter$3(this, void 0, void 0, function* () {
                const allBaseApps = this.sessionStorage.getAllApps("inmemory");
                return allBaseApps.map(this.reverseParseDefinition);
            }));
        }
        removeInMemory(name) {
            return this.sequelizer.enqueue(() => __awaiter$3(this, void 0, void 0, function* () {
                return this.sessionStorage.removeApp(name, "inmemory");
            }));
        }
        merge(currentApps, parsedDefinitions) {
            const result = { readyApps: [], addedApps: [], changedApps: [], removedApps: [] };
            const currentAppsTable = currentApps.reduce((soFar, definition) => {
                soFar[definition.name] = definition;
                return soFar;
            }, {});
            parsedDefinitions.forEach((definition) => {
                if (currentAppsTable[definition.name] && !objEqualFast(definition, currentAppsTable[definition.name])) {
                    currentAppsTable[definition.name] = definition;
                    result.changedApps.push(definition);
                    return;
                }
                if (!currentAppsTable[definition.name]) {
                    currentAppsTable[definition.name] = definition;
                    result.addedApps.push(definition);
                    return;
                }
            });
            result.readyApps = Object.values(currentAppsTable);
            return result;
        }
        replace(currentApps, parsedDefinitions) {
            const result = { readyApps: [], addedApps: [], changedApps: [], removedApps: [] };
            const currentAppsTable = currentApps.reduce((soFar, definition) => {
                soFar[definition.name] = definition;
                return soFar;
            }, {});
            parsedDefinitions.forEach((definition) => {
                if (!currentAppsTable[definition.name]) {
                    result.addedApps.push(definition);
                }
                if (currentAppsTable[definition.name] && !objEqualFast(definition, currentAppsTable[definition.name])) {
                    result.changedApps.push(definition);
                }
                if (currentAppsTable[definition.name]) {
                    currentAppsTable[definition.name].isChecked = true;
                }
            });
            result.removedApps = currentApps.filter((app) => !app.isChecked);
            result.readyApps = parsedDefinitions;
            return result;
        }
        reverseParseDefinition(definition) {
            const definitionDetails = definition.userProperties.details;
            const _a = definition.userProperties, removedDetails = __rest$3(_a, ["details"]);
            return {
                name: definition.name,
                type: definition.type || "window",
                title: definition.title,
                version: definition.version,
                icon: definition.icon,
                caption: definition.caption,
                details: definitionDetails,
                customProperties: removedDetails
            };
        }
        parseDefinition(definition) {
            var _a;
            const glue42CoreAppProps = ["name", "title", "version", "customProperties", "icon", "caption", "type"];
            const userProperties = Object.fromEntries(Object.entries(definition).filter(([key]) => !glue42CoreAppProps.includes(key)));
            let createOptions = { url: "" };
            if (definition.manifest) {
                const parsedManifest = JSON.parse(definition.manifest);
                const url = ((_a = parsedManifest.details) === null || _a === void 0 ? void 0 : _a.url) || parsedManifest.url;
                if (!url || typeof url !== "string") {
                    throw new Error(`The FDC3 definition: ${definition.name} is not valid, because there is not url defined in the manifest`);
                }
                createOptions.url = url;
            }
            else {
                createOptions = definition.details;
            }
            const baseDefinition = {
                createOptions,
                type: definition.type || "window",
                name: definition.name,
                title: definition.title,
                version: definition.version,
                icon: definition.icon,
                caption: definition.caption,
                userProperties: Object.assign(Object.assign({}, userProperties), definition.customProperties)
            };
            if (!baseDefinition.userProperties.details) {
                baseDefinition.userProperties.details = createOptions;
            }
            Object
                .keys(baseDefinition)
                .forEach((key) => baseDefinition[key] === undefined && delete baseDefinition[key]);
            return baseDefinition;
        }
        get logger() {
            return logger.get("applications.remote.directory");
        }
        announceApps(mergeResult) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const appsStateChange = {
                    appsAdded: mergeResult.addedApps,
                    appsChanged: mergeResult.changedApps,
                    appsRemoved: mergeResult.removedApps
                };
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`announcing a change in the app directory state: ${JSON.stringify(appsStateChange)}`);
                this.appsStateChange(appsStateChange);
                yield this.waitEventFlush();
            });
        }
        waitEventFlush() {
            return new Promise((resolve) => setTimeout(resolve, this.baseEventFlushDurationMs));
        }
    }

    const fetchTimeout = (request, timeoutMilliseconds = defaultFetchTimeoutMs) => {
        return new Promise((resolve, reject) => {
            let timeoutHit = false;
            const timeout = setTimeout(() => {
                timeoutHit = true;
                reject(new Error(`Fetch request for: ${JSON.stringify(request)} timed out at: ${timeoutMilliseconds} milliseconds`));
            }, timeoutMilliseconds);
            fetch(request)
                .then((response) => {
                if (!timeoutHit) {
                    clearTimeout(timeout);
                    resolve(response);
                }
            })
                .catch((err) => {
                if (!timeoutHit) {
                    clearTimeout(timeout);
                    reject(err);
                }
            });
        });
    };

    const defaultRemoteWatcherHeaders = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    };
    const defaultRemoteWatcherRequestTimeoutMS = 3000;

    class RemoteWatcher {
        start(config, handleApps) {
            var _a;
            this.url = config.url;
            this.handleApps = handleApps;
            this.requestTimeout = config.requestTimeout || defaultRemoteWatcherRequestTimeoutMS;
            this.pollingInterval = config.pollingInterval;
            this.setRequest(config.customHeaders);
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Remote watcher configured with timeout: ${this.requestTimeout} and interval: ${this.pollingInterval}`);
            this.poll();
        }
        poll() {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                try {
                    const response = yield fetchTimeout(this.request, this.requestTimeout);
                    const responseJson = yield response.json();
                    if (!responseJson || !Array.isArray(responseJson.applications)) {
                        throw new Error("The remote response was either empty or did not contain an applications collection");
                    }
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("There is a valid response from the app store, processing definitions...");
                    const validatedApps = responseJson.applications.reduce((soFar, app) => {
                        var _a;
                        const result = allApplicationDefinitionsDecoder.run(app);
                        if (result.ok) {
                            soFar.push(app);
                        }
                        else {
                            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(`Removing applications definition with name: ${app.name} from the remote response, because of validation error: ${JSON.stringify(result.error)}`);
                        }
                        return soFar;
                    }, []);
                    yield this.handleApps(validatedApps);
                }
                catch (error) {
                    const stringError = typeof error === "string" ? error : JSON.stringify(error.message);
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(stringError);
                }
                finally {
                    if (this.pollingInterval) {
                        yield this.waitInterval();
                        this.poll();
                    }
                }
            });
        }
        setRequest(customHeaders = {}) {
            var _a;
            const requestHeaders = new Headers();
            for (const key in defaultRemoteWatcherHeaders) {
                requestHeaders.append(key, defaultRemoteWatcherHeaders[key]);
            }
            for (const key in customHeaders) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("Custom headers detected and set");
                requestHeaders.append(key, customHeaders[key]);
            }
            this.request = new Request(this.url, {
                method: "GET",
                headers: requestHeaders,
                mode: "cors",
                cache: "default"
            });
        }
        waitInterval() {
            return new Promise((resolve) => setTimeout(resolve, this.pollingInterval));
        }
        get logger() {
            return logger.get("applications.remote.directory");
        }
    }

    class ServiceWorkerController {
        constructor(ioc) {
            this.ioc = ioc;
            this.registry = lib();
        }
        get logger() {
            return logger.get("service.worker.web.platform");
        }
        get serviceWorkerRegistration() {
            if (!this._serviceWorkerRegistration) {
                throw new Error("Accessing missing service worker registration object. This is caused because the application is trying to raise a persistent notification, which requires a service worker. Please provide a service worker config when initializing GlueWebPlatform.");
            }
            return this._serviceWorkerRegistration;
        }
        connect(config) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!config.serviceWorker) {
                    return;
                }
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info("Detected service worker definition, connecting...");
                if (!config.serviceWorker.url && !config.serviceWorker.registrationPromise) {
                    throw new Error("The service worker config is defined, but it is missing a url or a registration promise, please provide one or the other");
                }
                if (config.serviceWorker.url && config.serviceWorker.registrationPromise) {
                    throw new Error("The service worker is over-specified, there is both defined url and a registration promise, please provide one or the other");
                }
                yield this.prepareSwDb();
                this._serviceWorkerRegistration = config.serviceWorker.url ?
                    yield this.registerWorker(config.serviceWorker.url) :
                    yield this.waitRegistration(config.serviceWorker.registrationPromise);
                if (this._serviceWorkerRegistration) {
                    this.setUpBroadcastChannelConnection();
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info("Service worker connection completed.");
            });
        }
        showNotification(settings, id) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const options = Object.assign({}, settings, { title: undefined, clickInterop: undefined, actions: undefined });
                options.actions = (_a = settings.actions) === null || _a === void 0 ? void 0 : _a.map((action) => {
                    return {
                        action: action.action,
                        title: action.title,
                        icon: action.icon
                    };
                });
                const glueData = {
                    focusPlatformOnDefaultClick: settings.focusPlatformOnDefaultClick,
                    clickInterop: settings.clickInterop,
                    actions: settings.actions,
                    id
                };
                if (options.data) {
                    options.data.glueData = glueData;
                }
                else {
                    options.data = { glueData };
                }
                yield this.serviceWorkerRegistration.showNotification(settings.title, options);
            });
        }
        notifyReady() {
            if (this._serviceWorkerRegistration) {
                this.channel.postMessage({ platformStarted: true });
            }
        }
        onNotificationClick(callback) {
            return this.registry.add("notification-click", callback);
        }
        onNotificationClose(callback) {
            return this.registry.add("notification-close", callback);
        }
        setUpBroadcastChannelConnection() {
            this.channel = new BroadcastChannel(serviceWorkerBroadcastChannelName);
            this.channel.addEventListener("message", (event) => __awaiter$3(this, void 0, void 0, function* () {
                var _a;
                const eventData = event.data;
                const messageType = eventData === null || eventData === void 0 ? void 0 : eventData.messageType;
                if (!messageType) {
                    return;
                }
                if (messageType === "ping") {
                    this.channel.postMessage({ pong: true });
                    return;
                }
                if (messageType === "notificationClick") {
                    const action = eventData.action;
                    const glueData = eventData.glueData;
                    this.registry.execute("notification-click", { action, glueData });
                    return;
                }
                if (messageType === "notificationClose") {
                    const action = eventData.action;
                    const glueData = eventData.glueData;
                    this.registry.execute("notification-close", { action, glueData });
                    return;
                }
                if (messageType === "notificationError") {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`Service worker error when raising notification: ${eventData.error}`);
                    return;
                }
            }));
        }
        registerWorker(workerUrl) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!("serviceWorker" in navigator)) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(`A defined service worker has not been registered at ${workerUrl} because this browser does not support it.`);
                    return;
                }
                try {
                    const registration = yield navigator.serviceWorker.register(workerUrl);
                    return registration;
                }
                catch (error) {
                    const stringError = typeof error === "string" ? error : JSON.stringify(error.message);
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(stringError);
                }
            });
        }
        waitRegistration(registrationPromise) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (typeof registrationPromise.then !== "function" || typeof registrationPromise.catch !== "function") {
                    throw new Error("The provided service worker registration promise is not a promise");
                }
                const registration = yield registrationPromise;
                if (typeof registration.showNotification !== "function") {
                    throw new Error("The provided registration promise is a promise, but it resolved with an object which does not appear to be a ServiceWorkerRegistration");
                }
                return registration;
            });
        }
        prepareSwDb() {
            return __awaiter$3(this, void 0, void 0, function* () {
                const db = yield this.ioc.getDatabase();
                yield db.clear("serviceWorker");
                yield db.put("serviceWorker", { platformUrl: window.location.href }, "workerData");
            });
        }
    }

    const notificationsOperationDecoder = oneOf(constant("raiseNotification"), constant("requestPermission"), constant("getPermission"), constant("operationCheck"), constant("list"), constant("clear"), constant("click"), constant("clearAll"));
    const interopActionSettingsDecoder = object({
        method: nonEmptyStringDecoder,
        arguments: optional(anyJson()),
        target: optional(oneOf(constant("all"), constant("best")))
    });
    const glue42NotificationActionDecoder = object({
        action: string(),
        title: nonEmptyStringDecoder,
        icon: optional(string()),
        interop: optional(interopActionSettingsDecoder)
    });
    const glue42NotificationOptionsDecoder = object({
        title: nonEmptyStringDecoder,
        clickInterop: optional(interopActionSettingsDecoder),
        actions: optional(array(glue42NotificationActionDecoder)),
        focusPlatformOnDefaultClick: optional(boolean()),
        badge: optional(string()),
        body: optional(string()),
        data: optional(anyJson()),
        dir: optional(oneOf(constant("auto"), constant("ltr"), constant("rtl"))),
        icon: optional(string()),
        image: optional(string()),
        lang: optional(string()),
        renotify: optional(boolean()),
        requireInteraction: optional(boolean()),
        silent: optional(boolean()),
        tag: optional(string()),
        timestamp: optional(nonNegativeNumberDecoder),
        vibrate: optional(array(number())),
        severity: optional(oneOf(constant("Low"), constant("None"), constant("Medium"), constant("High"), constant("Critical"))),
        showToast: optional(boolean()),
        showInPanel: optional(boolean())
    });
    const raiseNotificationDecoder = object({
        settings: glue42NotificationOptionsDecoder,
        id: nonEmptyStringDecoder
    });
    const permissionRequestResultDecoder = object({
        permissionGranted: boolean()
    });
    const permissionQueryResultDecoder = object({
        permission: oneOf(constant("default"), constant("granted"), constant("denied"))
    });
    const simpleNotificationSelectDecoder = object({
        id: nonEmptyStringDecoder
    });
    const notificationClickConfigDecoder = object({
        id: nonEmptyStringDecoder,
        action: optional(nonEmptyStringDecoder)
    });
    const notificationsDataDecoder = object({
        id: nonEmptyStringDecoder,
        title: nonEmptyStringDecoder,
        clickInterop: optional(interopActionSettingsDecoder),
        actions: optional(array(glue42NotificationActionDecoder)),
        focusPlatformOnDefaultClick: optional(boolean()),
        badge: optional(string()),
        body: optional(string()),
        data: optional(anyJson()),
        dir: optional(oneOf(constant("auto"), constant("ltr"), constant("rtl"))),
        icon: optional(string()),
        image: optional(string()),
        lang: optional(string()),
        renotify: optional(boolean()),
        requireInteraction: optional(boolean()),
        silent: optional(boolean()),
        tag: optional(string()),
        timestamp: optional(nonNegativeNumberDecoder),
        vibrate: optional(array(number())),
        severity: optional(oneOf(constant("Low"), constant("None"), constant("Medium"), constant("High"), constant("Critical"))),
        showToast: optional(boolean()),
        showInPanel: optional(boolean())
    });
    const allNotificationsDataDecoder = object({
        notifications: array(notificationsDataDecoder)
    });

    class NotificationsController {
        constructor(glueController, serviceWorkerController, session) {
            this.glueController = glueController;
            this.serviceWorkerController = serviceWorkerController;
            this.session = session;
            this.started = false;
            this.isInExtension = false;
            this.operations = {
                raiseNotification: { name: "raiseNotification", execute: this.handleRaiseNotification.bind(this), dataDecoder: raiseNotificationDecoder },
                requestPermission: { name: "requestPermission", resultDecoder: permissionRequestResultDecoder, execute: this.handleRequestPermission.bind(this) },
                getPermission: { name: "getPermission", resultDecoder: permissionQueryResultDecoder, execute: this.handleGetPermission.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) },
                list: { name: "list", resultDecoder: allNotificationsDataDecoder, execute: this.handleList.bind(this) },
                click: { name: "click", dataDecoder: notificationClickConfigDecoder, execute: this.handleClick.bind(this) },
                clear: { name: "clear", dataDecoder: simpleNotificationSelectDecoder, execute: this.handleClear.bind(this) },
                clearAll: { name: "clearAll", execute: this.handleClearAll.bind(this) }
            };
        }
        get logger() {
            return logger.get("notifications.controller");
        }
        start(config) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!config.notifications.enable) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log("Skipping the notifications controller initialization, because it was disabled upon platform initialization");
                    return;
                }
                this.enableToasts = config.notifications.enableToasts;
                this.clearNotificationOnClick = config.notifications.clearNotificationOnClick;
                this.started = true;
                const currentProtocol = (new URL(window.location.href)).protocol;
                if (currentProtocol.includes("extension")) {
                    yield this.setupExtensionNotifications();
                }
                this.listenForServiceWorkerNotificationEvents();
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) ;
                const notificationsData = args.data;
                const commandId = args.commandId;
                const operationValidation = notificationsOperationDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This notifications request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(notificationsData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`Notifications request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(notificationsData)}`);
                const result = yield this.operations[operationName].execute(notificationsData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`Notifications request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleList(_, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a list notification message`);
                const allNotifications = this.session.getAllNotifications();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] list notification message completed`);
                return { notifications: allNotifications };
            });
        }
        handleClick(config, commandId) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a click notification message with data: ${JSON.stringify(config)}`);
                const notification = this.session.getNotification(config.id);
                if (!notification) {
                    throw new Error(`Cannot click a notification: ${config.id}, because it doesn't exist`);
                }
                if (config.action && ((_b = notification.actions) === null || _b === void 0 ? void 0 : _b.every((action) => action.action !== config.action))) {
                    throw new Error(`Cannot click action ${config.action} of  ${config.id}, because that notification does not have that action`);
                }
                this.handleNotificationClick({ notification, action: config.action });
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] handling a click notification message completed`);
            });
        }
        handleClear(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a clear notification message with data: ${JSON.stringify(config)}`);
                this.removeNotification(config.id);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] handling a clear notification message completed`);
            });
        }
        handleClearAll(_, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a clearAll notifications message`);
                const allNotifications = this.session.getAllNotifications();
                allNotifications.forEach((notification) => this.removeNotification(notification.id));
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] handling a clearAll notification message completed`);
            });
        }
        handleRaiseNotification({ settings, id }, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a raise notification message with a title: ${settings.title}`);
                this.processNewNotification(settings, id);
                const showToast = this.enableToasts ? !!settings.showToast : this.enableToasts;
                yield this.showToast({ settings, id }, showToast, commandId);
                const definition = Object.assign({}, settings, { title: undefined, clickInterop: undefined, actions: undefined });
                const notificationEventPayload = { definition, id };
                setTimeout(() => this.glueController.pushSystemMessage("notifications", "notificationShow", notificationEventPayload), 0);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] notification with a title: ${settings.title} was successfully raised`);
            });
        }
        showToast({ settings, id }, showToast, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!showToast) {
                    return;
                }
                if (this.isInExtension) {
                    yield this.raiseExtensionToast(settings, id, commandId);
                    return;
                }
                const hasDefinedActions = settings.actions && settings.actions.length;
                if (hasDefinedActions) {
                    yield this.raiseActionsToast(settings, id, commandId);
                    return;
                }
                this.raiseSimpleToast(settings, id, commandId);
            });
        }
        handleGetPermission(_, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a get permission message`);
                const permissionValue = Notification.permission;
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] permission for raising notifications is: ${permissionValue}`);
                return { permission: permissionValue };
            });
        }
        handleRequestPermission(_, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling a request permission message`);
                let permissionValue = Notification.permission;
                if (permissionValue !== "granted") {
                    permissionValue = yield Notification.requestPermission();
                }
                const permissionGranted = permissionValue === "granted";
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] permission for raising notifications is: ${permissionValue}`);
                return { permissionGranted };
            });
        }
        raiseSimpleToast(settings, id, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] notification with a title: ${settings.title} was found to be non-persistent and therefore will be raised with the native notifications API`);
                const options = Object.assign({}, settings, { title: undefined, clickInterop: undefined });
                const notification = new Notification(settings.title, options);
                notification.onclick = () => {
                    if (settings.focusPlatformOnDefaultClick) {
                        window.focus();
                    }
                    const notificationData = this.session.getNotification(id);
                    if (!notificationData) {
                        return;
                    }
                    this.handleNotificationClick({ action: "", notification: notificationData });
                };
                notification.onclose = () => this.removeNotification(id);
            });
        }
        raiseActionsToast(settings, id, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] notification with a title: ${settings.title} was found to be persistent and therefore the service worker will be instructed to raise it.`);
                yield this.serviceWorkerController.showNotification(settings, id);
            });
        }
        raiseExtensionToast(settings, id, commandId) {
            return new Promise((resolve, reject) => {
                var _a;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] notification with a title: ${settings.title} will be raised with the native extension notifications API, because the platform is running in extension mode`);
                if (!this.extNotificationConfig) {
                    return reject("Cannot raise a notification, because the environment settings for the extension mode are missing.");
                }
                const buttons = settings.actions ?
                    settings.actions.map((action) => ({ title: action.title, iconUrl: action.icon })) :
                    undefined;
                const chromeOptions = {
                    type: "basic",
                    iconUrl: settings.icon || this.extNotificationConfig.defaultIcon,
                    title: settings.title,
                    message: settings.body || this.extNotificationConfig.defaultMessage,
                    silent: settings.silent,
                    requireInteraction: settings.requireInteraction,
                    imageUrl: settings.image,
                    buttons
                };
                chrome.notifications.create(id, chromeOptions, () => resolve());
            });
        }
        setupExtensionNotifications() {
            return __awaiter$3(this, void 0, void 0, function* () {
                this.isInExtension = true;
                this.extNotificationConfig = (yield this.getExtNotificationsConfig()).notifications;
                this.listenForExtensionNotificationsEvents();
            });
        }
        listenForExtensionNotificationsEvents() {
            chrome.notifications.onClicked.addListener((id) => {
                const notificationData = this.session.getNotification(id);
                if (!notificationData) {
                    return;
                }
                this.handleNotificationClick({ notification: notificationData });
            });
            chrome.notifications.onButtonClicked.addListener((id, buttonIndex) => {
                const notificationData = this.session.getNotification(id);
                if (!notificationData) {
                    return;
                }
                if (!notificationData.actions) {
                    return;
                }
                const action = notificationData.actions[buttonIndex].action;
                this.handleNotificationClick({ action, notification: notificationData });
            });
            chrome.notifications.onClosed.addListener((id) => this.removeNotification(id));
        }
        listenForServiceWorkerNotificationEvents() {
            this.serviceWorkerController.onNotificationClick((clickData) => {
                const notificationData = this.session.getNotification(clickData.glueData.id);
                if (!notificationData) {
                    return;
                }
                this.handleNotificationClick({ action: clickData.action, notification: notificationData });
            });
            this.serviceWorkerController.onNotificationClose((notification) => this.removeNotification(notification.glueData.id));
        }
        getExtNotificationsConfig() {
            return new Promise((resolve) => {
                chrome.storage.local.get("notifications", (entry) => {
                    resolve(entry);
                });
            });
        }
        handleNotificationClick(clickData) {
            var _a, _b;
            if (!clickData.action && clickData.notification.clickInterop) {
                this.callDefinedInterop(clickData.notification.clickInterop);
            }
            const foundNotificationInteropAction = clickData.action ?
                (_a = clickData.notification.actions) === null || _a === void 0 ? void 0 : _a.find((actionDef) => actionDef.action === clickData.action) :
                null;
            if (foundNotificationInteropAction && foundNotificationInteropAction.interop) {
                this.callDefinedInterop(foundNotificationInteropAction.interop);
            }
            if ((_b = clickData.notification.data) === null || _b === void 0 ? void 0 : _b.glueData) {
                delete clickData.notification.data.glueData;
            }
            const notificationEventPayload = {
                definition: clickData.notification,
                action: clickData.action,
                id: clickData.notification.id
            };
            if (this.clearNotificationOnClick) {
                this.removeNotification(clickData.notification.id);
            }
            this.glueController.pushSystemMessage("notifications", "notificationClick", notificationEventPayload);
        }
        callDefinedInterop(interopConfig) {
            const method = interopConfig.method;
            const args = interopConfig.arguments;
            const target = interopConfig.target;
            this.glueController.invokeMethod(method, args, target)
                .catch((err) => {
                var _a;
                const stringError = typeof err === "string" ? err : JSON.stringify(err.message);
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(`The interop invocation defined in the clickInterop was rejected, reason: ${stringError}`);
            });
        }
        processNewNotification(settings, id) {
            const notificationData = Object.assign({ id }, settings);
            this.session.saveNotification(notificationData);
            this.glueController.pushSystemMessage("notifications", "notificationRaised", { notification: notificationData });
        }
        removeNotification(id) {
            this.session.removeNotification(id);
            this.glueController.pushSystemMessage("notifications", "notificationClosed", { id });
        }
    }

    const extensionOperationTypesDecoder = oneOf(constant("clientHello"), constant("operationCheck"));
    const clientHelloResponseDecoder = object({
        widget: object({
            inject: boolean()
        })
    });
    const clientHelloDecoder = object({
        windowId: nonEmptyStringDecoder
    });

    class ExtensionController {
        constructor(session) {
            this.session = session;
            this.started = false;
            this.operations = {
                clientHello: { name: "appHello", resultDecoder: clientHelloResponseDecoder, dataDecoder: clientHelloDecoder, execute: this.handleClientHello.bind(this) },
                operationCheck: { name: "operationCheck", dataDecoder: operationCheckConfigDecoder, resultDecoder: operationCheckResultDecoder, execute: this.handleOperationCheck.bind(this) }
            };
        }
        get logger() {
            return logger.get("extension.controller");
        }
        start() {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                this.started = true;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("initialization is completed");
            });
        }
        handleControl(args) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!this.started) ;
                const applicationData = args.data;
                const commandId = args.commandId;
                const operationValidation = extensionOperationTypesDecoder.run(args.operation);
                if (!operationValidation.ok) {
                    throw new Error(`This extension request cannot be completed, because the operation name did not pass validation: ${JSON.stringify(operationValidation.error)}`);
                }
                const operationName = operationValidation.result;
                const incomingValidation = (_a = this.operations[operationName].dataDecoder) === null || _a === void 0 ? void 0 : _a.run(applicationData);
                if (incomingValidation && !incomingValidation.ok) {
                    throw new Error(`Extension request for ${operationName} rejected, because the provided arguments did not pass the validation: ${JSON.stringify(incomingValidation.error)}`);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`[${commandId}] ${operationName} command is valid with data: ${JSON.stringify(applicationData)}`);
                const result = yield this.operations[operationName].execute(applicationData, commandId);
                const resultValidation = (_c = this.operations[operationName].resultDecoder) === null || _c === void 0 ? void 0 : _c.run(result);
                if (resultValidation && !resultValidation.ok) {
                    throw new Error(`Extension request for ${operationName} could not be completed, because the operation result did not pass the validation: ${JSON.stringify(resultValidation.error)}`);
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] ${operationName} command was executed successfully`);
                return result;
            });
        }
        handleClientHello(config, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] handling client hello command`);
                const widgetConfig = (yield this.getWidgetConfig()).widget;
                const isWorkspaceFrame = !!this.session.getFrameData(config.windowId);
                const shouldInjectWidget = isWorkspaceFrame ? false :
                    widgetConfig ? widgetConfig.enable : false;
                const response = {
                    widget: {
                        inject: shouldInjectWidget
                    }
                };
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] responding to client hello command with: ${JSON.stringify(response)}`);
                return response;
            });
        }
        handleOperationCheck(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const operations = Object.keys(this.operations);
                const isSupported = operations.some((operation) => operation.toLowerCase() === config.operation.toLowerCase());
                return { isSupported };
            });
        }
        getWidgetConfig() {
            const currentProtocol = (new URL(window.location.href)).protocol;
            if (!currentProtocol.includes("extension")) {
                return Promise.resolve({ widget: { enable: false } });
            }
            return new Promise((resolve) => {
                chrome.storage.local.get("widget", (entry) => {
                    resolve(entry);
                });
            });
        }
    }

    class AsyncSequelizer {
        constructor(minSequenceInterval = 0) {
            this.minSequenceInterval = minSequenceInterval;
            this.queue = [];
            this.isExecutingQueue = false;
        }
        enqueue(action) {
            return new Promise((resolve, reject) => {
                this.queue.push({ action, resolve, reject });
                this.executeQueue();
            });
        }
        executeQueue() {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (this.isExecutingQueue) {
                    return;
                }
                this.isExecutingQueue = true;
                while (this.queue.length) {
                    const operation = this.queue.shift();
                    if (!operation) {
                        this.isExecutingQueue = false;
                        return;
                    }
                    try {
                        const actionResult = yield operation.action();
                        operation.resolve(actionResult);
                    }
                    catch (error) {
                        operation.reject(error);
                    }
                    yield this.intervalBreak();
                }
                this.isExecutingQueue = false;
            });
        }
        intervalBreak() {
            return new Promise((res) => setTimeout(res, this.minSequenceInterval));
        }
    }

    class PreferredConnectionController {
        constructor(glueController, portsBridge, sequelizer) {
            this.glueController = glueController;
            this.portsBridge = portsBridge;
            this.sequelizer = sequelizer;
            this.registry = lib();
        }
        get logger() {
            return logger.get("preferred.connection.controller");
        }
        start(config) {
            var _a, _b, _c;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Starting the preferred connection with config: ${JSON.stringify(config)}`);
                this.preferredUrl = config.url;
                this.preferredAuth = Object.assign({}, { provider: "core" }, config.auth);
                this.shouldForceTransfer = typeof config.forceIncompleteSwitch === "boolean" ? config.forceIncompleteSwitch : false;
                this.discoveryInterval = typeof config.discoveryIntervalMS === "number" ? config.discoveryIntervalMS : defaultPreferredDiscoveryIntervalMS;
                this.portsBridge.setPreferredActivated();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("Starting the initial preferred connection check");
                yield this.connectPreferred();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace("The preferred connection controller initiated.");
            });
        }
        onReconnect(callback) {
            return this.registry.add("system-reconnect", callback);
        }
        connectPreferred() {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter$3(this, void 0, void 0, function* () {
                const check = yield this.checkPreFlight();
                if (!check.ready) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("The preflight is not ready, restarting the preferred tracking.");
                    wait(this.discoveryInterval).then(() => this.connectPreferred());
                    return;
                }
                const transportSwitchConfig = {
                    type: "secondary",
                    transportConfig: Object.assign({ url: this.preferredUrl }, { auth: this.preferredAuth })
                };
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("Switching the system glue.");
                const switched = (yield this.glueController.switchTransport(transportSwitchConfig, "system")).success;
                if (!switched) {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace("The switch attempt was not successful, revered to default.");
                    wait(this.discoveryInterval).then(() => this.connectPreferred());
                    return;
                }
                this.portsBridge.setActivePreferredTransportConfig(transportSwitchConfig);
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace("The switch to the preferred connection was successful, transferring all children.");
                try {
                    yield this.changeClientsConnection(transportSwitchConfig);
                }
                catch (error) {
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.warn(`Some platform clients could not connect to the preferred connection, reverting all to the default connection. Reason: ${JSON.stringify(error)}`);
                    this.fullDefaultRevert()
                        .then(() => wait(this.discoveryInterval).then(() => this.connectPreferred()))
                        .catch(() => wait(this.discoveryInterval).then(() => this.connectPreferred()));
                    return;
                }
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace("The platform is now fully connected to the preferred connection, hooking up disconnection logic.");
                this.registry.execute("system-reconnect");
                const unsub = this.glueController.onDisconnected(() => this.handleDisconnected(unsub));
            });
        }
        handleDisconnected(unsub) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("The platform has been disconnected from the preferred transport, reverting all to the default one.");
            unsub();
            this.fullDefaultRevert()
                .then(() => {
                var _a;
                this.registry.execute("system-reconnect");
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("The platform reversion to default completed, restarting the preferred tracking.");
                wait(this.discoveryInterval).then(() => this.connectPreferred());
            })
                .catch(() => wait(this.discoveryInterval).then(() => this.connectPreferred()));
        }
        changeClientsConnection(config) {
            return this.sequelizer.enqueue(() => __awaiter$3(this, void 0, void 0, function* () {
                var _a, _b, _c;
                try {
                    yield Promise.all([
                        this.glueController.switchTransport(config, "client"),
                        this.portsBridge.switchAllClientsTransport(config)
                    ]);
                }
                catch (error) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Some clients could not connect to the preferred transport with error: ${JSON.stringify(error)}`);
                    if (!this.shouldForceTransfer) {
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("The platform is not forcing a transfer in cases of errors, re-throwing.");
                        throw new Error(error);
                    }
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace("The platform is forcing a transfer regardless of the errors.");
                }
                yield this.glueController.switchTransport(config, "contextsTrack");
            }));
        }
        checkPreferredConnection(url) {
            return new Promise((resolve) => {
                const ws = new WebSocket(url);
                ws.onerror = () => resolve({ live: false });
                ws.onopen = () => {
                    ws.close();
                    resolve({ live: true });
                };
            });
        }
        fullDefaultRevert() {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield this.glueController.switchTransport({ type: "default" }, "system");
                this.portsBridge.setActivePreferredTransportConfig({ type: "default" });
                yield this.changeClientsConnection({ type: "default" });
            });
        }
        checkPreFlight() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("Starting the preflight check");
                const isPreferredLive = (yield this.checkPreferredConnection(this.preferredUrl)).live;
                if (!isPreferredLive) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("The preferred connection is not live.");
                    return { ready: false };
                }
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`Found a live preferred connection at: ${this.preferredUrl}, testing the availability of transport switching logic in all current clients`);
                const logicTestResult = yield this.portsBridge.checkClientsPreferredLogic();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`The logic check returned: ${JSON.stringify(logicTestResult)}`);
                if (!logicTestResult.success && !this.shouldForceTransfer) {
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.trace("The preflight check is marked as not ready");
                    return { ready: false };
                }
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.trace("Checking the possibility of all clients to connect to the preferred connection");
                const connectionTest = yield this.portsBridge.checkClientsPreferredConnection(this.preferredUrl);
                (_g = this.logger) === null || _g === void 0 ? void 0 : _g.trace(`The connection check returned: ${JSON.stringify(connectionTest)}`);
                if (!connectionTest.success && !this.shouldForceTransfer) {
                    (_h = this.logger) === null || _h === void 0 ? void 0 : _h.trace("The preflight check is marked as not ready");
                    return { ready: false };
                }
                (_j = this.logger) === null || _j === void 0 ? void 0 : _j.trace("The preflight check is marked as ready");
                return { ready: true };
            });
        }
    }

    const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

    let idbProxyableTypes;
    let cursorAdvanceMethods;
    // This is a function to prevent it throwing up in node environments.
    function getIdbProxyableTypes() {
        return (idbProxyableTypes ||
            (idbProxyableTypes = [
                IDBDatabase,
                IDBObjectStore,
                IDBIndex,
                IDBCursor,
                IDBTransaction,
            ]));
    }
    // This is a function to prevent it throwing up in node environments.
    function getCursorAdvanceMethods() {
        return (cursorAdvanceMethods ||
            (cursorAdvanceMethods = [
                IDBCursor.prototype.advance,
                IDBCursor.prototype.continue,
                IDBCursor.prototype.continuePrimaryKey,
            ]));
    }
    const cursorRequestMap = new WeakMap();
    const transactionDoneMap = new WeakMap();
    const transactionStoreNamesMap = new WeakMap();
    const transformCache = new WeakMap();
    const reverseTransformCache = new WeakMap();
    function promisifyRequest(request) {
        const promise = new Promise((resolve, reject) => {
            const unlisten = () => {
                request.removeEventListener('success', success);
                request.removeEventListener('error', error);
            };
            const success = () => {
                resolve(wrap(request.result));
                unlisten();
            };
            const error = () => {
                reject(request.error);
                unlisten();
            };
            request.addEventListener('success', success);
            request.addEventListener('error', error);
        });
        promise
            .then((value) => {
            // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
            // (see wrapFunction).
            if (value instanceof IDBCursor) {
                cursorRequestMap.set(value, request);
            }
            // Catching to avoid "Uncaught Promise exceptions"
        })
            .catch(() => { });
        // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
        // is because we create many promises from a single IDBRequest.
        reverseTransformCache.set(promise, request);
        return promise;
    }
    function cacheDonePromiseForTransaction(tx) {
        // Early bail if we've already created a done promise for this transaction.
        if (transactionDoneMap.has(tx))
            return;
        const done = new Promise((resolve, reject) => {
            const unlisten = () => {
                tx.removeEventListener('complete', complete);
                tx.removeEventListener('error', error);
                tx.removeEventListener('abort', error);
            };
            const complete = () => {
                resolve();
                unlisten();
            };
            const error = () => {
                reject(tx.error || new DOMException('AbortError', 'AbortError'));
                unlisten();
            };
            tx.addEventListener('complete', complete);
            tx.addEventListener('error', error);
            tx.addEventListener('abort', error);
        });
        // Cache it for later retrieval.
        transactionDoneMap.set(tx, done);
    }
    let idbProxyTraps = {
        get(target, prop, receiver) {
            if (target instanceof IDBTransaction) {
                // Special handling for transaction.done.
                if (prop === 'done')
                    return transactionDoneMap.get(target);
                // Polyfill for objectStoreNames because of Edge.
                if (prop === 'objectStoreNames') {
                    return target.objectStoreNames || transactionStoreNamesMap.get(target);
                }
                // Make tx.store return the only store in the transaction, or undefined if there are many.
                if (prop === 'store') {
                    return receiver.objectStoreNames[1]
                        ? undefined
                        : receiver.objectStore(receiver.objectStoreNames[0]);
                }
            }
            // Else transform whatever we get back.
            return wrap(target[prop]);
        },
        set(target, prop, value) {
            target[prop] = value;
            return true;
        },
        has(target, prop) {
            if (target instanceof IDBTransaction &&
                (prop === 'done' || prop === 'store')) {
                return true;
            }
            return prop in target;
        },
    };
    function replaceTraps(callback) {
        idbProxyTraps = callback(idbProxyTraps);
    }
    function wrapFunction(func) {
        // Due to expected object equality (which is enforced by the caching in `wrap`), we
        // only create one new func per func.
        // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
        if (func === IDBDatabase.prototype.transaction &&
            !('objectStoreNames' in IDBTransaction.prototype)) {
            return function (storeNames, ...args) {
                const tx = func.call(unwrap(this), storeNames, ...args);
                transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
                return wrap(tx);
            };
        }
        // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
        // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
        // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
        // with real promises, so each advance methods returns a new promise for the cursor object, or
        // undefined if the end of the cursor has been reached.
        if (getCursorAdvanceMethods().includes(func)) {
            return function (...args) {
                // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
                // the original object.
                func.apply(unwrap(this), args);
                return wrap(cursorRequestMap.get(this));
            };
        }
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            return wrap(func.apply(unwrap(this), args));
        };
    }
    function transformCachableValue(value) {
        if (typeof value === 'function')
            return wrapFunction(value);
        // This doesn't return, it just creates a 'done' promise for the transaction,
        // which is later returned for transaction.done (see idbObjectHandler).
        if (value instanceof IDBTransaction)
            cacheDonePromiseForTransaction(value);
        if (instanceOfAny(value, getIdbProxyableTypes()))
            return new Proxy(value, idbProxyTraps);
        // Return the same value back if we're not going to transform it.
        return value;
    }
    function wrap(value) {
        // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
        // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
        if (value instanceof IDBRequest)
            return promisifyRequest(value);
        // If we've already transformed this value before, reuse the transformed value.
        // This is faster, but it also provides object equality.
        if (transformCache.has(value))
            return transformCache.get(value);
        const newValue = transformCachableValue(value);
        // Not all types are transformed.
        // These may be primitive types, so they can't be WeakMap keys.
        if (newValue !== value) {
            transformCache.set(value, newValue);
            reverseTransformCache.set(newValue, value);
        }
        return newValue;
    }
    const unwrap = (value) => reverseTransformCache.get(value);

    /**
     * Open a database.
     *
     * @param name Name of the database.
     * @param version Schema version.
     * @param callbacks Additional callbacks.
     */
    function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
        const request = indexedDB.open(name, version);
        const openPromise = wrap(request);
        if (upgrade) {
            request.addEventListener('upgradeneeded', (event) => {
                upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
            });
        }
        if (blocked) {
            request.addEventListener('blocked', (event) => blocked(
            // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
            event.oldVersion, event.newVersion, event));
        }
        openPromise
            .then((db) => {
            if (terminated)
                db.addEventListener('close', () => terminated());
            if (blocking) {
                db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
            }
        })
            .catch(() => { });
        return openPromise;
    }

    const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
    const writeMethods = ['put', 'add', 'delete', 'clear'];
    const cachedMethods = new Map();
    function getMethod(target, prop) {
        if (!(target instanceof IDBDatabase &&
            !(prop in target) &&
            typeof prop === 'string')) {
            return;
        }
        if (cachedMethods.get(prop))
            return cachedMethods.get(prop);
        const targetFuncName = prop.replace(/FromIndex$/, '');
        const useIndex = prop !== targetFuncName;
        const isWrite = writeMethods.includes(targetFuncName);
        if (
        // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
        !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
            !(isWrite || readMethods.includes(targetFuncName))) {
            return;
        }
        const method = async function (storeName, ...args) {
            // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
            const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
            let target = tx.store;
            if (useIndex)
                target = target.index(args.shift());
            // Must reject if op rejects.
            // If it's a write operation, must reject if tx.done rejects.
            // Must reject with op rejection first.
            // Must resolve with op value.
            // Must handle both promises (no unhandled rejections)
            return (await Promise.all([
                target[targetFuncName](...args),
                isWrite && tx.done,
            ]))[0];
        };
        cachedMethods.set(prop, method);
        return method;
    }
    replaceTraps((oldTraps) => ({
        ...oldTraps,
        get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
    }));

    class TransactionsController {
        constructor() {
            this.transactionLocks = {};
        }
        get logger() {
            return logger.get("transactions.controller");
        }
        completeTransaction(id, transactionData) {
            var _a;
            if (typeof id !== "string") {
                throw new Error(`Cannot complete the transaction, because the provided id is not a string: ${JSON.stringify(id)}`);
            }
            const foundTransaction = this.transactionLocks[id];
            if (!foundTransaction) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(`Cannot mark a transaction as complete, because there is not lock with id ${id}`);
                return;
            }
            foundTransaction.lift(transactionData);
        }
        failTransaction(id, reason) {
            var _a;
            const foundTransaction = this.transactionLocks[id];
            if (!foundTransaction) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(`Cannot mark a transaction as failed, because there is not lock with id ${id}`);
                return;
            }
            foundTransaction.fail(reason);
        }
        createTransaction(operation, timeout) {
            const transaction = {};
            const transactionId = shortidExports$1.generate();
            const transactionLock = new Promise((resolve, reject) => {
                let transactionLive = true;
                transaction.lift = (args) => {
                    transactionLive = false;
                    delete this.transactionLocks[transactionId];
                    resolve(args);
                };
                transaction.fail = (reason) => {
                    transactionLive = false;
                    delete this.transactionLocks[transactionId];
                    reject(reason);
                };
                setTimeout(() => {
                    var _a;
                    if (!transactionLive) {
                        return;
                    }
                    transactionLive = false;
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(`Transaction for operation: ${operation} timed out.`);
                    delete this.transactionLocks[transactionId];
                    reject(`Transaction for operation: ${operation} timed out.`);
                }, timeout);
            });
            transaction.lock = transactionLock;
            transaction.id = transactionId;
            this.transactionLocks[transactionId] = transaction;
            return transaction;
        }
    }

    class InterceptionController {
        constructor() {
            this.interceptions = [];
        }
        registerInterceptor(request, registrantName) {
            return __awaiter$3(this, void 0, void 0, function* () {
                interceptorRegistrationRequestDecoder.runWithException(request);
                nonEmptyStringDecoder.runWithException(registrantName);
                const collisions = request.interceptions.reduce((collisions, interception) => {
                    const foundCollision = this.interceptions.some((registeredInterception) => registeredInterception.domain === interception.domain && registeredInterception.operation === interception.operation);
                    if (foundCollision) {
                        collisions.push({ domain: interception.domain, operation: interception.operation });
                    }
                    return collisions;
                }, []);
                if (collisions.length) {
                    const collisionsAsString = collisions.map((collision) => `${collision.domain} - ${collision.operation}`).join(", ");
                    throw new Error(`Interception registration is rejected, because the following collisions where found: ${collisionsAsString}`);
                }
                request.interceptions.forEach((interception) => {
                    this.interceptions.push({
                        domain: interception.domain,
                        operation: interception.operation,
                        callInterceptor: request.callInterceptor,
                        registrantName
                    });
                });
            });
        }
        getOperationInterceptor(inquiry) {
            const foundEntry = this.interceptions.find((registeredInterception) => registeredInterception.domain === inquiry.domain && registeredInterception.operation === inquiry.operation);
            if (foundEntry) {
                return {
                    name: foundEntry.registrantName,
                    intercept: foundEntry.callInterceptor
                };
            }
        }
    }

    class PluginsController {
        constructor(interceptionController, glueController, startCore) {
            this.interceptionController = interceptionController;
            this.glueController = glueController;
            this.startCore = startCore;
            this.registeredPlugins = [];
        }
        get logger() {
            return logger.get("plugins.controller");
        }
        start(config) {
            return __awaiter$3(this, void 0, void 0, function* () {
                this.handlePluginMessage = config.handlePluginMessage;
                this.platformApi = config.api;
                if (!config.plugins || !config.plugins.length) {
                    return;
                }
                const criticalPlugins = [];
                for (const plugin of config.plugins) {
                    const startPromise = this.startPlugin(plugin);
                    if (plugin.critical) {
                        criticalPlugins.push(startPromise);
                    }
                }
                yield Promise.all(criticalPlugins);
            });
        }
        startCorePlus(platformConfig) {
            return __awaiter$3(this, void 0, void 0, function* () {
                if (!platformConfig.corePlus) {
                    return;
                }
                yield this.startCore(platformConfig);
            });
        }
        startPlugin(definition) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                try {
                    const platformControls = this.buildPlatformControls(definition.name, this.platformApi);
                    yield definition.start(this.glueController.clientGlue, definition.config, platformControls);
                    this.registerPlugin(definition.name, (_a = definition.version) !== null && _a !== void 0 ? _a : "N/A");
                }
                catch (error) {
                    const stringError = typeof error === "string" ? error : JSON.stringify(error.message);
                    const message = `Plugin: ${definition.name} threw while initiating: ${stringError}`;
                    if (definition.critical) {
                        throw new Error(message);
                    }
                    else {
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(message);
                    }
                }
            });
        }
        buildPlatformControls(pluginName, api) {
            return {
                control: (args) => this.handlePluginMessage(args, pluginName),
                logger: logger.get(pluginName),
                platformApi: api,
                interception: {
                    register: (request) => this.interceptionController.registerInterceptor(request, pluginName)
                },
                system: {
                    sendControl: (args) => this.handlePluginMessage(args, pluginName)
                }
            };
        }
        registerPlugin(name, version) {
            if (typeof name !== "string" || !name.length) {
                return;
            }
            const existingPlugin = this.registeredPlugins.some((plugin) => plugin.name === name);
            if (existingPlugin) {
                return;
            }
            this.registeredPlugins.push({ name, version });
        }
    }

    class DomainsController {
        constructor(systemController, windowsController, applicationsController, layoutsController, workspacesController, intentsController, channelsController, notificationsController, extensionController) {
            this.systemController = systemController;
            this.windowsController = windowsController;
            this.applicationsController = applicationsController;
            this.layoutsController = layoutsController;
            this.workspacesController = workspacesController;
            this.intentsController = intentsController;
            this.channelsController = channelsController;
            this.notificationsController = notificationsController;
            this.extensionController = extensionController;
            this.defaultDomainNames = ["system", "windows", "appManager", "layouts", "workspaces", "intents", "channels", "notifications", "extension"];
            this.domains = {
                system: { name: "system", libController: this.systemController },
                windows: { name: "windows", libController: this.windowsController },
                appManager: { name: "appManager", libController: this.applicationsController },
                layouts: { name: "layouts", libController: this.layoutsController },
                workspaces: { name: "workspaces", libController: this.workspacesController },
                intents: { name: "intents", libController: this.intentsController },
                channels: { name: "channels", libController: this.channelsController },
                notifications: { name: "notifications", libController: this.notificationsController },
                extension: { name: "extension", libController: this.extensionController }
            };
        }
        get logger() {
            return logger.get("domains.controller");
        }
        validateDomain(domainName) {
            const domain = this.domains[domainName];
            if (!domain) {
                throw new Error(`Accessing a missing domain: ${domainName}. Mostly likely this is due to accessing Core Plus exclusive features.`);
            }
            const decoder = domain.domainNameDecoder ? domain.domainNameDecoder : libDomainDecoder;
            decoder === null || decoder === void 0 ? void 0 : decoder.runWithException(domainName);
        }
        startAllDomains(config) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace("Starting all domains lib controllers");
                yield Promise.all(Object.values(this.domains).map((controller) => controller.libController.start(config)));
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace("All domains have been initialized");
            });
        }
        notifyDomainsClientUnloaded(client) {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`detected unloading of client: ${client.windowId}, notifying all controllers`);
            Object.values(this.domains).forEach((domain) => {
                var _a, _b, _c;
                try {
                    (_b = (_a = domain.libController).handleClientUnloaded) === null || _b === void 0 ? void 0 : _b.call(_a, client.windowId, client.win);
                }
                catch (error) {
                    const stringError = typeof error === "string" ? error : JSON.stringify(error.message);
                    const controllerName = domain.name;
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(`${controllerName} controller threw when handling unloaded client ${client.windowId} with error message: ${stringError}`);
                }
            });
        }
        executeControlMessage(controlMessage) {
            const domain = this.domains[controlMessage.domain];
            if (!domain) {
                throw new Error(`Cannot process message for domain: ${controlMessage.domain} and operation ${controlMessage.operation}, because no domain can service it.`);
            }
            return domain.libController.handleControl(controlMessage);
        }
        registerDynamicDomain(domain) {
            const currentDomainNames = Object.values(this.domains).map((registeredDomain) => registeredDomain.name);
            if (currentDomainNames.some((domainName) => domainName === domain.name)) {
                throw new Error(`Cannot register a domain with name: ${domain.name}, because it is already registered`);
            }
            if (!domain.libController || !domain.libController.start || !domain.libController.handleControl || !domain.libController.handleClientUnloaded) {
                throw new Error(`Cannot register a domain with name: ${domain.name}, because it does not have a valid libController`);
            }
            if (!domain.domainNameDecoder) {
                throw new Error(`Cannot register a domain with name: ${domain.name}, because it does not have a domain decoder`);
            }
            this.domains[domain.name] = domain;
        }
        unregisterDynamicDomain(domainName) {
            if (this.defaultDomainNames.some((defaultDomainName) => defaultDomainName === domainName)) {
                throw new Error(`Cannot unregister a domain: ${domainName}, because it is a reserved default domain`);
            }
            delete this.domains[domainName];
        }
    }

    const INTENTS_RESOLVER_INTEROP_PREFIX = "T42.Intents.Resolver.Control.";
    const INTENTS_RESOLVER_WIDTH = 400;
    const INTENTS_RESOLVER_HEIGHT = 440;

    class IntentsResolverHelper {
        constructor(glueController, workspacesController, windowsController) {
            this.glueController = glueController;
            this.workspacesController = workspacesController;
            this.windowsController = windowsController;
            this.intentsResolverResponsePromises = {};
        }
        get logger() {
            return logger.get("intents.resolver.controller");
        }
        startResolverApp(requestWithResolverInfo, callerId, commandId) {
            var _a, _b, _c, _d;
            return __awaiter$3(this, void 0, void 0, function* () {
                const { intentRequest, resolverConfig } = requestWithResolverInfo;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] Intents Resolver UI with app name ${resolverConfig.appName} will be used for request: ${JSON.stringify(intentRequest)}`);
                const responseMethodName = yield this.registerResponseMethod();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] Registered interop method ${responseMethodName}`);
                const startContext = this.buildStartContext(intentRequest, responseMethodName);
                const startOptions = yield this.buildStartOptions(callerId, commandId);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.trace(`[${commandId}] Starting Intents Resolver UI with context: ${JSON.stringify(startContext)} and options: ${startOptions}`);
                const resolverInstance = yield this.glueController.clientGlue.appManager.application(resolverConfig.appName).start(startContext, startOptions);
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.trace(`[${commandId}] Intents Resolver instance with id ${resolverInstance.id} opened`);
                this.subscribeOnInstanceStopped(resolverInstance);
                this.createResponsePromise(intentRequest.intent, resolverInstance.id, responseMethodName, resolverConfig.waitResponseTimeout);
                const handler = yield this.handleInstanceResponse(resolverInstance.id, commandId);
                return handler;
            });
        }
        handleInstanceResponse(instanceId, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                try {
                    const { handler, intent } = yield this.intentsResolverResponsePromises[instanceId].promise;
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] Intent handler chosen for intent ${intent}: ${JSON.stringify(handler)}. Stopping resolver instance with id ${instanceId}`);
                    this.stopResolverInstance(instanceId);
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] Instance with id ${instanceId} successfully stopped`);
                    return handler;
                }
                catch (error) {
                    this.stopResolverInstance(instanceId);
                    throw new Error(error);
                }
            });
        }
        registerResponseMethod() {
            return __awaiter$3(this, void 0, void 0, function* () {
                const methodName = INTENTS_RESOLVER_INTEROP_PREFIX + shortid$2();
                yield this.glueController.clientGlue.interop.register(methodName, this.responseHandler.bind(this));
                return methodName;
            });
        }
        createResponsePromise(intent, instanceId, methodName, timeout) {
            let resolve = () => { };
            let reject = () => { };
            const promise = PromisePlus((res, rej) => {
                resolve = res;
                reject = rej;
            }, timeout, `Timeout of ${timeout}ms hit waiting for the user to choose a handler for intent ${intent}`);
            this.intentsResolverResponsePromises[instanceId] = { intent, resolve, reject, promise, methodName };
        }
        buildStartContext(requestObj, methodName) {
            const startContext = {
                intent: requestObj,
                callerId: this.glueController.clientGlue.interop.instance.instance,
                methodName
            };
            return startContext;
        }
        buildStartOptions(windowId, commandId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const bounds = yield this.getTargetBounds(windowId, commandId);
                if (!bounds) {
                    throw new Error(`[${commandId}] Cannot find window with id: ${windowId} - the client which sent the 'raise' command is no longer opened`);
                }
                return {
                    top: (bounds.height - INTENTS_RESOLVER_HEIGHT) / 2 + bounds.top,
                    left: (bounds.width - INTENTS_RESOLVER_WIDTH) / 2 + bounds.left,
                    width: INTENTS_RESOLVER_WIDTH,
                    height: INTENTS_RESOLVER_HEIGHT
                };
            });
        }
        getTargetBounds(windowId, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                const bounds = (yield this.tryGetWindowBasedBounds(windowId, commandId)) || (yield this.tryGetWorkspaceBasedBounds(windowId, commandId));
                if (bounds) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] Opening Intents Resolver UI with bounds: ${JSON.stringify(bounds)}`);
                    return bounds;
                }
                const defaultBounds = {
                    top: window.screen.availTop || 0,
                    left: window.screen.availLeft || 0,
                    width: window.screen.width,
                    height: window.screen.height
                };
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] Opening Intents Resolver UI relative to my screen bounds: ${JSON.stringify(defaultBounds)}`);
                return defaultBounds;
            });
        }
        tryGetWindowBasedBounds(windowId, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                const win = this.glueController.clientGlue.windows.findById(windowId);
                const serverInstance = this.getServerInstanceByWindowId(windowId);
                if (!win && !serverInstance) {
                    throw new Error(`Client with id '${windowId}' does not exist`);
                }
                if (!win && serverInstance) {
                    return this.getWindowBoundsByServerInstance(serverInstance, windowId, commandId);
                }
                if (!win) {
                    throw new Error(`Client with id '${windowId}' does not exist`);
                }
                try {
                    const bounds = yield win.getBounds();
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] Opening the resolver UI with bounds: ${JSON.stringify(bounds)}, relative to a window with id: ${windowId}`);
                    return bounds;
                }
                catch (error) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] Failure to get bounds of a window with id ${windowId}. Error: ${JSON.stringify(error)}`);
                    return;
                }
            });
        }
        getServerInstanceByWindowId(windowId) {
            return this.glueController.clientGlue.interop.servers().find(server => server.instance === windowId);
        }
        getWindowBoundsByServerInstance(serverInstance, windowId, commandId) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                try {
                    const { bounds } = yield this.glueController.callWindow("windows", this.windowsController.getBoundsOperation, { windowId }, { instance: serverInstance.instance });
                    return bounds;
                }
                catch (error) {
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] Failure to get bounds of a window with instance ${serverInstance.instance}. Error: ${JSON.stringify(error)}`);
                }
            });
        }
        tryGetWorkspaceBasedBounds(windowId, commandId) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function* () {
                try {
                    const { bounds } = yield this.workspacesController.getWorkspaceWindowFrameBounds({ itemId: windowId }, commandId);
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`[${commandId}] Opening the resolver UI relative to my workspace frame window bounds: ${JSON.stringify(bounds)}`);
                    return bounds;
                }
                catch (error) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`[${commandId}] Failure to get my workspace frame window bounds. Error: ${JSON.stringify(error)}`);
                }
            });
        }
        responseHandler(args, callerId) {
            var _a, _b;
            const response = intentResolverResponseDecoder.run(args);
            const instanceId = callerId.instance;
            if (response.ok) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace(`Intent Resolver instance with id ${instanceId} send a valid response: ${JSON.stringify(response.result)}`);
                return this.intentsResolverResponsePromises[instanceId].resolve(response.result);
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.trace(`Intent Resolver instance with id ${instanceId} sent an invalid response. Error: ${JSON.stringify(response.error)}`);
            this.intentsResolverResponsePromises[instanceId].reject(response.error.message);
            this.stopResolverInstance(instanceId);
        }
        stopResolverInstance(instanceId) {
            const searchedInstance = this.glueController.clientGlue.appManager.instances().find(inst => inst.id === instanceId);
            if (!searchedInstance) {
                return;
            }
            searchedInstance.stop().catch(err => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(err); });
        }
        subscribeOnInstanceStopped(instance) {
            const { application } = instance;
            const unsub = application.onInstanceStopped((inst) => {
                if (inst.id !== instance.id) {
                    return;
                }
                const intentPromise = this.intentsResolverResponsePromises[inst.id];
                if (!intentPromise) {
                    return unsub();
                }
                intentPromise.reject(`Cannot resolve raised intent ${intentPromise.intent} - User closed ${application.name} app without choosing an intent handler`);
                this.cleanUpIntentResolverPromise(inst.id);
                unsub();
            });
        }
        cleanUpIntentResolverPromise(instanceId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const intentPromise = this.intentsResolverResponsePromises[instanceId];
                if (!intentPromise) {
                    return;
                }
                const unregisterPromise = this.glueController.clientGlue.interop.unregister(intentPromise.methodName);
                unregisterPromise.catch((error) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(error); });
                delete this.intentsResolverResponsePromises[instanceId];
            });
        }
    }

    class IoC {
        constructor(config) {
            this.config = config;
        }
        get gateway() {
            if (!this._gatewayInstance) {
                this._gatewayInstance = new Gateway();
            }
            return this._gatewayInstance;
        }
        get platform() {
            if (!this._platformInstance) {
                this._platformInstance = new Platform(this.controller, this.sessionController, this.config);
            }
            return this._platformInstance;
        }
        get domainsController() {
            if (!this._domainsController) {
                this._domainsController = new DomainsController(this.systemController, this.windowsController, this.applicationsController, this.layoutsController, this.workspacesController, this.intentsController, this.channelsController, this.notificationsController, this.extensionController);
            }
            return this._domainsController;
        }
        get controller() {
            if (!this._mainController) {
                this._mainController = new PlatformController(this.domainsController, this.glueController, this.portsBridge, this.stateController, this.serviceWorkerController, this.preferredConnectionController, this.interceptionController, this.pluginsController);
            }
            return this._mainController;
        }
        get glueController() {
            if (!this._glueController) {
                this._glueController = new GlueController(this.portsBridge, this.sessionController);
            }
            return this._glueController;
        }
        get systemController() {
            if (!this._systemController) {
                this._systemController = new SystemController(this.sessionController);
            }
            return this._systemController;
        }
        get sessionController() {
            if (!this._sessionController) {
                this._sessionController = new SessionStorageController();
            }
            return this._sessionController;
        }
        get stateController() {
            if (!this._stateChecker) {
                this._stateChecker = new WindowsStateController(this.sessionController);
            }
            return this._stateChecker;
        }
        get windowsController() {
            if (!this._windowsController) {
                this._windowsController = new WindowsController(this.glueController, this.sessionController, this.stateController, this);
            }
            return this._windowsController;
        }
        get applicationsController() {
            if (!this._applicationsController) {
                this._applicationsController = new ApplicationsController(this.glueController, this.sessionController, this.stateController, this.appDirectory, this);
            }
            return this._applicationsController;
        }
        get appDirectory() {
            if (!this._appDirectory) {
                this._appDirectory = new AppDirectory(this.sessionController, this.remoteWatcher);
            }
            return this._appDirectory;
        }
        get remoteWatcher() {
            if (!this._remoteWatcher) {
                this._remoteWatcher = new RemoteWatcher();
            }
            return this._remoteWatcher;
        }
        get layoutsController() {
            if (!this._layoutsController) {
                this._layoutsController = new LayoutsController(this.glueController, this.idbStore, this.sessionController, this.windowsController);
            }
            return this._layoutsController;
        }
        get workspacesController() {
            if (!this._workspacesController) {
                this._workspacesController = new WorkspacesController(this.framesController, this.glueController, this.stateController, this.hibernationWatcher, this);
            }
            return this._workspacesController;
        }
        get hibernationWatcher() {
            if (!this._hibernationWatcher) {
                this._hibernationWatcher = new WorkspaceHibernationWatcher(this.sessionController);
            }
            return this._hibernationWatcher;
        }
        get intentsController() {
            if (!this._intentsController) {
                this._intentsController = new IntentsController(this.glueController, this.intentsResolverHelper, this.appDirectory, this);
            }
            return this._intentsController;
        }
        get intentsResolverHelper() {
            if (!this._intentsResolverController) {
                this._intentsResolverController = new IntentsResolverHelper(this.glueController, this.workspacesController, this.windowsController);
            }
            return this._intentsResolverController;
        }
        get channelsController() {
            if (!this._channelsController) {
                this._channelsController = new ChannelsController(this.glueController);
            }
            return this._channelsController;
        }
        get extensionController() {
            if (!this._extensionController) {
                this._extensionController = new ExtensionController(this.sessionController);
            }
            return this._extensionController;
        }
        get notificationsController() {
            if (!this._notificationsController) {
                this._notificationsController = new NotificationsController(this.glueController, this.serviceWorkerController, this.sessionController);
            }
            return this._notificationsController;
        }
        get framesController() {
            if (!this._framesController) {
                this._framesController = new FramesController(this.sessionController, this.glueController, this);
            }
            return this._framesController;
        }
        get idbStore() {
            if (!this._idbStore) {
                this._idbStore = new IdbLayoutsStore(this);
            }
            return this._idbStore;
        }
        get portsBridge() {
            if (!this._portsBridge) {
                this._portsBridge = new PortsBridge(this.gateway, this.sessionController, this);
            }
            return this._portsBridge;
        }
        get serviceWorkerController() {
            if (!this._serviceWorkerController) {
                this._serviceWorkerController = new ServiceWorkerController(this);
            }
            return this._serviceWorkerController;
        }
        get transactionsController() {
            if (!this._transactionsController) {
                this._transactionsController = new TransactionsController();
            }
            return this._transactionsController;
        }
        get interceptionController() {
            if (!this._interceptionController) {
                this._interceptionController = new InterceptionController();
            }
            return this._interceptionController;
        }
        get pluginsController() {
            if (!this._pluginsController) {
                this._pluginsController = new PluginsController(this.interceptionController, this.glueController, this.startCore.bind(this));
            }
            return this._pluginsController;
        }
        getDatabase() {
            if (this._database) {
                return Promise.resolve(this._database);
            }
            return new Promise((resolve) => {
                openDB(dbName, dbVersion, { upgrade: this.setUpDb.bind(this) })
                    .then((database) => {
                    this._database = database;
                    resolve(this._database);
                });
            });
        }
        get preferredConnectionController() {
            if (!this._preferredConnectionController) {
                this._preferredConnectionController = new PreferredConnectionController(this.glueController, this.portsBridge, this.createSequelizer());
            }
            return this._preferredConnectionController;
        }
        createMessageChannel() {
            return new MessageChannel();
        }
        createSequelizer(looseInterval) {
            return new AsyncSequelizer(looseInterval);
        }
        startCore(platformConfig) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                yield ((_a = platformConfig.corePlus) === null || _a === void 0 ? void 0 : _a.start(this, platformConfig));
            });
        }
        setUpDb(database) {
            if (!database.objectStoreNames.contains("workspaceLayouts")) {
                database.createObjectStore("workspaceLayouts");
            }
            if (!database.objectStoreNames.contains("globalLayouts")) {
                database.createObjectStore("globalLayouts");
            }
            if (!database.objectStoreNames.contains("serviceWorker")) {
                database.createObjectStore("serviceWorker");
            }
        }
    }

    const glueWebPlatformFactory = (config) => __awaiter$3(void 0, void 0, void 0, function* () {
        if (window.glue42gd) {
            return fallbackToEnterprise(config);
        }
        const isOpenerGlue = yield checkIsOpenerGlue();
        const isPlacedInWorkspace = checkIfPlacedInWorkspace();
        if ((config === null || config === void 0 ? void 0 : config.clientOnly) || isOpenerGlue || isPlacedInWorkspace) {
            const glue = (config === null || config === void 0 ? void 0 : config.glueFactory) ?
                yield (config === null || config === void 0 ? void 0 : config.glueFactory(config === null || config === void 0 ? void 0 : config.glue)) :
                yield glueWebFactory(config === null || config === void 0 ? void 0 : config.glue);
            return { glue };
        }
        const ioc = new IoC(config);
        yield ioc.platform.ready();
        const glue = ioc.platform.getClientGlue();
        return { glue, platform: ioc === null || ioc === void 0 ? void 0 : ioc.platform.getPlatformApi() };
    });

    if (typeof window !== "undefined") {
        window.GlueWebPlatform = glueWebPlatformFactory;
    }
    if (!window.glue42gd && !window.glue42core) {
        window.glue42core = { webStarted: false };
    }

    return glueWebPlatformFactory;

}));
//# sourceMappingURL=platform.web.umd.js.map
